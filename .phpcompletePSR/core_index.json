{"functions":{"array_change_key_case":{"params":{"$input":"","$case":""},"docComment":"Changes the case of all keys in an array","signature":"array_change_key_case(array $input ,[int $case] )","inheritdoc":0,"modifier":[],"return":""},"array_chunk":{"params":{"$input":"","$size":"","$preserve_keys":""},"docComment":"Split an array into chunks","signature":"array_chunk(array $input ,int $size ,[bool $preserve_keys] )","inheritdoc":0,"modifier":[],"return":""},"array_column":{"params":{"$input":"","$column_key":"","$index_key":""},"docComment":"Return the values from a single column in the input array","signature":"array_column(array $input ,mixed $column_key ,mixed $index_key )","inheritdoc":0,"modifier":[],"return":""},"array_combine":{"params":{"$keys":"","$values":""},"docComment":"Creates an array by using one array for keys and another for its values","signature":"array_combine(array $keys ,array $values )","inheritdoc":0,"modifier":[],"return":""},"array_count_values":{"params":{"$input":""},"docComment":"Counts all the values of an array","signature":"array_count_values(array $input )","inheritdoc":0,"modifier":[],"return":""},"array_diff_assoc":{"params":{"$array1":"","$array2":"","$...":""},"docComment":"Computes the difference of arrays with additional index check","signature":"array_diff_assoc(array $array1 ,array $array2 ,array $... )","inheritdoc":0,"modifier":[],"return":""},"array_diff_key":{"params":{"$array1":"","$array2":"","$...":""},"docComment":"Computes the difference of arrays using keys for comparison","signature":"array_diff_key(array $array1 ,array $array2 ,array $... )","inheritdoc":0,"modifier":[],"return":""},"array_diff_uassoc":{"params":{"$array1":"","$array2":"","$...":"","$key_compare_func":""},"docComment":"Computes the difference of arrays with additional index check which is performed by a user supplied callback function","signature":"array_diff_uassoc(array $array1 ,array $array2 ,array $... ,callable $key_compare_func )","inheritdoc":0,"modifier":[],"return":""},"array_diff_ukey":{"params":{"$array1":"","$array2":"","$ ...":"","$key_compare_func":""},"docComment":"Computes the difference of arrays using a callback function on the keys for comparison","signature":"array_diff_ukey(array $array1 ,array $array2 ,array $ ... ,callable $key_compare_func )","inheritdoc":0,"modifier":[],"return":""},"array_diff":{"params":{"$array1":"","$array2":"","$...":""},"docComment":"Computes the difference of arrays","signature":"array_diff(array $array1 ,array $array2 ,array $... )","inheritdoc":0,"modifier":[],"return":""},"array_fill_keys":{"params":{"$keys":"","$value":""},"docComment":"Fill an array with values, specifying keys","signature":"array_fill_keys(array $keys ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"array_fill":{"params":{"$start_index":"","$num":"","$value":""},"docComment":"Fill an array with values","signature":"array_fill(int $start_index ,int $num ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"array_filter":{"params":{"$input":"","$callback":""},"docComment":"Filters elements of an array using a callback function","signature":"array_filter(array $input ,[callable $callback] )","inheritdoc":0,"modifier":[],"return":""},"array_flip":{"params":{"$trans":""},"docComment":"Exchanges all keys with their associated values in an array","signature":"array_flip(array $trans )","inheritdoc":0,"modifier":[],"return":""},"array_intersect_assoc":{"params":{"$array1":"","$array2":"","$ ...":""},"docComment":"Computes the intersection of arrays with additional index check","signature":"array_intersect_assoc(array $array1 ,array $array2 ,array $ ... )","inheritdoc":0,"modifier":[],"return":""},"array_intersect_key":{"params":{"$array1":"","$array2":"","$ ...":""},"docComment":"Computes the intersection of arrays using keys for comparison","signature":"array_intersect_key(array $array1 ,array $array2 ,array $ ... )","inheritdoc":0,"modifier":[],"return":""},"array_intersect_uassoc":{"params":{"$array1":"","$array2":"","$ ...":"","$key_compare_func":""},"docComment":"Computes the intersection of arrays with additional index check, compares indexes by a callback function","signature":"array_intersect_uassoc(array $array1 ,array $array2 ,array $ ... ,callable $key_compare_func )","inheritdoc":0,"modifier":[],"return":""},"array_intersect_ukey":{"params":{"$array1":"","$array2":"","$...":"","$key_compare_func":""},"docComment":"Computes the intersection of arrays using a callback function on the keys for comparison","signature":"array_intersect_ukey(array $array1 ,array $array2 ,array $... ,callable $key_compare_func )","inheritdoc":0,"modifier":[],"return":""},"array_intersect":{"params":{"$array1":"","$array2":"","$ ...":""},"docComment":"Computes the intersection of arrays","signature":"array_intersect(array $array1 ,array $array2 ,array $ ... )","inheritdoc":0,"modifier":[],"return":""},"array_key_exists":{"params":{"$key":"","$search":""},"docComment":"Checks if the given key or index exists in the array","signature":"array_key_exists(mixed $key ,array $search )","inheritdoc":0,"modifier":[],"return":""},"array_keys":{"params":{"$input":"","$search_value":"","$strict":""},"docComment":"Return all the keys or a subset of the keys of an array","signature":"array_keys(array $input ,[mixed $search_value] ,[bool $strict] )","inheritdoc":0,"modifier":[],"return":""},"array_map":{"params":{"$callback":"","$arr1":"","$...":""},"docComment":"Applies the callback to the elements of the given arrays","signature":"array_map(callable $callback ,array $arr1 ,array $... )","inheritdoc":0,"modifier":[],"return":""},"array_merge_recursive":{"params":{"$array1":"","$...":""},"docComment":"Merge two or more arrays recursively","signature":"array_merge_recursive(array $array1 ,array $... )","inheritdoc":0,"modifier":[],"return":""},"array_merge":{"params":{"$array1":"","$...":""},"docComment":"Merge one or more arrays","signature":"array_merge(array $array1 ,array $... )","inheritdoc":0,"modifier":[],"return":""},"array_multisort":{"params":{"&$arr":"","$arg":"","$...":""},"docComment":"Sort multiple or multi-dimensional arrays","signature":"array_multisort(array &$arr ,[mixed $arg] ,[mixed $arg] ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"array_pad":{"params":{"$input":"","$pad_size":"","$pad_value":""},"docComment":"Pad array to the specified length with a value","signature":"array_pad(array $input ,int $pad_size ,mixed $pad_value )","inheritdoc":0,"modifier":[],"return":""},"array_pop":{"params":{"&$array":""},"docComment":"Pop the element off the end of array","signature":"array_pop(array &$array )","inheritdoc":0,"modifier":[],"return":""},"array_product":{"params":{"$array":""},"docComment":"Calculate the product of values in an array","signature":"array_product(array $array )","inheritdoc":0,"modifier":[],"return":""},"array_push":{"params":{"&$array":"","$var":"","$...":""},"docComment":"Push one or more elements onto the end of array","signature":"array_push(array &$array ,mixed $var ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"array_rand":{"params":{"$input":"","$num_req":""},"docComment":"Pick one or more random entries out of an array","signature":"array_rand(array $input ,[int $num_req] )","inheritdoc":0,"modifier":[],"return":""},"array_reduce":{"params":{"$input":"","$function":"","$initial":""},"docComment":"Iteratively reduce the array to a single value using a callback function","signature":"array_reduce(array $input ,callable $function ,[mixed $initial] )","inheritdoc":0,"modifier":[],"return":""},"array_replace_recursive":{"params":{"$array":"","$array1":"","$...":""},"docComment":"Replaces elements from passed arrays into the first array recursively","signature":"array_replace_recursive(array $array ,array $array1 ,array $... )","inheritdoc":0,"modifier":[],"return":""},"array_replace":{"params":{"$array":"","$array1":"","$...":""},"docComment":"Replaces elements from passed arrays into the first array","signature":"array_replace(array $array ,array $array1 ,array $... )","inheritdoc":0,"modifier":[],"return":""},"array_reverse":{"params":{"$array":"","$preserve_keys":""},"docComment":"Return an array with elements in reverse order","signature":"array_reverse(array $array ,[bool $preserve_keys] )","inheritdoc":0,"modifier":[],"return":""},"array_search":{"params":{"$needle":"","$haystack":"","$strict":""},"docComment":"Searches the array for a given value and returns the corresponding key if successful","signature":"array_search(mixed $needle ,array $haystack ,[bool $strict] )","inheritdoc":0,"modifier":[],"return":""},"array_shift":{"params":{"&$array":""},"docComment":"Shift an element off the beginning of array","signature":"array_shift(array &$array )","inheritdoc":0,"modifier":[],"return":""},"array_slice":{"params":{"$array":"","$offset":"","$length":"","$preserve_keys":""},"docComment":"Extract a slice of the array","signature":"array_slice(array $array ,int $offset ,[int $length] ,[bool $preserve_keys] )","inheritdoc":0,"modifier":[],"return":""},"array_splice":{"params":{"&$input":"","$offset":"","$length":"","$replacement":""},"docComment":"Remove a portion of the array and replace it with something else","signature":"array_splice(array &$input ,int $offset ,[int $length] ,mixed $replacement )","inheritdoc":0,"modifier":[],"return":""},"array_sum":{"params":{"$array":""},"docComment":"Calculate the sum of values in an array","signature":"array_sum(array $array )","inheritdoc":0,"modifier":[],"return":""},"array_udiff_assoc":{"params":{"$array1":"","$array2":"","$ ...":"","$data_compare_func":""},"docComment":"Computes the difference of arrays with additional index check, compares data by a callback function","signature":"array_udiff_assoc(array $array1 ,array $array2 ,array $ ... ,callable $data_compare_func )","inheritdoc":0,"modifier":[],"return":""},"array_udiff_uassoc":{"params":{"$array1":"","$array2":"","$ ...":"","$data_compare_func":"","$key_compare_func":""},"docComment":"Computes the difference of arrays with additional index check, compares data and indexes by a callback function","signature":"array_udiff_uassoc(array $array1 ,array $array2 ,array $ ... ,callable $data_compare_func ,callable $key_compare_func )","inheritdoc":0,"modifier":[],"return":""},"array_udiff":{"params":{"$array1":"","$array2":"","$ ...":"","$data_compare_func":""},"docComment":"Computes the difference of arrays by using a callback function for data comparison","signature":"array_udiff(array $array1 ,array $array2 ,array $ ... ,callable $data_compare_func )","inheritdoc":0,"modifier":[],"return":""},"array_uintersect_assoc":{"params":{"$array1":"","$array2":"","$ ...":"","$data_compare_func":""},"docComment":"Computes the intersection of arrays with additional index check, compares data by a callback function","signature":"array_uintersect_assoc(array $array1 ,array $array2 ,array $ ... ,callable $data_compare_func )","inheritdoc":0,"modifier":[],"return":""},"array_uintersect_uassoc":{"params":{"$array1":"","$array2":"","$ ...":"","$data_compare_func":"","$key_compare_func":""},"docComment":"Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions","signature":"array_uintersect_uassoc(array $array1 ,array $array2 ,array $ ... ,callable $data_compare_func ,callable $key_compare_func )","inheritdoc":0,"modifier":[],"return":""},"array_uintersect":{"params":{"$array1":"","$array2":"","$ ...":"","$data_compare_func":""},"docComment":"Computes the intersection of arrays, compares data by a callback function","signature":"array_uintersect(array $array1 ,array $array2 ,array $ ... ,callable $data_compare_func )","inheritdoc":0,"modifier":[],"return":""},"array_unique":{"params":{"$array":"","$sort_flags":""},"docComment":"Removes duplicate values from an array","signature":"array_unique(array $array ,[int $sort_flags] )","inheritdoc":0,"modifier":[],"return":""},"array_unshift":{"params":{"&$array":"","$var":"","$...":""},"docComment":"Prepend one or more elements to the beginning of an array","signature":"array_unshift(array &$array ,mixed $var ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"array_values":{"params":{"$input":""},"docComment":"Return all the values of an array","signature":"array_values(array $input )","inheritdoc":0,"modifier":[],"return":""},"array_walk_recursive":{"params":{"&$input":"","$funcname":"","$userdata":""},"docComment":"Apply a user function recursively to every member of an array","signature":"array_walk_recursive(array &$input ,callable $funcname ,[mixed $userdata] )","inheritdoc":0,"modifier":[],"return":""},"array_walk":{"params":{"&$array":"","$funcname":"","$userdata":""},"docComment":"Apply a user function to every member of an array","signature":"array_walk(array &$array ,callable $funcname ,[mixed $userdata] )","inheritdoc":0,"modifier":[],"return":""},"array":{"params":{"$...":""},"docComment":"Create an array","signature":"array(mixed $... )","inheritdoc":0,"modifier":[],"return":""},"arsort":{"params":{"&$array":"","$sort_flags":""},"docComment":"Sort an array in reverse order and maintain index association","signature":"arsort(array &$array ,[int $sort_flags] )","inheritdoc":0,"modifier":[],"return":""},"asort":{"params":{"&$array":"","$sort_flags":""},"docComment":"Sort an array and maintain index association","signature":"asort(array &$array ,[int $sort_flags] )","inheritdoc":0,"modifier":[],"return":""},"compact":{"params":{"$varname":"","$...":""},"docComment":"Create array containing variables and their values","signature":"compact(mixed $varname ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"count":{"params":{"$var":"","$mode":""},"docComment":"Count all elements in an array, or something in an object","signature":"count(mixed $var ,[int $mode] )","inheritdoc":0,"modifier":[],"return":""},"current":{"params":{"&$array":""},"docComment":"Return the current element in an array","signature":"current(array &$array )","inheritdoc":0,"modifier":[],"return":""},"each":{"params":{"&$array":""},"docComment":"Return the current key and value pair from an array and advance the array cursor","signature":"each(array &$array )","inheritdoc":0,"modifier":[],"return":""},"end":{"params":{"&$array":""},"docComment":"Set the internal pointer of an array to its last element","signature":"end(array &$array )","inheritdoc":0,"modifier":[],"return":""},"extract":{"params":{"&$var_array":"","$extract_type":"","$prefix":""},"docComment":"Import variables into the current symbol table from an array","signature":"extract(array &$var_array ,[int $extract_type] ,[string $prefix] )","inheritdoc":0,"modifier":[],"return":""},"in_array":{"params":{"$needle":"","$haystack":"","$strict":""},"docComment":"Checks if a value exists in an array","signature":"in_array(mixed $needle ,array $haystack ,[bool $strict] )","inheritdoc":0,"modifier":[],"return":""},"key_exists":{"params":{"$key":"","$search":""},"docComment":"Checks if the given key or index exists in the array","signature":"array_key_exists(mixed $key ,array $search )","inheritdoc":0,"modifier":[],"return":""},"key":{"params":{"&$array":""},"docComment":"Fetch a key from an array","signature":"key(array &$array )","inheritdoc":0,"modifier":[],"return":""},"krsort":{"params":{"&$array":"","$sort_flags":""},"docComment":"Sort an array by key in reverse order","signature":"krsort(array &$array ,[int $sort_flags] )","inheritdoc":0,"modifier":[],"return":""},"ksort":{"params":{"&$array":"","$sort_flags":""},"docComment":"Sort an array by key","signature":"ksort(array &$array ,[int $sort_flags] )","inheritdoc":0,"modifier":[],"return":""},"list":{"params":{"$varname":"","$...":""},"docComment":"Assign variables as if they were an array","signature":"list(mixed $varname ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"natcasesort":{"params":{"&$array":""},"docComment":"Sort an array using a case insensitive \"natural order\" algorithm","signature":"natcasesort(array &$array )","inheritdoc":0,"modifier":[],"return":""},"natsort":{"params":{"&$array":""},"docComment":"Sort an array using a \"natural order\" algorithm","signature":"natsort(array &$array )","inheritdoc":0,"modifier":[],"return":""},"next":{"params":{"&$array":""},"docComment":"Advance the internal array pointer of an array","signature":"next(array &$array )","inheritdoc":0,"modifier":[],"return":""},"pos":{"params":{"&$array":""},"docComment":"Return the current element in an array","signature":"current(array &$array )","inheritdoc":0,"modifier":[],"return":""},"prev":{"params":{"&$array":""},"docComment":"Rewind the internal array pointer","signature":"prev(array &$array )","inheritdoc":0,"modifier":[],"return":""},"range":{"params":{"$start":"","$end":"","$step":""},"docComment":"Create an array containing a range of elements","signature":"range(mixed $start ,mixed $end ,[number $step] )","inheritdoc":0,"modifier":[],"return":""},"reset":{"params":{"&$array":""},"docComment":"Set the internal pointer of an array to its first element","signature":"reset(array &$array )","inheritdoc":0,"modifier":[],"return":""},"rsort":{"params":{"&$array":"","$sort_flags":""},"docComment":"Sort an array in reverse order","signature":"rsort(array &$array ,[int $sort_flags] )","inheritdoc":0,"modifier":[],"return":""},"shuffle":{"params":{"&$array":""},"docComment":"Shuffle an array","signature":"shuffle(array &$array )","inheritdoc":0,"modifier":[],"return":""},"sizeof":{"params":{"$var":"","$mode":""},"docComment":"Count all elements in an array, or something in an object","signature":"count(mixed $var ,[int $mode] )","inheritdoc":0,"modifier":[],"return":""},"sort":{"params":{"&$array":"","$sort_flags":""},"docComment":"Sort an array","signature":"sort(array &$array ,[int $sort_flags] )","inheritdoc":0,"modifier":[],"return":""},"uasort":{"params":{"&$array":"","$cmp_function":""},"docComment":"Sort an array with a user-defined comparison function and maintain index association","signature":"uasort(array &$array ,callable $cmp_function )","inheritdoc":0,"modifier":[],"return":""},"uksort":{"params":{"&$array":"","$cmp_function":""},"docComment":"Sort an array by keys using a user-defined comparison function","signature":"uksort(array &$array ,callable $cmp_function )","inheritdoc":0,"modifier":[],"return":""},"usort":{"params":{"&$array":"","$cmp_function":""},"docComment":"Sort an array by values using a user-defined comparison function","signature":"usort(array &$array ,callable $cmp_function )","inheritdoc":0,"modifier":[],"return":""},"__autoload":{"params":{"$class":""},"docComment":"Attempt to load undefined class","signature":"__autoload(string $class )","inheritdoc":0,"modifier":[],"return":""},"call_user_method_array":{"params":{"$method_name":"","&$obj":"","$params":""},"docComment":"Call a user method given with an array of parameters [deprecated]","signature":"call_user_method_array(string $method_name ,object &$obj ,array $params )","inheritdoc":0,"modifier":[],"return":""},"call_user_method":{"params":{"$method_name":"","&$obj":"","$parameter":"","$...":""},"docComment":"Call a user method on an specific object [deprecated]","signature":"call_user_method(string $method_name ,object &$obj ,mixed $parameter ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"class_alias":{"params":{"$original":"","$alias":"","$autoload":""},"docComment":"Creates an alias for a class","signature":"class_alias(string $original ,string $alias ,[bool $autoload] )","inheritdoc":0,"modifier":[],"return":""},"class_exists":{"params":{"$class_name":"","$autoload":""},"docComment":"Checks if the class has been defined","signature":"class_exists(string $class_name ,[bool $autoload] )","inheritdoc":0,"modifier":[],"return":""},"get_called_class":{"params":[],"docComment":"the \"Late Static Binding\" class name","signature":"get_called_class( )","inheritdoc":0,"modifier":[],"return":""},"get_class_methods":{"params":{"$class_name":""},"docComment":"Gets the class methods' names","signature":"get_class_methods(mixed $class_name )","inheritdoc":0,"modifier":[],"return":""},"get_class_vars":{"params":{"$class_name":""},"docComment":"Get the default properties of the class","signature":"get_class_vars(string $class_name )","inheritdoc":0,"modifier":[],"return":""},"get_class":{"params":{"$object":""},"docComment":"Returns the name of the class of an object","signature":"get_class([object $object] )","inheritdoc":0,"modifier":[],"return":""},"get_declared_classes":{"params":[],"docComment":"Returns an array with the name of the defined classes","signature":"get_declared_classes( )","inheritdoc":0,"modifier":[],"return":""},"get_declared_interfaces":{"params":[],"docComment":"Returns an array of all declared interfaces","signature":"get_declared_interfaces( )","inheritdoc":0,"modifier":[],"return":""},"get_declared_traits":{"params":[],"docComment":"Returns an array of all declared traits","signature":"get_declared_traits( )","inheritdoc":0,"modifier":[],"return":""},"get_object_vars":{"params":{"$object":""},"docComment":"Gets the properties of the given object","signature":"get_object_vars(object $object )","inheritdoc":0,"modifier":[],"return":""},"get_parent_class":{"params":{"$object":""},"docComment":"Retrieves the parent class name for object or class","signature":"get_parent_class(mixed $object )","inheritdoc":0,"modifier":[],"return":""},"interface_exists":{"params":{"$interface_name":"","$autoload":""},"docComment":"Checks if the interface has been defined","signature":"interface_exists(string $interface_name ,[bool $autoload] )","inheritdoc":0,"modifier":[],"return":""},"is_a":{"params":{"$object":"","$class_name":"","$allow_string":""},"docComment":"Checks if the object is of this class or has this class as one of its parents","signature":"is_a(object $object ,string $class_name ,[bool $allow_string] )","inheritdoc":0,"modifier":[],"return":""},"is_subclass_of":{"params":{"$object":"","$class_name":"","$allow_string":""},"docComment":"Checks if the object has this class as one of its parents","signature":"is_subclass_of(mixed $object ,string $class_name ,[bool $allow_string] )","inheritdoc":0,"modifier":[],"return":""},"method_exists":{"params":{"$object":"","$method_name":""},"docComment":"Checks if the class method exists","signature":"method_exists(mixed $object ,string $method_name )","inheritdoc":0,"modifier":[],"return":""},"property_exists":{"params":{"$class":"","$property":""},"docComment":"\n   Checks if the object or class has a property\n  ","signature":"property_exists(mixed $class ,string $property )","inheritdoc":0,"modifier":[],"return":""},"trait_exists":{"params":{"$traitname":"","$autoload":""},"docComment":"Checks if the trait exists","signature":"trait_exists(string $traitname ,bool $autoload )","inheritdoc":0,"modifier":[],"return":""},"checkdate":{"params":{"$month":"","$day":"","$year":""},"docComment":"Validate a Gregorian date","signature":"checkdate(int $month ,int $day ,int $year )","inheritdoc":0,"modifier":[],"return":""},"date_add":{"params":{"$interval":"DateInterval","$object":"DateTime"},"docComment":"\n   Adds an amount of days, months, years, hours, minutes and seconds to a\n   DateTime object\n  ","signature":"(DateTime $object ,DateInterval $interval )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"date_create_from_format":{"params":{"$format":"","$time":"","$timezone":"DateTimeZone"},"docComment":"Returns new DateTime object formatted according to the specified format","signature":"(string $format ,string $time ,DateTimeZone $timezone )","inheritdoc":0,"modifier":["public","static"],"return":"DateTime"},"date_create_immutable_from_format":{"params":{"$format":"","$time":"","$timezone":"DateTimeZone"},"docComment":"Returns new DateTimeImmutable object formatted according to the specified format","signature":"(string $format ,string $time ,DateTimeZone $timezone )","inheritdoc":0,"modifier":["public","static"],"return":"DateTimeImmutable"},"date_create_immutable":{"params":{"$time":"","$timezone":"DateTimeZone"},"docComment":"Returns new DateTimeImmutable object","signature":"([string $time] ,[DateTimeZone $timezone] )","inheritdoc":0,"modifier":[],"return":"DateTimeImmutable"},"date_create":{"params":{"$time":"","$timezone":"DateTimeZone"},"docComment":"Returns new DateTime object","signature":"([string $time] ,[DateTimeZone $timezone] )","inheritdoc":0,"modifier":[],"return":"DateTime"},"date_date_set":{"params":{"$year":"","$month":"","$day":"","$object":"DateTime"},"docComment":"Sets the date","signature":"(DateTime $object ,int $year ,int $month ,int $day )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"date_default_timezone_get":{"params":[],"docComment":"\n   Gets the default timezone used by all date\/time functions in a script\n  ","signature":"date_default_timezone_get( )","inheritdoc":0,"modifier":[],"return":""},"date_default_timezone_set":{"params":{"$timezone_identifier":""},"docComment":"\n   Sets the default timezone used by all date\/time functions in a script\n  ","signature":"date_default_timezone_set(string $timezone_identifier )","inheritdoc":0,"modifier":[],"return":""},"date_diff":{"params":{"$datetime2":"DateTimeInterface","$absolute":"","$datetime1":"DateTimeInterface"},"docComment":"Returns the difference between two DateTime objects","signature":"(DateTimeInterface $datetime1 ,DateTimeInterface $datetime2 ,[bool $absolute] )","inheritdoc":0,"modifier":["public","public","public"],"return":"DateInterval"},"date_format":{"params":{"$format":"","$object":"DateTimeInterface"},"docComment":"Returns date formatted according to given format","signature":"(DateTimeInterface $object ,string $format )","inheritdoc":0,"modifier":["public","public","public"],"return":""},"date_get_last_errors":{"params":[],"docComment":"Returns the warnings and errors","signature":"( )","inheritdoc":0,"modifier":["public","static"],"return":""},"date_interval_create_from_date_string":{"params":{"$time":""},"docComment":"Sets up a DateInterval from the relative parts of the string","signature":"static DateInterval::createFromDateString(string $time )","inheritdoc":0,"modifier":["public","static"],"return":"DateInterval"},"date_interval_format":{"params":{"$format":""},"docComment":"Formats the interval","signature":"public DateInterval::format(string $format )","inheritdoc":0,"modifier":["public"],"return":""},"date_isodate_set":{"params":{"$year":"","$week":"","$day":"","$object":"DateTime"},"docComment":"Sets the ISO date","signature":"(DateTime $object ,int $year ,int $week ,[int $day] )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"date_modify":{"params":{"$modify":"","$object":"DateTime"},"docComment":"Alters the timestamp","signature":"(DateTime $object ,string $modify )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"date_offset_get":{"params":{"$object":"DateTimeInterface"},"docComment":"Returns the timezone offset","signature":"(DateTimeInterface $object )","inheritdoc":0,"modifier":["public","public","public"],"return":""},"date_parse_from_format":{"params":{"$format":"","$date":""},"docComment":"Get info about given date formatted according to the specified format","signature":"date_parse_from_format(string $format ,string $date )","inheritdoc":0,"modifier":[],"return":""},"date_parse":{"params":{"$date":""},"docComment":"Returns associative array with detailed info about given date","signature":"date_parse(string $date )","inheritdoc":0,"modifier":[],"return":""},"date_sub":{"params":{"$interval":"DateInterval","$object":"DateTime"},"docComment":"\n   Subtracts an amount of days, months, years, hours, minutes and seconds from\n   a DateTime object\n  ","signature":"(DateTime $object ,DateInterval $interval )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"date_sun_info":{"params":{"$time":"","$latitude":"","$longitude":""},"docComment":"Returns an array with information about sunset\/sunrise and twilight begin\/end","signature":"date_sun_info(int $time ,float $latitude ,float $longitude )","inheritdoc":0,"modifier":[],"return":""},"date_sunrise":{"params":{"$timestamp":"","$format":"","$latitude":"","$longitude":"","$zenith":"","$gmt_offset":""},"docComment":"Returns time of sunrise for a given day and location","signature":"date_sunrise(int $timestamp ,[int $format] ,[float $latitude] ,[float $longitude] ,[float $zenith] ,[float $gmt_offset] )","inheritdoc":0,"modifier":[],"return":""},"date_sunset":{"params":{"$timestamp":"","$format":"","$latitude":"","$longitude":"","$zenith":"","$gmt_offset":""},"docComment":"\n   Returns time of sunset for a given day and location\n  ","signature":"date_sunset(int $timestamp ,[int $format] ,[float $latitude] ,[float $longitude] ,[float $zenith] ,[float $gmt_offset] )","inheritdoc":0,"modifier":[],"return":""},"date_time_set":{"params":{"$hour":"","$minute":"","$second":"","$object":"DateTime"},"docComment":"Sets the time","signature":"(DateTime $object ,int $hour ,int $minute ,[int $second] )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"date_timestamp_get":{"params":{"$object":"DateTimeInterface"},"docComment":"Gets the Unix timestamp","signature":"(DateTimeInterface $object )","inheritdoc":0,"modifier":["public","public","public"],"return":""},"date_timestamp_set":{"params":{"$unixtimestamp":"","$object":"DateTime"},"docComment":"Sets the date and time based on an Unix timestamp","signature":"(DateTime $object ,int $unixtimestamp )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"date_timezone_get":{"params":{"$object":"DateTimeInterface"},"docComment":"Return time zone relative to given DateTime","signature":"(DateTimeInterface $object )","inheritdoc":0,"modifier":["public","public","public"],"return":"DateTimeZone"},"date_timezone_set":{"params":{"$timezone":"DateTimeZone","$object":"DateTime"},"docComment":"Sets the time zone for the DateTime object","signature":"(DateTime $object ,DateTimeZone $timezone )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"date":{"params":{"$format":"","$timestamp":""},"docComment":"Format a local time\/date","signature":"date(string $format ,[int $timestamp] )","inheritdoc":0,"modifier":[],"return":""},"getdate":{"params":{"$timestamp":""},"docComment":"Get date\/time information","signature":"getdate([int $timestamp] )","inheritdoc":0,"modifier":[],"return":""},"gettimeofday":{"params":{"$return_float":""},"docComment":"Get current time","signature":"gettimeofday([bool $return_float] )","inheritdoc":0,"modifier":[],"return":""},"gmdate":{"params":{"$format":"","$timestamp":""},"docComment":"Format a GMT\/UTC date\/time","signature":"gmdate(string $format ,[int $timestamp] )","inheritdoc":0,"modifier":[],"return":""},"gmmktime":{"params":{"$hour":"","$minute":"","$second":"","$month":"","$day":"","$year":"","$is_dst":""},"docComment":"Get Unix timestamp for a GMT date","signature":"gmmktime([int $hour] ,[int $minute] ,[int $second] ,[int $month] ,[int $day] ,[int $year] ,[int $is_dst] )","inheritdoc":0,"modifier":[],"return":""},"gmstrftime":{"params":{"$format":"","$timestamp":""},"docComment":"Format a GMT\/UTC time\/date according to locale settings","signature":"gmstrftime(string $format ,[int $timestamp] )","inheritdoc":0,"modifier":[],"return":""},"idate":{"params":{"$format":"","$timestamp":""},"docComment":"Format a local time\/date as integer","signature":"idate(string $format ,[int $timestamp] )","inheritdoc":0,"modifier":[],"return":""},"localtime":{"params":{"$timestamp":"","$is_associative":""},"docComment":"Get the local time","signature":"localtime([int $timestamp] ,[bool $is_associative] )","inheritdoc":0,"modifier":[],"return":""},"microtime":{"params":{"$get_as_float":""},"docComment":"Return current Unix timestamp with microseconds","signature":"microtime([bool $get_as_float] )","inheritdoc":0,"modifier":[],"return":""},"mktime":{"params":{"$hour":"","$minute":"","$second":"","$month":"","$day":"","$year":"","$is_dst":""},"docComment":"Get Unix timestamp for a date","signature":"mktime([int $hour] ,[int $minute] ,[int $second] ,[int $month] ,[int $day] ,[int $year] ,[int $is_dst] )","inheritdoc":0,"modifier":[],"return":""},"strftime":{"params":{"$format":"","$timestamp":""},"docComment":"Format a local time\/date according to locale settings","signature":"strftime(string $format ,[int $timestamp] )","inheritdoc":0,"modifier":[],"return":""},"strptime":{"params":{"$date":"","$format":""},"docComment":"\n     Parse a time\/date generated with  \n    ","signature":"strptime(string $date ,string $format )","inheritdoc":0,"modifier":[],"return":""},"strtotime":{"params":{"$time":"","$now":""},"docComment":"Parse about any English textual datetime description into a Unix timestamp","signature":"strtotime(string $time ,[int $now] )","inheritdoc":0,"modifier":[],"return":""},"time":{"params":[],"docComment":"Return current Unix timestamp","signature":"time( )","inheritdoc":0,"modifier":[],"return":""},"timezone_abbreviations_list":{"params":[],"docComment":"Returns associative array containing dst, offset and the timezone name","signature":"( )","inheritdoc":0,"modifier":["public","static"],"return":""},"timezone_identifiers_list":{"params":{"$what":"","$country":""},"docComment":"Returns a numerically indexed array containing all defined timezone identifiers","signature":"([int $what] ,[string $country] )","inheritdoc":0,"modifier":["public","static"],"return":""},"timezone_location_get":{"params":{"$object":"DateTimeZone"},"docComment":"Returns location information for a timezone","signature":"(DateTimeZone $object )","inheritdoc":0,"modifier":["public"],"return":""},"timezone_name_from_abbr":{"params":{"$abbr":"","$gmtOffset":"","$isdst":""},"docComment":"Returns the timezone name from abbreviation","signature":"timezone_name_from_abbr(string $abbr ,[int $gmtOffset] ,[int $isdst] )","inheritdoc":0,"modifier":[],"return":""},"timezone_name_get":{"params":{"$object":"DateTimeZone"},"docComment":"Returns the name of the timezone","signature":"(DateTimeZone $object )","inheritdoc":0,"modifier":["public"],"return":""},"timezone_offset_get":{"params":{"$datetime":"DateTime","$object":"DateTimeZone"},"docComment":"Returns the timezone offset from GMT","signature":"(DateTimeZone $object ,DateTime $datetime )","inheritdoc":0,"modifier":["public"],"return":""},"timezone_open":{"params":{"$timezone":""},"docComment":"Creates new DateTimeZone object","signature":"(string $timezone )","inheritdoc":0,"modifier":[],"return":"DateTimeZone"},"timezone_transitions_get":{"params":{"$timestamp_begin":"","$timestamp_end":"","$object":"DateTimeZone"},"docComment":"Returns all transitions for the timezone","signature":"(DateTimeZone $object ,int $timestamp_begin ,int $timestamp_end )","inheritdoc":0,"modifier":["public"],"return":""},"timezone_version_get":{"params":[],"docComment":"\n   Gets the version of the timezonedb\n  ","signature":"timezone_version_get( )","inheritdoc":0,"modifier":[],"return":""},"chdir":{"params":{"$directory":""},"docComment":"Change directory","signature":"chdir(string $directory )","inheritdoc":0,"modifier":[],"return":""},"chroot":{"params":{"$directory":""},"docComment":"Change the root directory","signature":"chroot(string $directory )","inheritdoc":0,"modifier":[],"return":""},"closedir":{"params":{"$dir_handle":""},"docComment":"Close directory handle","signature":"closedir(resource $dir_handle )","inheritdoc":0,"modifier":[],"return":""},"dir":{"params":{"$directory":"","$context":""},"docComment":"Return an instance of the Directory class","signature":"dir(string $directory ,resource $context )","inheritdoc":0,"modifier":[],"return":"Directory"},"getcwd":{"params":[],"docComment":"Gets the current working directory","signature":"getcwd( )","inheritdoc":0,"modifier":[],"return":""},"opendir":{"params":{"$path":"","$context":""},"docComment":"Open directory handle","signature":"opendir(string $path ,resource $context )","inheritdoc":0,"modifier":[],"return":""},"readdir":{"params":{"$dir_handle":""},"docComment":"Read entry from directory handle","signature":"readdir(resource $dir_handle )","inheritdoc":0,"modifier":[],"return":""},"rewinddir":{"params":{"$dir_handle":""},"docComment":"Rewind directory handle","signature":"rewinddir(resource $dir_handle )","inheritdoc":0,"modifier":[],"return":""},"scandir":{"params":{"$directory":"","$sorting_order":"","$context":""},"docComment":"List files and directories inside the specified path","signature":"scandir(string $directory ,[int $sorting_order] ,resource $context )","inheritdoc":0,"modifier":[],"return":""},"debug_backtrace":{"params":{"$options":"","$limit":""},"docComment":"Generates a backtrace","signature":"debug_backtrace([int $options] ,[int $limit] )","inheritdoc":0,"modifier":[],"return":""},"debug_print_backtrace":{"params":{"$options":"","$limit":""},"docComment":"\n     Prints a backtrace\n    ","signature":"debug_print_backtrace([int $options] ,[int $limit] )","inheritdoc":0,"modifier":[],"return":""},"error_get_last":{"params":[],"docComment":"Get the last occurred error","signature":"error_get_last( )","inheritdoc":0,"modifier":[],"return":""},"error_log":{"params":{"$message":"","$message_type":"","$destination":"","$extra_headers":""},"docComment":"Send an error message to the defined error handling routines","signature":"error_log(string $message ,[int $message_type] ,string $destination ,string $extra_headers )","inheritdoc":0,"modifier":[],"return":""},"error_reporting":{"params":{"$level":""},"docComment":"Sets which PHP errors are reported","signature":"error_reporting(int $level )","inheritdoc":0,"modifier":[],"return":""},"restore_error_handler":{"params":[],"docComment":"Restores the previous error handler function","signature":"restore_error_handler( )","inheritdoc":0,"modifier":[],"return":""},"restore_exception_handler":{"params":[],"docComment":"\n   Restores the previously defined exception handler function\n  ","signature":"restore_exception_handler( )","inheritdoc":0,"modifier":[],"return":""},"set_error_handler":{"params":{"$error_handler":"","$error_types":""},"docComment":"Sets a user-defined error handler function","signature":"set_error_handler(callable $error_handler ,[int $error_types] )","inheritdoc":0,"modifier":[],"return":""},"set_exception_handler":{"params":{"$exception_handler":""},"docComment":"\n   Sets a user-defined exception handler function \n  ","signature":"set_exception_handler(callable $exception_handler )","inheritdoc":0,"modifier":[],"return":""},"trigger_error":{"params":{"$error_msg":"","$error_type":""},"docComment":"Generates a user-level error\/warning\/notice message","signature":"trigger_error(string $error_msg ,[int $error_type] )","inheritdoc":0,"modifier":[],"return":""},"user_error":{"params":{"$error_msg":"","$error_type":""},"docComment":"Generates a user-level error\/warning\/notice message","signature":"trigger_error(string $error_msg ,[int $error_type] )","inheritdoc":0,"modifier":[],"return":""},"escapeshellarg":{"params":{"$arg":""},"docComment":"Escape a string to be used as a shell argument","signature":"escapeshellarg(string $arg )","inheritdoc":0,"modifier":[],"return":""},"escapeshellcmd":{"params":{"$command":""},"docComment":"Escape shell metacharacters","signature":"escapeshellcmd(string $command )","inheritdoc":0,"modifier":[],"return":""},"exec":{"params":{"$command":"","&$output":"","&$return_var":""},"docComment":"Execute an external program","signature":"exec(string $command ,array &$output ,int &$return_var )","inheritdoc":0,"modifier":[],"return":""},"passthru":{"params":{"$command":"","&$return_var":""},"docComment":"Execute an external program and display raw output","signature":"passthru(string $command ,int &$return_var )","inheritdoc":0,"modifier":[],"return":""},"proc_close":{"params":{"$process":""},"docComment":"Close a process opened by   and return the exit code of that process","signature":"proc_close(resource $process )","inheritdoc":0,"modifier":[],"return":""},"proc_get_status":{"params":{"$process":""},"docComment":"Get information about a process opened by  ","signature":"proc_get_status(resource $process )","inheritdoc":0,"modifier":[],"return":""},"proc_nice":{"params":{"$increment":""},"docComment":"Change the priority of the current process","signature":"proc_nice(int $increment )","inheritdoc":0,"modifier":[],"return":""},"proc_open":{"params":{"$cmd":"","$descriptorspec":"","&$pipes":"","$cwd":"","$env":"","$other_options":""},"docComment":"\n     Execute a command and open file pointers for input\/output\n    ","signature":"proc_open(string $cmd ,array $descriptorspec ,array &$pipes ,string $cwd ,array $env ,array $other_options )","inheritdoc":0,"modifier":[],"return":""},"proc_terminate":{"params":{"$process":"","$signal":""},"docComment":"Kills a process opened by proc_open","signature":"proc_terminate(resource $process ,[int $signal] )","inheritdoc":0,"modifier":[],"return":""},"shell_exec":{"params":{"$cmd":""},"docComment":"Execute command via shell and return the complete output as a string","signature":"shell_exec(string $cmd )","inheritdoc":0,"modifier":[],"return":""},"system":{"params":{"$command":"","&$return_var":""},"docComment":"Execute an external program and display the output","signature":"system(string $command ,int &$return_var )","inheritdoc":0,"modifier":[],"return":""},"basename":{"params":{"$path":"","$suffix":""},"docComment":"Returns trailing name component of path","signature":"basename(string $path ,string $suffix )","inheritdoc":0,"modifier":[],"return":""},"chgrp":{"params":{"$filename":"","$group":""},"docComment":"Changes file group","signature":"chgrp(string $filename ,mixed $group )","inheritdoc":0,"modifier":[],"return":""},"chmod":{"params":{"$filename":"","$mode":""},"docComment":"Changes file mode","signature":"chmod(string $filename ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"chown":{"params":{"$filename":"","$user":""},"docComment":"Changes file owner","signature":"chown(string $filename ,mixed $user )","inheritdoc":0,"modifier":[],"return":""},"clearstatcache":{"params":{"$clear_realpath_cache":"","$filename":""},"docComment":"Clears file status cache","signature":"clearstatcache([bool $clear_realpath_cache] ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"copy":{"params":{"$source":"","$dest":"","$context":""},"docComment":"Copies file","signature":"copy(string $source ,string $dest ,resource $context )","inheritdoc":0,"modifier":[],"return":""},"delete":{"params":[],"docComment":"See   or  ","signature":"","inheritdoc":0,"modifier":[],"return":""},"dirname":{"params":{"$path":""},"docComment":"Returns parent directory's path","signature":"dirname(string $path )","inheritdoc":0,"modifier":[],"return":""},"disk_free_space":{"params":{"$directory":""},"docComment":"Returns available space on filesystem or disk partition","signature":"disk_free_space(string $directory )","inheritdoc":0,"modifier":[],"return":""},"disk_total_space":{"params":{"$directory":""},"docComment":"Returns the total size of a filesystem or disk partition","signature":"disk_total_space(string $directory )","inheritdoc":0,"modifier":[],"return":""},"diskfreespace":{"params":{"$directory":""},"docComment":"Returns available space on filesystem or disk partition","signature":"disk_free_space(string $directory )","inheritdoc":0,"modifier":[],"return":""},"fclose":{"params":{"$handle":""},"docComment":"Closes an open file pointer","signature":"fclose(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"feof":{"params":{"$handle":""},"docComment":"Tests for end-of-file on a file pointer","signature":"feof(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"fflush":{"params":{"$handle":""},"docComment":"Flushes the output to a file","signature":"fflush(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"fgetc":{"params":{"$handle":""},"docComment":"Gets character from file pointer","signature":"fgetc(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"fgetcsv":{"params":{"$handle":"","$length":"","$delimiter":"","$enclosure":"","$escape":""},"docComment":"Gets line from file pointer and parse for CSV fields","signature":"fgetcsv(resource $handle ,[int $length] ,[string $delimiter] ,[string $enclosure] ,[string $escape] )","inheritdoc":0,"modifier":[],"return":""},"fgets":{"params":{"$handle":"","$length":""},"docComment":"Gets line from file pointer","signature":"fgets(resource $handle ,int $length )","inheritdoc":0,"modifier":[],"return":""},"fgetss":{"params":{"$handle":"","$length":"","$allowable_tags":""},"docComment":"Gets line from file pointer and strip HTML tags","signature":"fgetss(resource $handle ,int $length ,string $allowable_tags )","inheritdoc":0,"modifier":[],"return":""},"file_exists":{"params":{"$filename":""},"docComment":"Checks whether a file or directory exists","signature":"file_exists(string $filename )","inheritdoc":0,"modifier":[],"return":""},"file_get_contents":{"params":{"$filename":"","$use_include_path":"","$context":"","$offset":"","$maxlen":""},"docComment":"Reads entire file into a string","signature":"file_get_contents(string $filename ,[bool $use_include_path] ,resource $context ,[int $offset] ,int $maxlen )","inheritdoc":0,"modifier":[],"return":""},"file_put_contents":{"params":{"$filename":"","$data":"","$flags":"","$context":""},"docComment":"Write a string to a file","signature":"file_put_contents(string $filename ,mixed $data ,[int $flags] ,resource $context )","inheritdoc":0,"modifier":[],"return":""},"file":{"params":{"$filename":"","$flags":"","$context":""},"docComment":"Reads entire file into an array","signature":"file(string $filename ,[int $flags] ,resource $context )","inheritdoc":0,"modifier":[],"return":""},"fileatime":{"params":{"$filename":""},"docComment":"Gets last access time of file","signature":"fileatime(string $filename )","inheritdoc":0,"modifier":[],"return":""},"filectime":{"params":{"$filename":""},"docComment":"Gets inode change time of file","signature":"filectime(string $filename )","inheritdoc":0,"modifier":[],"return":""},"filegroup":{"params":{"$filename":""},"docComment":"Gets file group","signature":"filegroup(string $filename )","inheritdoc":0,"modifier":[],"return":""},"fileinode":{"params":{"$filename":""},"docComment":"Gets file inode","signature":"fileinode(string $filename )","inheritdoc":0,"modifier":[],"return":""},"filemtime":{"params":{"$filename":""},"docComment":"Gets file modification time","signature":"filemtime(string $filename )","inheritdoc":0,"modifier":[],"return":""},"fileowner":{"params":{"$filename":""},"docComment":"Gets file owner","signature":"fileowner(string $filename )","inheritdoc":0,"modifier":[],"return":""},"fileperms":{"params":{"$filename":""},"docComment":"Gets file permissions","signature":"fileperms(string $filename )","inheritdoc":0,"modifier":[],"return":""},"filesize":{"params":{"$filename":""},"docComment":"Gets file size","signature":"filesize(string $filename )","inheritdoc":0,"modifier":[],"return":""},"filetype":{"params":{"$filename":""},"docComment":"Gets file type","signature":"filetype(string $filename )","inheritdoc":0,"modifier":[],"return":""},"flock":{"params":{"$handle":"","$operation":"","&$wouldblock":""},"docComment":"Portable advisory file locking","signature":"flock(resource $handle ,int $operation ,int &$wouldblock )","inheritdoc":0,"modifier":[],"return":""},"fnmatch":{"params":{"$pattern":"","$string":"","$flags":""},"docComment":"Match filename against a pattern","signature":"fnmatch(string $pattern ,string $string ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"fopen":{"params":{"$filename":"","$mode":"","$use_include_path":"","$context":""},"docComment":"Opens file or URL","signature":"fopen(string $filename ,string $mode ,[bool $use_include_path] ,resource $context )","inheritdoc":0,"modifier":[],"return":""},"fpassthru":{"params":{"$handle":""},"docComment":"Output all remaining data on a file pointer","signature":"fpassthru(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"fputcsv":{"params":{"$handle":"","$fields":"","$delimiter":"","$enclosure":""},"docComment":"Format line as CSV and write to file pointer","signature":"fputcsv(resource $handle ,array $fields ,[string $delimiter] ,[string $enclosure] )","inheritdoc":0,"modifier":[],"return":""},"fputs":{"params":{"$handle":"","$string":"","$length":""},"docComment":"Binary-safe file write","signature":"fwrite(resource $handle ,string $string ,int $length )","inheritdoc":0,"modifier":[],"return":""},"fread":{"params":{"$handle":"","$length":""},"docComment":"Binary-safe file read","signature":"fread(resource $handle ,int $length )","inheritdoc":0,"modifier":[],"return":""},"fscanf":{"params":{"$handle":"","$format":"","&$...":""},"docComment":"Parses input from a file according to a format","signature":"fscanf(resource $handle ,string $format ,mixed &$... )","inheritdoc":0,"modifier":[],"return":""},"fseek":{"params":{"$handle":"","$offset":"","$whence":""},"docComment":"Seeks on a file pointer","signature":"fseek(resource $handle ,int $offset ,[int $whence] )","inheritdoc":0,"modifier":[],"return":""},"fstat":{"params":{"$handle":""},"docComment":"Gets information about a file using an open file pointer","signature":"fstat(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"ftell":{"params":{"$handle":""},"docComment":"Returns the current position of the file read\/write pointer","signature":"ftell(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"ftruncate":{"params":{"$handle":"","$size":""},"docComment":"Truncates a file to a given length","signature":"ftruncate(resource $handle ,int $size )","inheritdoc":0,"modifier":[],"return":""},"fwrite":{"params":{"$handle":"","$string":"","$length":""},"docComment":"Binary-safe file write","signature":"fwrite(resource $handle ,string $string ,int $length )","inheritdoc":0,"modifier":[],"return":""},"glob":{"params":{"$pattern":"","$flags":""},"docComment":"Find pathnames matching a pattern","signature":"glob(string $pattern ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"is_dir":{"params":{"$filename":""},"docComment":"Tells whether the filename is a directory","signature":"is_dir(string $filename )","inheritdoc":0,"modifier":[],"return":""},"is_executable":{"params":{"$filename":""},"docComment":"Tells whether the filename is executable","signature":"is_executable(string $filename )","inheritdoc":0,"modifier":[],"return":""},"is_file":{"params":{"$filename":""},"docComment":"Tells whether the filename is a regular file","signature":"is_file(string $filename )","inheritdoc":0,"modifier":[],"return":""},"is_link":{"params":{"$filename":""},"docComment":"Tells whether the filename is a symbolic link","signature":"is_link(string $filename )","inheritdoc":0,"modifier":[],"return":""},"is_readable":{"params":{"$filename":""},"docComment":"Tells whether a file exists and is readable","signature":"is_readable(string $filename )","inheritdoc":0,"modifier":[],"return":""},"is_uploaded_file":{"params":{"$filename":""},"docComment":"Tells whether the file was uploaded via HTTP POST","signature":"is_uploaded_file(string $filename )","inheritdoc":0,"modifier":[],"return":""},"is_writable":{"params":{"$filename":""},"docComment":"Tells whether the filename is writable","signature":"is_writable(string $filename )","inheritdoc":0,"modifier":[],"return":""},"is_writeable":{"params":{"$filename":""},"docComment":"Tells whether the filename is writable","signature":"is_writable(string $filename )","inheritdoc":0,"modifier":[],"return":""},"lchgrp":{"params":{"$filename":"","$group":""},"docComment":"Changes group ownership of symlink","signature":"lchgrp(string $filename ,mixed $group )","inheritdoc":0,"modifier":[],"return":""},"lchown":{"params":{"$filename":"","$user":""},"docComment":"Changes user ownership of symlink","signature":"lchown(string $filename ,mixed $user )","inheritdoc":0,"modifier":[],"return":""},"link":{"params":{"$target":"","$link":""},"docComment":"Create a hard link","signature":"link(string $target ,string $link )","inheritdoc":0,"modifier":[],"return":""},"linkinfo":{"params":{"$path":""},"docComment":"Gets information about a link","signature":"linkinfo(string $path )","inheritdoc":0,"modifier":[],"return":""},"lstat":{"params":{"$filename":""},"docComment":"Gives information about a file or symbolic link","signature":"lstat(string $filename )","inheritdoc":0,"modifier":[],"return":""},"mkdir":{"params":{"$pathname":"","$mode":"","$recursive":"","$context":""},"docComment":"Makes directory","signature":"mkdir(string $pathname ,[int $mode] ,[bool $recursive] ,resource $context )","inheritdoc":0,"modifier":[],"return":""},"move_uploaded_file":{"params":{"$filename":"","$destination":""},"docComment":"Moves an uploaded file to a new location","signature":"move_uploaded_file(string $filename ,string $destination )","inheritdoc":0,"modifier":[],"return":""},"parse_ini_file":{"params":{"$filename":"","$process_sections":"","$scanner_mode":""},"docComment":"Parse a configuration file","signature":"parse_ini_file(string $filename ,[bool $process_sections] ,[int $scanner_mode] )","inheritdoc":0,"modifier":[],"return":""},"parse_ini_string":{"params":{"$ini":"","$process_sections":"","$scanner_mode":""},"docComment":"Parse a configuration string","signature":"parse_ini_string(string $ini ,[bool $process_sections] ,[int $scanner_mode] )","inheritdoc":0,"modifier":[],"return":""},"pathinfo":{"params":{"$path":"","$options":""},"docComment":"Returns information about a file path","signature":"pathinfo(string $path ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"pclose":{"params":{"$handle":""},"docComment":"Closes process file pointer","signature":"pclose(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"popen":{"params":{"$command":"","$mode":""},"docComment":"Opens process file pointer","signature":"popen(string $command ,string $mode )","inheritdoc":0,"modifier":[],"return":""},"readfile":{"params":{"$filename":"","$use_include_path":"","$context":""},"docComment":"Outputs a file","signature":"readfile(string $filename ,[bool $use_include_path] ,resource $context )","inheritdoc":0,"modifier":[],"return":""},"readlink":{"params":{"$path":""},"docComment":"Returns the target of a symbolic link","signature":"readlink(string $path )","inheritdoc":0,"modifier":[],"return":""},"realpath_cache_get":{"params":[],"docComment":"Get realpath cache entries","signature":"realpath_cache_get( )","inheritdoc":0,"modifier":[],"return":""},"realpath_cache_size":{"params":[],"docComment":"Get realpath cache size","signature":"realpath_cache_size( )","inheritdoc":0,"modifier":[],"return":""},"realpath":{"params":{"$path":""},"docComment":"Returns canonicalized absolute pathname","signature":"realpath(string $path )","inheritdoc":0,"modifier":[],"return":""},"rename":{"params":{"$oldname":"","$newname":"","$context":""},"docComment":"Renames a file or directory","signature":"rename(string $oldname ,string $newname ,resource $context )","inheritdoc":0,"modifier":[],"return":""},"rewind":{"params":{"$handle":""},"docComment":"Rewind the position of a file pointer","signature":"rewind(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"rmdir":{"params":{"$dirname":"","$context":""},"docComment":"Removes directory","signature":"rmdir(string $dirname ,resource $context )","inheritdoc":0,"modifier":[],"return":""},"set_file_buffer":{"params":{"$stream":"","$buffer":""},"docComment":"Sets write file buffering on the given stream","signature":"stream_set_write_buffer(resource $stream ,int $buffer )","inheritdoc":0,"modifier":[],"return":""},"stat":{"params":{"$filename":""},"docComment":"Gives information about a file","signature":"stat(string $filename )","inheritdoc":0,"modifier":[],"return":""},"symlink":{"params":{"$target":"","$link":""},"docComment":"Creates a symbolic link","signature":"symlink(string $target ,string $link )","inheritdoc":0,"modifier":[],"return":""},"tempnam":{"params":{"$dir":"","$prefix":""},"docComment":"Create file with unique file name","signature":"tempnam(string $dir ,string $prefix )","inheritdoc":0,"modifier":[],"return":""},"tmpfile":{"params":[],"docComment":"Creates a temporary file","signature":"tmpfile( )","inheritdoc":0,"modifier":[],"return":""},"touch":{"params":{"$filename":"","$time":"","$atime":""},"docComment":"Sets access and modification time of file","signature":"touch(string $filename ,[int $time] ,int $atime )","inheritdoc":0,"modifier":[],"return":""},"umask":{"params":{"$mask":""},"docComment":"Changes the current umask","signature":"umask(int $mask )","inheritdoc":0,"modifier":[],"return":""},"unlink":{"params":{"$filename":"","$context":""},"docComment":"Deletes a file","signature":"unlink(string $filename ,resource $context )","inheritdoc":0,"modifier":[],"return":""},"filter_has_var":{"params":{"$type":"","$variable_name":""},"docComment":"Checks if variable of specified type exists","signature":"filter_has_var(int $type ,string $variable_name )","inheritdoc":0,"modifier":[],"return":""},"filter_id":{"params":{"$filtername":""},"docComment":"Returns the filter ID belonging to a named filter","signature":"filter_id(string $filtername )","inheritdoc":0,"modifier":[],"return":""},"filter_input_array":{"params":{"$type":"","$definition":"","$add_empty":""},"docComment":"Gets external variables and optionally filters them","signature":"filter_input_array(int $type ,mixed $definition ,[bool $add_empty] )","inheritdoc":0,"modifier":[],"return":""},"filter_input":{"params":{"$type":"","$variable_name":"","$filter":"","$options":""},"docComment":"Gets a specific external variable by name and optionally filters it","signature":"filter_input(int $type ,string $variable_name ,[int $filter] ,mixed $options )","inheritdoc":0,"modifier":[],"return":""},"filter_list":{"params":[],"docComment":"Returns a list of all supported filters","signature":"filter_list( )","inheritdoc":0,"modifier":[],"return":""},"filter_var_array":{"params":{"$data":"","$definition":"","$add_empty":""},"docComment":"Gets multiple variables and optionally filters them","signature":"filter_var_array(array $data ,mixed $definition ,[bool $add_empty] )","inheritdoc":0,"modifier":[],"return":""},"filter_var":{"params":{"$variable":"","$filter":"","$options":""},"docComment":"Filters a variable with a specified filter","signature":"filter_var(mixed $variable ,[int $filter] ,mixed $options )","inheritdoc":0,"modifier":[],"return":""},"call_user_func_array":{"params":{"$callback":"","$param_arr":""},"docComment":"Call a callback with an array of parameters","signature":"call_user_func_array(callable $callback ,array $param_arr )","inheritdoc":0,"modifier":[],"return":""},"call_user_func":{"params":{"$callback":"","$parameter":"","$...":""},"docComment":"Call the callback given by the first parameter","signature":"call_user_func(callable $callback ,mixed $parameter ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"create_function":{"params":{"$args":"","$code":""},"docComment":"Create an anonymous (lambda-style) function","signature":"create_function(string $args ,string $code )","inheritdoc":0,"modifier":[],"return":""},"forward_static_call_array":{"params":{"$function":"","$parameters":""},"docComment":"Call a static method and pass the arguments as array","signature":"forward_static_call_array(callable $function ,array $parameters )","inheritdoc":0,"modifier":[],"return":""},"forward_static_call":{"params":{"$function":"","$parameter":"","$...":""},"docComment":"Call a static method","signature":"forward_static_call(callable $function ,mixed $parameter ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"func_get_arg":{"params":{"$arg_num":""},"docComment":"Return an item from the argument list","signature":"func_get_arg(int $arg_num )","inheritdoc":0,"modifier":[],"return":""},"func_get_args":{"params":[],"docComment":"Returns an array comprising a function's argument list","signature":"func_get_args( )","inheritdoc":0,"modifier":[],"return":""},"func_num_args":{"params":[],"docComment":"Returns the number of arguments passed to the function","signature":"func_num_args( )","inheritdoc":0,"modifier":[],"return":""},"function_exists":{"params":{"$function_name":""},"docComment":"Return  if the given function has been defined","signature":"function_exists(string $function_name )","inheritdoc":0,"modifier":[],"return":""},"get_defined_functions":{"params":[],"docComment":"Returns an array of all defined functions","signature":"get_defined_functions( )","inheritdoc":0,"modifier":[],"return":""},"register_shutdown_function":{"params":{"$callback":"","$parameter":"","$...":""},"docComment":"Register a function for execution on shutdown","signature":"register_shutdown_function(callable $callback ,mixed $parameter ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"register_tick_function":{"params":{"$function":"","$arg":"","$...":""},"docComment":"Register a function for execution on each tick","signature":"register_tick_function(callable $function ,mixed $arg ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"unregister_tick_function":{"params":{"$function_name":""},"docComment":"De-register a function for execution on each tick","signature":"unregister_tick_function(string $function_name )","inheritdoc":0,"modifier":[],"return":""},"hash_algos":{"params":[],"docComment":"Return a list of registered hashing algorithms","signature":"hash_algos( )","inheritdoc":0,"modifier":[],"return":""},"hash_copy":{"params":{"$context":""},"docComment":"Copy hashing context","signature":"hash_copy(resource $context )","inheritdoc":0,"modifier":[],"return":""},"hash_file":{"params":{"$algo":"","$filename":"","$raw_output":""},"docComment":"Generate a hash value using the contents of a given file","signature":"hash_file(string $algo ,string $filename ,[bool $raw_output] )","inheritdoc":0,"modifier":[],"return":""},"hash_final":{"params":{"$context":"","$raw_output":""},"docComment":"Finalize an incremental hash and return resulting digest","signature":"hash_final(resource $context ,[bool $raw_output] )","inheritdoc":0,"modifier":[],"return":""},"hash_hmac_file":{"params":{"$algo":"","$filename":"","$key":"","$raw_output":""},"docComment":"Generate a keyed hash value using the HMAC method and the contents of a given file","signature":"hash_hmac_file(string $algo ,string $filename ,string $key ,[bool $raw_output] )","inheritdoc":0,"modifier":[],"return":""},"hash_hmac":{"params":{"$algo":"","$data":"","$key":"","$raw_output":""},"docComment":"Generate a keyed hash value using the HMAC method","signature":"hash_hmac(string $algo ,string $data ,string $key ,[bool $raw_output] )","inheritdoc":0,"modifier":[],"return":""},"hash_init":{"params":{"$algo":"","$options":"","$key":""},"docComment":"Initialize an incremental hashing context","signature":"hash_init(string $algo ,[int $options] ,[string $key] )","inheritdoc":0,"modifier":[],"return":""},"hash_pbkdf2":{"params":{"$algo":"","$password":"","$salt":"","$iterations":"","$length":"","$raw_output":""},"docComment":"Generate a PBKDF2 key derivation of a supplied password","signature":"hash_pbkdf2(string $algo ,string $password ,string $salt ,int $iterations ,[int $length] ,[bool $raw_output] )","inheritdoc":0,"modifier":[],"return":""},"hash_update_file":{"params":{"$context":"","$filename":""},"docComment":"Pump data into an active hashing context from a file","signature":"hash_update_file(resource $context ,string $filename ,[resource $context] )","inheritdoc":0,"modifier":[],"return":""},"hash_update_stream":{"params":{"$context":"","$handle":"","$length":""},"docComment":"Pump data into an active hashing context from an open stream","signature":"hash_update_stream(resource $context ,resource $handle ,[int $length] )","inheritdoc":0,"modifier":[],"return":""},"hash_update":{"params":{"$context":"","$data":""},"docComment":"Pump data into an active hashing context","signature":"hash_update(resource $context ,string $data )","inheritdoc":0,"modifier":[],"return":""},"hash":{"params":{"$algo":"","$data":"","$raw_output":""},"docComment":"Generate a hash value (message digest)","signature":"hash(string $algo ,string $data ,[bool $raw_output] )","inheritdoc":0,"modifier":[],"return":""},"assert_options":{"params":{"$what":"","$value":""},"docComment":"Set\/get the various assert flags","signature":"assert_options(int $what ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"assert":{"params":{"$assertion":"","$description":""},"docComment":"Checks if assertion is ","signature":"assert(mixed $assertion ,string $description )","inheritdoc":0,"modifier":[],"return":""},"cli_get_process_title":{"params":[],"docComment":"Returns the current process title","signature":"cli_get_process_title( )","inheritdoc":0,"modifier":[],"return":""},"cli_set_process_title":{"params":{"$title":""},"docComment":"Sets the process title","signature":"cli_set_process_title(string $title )","inheritdoc":0,"modifier":[],"return":""},"dl":{"params":{"$library":""},"docComment":"Loads a PHP extension at runtime","signature":"dl(string $library )","inheritdoc":0,"modifier":[],"return":""},"extension_loaded":{"params":{"$name":""},"docComment":"Find out whether an extension is loaded","signature":"extension_loaded(string $name )","inheritdoc":0,"modifier":[],"return":""},"gc_collect_cycles":{"params":[],"docComment":"Forces collection of any existing garbage cycles","signature":"gc_collect_cycles( )","inheritdoc":0,"modifier":[],"return":""},"gc_disable":{"params":[],"docComment":"Deactivates the circular reference collector","signature":"gc_disable( )","inheritdoc":0,"modifier":[],"return":""},"gc_enable":{"params":[],"docComment":"Activates the circular reference collector","signature":"gc_enable( )","inheritdoc":0,"modifier":[],"return":""},"gc_enabled":{"params":[],"docComment":"Returns status of the circular reference collector","signature":"gc_enabled( )","inheritdoc":0,"modifier":[],"return":""},"get_cfg_var":{"params":{"$option":""},"docComment":"Gets the value of a PHP configuration option","signature":"get_cfg_var(string $option )","inheritdoc":0,"modifier":[],"return":""},"get_current_user":{"params":[],"docComment":"Gets the name of the owner of the current PHP script","signature":"get_current_user( )","inheritdoc":0,"modifier":[],"return":""},"get_defined_constants":{"params":{"$categorize":""},"docComment":"Returns an associative array with the names of all the constants and their values","signature":"get_defined_constants([bool $categorize] )","inheritdoc":0,"modifier":[],"return":""},"get_extension_funcs":{"params":{"$module_name":""},"docComment":"Returns an array with the names of the functions of a module","signature":"get_extension_funcs(string $module_name )","inheritdoc":0,"modifier":[],"return":""},"get_include_path":{"params":[],"docComment":"Gets the current include_path configuration option","signature":"get_include_path( )","inheritdoc":0,"modifier":[],"return":""},"get_included_files":{"params":[],"docComment":"Returns an array with the names of included or required files","signature":"get_included_files( )","inheritdoc":0,"modifier":[],"return":""},"get_loaded_extensions":{"params":{"$zend_extensions":""},"docComment":"Returns an array with the names of all modules compiled and loaded","signature":"get_loaded_extensions([bool $zend_extensions] )","inheritdoc":0,"modifier":[],"return":""},"get_magic_quotes_gpc":{"params":[],"docComment":"Gets the current configuration setting of magic_quotes_gpc","signature":"get_magic_quotes_gpc( )","inheritdoc":0,"modifier":[],"return":""},"get_magic_quotes_runtime":{"params":[],"docComment":"Gets the current active configuration setting of magic_quotes_runtime","signature":"get_magic_quotes_runtime( )","inheritdoc":0,"modifier":[],"return":""},"get_required_files":{"params":[],"docComment":"Returns an array with the names of included or required files","signature":"get_included_files( )","inheritdoc":0,"modifier":[],"return":""},"getenv":{"params":{"$varname":""},"docComment":"Gets the value of an environment variable","signature":"getenv(string $varname )","inheritdoc":0,"modifier":[],"return":""},"getlastmod":{"params":[],"docComment":"Gets time of last page modification","signature":"getlastmod( )","inheritdoc":0,"modifier":[],"return":""},"getmygid":{"params":[],"docComment":"Get PHP script owner's GID","signature":"getmygid( )","inheritdoc":0,"modifier":[],"return":""},"getmyinode":{"params":[],"docComment":"Gets the inode of the current script","signature":"getmyinode( )","inheritdoc":0,"modifier":[],"return":""},"getmypid":{"params":[],"docComment":"Gets PHP's process ID","signature":"getmypid( )","inheritdoc":0,"modifier":[],"return":""},"getmyuid":{"params":[],"docComment":"Gets PHP script owner's UID","signature":"getmyuid( )","inheritdoc":0,"modifier":[],"return":""},"getopt":{"params":{"$options":"","$longopts":""},"docComment":"Gets options from the command line argument list","signature":"getopt(string $options ,array $longopts )","inheritdoc":0,"modifier":[],"return":""},"getrusage":{"params":{"$who":""},"docComment":"Gets the current resource usages","signature":"getrusage([int $who] )","inheritdoc":0,"modifier":[],"return":""},"ini_alter":{"params":{"$varname":"","$newvalue":""},"docComment":"Sets the value of a configuration option","signature":"ini_set(string $varname ,string $newvalue )","inheritdoc":0,"modifier":[],"return":""},"ini_get_all":{"params":{"$extension":"","$details":""},"docComment":"Gets all configuration options","signature":"ini_get_all(string $extension ,[bool $details] )","inheritdoc":0,"modifier":[],"return":""},"ini_get":{"params":{"$varname":""},"docComment":"Gets the value of a configuration option","signature":"ini_get(string $varname )","inheritdoc":0,"modifier":[],"return":""},"ini_restore":{"params":{"$varname":""},"docComment":"Restores the value of a configuration option","signature":"ini_restore(string $varname )","inheritdoc":0,"modifier":[],"return":""},"ini_set":{"params":{"$varname":"","$newvalue":""},"docComment":"Sets the value of a configuration option","signature":"ini_set(string $varname ,string $newvalue )","inheritdoc":0,"modifier":[],"return":""},"magic_quotes_runtime":{"params":{"$new_setting":""},"docComment":"Sets the current active configuration setting of magic_quotes_runtime","signature":"set_magic_quotes_runtime(bool $new_setting )","inheritdoc":0,"modifier":[],"return":""},"main":{"params":[],"docComment":"Dummy for  ","signature":"","inheritdoc":0,"modifier":[],"return":""},"memory_get_peak_usage":{"params":{"$real_usage":""},"docComment":"Returns the peak of memory allocated by PHP","signature":"memory_get_peak_usage([bool $real_usage] )","inheritdoc":0,"modifier":[],"return":""},"memory_get_usage":{"params":{"$real_usage":""},"docComment":"Returns the amount of memory allocated to PHP","signature":"memory_get_usage([bool $real_usage] )","inheritdoc":0,"modifier":[],"return":""},"php_ini_loaded_file":{"params":[],"docComment":"Retrieve a path to the loaded php.ini file","signature":"php_ini_loaded_file( )","inheritdoc":0,"modifier":[],"return":""},"php_ini_scanned_files":{"params":[],"docComment":"Return a list of .ini files parsed from the additional ini dir","signature":"php_ini_scanned_files( )","inheritdoc":0,"modifier":[],"return":""},"php_logo_guid":{"params":[],"docComment":"Gets the logo guid","signature":"php_logo_guid( )","inheritdoc":0,"modifier":[],"return":""},"php_sapi_name":{"params":[],"docComment":"Returns the type of interface between web server and PHP","signature":"php_sapi_name( )","inheritdoc":0,"modifier":[],"return":""},"php_uname":{"params":{"$mode":""},"docComment":"Returns information about the operating system PHP is running on","signature":"php_uname([string $mode] )","inheritdoc":0,"modifier":[],"return":""},"phpcredits":{"params":{"$flag":""},"docComment":"Prints out the credits for PHP","signature":"phpcredits([int $flag] )","inheritdoc":0,"modifier":[],"return":""},"phpinfo":{"params":{"$what":""},"docComment":"Outputs information about PHP's configuration","signature":"phpinfo([int $what] )","inheritdoc":0,"modifier":[],"return":""},"phpversion":{"params":{"$extension":""},"docComment":"Gets the current PHP version","signature":"phpversion(string $extension )","inheritdoc":0,"modifier":[],"return":""},"putenv":{"params":{"$setting":""},"docComment":"Sets the value of an environment variable","signature":"putenv(string $setting )","inheritdoc":0,"modifier":[],"return":""},"restore_include_path":{"params":[],"docComment":"Restores the value of the include_path configuration option","signature":"restore_include_path( )","inheritdoc":0,"modifier":[],"return":""},"set_include_path":{"params":{"$new_include_path":""},"docComment":"Sets the include_path configuration option","signature":"set_include_path(string $new_include_path )","inheritdoc":0,"modifier":[],"return":""},"set_magic_quotes_runtime":{"params":{"$new_setting":""},"docComment":"Sets the current active configuration setting of magic_quotes_runtime","signature":"set_magic_quotes_runtime(bool $new_setting )","inheritdoc":0,"modifier":[],"return":""},"set_time_limit":{"params":{"$seconds":""},"docComment":"Limits the maximum execution time","signature":"set_time_limit(int $seconds )","inheritdoc":0,"modifier":[],"return":""},"sys_get_temp_dir":{"params":[],"docComment":"Returns directory path used for temporary files","signature":"sys_get_temp_dir( )","inheritdoc":0,"modifier":[],"return":""},"version_compare":{"params":{"$version1":"","$version2":"","$operator":""},"docComment":"Compares two \"PHP-standardized\" version number strings","signature":"version_compare(string $version1 ,string $version2 ,string $operator )","inheritdoc":0,"modifier":[],"return":""},"zend_logo_guid":{"params":[],"docComment":"Gets the Zend guid","signature":"zend_logo_guid( )","inheritdoc":0,"modifier":[],"return":""},"zend_thread_id":{"params":[],"docComment":"Returns a unique identifier for the current thread","signature":"zend_thread_id( )","inheritdoc":0,"modifier":[],"return":""},"zend_version":{"params":[],"docComment":"Gets the version of the current Zend engine","signature":"zend_version( )","inheritdoc":0,"modifier":[],"return":""},"ezmlm_hash":{"params":{"$addr":""},"docComment":"Calculate the hash value needed by EZMLM","signature":"ezmlm_hash(string $addr )","inheritdoc":0,"modifier":[],"return":""},"mail":{"params":{"$to":"","$subject":"","$message":"","$additional_headers":"","$additional_parameters":""},"docComment":"Send mail","signature":"mail(string $to ,string $subject ,string $message ,string $additional_headers ,string $additional_parameters )","inheritdoc":0,"modifier":[],"return":""},"abs":{"params":{"$number":""},"docComment":"Absolute value","signature":"abs(mixed $number )","inheritdoc":0,"modifier":[],"return":""},"acos":{"params":{"$arg":""},"docComment":"Arc cosine","signature":"acos(float $arg )","inheritdoc":0,"modifier":[],"return":""},"acosh":{"params":{"$arg":""},"docComment":"Inverse hyperbolic cosine","signature":"acosh(float $arg )","inheritdoc":0,"modifier":[],"return":""},"asin":{"params":{"$arg":""},"docComment":"Arc sine","signature":"asin(float $arg )","inheritdoc":0,"modifier":[],"return":""},"asinh":{"params":{"$arg":""},"docComment":"Inverse hyperbolic sine","signature":"asinh(float $arg )","inheritdoc":0,"modifier":[],"return":""},"atan2":{"params":{"$y":"","$x":""},"docComment":"Arc tangent of two variables","signature":"atan2(float $y ,float $x )","inheritdoc":0,"modifier":[],"return":""},"atan":{"params":{"$arg":""},"docComment":"Arc tangent","signature":"atan(float $arg )","inheritdoc":0,"modifier":[],"return":""},"atanh":{"params":{"$arg":""},"docComment":"Inverse hyperbolic tangent","signature":"atanh(float $arg )","inheritdoc":0,"modifier":[],"return":""},"base_convert":{"params":{"$number":"","$frombase":"","$tobase":""},"docComment":"Convert a number between arbitrary bases","signature":"base_convert(string $number ,int $frombase ,int $tobase )","inheritdoc":0,"modifier":[],"return":""},"bindec":{"params":{"$binary_string":""},"docComment":"Binary to decimal","signature":"bindec(string $binary_string )","inheritdoc":0,"modifier":[],"return":""},"ceil":{"params":{"$value":""},"docComment":"Round fractions up","signature":"ceil(float $value )","inheritdoc":0,"modifier":[],"return":""},"cos":{"params":{"$arg":""},"docComment":"Cosine","signature":"cos(float $arg )","inheritdoc":0,"modifier":[],"return":""},"cosh":{"params":{"$arg":""},"docComment":"Hyperbolic cosine","signature":"cosh(float $arg )","inheritdoc":0,"modifier":[],"return":""},"decbin":{"params":{"$number":""},"docComment":"Decimal to binary","signature":"decbin(int $number )","inheritdoc":0,"modifier":[],"return":""},"dechex":{"params":{"$number":""},"docComment":"Decimal to hexadecimal","signature":"dechex(int $number )","inheritdoc":0,"modifier":[],"return":""},"decoct":{"params":{"$number":""},"docComment":"Decimal to octal","signature":"decoct(int $number )","inheritdoc":0,"modifier":[],"return":""},"deg2rad":{"params":{"$number":""},"docComment":"\n   Converts the number in degrees to the radian equivalent\n  ","signature":"deg2rad(float $number )","inheritdoc":0,"modifier":[],"return":""},"exp":{"params":{"$arg":""},"docComment":"Calculates the exponent of ","signature":"exp(float $arg )","inheritdoc":0,"modifier":[],"return":""},"expm1":{"params":{"$arg":""},"docComment":"\n   Returns exp(number) - 1, computed in a way that is accurate even\n   when the value of number is close to zero\n  ","signature":"expm1(float $arg )","inheritdoc":0,"modifier":[],"return":""},"floor":{"params":{"$value":""},"docComment":"Round fractions down","signature":"floor(float $value )","inheritdoc":0,"modifier":[],"return":""},"fmod":{"params":{"$x":"","$y":""},"docComment":"Returns the floating point remainder (modulo) of the division\n  of the arguments","signature":"fmod(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"getrandmax":{"params":[],"docComment":"Show largest possible random value","signature":"getrandmax( )","inheritdoc":0,"modifier":[],"return":""},"hexdec":{"params":{"$hex_string":""},"docComment":"Hexadecimal to decimal","signature":"hexdec(string $hex_string )","inheritdoc":0,"modifier":[],"return":""},"hypot":{"params":{"$x":"","$y":""},"docComment":"\n   Calculate the length of the hypotenuse of a right-angle triangle\n  ","signature":"hypot(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"is_finite":{"params":{"$val":""},"docComment":"Finds whether a value is a legal finite number","signature":"is_finite(float $val )","inheritdoc":0,"modifier":[],"return":""},"is_infinite":{"params":{"$val":""},"docComment":"Finds whether a value is infinite","signature":"is_infinite(float $val )","inheritdoc":0,"modifier":[],"return":""},"is_nan":{"params":{"$val":""},"docComment":"Finds whether a value is not a number","signature":"is_nan(float $val )","inheritdoc":0,"modifier":[],"return":""},"lcg_value":{"params":[],"docComment":"Combined linear congruential generator","signature":"lcg_value( )","inheritdoc":0,"modifier":[],"return":""},"log10":{"params":{"$arg":""},"docComment":"Base-10 logarithm","signature":"log10(float $arg )","inheritdoc":0,"modifier":[],"return":""},"log1p":{"params":{"$number":""},"docComment":"\n   Returns log(1 + number), computed in a way that is accurate even when\n   the value of number is close to zero\n  ","signature":"log1p(float $number )","inheritdoc":0,"modifier":[],"return":""},"log":{"params":{"$arg":"","$base":""},"docComment":"Natural logarithm","signature":"log(float $arg ,[float $base] )","inheritdoc":0,"modifier":[],"return":""},"max":{"params":{"$values":"","$value1":"","$value2":"","$...":""},"docComment":"Find highest value","signature":"max(mixed $value1 ,mixed $value2 ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"min":{"params":{"$values":"","$value1":"","$value2":"","$...":""},"docComment":"Find lowest value","signature":"min(mixed $value1 ,mixed $value2 ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"mt_getrandmax":{"params":[],"docComment":"Show largest possible random value","signature":"mt_getrandmax( )","inheritdoc":0,"modifier":[],"return":""},"mt_rand":{"params":{"$min":"","$max":""},"docComment":"Generate a better random value","signature":"mt_rand(int $min ,int $max )","inheritdoc":0,"modifier":[],"return":""},"mt_srand":{"params":{"$seed":""},"docComment":"Seed the better random number generator","signature":"mt_srand(int $seed )","inheritdoc":0,"modifier":[],"return":""},"octdec":{"params":{"$octal_string":""},"docComment":"Octal to decimal","signature":"octdec(string $octal_string )","inheritdoc":0,"modifier":[],"return":""},"pi":{"params":[],"docComment":"Get value of pi","signature":"pi( )","inheritdoc":0,"modifier":[],"return":""},"pow":{"params":{"$base":"","$exp":""},"docComment":"Exponential expression","signature":"pow(number $base ,number $exp )","inheritdoc":0,"modifier":[],"return":""},"rad2deg":{"params":{"$number":""},"docComment":"\n   Converts the radian number to the equivalent number in degrees\n  ","signature":"rad2deg(float $number )","inheritdoc":0,"modifier":[],"return":""},"rand":{"params":{"$min":"","$max":""},"docComment":"Generate a random integer","signature":"rand(int $min ,int $max )","inheritdoc":0,"modifier":[],"return":""},"round":{"params":{"$val":"","$precision":"","$mode":""},"docComment":"Rounds a float","signature":"round(float $val ,[int $precision] ,[int $mode] )","inheritdoc":0,"modifier":[],"return":""},"sin":{"params":{"$arg":""},"docComment":"Sine","signature":"sin(float $arg )","inheritdoc":0,"modifier":[],"return":""},"sinh":{"params":{"$arg":""},"docComment":"Hyperbolic sine","signature":"sinh(float $arg )","inheritdoc":0,"modifier":[],"return":""},"sqrt":{"params":{"$arg":""},"docComment":"Square root","signature":"sqrt(float $arg )","inheritdoc":0,"modifier":[],"return":""},"srand":{"params":{"$seed":""},"docComment":"Seed the random number generator","signature":"srand(int $seed )","inheritdoc":0,"modifier":[],"return":""},"tan":{"params":{"$arg":""},"docComment":"Tangent","signature":"tan(float $arg )","inheritdoc":0,"modifier":[],"return":""},"tanh":{"params":{"$arg":""},"docComment":"Hyperbolic tangent","signature":"tanh(float $arg )","inheritdoc":0,"modifier":[],"return":""},"connection_aborted":{"params":[],"docComment":"Check whether client disconnected","signature":"connection_aborted( )","inheritdoc":0,"modifier":[],"return":""},"connection_status":{"params":[],"docComment":"Returns connection status bitfield","signature":"connection_status( )","inheritdoc":0,"modifier":[],"return":""},"connection_timeout":{"params":[],"docComment":"Check if the script timed out","signature":"connection_timeout( )","inheritdoc":0,"modifier":[],"return":""},"constant":{"params":{"$name":""},"docComment":"Returns the value of a constant","signature":"constant(string $name )","inheritdoc":0,"modifier":[],"return":""},"define":{"params":{"$name":"","$value":"","$case_insensitive":""},"docComment":"Defines a named constant","signature":"define(string $name ,mixed $value ,[bool $case_insensitive] )","inheritdoc":0,"modifier":[],"return":""},"defined":{"params":{"$name":""},"docComment":"Checks whether a given named constant exists","signature":"defined(string $name )","inheritdoc":0,"modifier":[],"return":""},"die":{"params":[],"docComment":"Equivalent to ","signature":"","inheritdoc":0,"modifier":[],"return":""},"eval":{"params":{"$code":""},"docComment":"Evaluate a string as PHP code","signature":"eval(string $code )","inheritdoc":0,"modifier":[],"return":""},"exit":{"params":{"$status":""},"docComment":"Output a message and terminate the current script","signature":"exit(int $status )","inheritdoc":0,"modifier":[],"return":""},"get_browser":{"params":{"$user_agent":"","$return_array":""},"docComment":"Tells what the user's browser is capable of","signature":"get_browser(string $user_agent ,[bool $return_array] )","inheritdoc":0,"modifier":[],"return":""},"__halt_compiler":{"params":[],"docComment":"\n   Halts the compiler execution\n  ","signature":"__halt_compiler( )","inheritdoc":0,"modifier":[],"return":""},"highlight_file":{"params":{"$filename":"","$return":""},"docComment":"Syntax highlighting of a file","signature":"highlight_file(string $filename ,[bool $return] )","inheritdoc":0,"modifier":[],"return":""},"highlight_string":{"params":{"$str":"","$return":""},"docComment":"Syntax highlighting of a string","signature":"highlight_string(string $str ,[bool $return] )","inheritdoc":0,"modifier":[],"return":""},"ignore_user_abort":{"params":{"$value":""},"docComment":"Set whether a client disconnect should abort script execution","signature":"ignore_user_abort(string $value )","inheritdoc":0,"modifier":[],"return":""},"pack":{"params":{"$format":"","$args":"","$...":""},"docComment":"Pack data into binary string","signature":"pack(string $format ,mixed $args ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"php_check_syntax":{"params":{"$filename":"","&$error_message":""},"docComment":"\n   Check the PHP syntax of (and execute) the specified file\n  ","signature":"php_check_syntax(string $filename ,string &$error_message )","inheritdoc":0,"modifier":[],"return":""},"php_strip_whitespace":{"params":{"$filename":""},"docComment":"Return source with stripped comments and whitespace","signature":"php_strip_whitespace(string $filename )","inheritdoc":0,"modifier":[],"return":""},"show_source":{"params":{"$filename":"","$return":""},"docComment":"Syntax highlighting of a file","signature":"highlight_file(string $filename ,[bool $return] )","inheritdoc":0,"modifier":[],"return":""},"sleep":{"params":{"$seconds":""},"docComment":"Delay execution","signature":"sleep(int $seconds )","inheritdoc":0,"modifier":[],"return":""},"sys_getloadavg":{"params":[],"docComment":"Gets system load average","signature":"sys_getloadavg( )","inheritdoc":0,"modifier":[],"return":""},"time_nanosleep":{"params":{"$seconds":"","$nanoseconds":""},"docComment":"Delay for a number of seconds and nanoseconds","signature":"time_nanosleep(int $seconds ,int $nanoseconds )","inheritdoc":0,"modifier":[],"return":""},"time_sleep_until":{"params":{"$timestamp":""},"docComment":"\n   Make the script sleep until the specified time\n  ","signature":"time_sleep_until(float $timestamp )","inheritdoc":0,"modifier":[],"return":""},"uniqid":{"params":{"$prefix":"","$more_entropy":""},"docComment":"Generate a unique ID","signature":"uniqid([string $prefix] ,[bool $more_entropy] )","inheritdoc":0,"modifier":[],"return":""},"unpack":{"params":{"$format":"","$data":""},"docComment":"Unpack data from binary string","signature":"unpack(string $format ,string $data )","inheritdoc":0,"modifier":[],"return":""},"usleep":{"params":{"$micro_seconds":""},"docComment":"Delay execution in microseconds","signature":"usleep(int $micro_seconds )","inheritdoc":0,"modifier":[],"return":""},"checkdnsrr":{"params":{"$host":"","$type":""},"docComment":"Check DNS records corresponding to a given Internet host name or IP address","signature":"checkdnsrr(string $host ,[string $type] )","inheritdoc":0,"modifier":[],"return":""},"closelog":{"params":[],"docComment":"Close connection to system logger","signature":"closelog( )","inheritdoc":0,"modifier":[],"return":""},"define_syslog_variables":{"params":[],"docComment":"Initializes all syslog related variables","signature":"define_syslog_variables( )","inheritdoc":0,"modifier":[],"return":""},"dns_check_record":{"params":{"$host":"","$type":""},"docComment":"Check DNS records corresponding to a given Internet host name or IP address","signature":"checkdnsrr(string $host ,[string $type] )","inheritdoc":0,"modifier":[],"return":""},"dns_get_mx":{"params":{"$hostname":"","&$mxhosts":"","&$weight":""},"docComment":"Get MX records corresponding to a given Internet host name","signature":"getmxrr(string $hostname ,array &$mxhosts ,array &$weight )","inheritdoc":0,"modifier":[],"return":""},"dns_get_record":{"params":{"$hostname":"","$type":"","&$authns":"","&$addtl":"","&$raw":""},"docComment":"Fetch DNS Resource Records associated with a hostname","signature":"dns_get_record(string $hostname ,[int $type] ,array &$authns ,array &$addtl ,[bool &$raw] )","inheritdoc":0,"modifier":[],"return":""},"fsockopen":{"params":{"$hostname":"","$port":"","&$errno":"","&$errstr":"","$timeout":""},"docComment":"Open Internet or Unix domain socket connection","signature":"fsockopen(string $hostname ,[int $port] ,int &$errno ,string &$errstr ,[float $timeout] )","inheritdoc":0,"modifier":[],"return":""},"gethostbyaddr":{"params":{"$ip_address":""},"docComment":"\n   Get the Internet host name corresponding to a given IP address\n  ","signature":"gethostbyaddr(string $ip_address )","inheritdoc":0,"modifier":[],"return":""},"gethostbyname":{"params":{"$hostname":""},"docComment":"\n   Get the IPv4 address corresponding to a given Internet host name\n  ","signature":"gethostbyname(string $hostname )","inheritdoc":0,"modifier":[],"return":""},"gethostbynamel":{"params":{"$hostname":""},"docComment":"\n   Get a list of IPv4 addresses corresponding to a given Internet host\n   name\n  ","signature":"gethostbynamel(string $hostname )","inheritdoc":0,"modifier":[],"return":""},"gethostname":{"params":[],"docComment":"Gets the host name","signature":"gethostname( )","inheritdoc":0,"modifier":[],"return":""},"getmxrr":{"params":{"$hostname":"","&$mxhosts":"","&$weight":""},"docComment":"Get MX records corresponding to a given Internet host name","signature":"getmxrr(string $hostname ,array &$mxhosts ,array &$weight )","inheritdoc":0,"modifier":[],"return":""},"getprotobyname":{"params":{"$name":""},"docComment":"Get protocol number associated with protocol name","signature":"getprotobyname(string $name )","inheritdoc":0,"modifier":[],"return":""},"getprotobynumber":{"params":{"$number":""},"docComment":"Get protocol name associated with protocol number","signature":"getprotobynumber(int $number )","inheritdoc":0,"modifier":[],"return":""},"getservbyname":{"params":{"$service":"","$protocol":""},"docComment":"Get port number associated with an Internet service and protocol","signature":"getservbyname(string $service ,string $protocol )","inheritdoc":0,"modifier":[],"return":""},"getservbyport":{"params":{"$port":"","$protocol":""},"docComment":"Get Internet service which corresponds to port and protocol","signature":"getservbyport(int $port ,string $protocol )","inheritdoc":0,"modifier":[],"return":""},"header_register_callback":{"params":{"$callback":""},"docComment":"Call a header function","signature":"header_register_callback(callable $callback )","inheritdoc":0,"modifier":[],"return":""},"header_remove":{"params":{"$name":""},"docComment":"Remove previously set headers","signature":"header_remove(string $name )","inheritdoc":0,"modifier":[],"return":""},"header":{"params":{"$string":"","$replace":"","$http_response_code":""},"docComment":"Send a raw HTTP header","signature":"header(string $string ,[bool $replace] ,int $http_response_code )","inheritdoc":0,"modifier":[],"return":""},"headers_list":{"params":[],"docComment":"Returns a list of response headers sent (or ready to send)","signature":"headers_list( )","inheritdoc":0,"modifier":[],"return":""},"headers_sent":{"params":{"&$file":"","&$line":""},"docComment":"Checks if or where headers have been sent","signature":"headers_sent(string &$file ,int &$line )","inheritdoc":0,"modifier":[],"return":""},"http_response_code":{"params":{"$response_code":""},"docComment":"Get or Set the HTTP response code","signature":"http_response_code(int $response_code )","inheritdoc":0,"modifier":[],"return":""},"inet_ntop":{"params":{"$in_addr":""},"docComment":"Converts a packed internet address to a human readable representation","signature":"inet_ntop(string $in_addr )","inheritdoc":0,"modifier":[],"return":""},"inet_pton":{"params":{"$address":""},"docComment":"Converts a human readable IP address to its packed in_addr representation","signature":"inet_pton(string $address )","inheritdoc":0,"modifier":[],"return":""},"ip2long":{"params":{"$ip_address":""},"docComment":"Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address","signature":"ip2long(string $ip_address )","inheritdoc":0,"modifier":[],"return":""},"long2ip":{"params":{"$proper_address":""},"docComment":"Converts an (IPv4) Internet network address into a string in Internet standard dotted format","signature":"long2ip(string $proper_address )","inheritdoc":0,"modifier":[],"return":""},"openlog":{"params":{"$ident":"","$option":"","$facility":""},"docComment":"Open connection to system logger","signature":"openlog(string $ident ,int $option ,int $facility )","inheritdoc":0,"modifier":[],"return":""},"pfsockopen":{"params":{"$hostname":"","$port":"","&$errno":"","&$errstr":"","$timeout":""},"docComment":"Open persistent Internet or Unix domain socket connection","signature":"pfsockopen(string $hostname ,[int $port] ,int &$errno ,string &$errstr ,[float $timeout] )","inheritdoc":0,"modifier":[],"return":""},"setcookie":{"params":{"$name":"","$value":"","$expire":"","$path":"","$domain":"","$secure":"","$httponly":""},"docComment":"Send a cookie","signature":"setcookie(string $name ,string $value ,[int $expire] ,string $path ,string $domain ,[bool $secure] ,[bool $httponly] )","inheritdoc":0,"modifier":[],"return":""},"setrawcookie":{"params":{"$name":"","$value":"","$expire":"","$path":"","$domain":"","$secure":"","$httponly":""},"docComment":"Send a cookie without urlencoding the cookie value","signature":"setrawcookie(string $name ,string $value ,[int $expire] ,string $path ,string $domain ,[bool $secure] ,[bool $httponly] )","inheritdoc":0,"modifier":[],"return":""},"socket_get_status":{"params":{"$stream":""},"docComment":"Retrieves header\/meta data from streams\/file pointers","signature":"stream_get_meta_data(resource $stream )","inheritdoc":0,"modifier":[],"return":""},"socket_set_blocking":{"params":{"$stream":"","$mode":""},"docComment":"Set blocking\/non-blocking mode on a stream","signature":"stream_set_blocking(resource $stream ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"socket_set_timeout":{"params":{"$stream":"","$seconds":"","$microseconds":""},"docComment":"Set timeout period on a stream","signature":"stream_set_timeout(resource $stream ,int $seconds ,[int $microseconds] )","inheritdoc":0,"modifier":[],"return":""},"syslog":{"params":{"$priority":"","$message":""},"docComment":"Generate a system log message","signature":"syslog(int $priority ,string $message )","inheritdoc":0,"modifier":[],"return":""},"flush":{"params":[],"docComment":"Flush the output buffer","signature":"flush( )","inheritdoc":0,"modifier":[],"return":""},"ob_clean":{"params":[],"docComment":"Clean (erase) the output buffer","signature":"ob_clean( )","inheritdoc":0,"modifier":[],"return":""},"ob_end_clean":{"params":[],"docComment":"Clean (erase) the output buffer and turn off output buffering","signature":"ob_end_clean( )","inheritdoc":0,"modifier":[],"return":""},"ob_end_flush":{"params":[],"docComment":"Flush (send) the output buffer and turn off output buffering","signature":"ob_end_flush( )","inheritdoc":0,"modifier":[],"return":""},"ob_flush":{"params":[],"docComment":"Flush (send) the output buffer","signature":"ob_flush( )","inheritdoc":0,"modifier":[],"return":""},"ob_get_clean":{"params":[],"docComment":"Get current buffer contents and delete current output buffer","signature":"ob_get_clean( )","inheritdoc":0,"modifier":[],"return":""},"ob_get_contents":{"params":[],"docComment":"Return the contents of the output buffer","signature":"ob_get_contents( )","inheritdoc":0,"modifier":[],"return":""},"ob_get_flush":{"params":[],"docComment":"Flush the output buffer, return it as a string and turn off output buffering","signature":"ob_get_flush( )","inheritdoc":0,"modifier":[],"return":""},"ob_get_length":{"params":[],"docComment":"Return the length of the output buffer","signature":"ob_get_length( )","inheritdoc":0,"modifier":[],"return":""},"ob_get_level":{"params":[],"docComment":"Return the nesting level of the output buffering mechanism","signature":"ob_get_level( )","inheritdoc":0,"modifier":[],"return":""},"ob_get_status":{"params":{"$full_status":""},"docComment":"Get status of output buffers","signature":"ob_get_status([bool $full_status] )","inheritdoc":0,"modifier":[],"return":""},"ob_gzhandler":{"params":{"$buffer":"","$mode":""},"docComment":"ob_start callback function to gzip output buffer","signature":"ob_gzhandler(string $buffer ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"ob_implicit_flush":{"params":{"$flag":""},"docComment":"Turn implicit flush on\/off","signature":"ob_implicit_flush([int $flag] )","inheritdoc":0,"modifier":[],"return":""},"ob_list_handlers":{"params":[],"docComment":"List all output handlers in use","signature":"ob_list_handlers( )","inheritdoc":0,"modifier":[],"return":""},"ob_start":{"params":{"$output_callback":"","$chunk_size":"","$erase":""},"docComment":"Turn on output buffering","signature":"ob_start(callable $output_callback ,[int $chunk_size] ,[bool $erase] )","inheritdoc":0,"modifier":[],"return":""},"output_add_rewrite_var":{"params":{"$name":"","$value":""},"docComment":"Add URL rewriter values","signature":"output_add_rewrite_var(string $name ,string $value )","inheritdoc":0,"modifier":[],"return":""},"output_reset_rewrite_vars":{"params":[],"docComment":"Reset URL rewriter values","signature":"output_reset_rewrite_vars( )","inheritdoc":0,"modifier":[],"return":""},"password_get_info":{"params":{"$hash":""},"docComment":"Returns information about the given hash","signature":"password_get_info(string $hash )","inheritdoc":0,"modifier":[],"return":""},"password_hash":{"params":{"$password":"","$algo":"","$options":""},"docComment":"Creates a password hash","signature":"password_hash(string $password ,integer $algo ,array $options )","inheritdoc":0,"modifier":[],"return":""},"password_needs_rehash":{"params":{"$hash":"","$algo":"","$options":""},"docComment":"Checks if the given hash matches the given options","signature":"password_needs_rehash(string $hash ,string $algo ,string $options )","inheritdoc":0,"modifier":[],"return":""},"password_verify":{"params":{"$password":"","$hash":""},"docComment":"Verifies that a password matches a hash","signature":"password_verify(string $password ,string $hash )","inheritdoc":0,"modifier":[],"return":""},"ereg_replace":{"params":{"$pattern":"","$replacement":"","$string":""},"docComment":"Replace regular expression","signature":"ereg_replace(string $pattern ,string $replacement ,string $string )","inheritdoc":0,"modifier":[],"return":""},"ereg":{"params":{"$pattern":"","$string":"","&$regs":""},"docComment":"Regular expression match","signature":"ereg(string $pattern ,string $string ,array &$regs )","inheritdoc":0,"modifier":[],"return":""},"eregi_replace":{"params":{"$pattern":"","$replacement":"","$string":""},"docComment":"Replace regular expression case insensitive","signature":"eregi_replace(string $pattern ,string $replacement ,string $string )","inheritdoc":0,"modifier":[],"return":""},"eregi":{"params":{"$pattern":"","$string":"","&$regs":""},"docComment":"Case insensitive regular expression match","signature":"eregi(string $pattern ,string $string ,array &$regs )","inheritdoc":0,"modifier":[],"return":""},"split":{"params":{"$pattern":"","$string":"","$limit":""},"docComment":"Split string into array by regular expression","signature":"split(string $pattern ,string $string ,[int $limit] )","inheritdoc":0,"modifier":[],"return":""},"spliti":{"params":{"$pattern":"","$string":"","$limit":""},"docComment":"Split string into array by regular expression case insensitive","signature":"spliti(string $pattern ,string $string ,[int $limit] )","inheritdoc":0,"modifier":[],"return":""},"sql_regcase":{"params":{"$string":""},"docComment":"Make regular expression for case insensitive match","signature":"sql_regcase(string $string )","inheritdoc":0,"modifier":[],"return":""},"session_cache_expire":{"params":{"$new_cache_expire":""},"docComment":"Return current cache expire","signature":"session_cache_expire(string $new_cache_expire )","inheritdoc":0,"modifier":[],"return":""},"session_cache_limiter":{"params":{"$cache_limiter":""},"docComment":"Get and\/or set the current cache limiter","signature":"session_cache_limiter(string $cache_limiter )","inheritdoc":0,"modifier":[],"return":""},"session_commit":{"params":[],"docComment":"Write session data and end session","signature":"session_write_close( )","inheritdoc":0,"modifier":[],"return":""},"session_decode":{"params":{"$data":""},"docComment":"Decodes session data from a session encoded string","signature":"session_decode(string $data )","inheritdoc":0,"modifier":[],"return":""},"session_destroy":{"params":[],"docComment":"Destroys all data registered to a session","signature":"session_destroy( )","inheritdoc":0,"modifier":[],"return":""},"session_encode":{"params":[],"docComment":"Encodes the current session data as a session encoded string","signature":"session_encode( )","inheritdoc":0,"modifier":[],"return":""},"session_get_cookie_params":{"params":[],"docComment":"Get the session cookie parameters","signature":"session_get_cookie_params( )","inheritdoc":0,"modifier":[],"return":""},"session_id":{"params":{"$id":""},"docComment":"Get and\/or set the current session id","signature":"session_id(string $id )","inheritdoc":0,"modifier":[],"return":""},"session_is_registered":{"params":{"$name":""},"docComment":"Find out whether a global variable is registered in a session","signature":"session_is_registered(string $name )","inheritdoc":0,"modifier":[],"return":""},"session_module_name":{"params":{"$module":""},"docComment":"Get and\/or set the current session module","signature":"session_module_name(string $module )","inheritdoc":0,"modifier":[],"return":""},"session_name":{"params":{"$name":""},"docComment":"Get and\/or set the current session name","signature":"session_name(string $name )","inheritdoc":0,"modifier":[],"return":""},"session_regenerate_id":{"params":{"$delete_old_session":""},"docComment":"\n   Update the current session id with a newly generated one\n  ","signature":"session_regenerate_id([bool $delete_old_session] )","inheritdoc":0,"modifier":[],"return":""},"session_register_shutdown":{"params":[],"docComment":"Session shutdown function","signature":"session_register_shutdown( )","inheritdoc":0,"modifier":[],"return":""},"session_register":{"params":{"$name":"","$...":""},"docComment":"Register one or more global variables with the current session","signature":"session_register(mixed $name ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"session_save_path":{"params":{"$path":""},"docComment":"Get and\/or set the current session save path","signature":"session_save_path(string $path )","inheritdoc":0,"modifier":[],"return":""},"session_set_cookie_params":{"params":{"$lifetime":"","$path":"","$domain":"","$secure":"","$httponly":""},"docComment":"Set the session cookie parameters","signature":"session_set_cookie_params(int $lifetime ,string $path ,string $domain ,[bool $secure] ,[bool $httponly] )","inheritdoc":0,"modifier":[],"return":""},"session_set_save_handler":{"params":{"$open":"","$close":"","$read":"","$write":"","$destroy":"","$gc":"","$sessionhandler":"SessionHandlerInterface","$register_shutdown":""},"docComment":"Sets user-level session storage functions","signature":"session_set_save_handler(SessionHandlerInterface $sessionhandler ,[bool $register_shutdown] )","inheritdoc":0,"modifier":[],"return":""},"session_start":{"params":[],"docComment":"Start new or resume existing session","signature":"session_start( )","inheritdoc":0,"modifier":[],"return":""},"session_status":{"params":[],"docComment":"Returns the current session status","signature":"session_status( )","inheritdoc":0,"modifier":[],"return":""},"session_unregister":{"params":{"$name":""},"docComment":"Unregister a global variable from the current session","signature":"session_unregister(string $name )","inheritdoc":0,"modifier":[],"return":""},"session_unset":{"params":[],"docComment":"Free all session variables","signature":"session_unset( )","inheritdoc":0,"modifier":[],"return":""},"session_write_close":{"params":[],"docComment":"Write session data and end session","signature":"session_write_close( )","inheritdoc":0,"modifier":[],"return":""},"class_implements":{"params":{"$class":"","$autoload":""},"docComment":"\n   Return the interfaces which are implemented by the given class\n  ","signature":"class_implements(mixed $class ,[bool $autoload] )","inheritdoc":0,"modifier":[],"return":""},"class_parents":{"params":{"$class":"","$autoload":""},"docComment":"\n   Return the parent classes of the given class\n  ","signature":"class_parents(mixed $class ,[bool $autoload] )","inheritdoc":0,"modifier":[],"return":""},"class_uses":{"params":{"$class":"","$autoload":""},"docComment":"\n   Return the traits used by the given class\n  ","signature":"class_uses(mixed $class ,[bool $autoload] )","inheritdoc":0,"modifier":[],"return":""},"iterator_apply":{"params":{"$iterator":"Traversable","$function":"","$args":""},"docComment":"Call a function for every element in an iterator","signature":"iterator_apply(Traversable $iterator ,callable $function ,array $args )","inheritdoc":0,"modifier":[],"return":""},"iterator_count":{"params":{"$iterator":"Traversable"},"docComment":"Count the elements in an iterator","signature":"iterator_count(Traversable $iterator )","inheritdoc":0,"modifier":[],"return":""},"iterator_to_array":{"params":{"$iterator":"Traversable","$use_keys":""},"docComment":"Copy the iterator into an array","signature":"iterator_to_array(Traversable $iterator ,[bool $use_keys] )","inheritdoc":0,"modifier":[],"return":""},"spl_autoload_call":{"params":{"$class_name":""},"docComment":"Try all registered __autoload() function to load the requested class","signature":"spl_autoload_call(string $class_name )","inheritdoc":0,"modifier":[],"return":""},"spl_autoload_extensions":{"params":{"$file_extensions":""},"docComment":"Register and return default file extensions for spl_autoload","signature":"spl_autoload_extensions(string $file_extensions )","inheritdoc":0,"modifier":[],"return":""},"spl_autoload_functions":{"params":[],"docComment":"Return all registered __autoload() functions","signature":"spl_autoload_functions( )","inheritdoc":0,"modifier":[],"return":""},"spl_autoload_register":{"params":{"$autoload_function":"","$throw":"","$prepend":""},"docComment":"Register given function as __autoload() implementation","signature":"spl_autoload_register(callable $autoload_function ,[bool $throw] ,[bool $prepend] )","inheritdoc":0,"modifier":[],"return":""},"spl_autoload_unregister":{"params":{"$autoload_function":""},"docComment":"Unregister given function as __autoload() implementation","signature":"spl_autoload_unregister(mixed $autoload_function )","inheritdoc":0,"modifier":[],"return":""},"spl_autoload":{"params":{"$class_name":"","$file_extensions":""},"docComment":"Default implementation for __autoload()","signature":"spl_autoload(string $class_name ,[string $file_extensions] )","inheritdoc":0,"modifier":[],"return":""},"spl_classes":{"params":[],"docComment":"Return available SPL classes","signature":"spl_classes( )","inheritdoc":0,"modifier":[],"return":""},"spl_object_hash":{"params":{"$obj":""},"docComment":"\n   Return hash id for given object\n  ","signature":"spl_object_hash(object $obj )","inheritdoc":0,"modifier":[],"return":""},"set_socket_blocking":{"params":{"$stream":"","$mode":""},"docComment":"Set blocking\/non-blocking mode on a stream","signature":"stream_set_blocking(resource $stream ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"stream_bucket_append":{"params":{"$brigade":"","$bucket":""},"docComment":"\n   Append bucket to brigade\n  ","signature":"stream_bucket_append(resource $brigade ,resource $bucket )","inheritdoc":0,"modifier":[],"return":""},"stream_bucket_make_writeable":{"params":{"$brigade":""},"docComment":"\n   Return a bucket object from the brigade for operating on\n  ","signature":"stream_bucket_make_writeable(resource $brigade )","inheritdoc":0,"modifier":[],"return":""},"stream_bucket_new":{"params":{"$stream":"","$buffer":""},"docComment":"\n   Create a new bucket for use on the current stream\n  ","signature":"stream_bucket_new(resource $stream ,string $buffer )","inheritdoc":0,"modifier":[],"return":""},"stream_bucket_prepend":{"params":{"$brigade":"","$bucket":""},"docComment":"\n   Prepend bucket to brigade\n  ","signature":"stream_bucket_prepend(resource $brigade ,resource $bucket )","inheritdoc":0,"modifier":[],"return":""},"stream_context_create":{"params":{"$options":"","$params":""},"docComment":"Creates a stream context","signature":"stream_context_create(array $options ,array $params )","inheritdoc":0,"modifier":[],"return":""},"stream_context_get_default":{"params":{"$options":""},"docComment":"Retrieve the default stream context","signature":"stream_context_get_default(array $options )","inheritdoc":0,"modifier":[],"return":""},"stream_context_get_options":{"params":{"$stream_or_context":""},"docComment":"Retrieve options for a stream\/wrapper\/context","signature":"stream_context_get_options(resource $stream_or_context )","inheritdoc":0,"modifier":[],"return":""},"stream_context_get_params":{"params":{"$stream_or_context":""},"docComment":"Retrieves parameters from a context","signature":"stream_context_get_params(resource $stream_or_context )","inheritdoc":0,"modifier":[],"return":""},"stream_context_set_default":{"params":{"$options":""},"docComment":"Set the default stream context","signature":"stream_context_set_default(array $options )","inheritdoc":0,"modifier":[],"return":""},"stream_context_set_option":{"params":{"$stream_or_context":"","$wrapper":"","$option":"","$value":"","$options":""},"docComment":"Sets an option for a stream\/wrapper\/context","signature":"stream_context_set_option(resource $stream_or_context ,array $options )","inheritdoc":0,"modifier":[],"return":""},"stream_context_set_params":{"params":{"$stream_or_context":"","$params":""},"docComment":"Set parameters for a stream\/wrapper\/context","signature":"stream_context_set_params(resource $stream_or_context ,array $params )","inheritdoc":0,"modifier":[],"return":""},"stream_copy_to_stream":{"params":{"$source":"","$dest":"","$maxlength":"","$offset":""},"docComment":"Copies data from one stream to another","signature":"stream_copy_to_stream(resource $source ,resource $dest ,[int $maxlength] ,[int $offset] )","inheritdoc":0,"modifier":[],"return":""},"stream_encoding":{"params":{"$stream":"","$encoding":""},"docComment":"Set character set for stream encoding","signature":"stream_encoding(resource $stream ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"stream_filter_append":{"params":{"$stream":"","$filtername":"","$read_write":"","$params":""},"docComment":"Attach a filter to a stream","signature":"stream_filter_append(resource $stream ,string $filtername ,int $read_write ,mixed $params )","inheritdoc":0,"modifier":[],"return":""},"stream_filter_prepend":{"params":{"$stream":"","$filtername":"","$read_write":"","$params":""},"docComment":"Attach a filter to a stream","signature":"stream_filter_prepend(resource $stream ,string $filtername ,int $read_write ,mixed $params )","inheritdoc":0,"modifier":[],"return":""},"stream_filter_register":{"params":{"$filtername":"","$classname":""},"docComment":"Register a user defined stream filter","signature":"stream_filter_register(string $filtername ,string $classname )","inheritdoc":0,"modifier":[],"return":""},"stream_filter_remove":{"params":{"$stream_filter":""},"docComment":"Remove a filter from a stream","signature":"stream_filter_remove(resource $stream_filter )","inheritdoc":0,"modifier":[],"return":""},"stream_get_contents":{"params":{"$handle":"","$maxlength":"","$offset":""},"docComment":"Reads remainder of a stream into a string","signature":"stream_get_contents(resource $handle ,[int $maxlength] ,[int $offset] )","inheritdoc":0,"modifier":[],"return":""},"stream_get_filters":{"params":[],"docComment":"Retrieve list of registered filters","signature":"stream_get_filters( )","inheritdoc":0,"modifier":[],"return":""},"stream_get_line":{"params":{"$handle":"","$length":"","$ending":""},"docComment":"Gets line from stream resource up to a given delimiter","signature":"stream_get_line(resource $handle ,int $length ,string $ending )","inheritdoc":0,"modifier":[],"return":""},"stream_get_meta_data":{"params":{"$stream":""},"docComment":"Retrieves header\/meta data from streams\/file pointers","signature":"stream_get_meta_data(resource $stream )","inheritdoc":0,"modifier":[],"return":""},"stream_get_transports":{"params":[],"docComment":"Retrieve list of registered socket transports","signature":"stream_get_transports( )","inheritdoc":0,"modifier":[],"return":""},"stream_get_wrappers":{"params":[],"docComment":"Retrieve list of registered streams","signature":"stream_get_wrappers( )","inheritdoc":0,"modifier":[],"return":""},"stream_is_local":{"params":{"$stream_or_url":""},"docComment":"Checks if a stream is a local stream","signature":"stream_is_local(mixed $stream_or_url )","inheritdoc":0,"modifier":[],"return":""},"stream_notification_callback":{"params":{"$notification_code":"","$severity":"","$message":"","$message_code":"","$bytes_transferred":"","$bytes_max":""},"docComment":"A callback function for the  context paramater","signature":"(int $notification_code ,int $severity ,string $message ,int $message_code ,int $bytes_transferred ,int $bytes_max )","inheritdoc":0,"modifier":[],"return":""},"stream_register_wrapper":{"params":{"$protocol":"","$classname":"","$flags":""},"docComment":"Register a URL wrapper implemented as a PHP class","signature":"stream_wrapper_register(string $protocol ,string $classname ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"stream_resolve_include_path":{"params":{"$filename":""},"docComment":"\n   Resolve filename against the include path\n  ","signature":"stream_resolve_include_path(string $filename )","inheritdoc":0,"modifier":[],"return":""},"stream_select":{"params":{"&$read":"","&$write":"","&$except":"","$tv_sec":"","$tv_usec":""},"docComment":"Runs the equivalent of the select() system call on the given\n   arrays of streams with a timeout specified by tv_sec and tv_usec ","signature":"stream_select(array &$read ,array &$write ,array &$except ,int $tv_sec ,[int $tv_usec] )","inheritdoc":0,"modifier":[],"return":""},"stream_set_blocking":{"params":{"$stream":"","$mode":""},"docComment":"Set blocking\/non-blocking mode on a stream","signature":"stream_set_blocking(resource $stream ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"stream_set_chunk_size":{"params":{"$fp":"","$chunk_size":""},"docComment":"Set the stream chunk size","signature":"stream_set_chunk_size(resource $fp ,int $chunk_size )","inheritdoc":0,"modifier":[],"return":""},"stream_set_read_buffer":{"params":{"$stream":"","$buffer":""},"docComment":"Set read file buffering on the given stream","signature":"stream_set_read_buffer(resource $stream ,int $buffer )","inheritdoc":0,"modifier":[],"return":""},"stream_set_timeout":{"params":{"$stream":"","$seconds":"","$microseconds":""},"docComment":"Set timeout period on a stream","signature":"stream_set_timeout(resource $stream ,int $seconds ,[int $microseconds] )","inheritdoc":0,"modifier":[],"return":""},"stream_set_write_buffer":{"params":{"$stream":"","$buffer":""},"docComment":"Sets write file buffering on the given stream","signature":"stream_set_write_buffer(resource $stream ,int $buffer )","inheritdoc":0,"modifier":[],"return":""},"stream_socket_accept":{"params":{"$server_socket":"","$timeout":"","&$peername":""},"docComment":"Accept a connection on a socket created by  ","signature":"stream_socket_accept(resource $server_socket ,[float $timeout] ,string &$peername )","inheritdoc":0,"modifier":[],"return":""},"stream_socket_client":{"params":{"$remote_socket":"","&$errno":"","&$errstr":"","$timeout":"","$flags":"","$context":""},"docComment":"Open Internet or Unix domain socket connection","signature":"stream_socket_client(string $remote_socket ,int &$errno ,string &$errstr ,[float $timeout] ,[int $flags] ,resource $context )","inheritdoc":0,"modifier":[],"return":""},"stream_socket_enable_crypto":{"params":{"$stream":"","$enable":"","$crypto_type":"","$session_stream":""},"docComment":"Turns encryption on\/off on an already connected socket","signature":"stream_socket_enable_crypto(resource $stream ,bool $enable ,int $crypto_type ,resource $session_stream )","inheritdoc":0,"modifier":[],"return":""},"stream_socket_get_name":{"params":{"$handle":"","$want_peer":""},"docComment":"Retrieve the name of the local or remote sockets","signature":"stream_socket_get_name(resource $handle ,bool $want_peer )","inheritdoc":0,"modifier":[],"return":""},"stream_socket_pair":{"params":{"$domain":"","$type":"","$protocol":""},"docComment":"\n   Creates a pair of connected, indistinguishable socket streams\n  ","signature":"stream_socket_pair(int $domain ,int $type ,int $protocol )","inheritdoc":0,"modifier":[],"return":""},"stream_socket_recvfrom":{"params":{"$socket":"","$length":"","$flags":"","&$address":""},"docComment":"Receives data from a socket, connected or not ","signature":"stream_socket_recvfrom(resource $socket ,int $length ,[int $flags] ,string &$address )","inheritdoc":0,"modifier":[],"return":""},"stream_socket_sendto":{"params":{"$socket":"","$data":"","$flags":"","$address":""},"docComment":"Sends a message to a socket, whether it is connected or not ","signature":"stream_socket_sendto(resource $socket ,string $data ,[int $flags] ,string $address )","inheritdoc":0,"modifier":[],"return":""},"stream_socket_server":{"params":{"$local_socket":"","&$errno":"","&$errstr":"","$flags":"","$context":""},"docComment":"Create an Internet or Unix domain server socket","signature":"stream_socket_server(string $local_socket ,int &$errno ,string &$errstr ,[int $flags] ,resource $context )","inheritdoc":0,"modifier":[],"return":""},"stream_socket_shutdown":{"params":{"$stream":"","$how":""},"docComment":"Shutdown a full-duplex connection","signature":"stream_socket_shutdown(resource $stream ,int $how )","inheritdoc":0,"modifier":[],"return":""},"stream_supports_lock":{"params":{"$stream":""},"docComment":"Tells whether the stream supports locking.","signature":"stream_supports_lock(resource $stream )","inheritdoc":0,"modifier":[],"return":""},"stream_wrapper_register":{"params":{"$protocol":"","$classname":"","$flags":""},"docComment":"Register a URL wrapper implemented as a PHP class","signature":"stream_wrapper_register(string $protocol ,string $classname ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"stream_wrapper_restore":{"params":{"$protocol":""},"docComment":"Restores a previously unregistered built-in wrapper","signature":"stream_wrapper_restore(string $protocol )","inheritdoc":0,"modifier":[],"return":""},"stream_wrapper_unregister":{"params":{"$protocol":""},"docComment":"Unregister a URL wrapper","signature":"stream_wrapper_unregister(string $protocol )","inheritdoc":0,"modifier":[],"return":""},"addcslashes":{"params":{"$str":"","$charlist":""},"docComment":"Quote string with slashes in a C style","signature":"addcslashes(string $str ,string $charlist )","inheritdoc":0,"modifier":[],"return":""},"addslashes":{"params":{"$str":""},"docComment":"Quote string with slashes","signature":"addslashes(string $str )","inheritdoc":0,"modifier":[],"return":""},"bin2hex":{"params":{"$str":""},"docComment":"Convert binary data into hexadecimal representation","signature":"bin2hex(string $str )","inheritdoc":0,"modifier":[],"return":""},"chop":{"params":{"$str":"","$charlist":""},"docComment":"Strip whitespace (or other characters) from the end of a string","signature":"rtrim(string $str ,string $charlist )","inheritdoc":0,"modifier":[],"return":""},"chr":{"params":{"$ascii":""},"docComment":"Return a specific character","signature":"chr(int $ascii )","inheritdoc":0,"modifier":[],"return":""},"chunk_split":{"params":{"$body":"","$chunklen":"","$end":""},"docComment":"Split a string into smaller chunks","signature":"chunk_split(string $body ,[int $chunklen] ,[string $end] )","inheritdoc":0,"modifier":[],"return":""},"convert_cyr_string":{"params":{"$str":"","$from":"","$to":""},"docComment":"Convert from one Cyrillic character set to another","signature":"convert_cyr_string(string $str ,string $from ,string $to )","inheritdoc":0,"modifier":[],"return":""},"convert_uudecode":{"params":{"$data":""},"docComment":"Decode a uuencoded string","signature":"convert_uudecode(string $data )","inheritdoc":0,"modifier":[],"return":""},"convert_uuencode":{"params":{"$data":""},"docComment":"Uuencode a string","signature":"convert_uuencode(string $data )","inheritdoc":0,"modifier":[],"return":""},"count_chars":{"params":{"$string":"","$mode":""},"docComment":"Return information about characters used in a string","signature":"count_chars(string $string ,[int $mode] )","inheritdoc":0,"modifier":[],"return":""},"crc32":{"params":{"$str":""},"docComment":"Calculates the crc32 polynomial of a string","signature":"crc32(string $str )","inheritdoc":0,"modifier":[],"return":""},"crypt":{"params":{"$str":"","$salt":""},"docComment":"One-way string hashing","signature":"crypt(string $str ,string $salt )","inheritdoc":0,"modifier":[],"return":""},"echo":{"params":{"$arg1":"","$...":""},"docComment":"Output one or more strings","signature":"echo(string $arg1 ,string $... )","inheritdoc":0,"modifier":[],"return":""},"explode":{"params":{"$delimiter":"","$string":"","$limit":""},"docComment":"Split a string by string","signature":"explode(string $delimiter ,string $string ,int $limit )","inheritdoc":0,"modifier":[],"return":""},"fprintf":{"params":{"$handle":"","$format":"","$args":"","$...":""},"docComment":"Write a formatted string to a stream","signature":"fprintf(resource $handle ,string $format ,mixed $args ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"get_html_translation_table":{"params":{"$table":"","$flags":"","$encoding":""},"docComment":"Returns the translation table used by   and  ","signature":"get_html_translation_table([int $table] ,[int $flags] ,[string $encoding] )","inheritdoc":0,"modifier":[],"return":""},"hebrev":{"params":{"$hebrew_text":"","$max_chars_per_line":""},"docComment":"Convert logical Hebrew text to visual text","signature":"hebrev(string $hebrew_text ,[int $max_chars_per_line] )","inheritdoc":0,"modifier":[],"return":""},"hebrevc":{"params":{"$hebrew_text":"","$max_chars_per_line":""},"docComment":"Convert logical Hebrew text to visual text with newline conversion","signature":"hebrevc(string $hebrew_text ,[int $max_chars_per_line] )","inheritdoc":0,"modifier":[],"return":""},"hex2bin":{"params":{"$data":""},"docComment":"Decodes a hexadecimally encoded binary string","signature":"hex2bin(string $data )","inheritdoc":0,"modifier":[],"return":""},"html_entity_decode":{"params":{"$string":"","$flags":"","$encoding":""},"docComment":"Convert all HTML entities to their applicable characters","signature":"html_entity_decode(string $string ,[int $flags] ,[string $encoding] )","inheritdoc":0,"modifier":[],"return":""},"htmlentities":{"params":{"$string":"","$flags":"","$encoding":"","$double_encode":""},"docComment":"Convert all applicable characters to HTML entities","signature":"htmlentities(string $string ,[int $flags] ,[string $encoding] ,[bool $double_encode] )","inheritdoc":0,"modifier":[],"return":""},"htmlspecialchars_decode":{"params":{"$string":"","$flags":""},"docComment":"\n   Convert special HTML entities back to characters\n  ","signature":"htmlspecialchars_decode(string $string ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"htmlspecialchars":{"params":{"$string":"","$flags":"","$encoding":"","$double_encode":""},"docComment":"Convert special characters to HTML entities","signature":"htmlspecialchars(string $string ,[int $flags] ,[string $encoding] ,[bool $double_encode] )","inheritdoc":0,"modifier":[],"return":""},"implode":{"params":{"$glue":"","$pieces":""},"docComment":"Join array elements with a string","signature":"implode(array $pieces )","inheritdoc":0,"modifier":[],"return":""},"join":{"params":{"$glue":"","$pieces":""},"docComment":"Join array elements with a string","signature":"implode(array $pieces )","inheritdoc":0,"modifier":[],"return":""},"lcfirst":{"params":{"$str":""},"docComment":"Make a string's first character lowercase","signature":"lcfirst(string $str )","inheritdoc":0,"modifier":[],"return":""},"levenshtein":{"params":{"$str1":"","$str2":"","$cost_ins":"","$cost_rep":"","$cost_del":""},"docComment":"Calculate Levenshtein distance between two strings","signature":"levenshtein(string $str1 ,string $str2 ,int $cost_ins ,int $cost_rep ,int $cost_del )","inheritdoc":0,"modifier":[],"return":""},"localeconv":{"params":[],"docComment":"Get numeric formatting information","signature":"localeconv( )","inheritdoc":0,"modifier":[],"return":""},"ltrim":{"params":{"$str":"","$charlist":""},"docComment":"Strip whitespace (or other characters) from the beginning of a string","signature":"ltrim(string $str ,string $charlist )","inheritdoc":0,"modifier":[],"return":""},"md5_file":{"params":{"$filename":"","$raw_output":""},"docComment":"Calculates the md5 hash of a given file","signature":"md5_file(string $filename ,[bool $raw_output] )","inheritdoc":0,"modifier":[],"return":""},"md5":{"params":{"$str":"","$raw_output":""},"docComment":"Calculate the md5 hash of a string","signature":"md5(string $str ,[bool $raw_output] )","inheritdoc":0,"modifier":[],"return":""},"metaphone":{"params":{"$str":"","$phonemes":""},"docComment":"Calculate the metaphone key of a string","signature":"metaphone(string $str ,[int $phonemes] )","inheritdoc":0,"modifier":[],"return":""},"money_format":{"params":{"$format":"","$number":""},"docComment":"Formats a number as a currency string","signature":"money_format(string $format ,float $number )","inheritdoc":0,"modifier":[],"return":""},"nl_langinfo":{"params":{"$item":""},"docComment":"Query language and locale information","signature":"nl_langinfo(int $item )","inheritdoc":0,"modifier":[],"return":""},"nl2br":{"params":{"$string":"","$is_xhtml":""},"docComment":"Inserts HTML line breaks before all newlines in a string","signature":"nl2br(string $string ,[bool $is_xhtml] )","inheritdoc":0,"modifier":[],"return":""},"number_format":{"params":{"$number":"","$decimals":"","$dec_point":"","$thousands_sep":""},"docComment":"Format a number with grouped thousands","signature":"number_format(float $number ,[int $decimals] ,[string $dec_point] ,[string $thousands_sep] )","inheritdoc":0,"modifier":[],"return":""},"ord":{"params":{"$string":""},"docComment":"Return ASCII value of character","signature":"ord(string $string )","inheritdoc":0,"modifier":[],"return":""},"parse_str":{"params":{"$str":"","&$arr":""},"docComment":"Parses the string into variables","signature":"parse_str(string $str ,array &$arr )","inheritdoc":0,"modifier":[],"return":""},"print":{"params":{"$arg":""},"docComment":"Output a string","signature":"print(string $arg )","inheritdoc":0,"modifier":[],"return":""},"printf":{"params":{"$format":"","$args":"","$...":""},"docComment":"Output a formatted string","signature":"printf(string $format ,mixed $args ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"quoted_printable_decode":{"params":{"$str":""},"docComment":"Convert a quoted-printable string to an 8 bit string","signature":"quoted_printable_decode(string $str )","inheritdoc":0,"modifier":[],"return":""},"quoted_printable_encode":{"params":{"$str":""},"docComment":"Convert a 8 bit string to a quoted-printable string","signature":"quoted_printable_encode(string $str )","inheritdoc":0,"modifier":[],"return":""},"quotemeta":{"params":{"$str":""},"docComment":"Quote meta characters","signature":"quotemeta(string $str )","inheritdoc":0,"modifier":[],"return":""},"rtrim":{"params":{"$str":"","$charlist":""},"docComment":"Strip whitespace (or other characters) from the end of a string","signature":"rtrim(string $str ,string $charlist )","inheritdoc":0,"modifier":[],"return":""},"setlocale":{"params":{"$category":"","$locale":"","$...":""},"docComment":"Set locale information","signature":"setlocale(int $category ,array $locale )","inheritdoc":0,"modifier":[],"return":""},"sha1_file":{"params":{"$filename":"","$raw_output":""},"docComment":"Calculate the sha1 hash of a file","signature":"sha1_file(string $filename ,[bool $raw_output] )","inheritdoc":0,"modifier":[],"return":""},"sha1":{"params":{"$str":"","$raw_output":""},"docComment":"Calculate the sha1 hash of a string","signature":"sha1(string $str ,[bool $raw_output] )","inheritdoc":0,"modifier":[],"return":""},"similar_text":{"params":{"$first":"","$second":"","&$percent":""},"docComment":"Calculate the similarity between two strings","signature":"similar_text(string $first ,string $second ,float &$percent )","inheritdoc":0,"modifier":[],"return":""},"soundex":{"params":{"$str":""},"docComment":"Calculate the soundex key of a string","signature":"soundex(string $str )","inheritdoc":0,"modifier":[],"return":""},"sprintf":{"params":{"$format":"","$args":"","$...":""},"docComment":"Return a formatted string","signature":"sprintf(string $format ,mixed $args ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"sscanf":{"params":{"$str":"","$format":"","&$...":""},"docComment":"Parses input from a string according to a format","signature":"sscanf(string $str ,string $format ,mixed &$... )","inheritdoc":0,"modifier":[],"return":""},"str_getcsv":{"params":{"$input":"","$delimiter":"","$enclosure":"","$escape":""},"docComment":"\n   Parse a CSV string into an array\n  ","signature":"str_getcsv(string $input ,[string $delimiter] ,[string $enclosure] ,[string $escape] )","inheritdoc":0,"modifier":[],"return":""},"str_ireplace":{"params":{"$search":"","$replace":"","$subject":"","&$count":""},"docComment":"Case-insensitive version of  .","signature":"str_ireplace(mixed $search ,mixed $replace ,mixed $subject ,int &$count )","inheritdoc":0,"modifier":[],"return":""},"str_pad":{"params":{"$input":"","$pad_length":"","$pad_string":"","$pad_type":""},"docComment":"Pad a string to a certain length with another string","signature":"str_pad(string $input ,int $pad_length ,[string $pad_string] ,[int $pad_type] )","inheritdoc":0,"modifier":[],"return":""},"str_repeat":{"params":{"$input":"","$multiplier":""},"docComment":"Repeat a string","signature":"str_repeat(string $input ,int $multiplier )","inheritdoc":0,"modifier":[],"return":""},"str_replace":{"params":{"$search":"","$replace":"","$subject":"","&$count":""},"docComment":"Replace all occurrences of the search string with the replacement string","signature":"str_replace(mixed $search ,mixed $replace ,mixed $subject ,int &$count )","inheritdoc":0,"modifier":[],"return":""},"str_rot13":{"params":{"$str":""},"docComment":"Perform the rot13 transform on a string","signature":"str_rot13(string $str )","inheritdoc":0,"modifier":[],"return":""},"str_shuffle":{"params":{"$str":""},"docComment":"Randomly shuffles a string","signature":"str_shuffle(string $str )","inheritdoc":0,"modifier":[],"return":""},"str_split":{"params":{"$string":"","$split_length":""},"docComment":"Convert a string to an array","signature":"str_split(string $string ,[int $split_length] )","inheritdoc":0,"modifier":[],"return":""},"str_word_count":{"params":{"$string":"","$format":"","$charlist":""},"docComment":"\n   Return information about words used in a string\n  ","signature":"str_word_count(string $string ,[int $format] ,string $charlist )","inheritdoc":0,"modifier":[],"return":""},"strcasecmp":{"params":{"$str1":"","$str2":""},"docComment":"Binary safe case-insensitive string comparison","signature":"strcasecmp(string $str1 ,string $str2 )","inheritdoc":0,"modifier":[],"return":""},"strchr":{"params":{"$haystack":"","$needle":"","$before_needle":""},"docComment":"Find the first occurrence of a string","signature":"strstr(string $haystack ,mixed $needle ,[bool $before_needle] )","inheritdoc":0,"modifier":[],"return":""},"strcmp":{"params":{"$str1":"","$str2":""},"docComment":"Binary safe string comparison","signature":"strcmp(string $str1 ,string $str2 )","inheritdoc":0,"modifier":[],"return":""},"strcoll":{"params":{"$str1":"","$str2":""},"docComment":"Locale based string comparison","signature":"strcoll(string $str1 ,string $str2 )","inheritdoc":0,"modifier":[],"return":""},"strcspn":{"params":{"$str1":"","$str2":"","$start":"","$length":""},"docComment":"Find length of initial segment not matching mask","signature":"strcspn(string $str1 ,string $str2 ,int $start ,int $length )","inheritdoc":0,"modifier":[],"return":""},"strip_tags":{"params":{"$str":"","$allowable_tags":""},"docComment":"Strip HTML and PHP tags from a string","signature":"strip_tags(string $str ,string $allowable_tags )","inheritdoc":0,"modifier":[],"return":""},"stripcslashes":{"params":{"$str":""},"docComment":"Un-quote string quoted with  ","signature":"stripcslashes(string $str )","inheritdoc":0,"modifier":[],"return":""},"stripos":{"params":{"$haystack":"","$needle":"","$offset":""},"docComment":"Find the position of the first occurrence of a case-insensitive substring in a string","signature":"stripos(string $haystack ,string $needle ,[int $offset] )","inheritdoc":0,"modifier":[],"return":""},"stripslashes":{"params":{"$str":""},"docComment":"Un-quotes a quoted string","signature":"stripslashes(string $str )","inheritdoc":0,"modifier":[],"return":""},"stristr":{"params":{"$haystack":"","$needle":"","$before_needle":""},"docComment":"Case-insensitive  ","signature":"stristr(string $haystack ,mixed $needle ,[bool $before_needle] )","inheritdoc":0,"modifier":[],"return":""},"strlen":{"params":{"$string":""},"docComment":"Get string length","signature":"strlen(string $string )","inheritdoc":0,"modifier":[],"return":""},"strnatcasecmp":{"params":{"$str1":"","$str2":""},"docComment":"Case insensitive string comparisons using a \"natural order\" algorithm","signature":"strnatcasecmp(string $str1 ,string $str2 )","inheritdoc":0,"modifier":[],"return":""},"strnatcmp":{"params":{"$str1":"","$str2":""},"docComment":"String comparisons using a \"natural order\" algorithm","signature":"strnatcmp(string $str1 ,string $str2 )","inheritdoc":0,"modifier":[],"return":""},"strncasecmp":{"params":{"$str1":"","$str2":"","$len":""},"docComment":"Binary safe case-insensitive string comparison of the first n characters","signature":"strncasecmp(string $str1 ,string $str2 ,int $len )","inheritdoc":0,"modifier":[],"return":""},"strncmp":{"params":{"$str1":"","$str2":"","$len":""},"docComment":"Binary safe string comparison of the first n characters","signature":"strncmp(string $str1 ,string $str2 ,int $len )","inheritdoc":0,"modifier":[],"return":""},"strpbrk":{"params":{"$haystack":"","$char_list":""},"docComment":"Search a string for any of a set of characters","signature":"strpbrk(string $haystack ,string $char_list )","inheritdoc":0,"modifier":[],"return":""},"strpos":{"params":{"$haystack":"","$needle":"","$offset":""},"docComment":"Find the position of the first occurrence of a substring in a string","signature":"strpos(string $haystack ,mixed $needle ,[int $offset] )","inheritdoc":0,"modifier":[],"return":""},"strrchr":{"params":{"$haystack":"","$needle":""},"docComment":"Find the last occurrence of a character in a string","signature":"strrchr(string $haystack ,mixed $needle )","inheritdoc":0,"modifier":[],"return":""},"strrev":{"params":{"$string":""},"docComment":"Reverse a string","signature":"strrev(string $string )","inheritdoc":0,"modifier":[],"return":""},"strripos":{"params":{"$haystack":"","$needle":"","$offset":""},"docComment":"Find the position of the last occurrence of a case-insensitive substring in a string","signature":"strripos(string $haystack ,string $needle ,[int $offset] )","inheritdoc":0,"modifier":[],"return":""},"strrpos":{"params":{"$haystack":"","$needle":"","$offset":""},"docComment":"Find the position of the last occurrence of a substring in a string","signature":"strrpos(string $haystack ,string $needle ,[int $offset] )","inheritdoc":0,"modifier":[],"return":""},"strspn":{"params":{"$subject":"","$mask":"","$start":"","$length":""},"docComment":"\n   Finds the length of the initial segment of a string consisting\n   entirely of characters contained within a given mask.\n  ","signature":"strspn(string $subject ,string $mask ,int $start ,int $length )","inheritdoc":0,"modifier":[],"return":""},"strstr":{"params":{"$haystack":"","$needle":"","$before_needle":""},"docComment":"Find the first occurrence of a string","signature":"strstr(string $haystack ,mixed $needle ,[bool $before_needle] )","inheritdoc":0,"modifier":[],"return":""},"strtok":{"params":{"$str":"","$token":""},"docComment":"Tokenize string","signature":"strtok(string $token )","inheritdoc":0,"modifier":[],"return":""},"strtolower":{"params":{"$str":""},"docComment":"Make a string lowercase","signature":"strtolower(string $str )","inheritdoc":0,"modifier":[],"return":""},"strtoupper":{"params":{"$string":""},"docComment":"Make a string uppercase","signature":"strtoupper(string $string )","inheritdoc":0,"modifier":[],"return":""},"strtr":{"params":{"$str":"","$from":"","$to":"","$replace_pairs":""},"docComment":"Translate characters or replace substrings","signature":"strtr(string $str ,array $replace_pairs )","inheritdoc":0,"modifier":[],"return":""},"substr_compare":{"params":{"$main_str":"","$str":"","$offset":"","$length":"","$case_insensitivity":""},"docComment":"Binary safe comparison of two strings from an offset, up to length characters","signature":"substr_compare(string $main_str ,string $str ,int $offset ,int $length ,[bool $case_insensitivity] )","inheritdoc":0,"modifier":[],"return":""},"substr_count":{"params":{"$haystack":"","$needle":"","$offset":"","$length":""},"docComment":"Count the number of substring occurrences","signature":"substr_count(string $haystack ,string $needle ,[int $offset] ,int $length )","inheritdoc":0,"modifier":[],"return":""},"substr_replace":{"params":{"$string":"","$replacement":"","$start":"","$length":""},"docComment":"Replace text within a portion of a string","signature":"substr_replace(mixed $string ,mixed $replacement ,mixed $start ,mixed $length )","inheritdoc":0,"modifier":[],"return":""},"substr":{"params":{"$string":"","$start":"","$length":""},"docComment":"Return part of a string","signature":"substr(string $string ,int $start ,int $length )","inheritdoc":0,"modifier":[],"return":""},"trim":{"params":{"$str":"","$charlist":""},"docComment":"Strip whitespace (or other characters) from the beginning and end of a string","signature":"trim(string $str ,[string $charlist] )","inheritdoc":0,"modifier":[],"return":""},"ucfirst":{"params":{"$str":""},"docComment":"Make a string's first character uppercase","signature":"ucfirst(string $str )","inheritdoc":0,"modifier":[],"return":""},"ucwords":{"params":{"$str":""},"docComment":"Uppercase the first character of each word in a string","signature":"ucwords(string $str )","inheritdoc":0,"modifier":[],"return":""},"vfprintf":{"params":{"$handle":"","$format":"","$args":""},"docComment":"Write a formatted string to a stream","signature":"vfprintf(resource $handle ,string $format ,array $args )","inheritdoc":0,"modifier":[],"return":""},"vprintf":{"params":{"$format":"","$args":""},"docComment":"Output a formatted string","signature":"vprintf(string $format ,array $args )","inheritdoc":0,"modifier":[],"return":""},"vsprintf":{"params":{"$format":"","$args":""},"docComment":"Return a formatted string","signature":"vsprintf(string $format ,array $args )","inheritdoc":0,"modifier":[],"return":""},"wordwrap":{"params":{"$str":"","$width":"","$break":"","$cut":""},"docComment":"Wraps a string to a given number of characters","signature":"wordwrap(string $str ,[int $width] ,[string $break] ,[bool $cut] )","inheritdoc":0,"modifier":[],"return":""},"token_get_all":{"params":{"$source":""},"docComment":"Split given source into PHP tokens","signature":"token_get_all(string $source )","inheritdoc":0,"modifier":[],"return":""},"token_name":{"params":{"$token":""},"docComment":"Get the symbolic name of a given PHP token","signature":"token_name(int $token )","inheritdoc":0,"modifier":[],"return":""},"base64_decode":{"params":{"$data":"","$strict":""},"docComment":"Decodes data encoded with MIME base64","signature":"base64_decode(string $data ,[bool $strict] )","inheritdoc":0,"modifier":[],"return":""},"base64_encode":{"params":{"$data":""},"docComment":"Encodes data with MIME base64","signature":"base64_encode(string $data )","inheritdoc":0,"modifier":[],"return":""},"get_headers":{"params":{"$url":"","$format":""},"docComment":"Fetches all the headers sent by the server in response to a HTTP request","signature":"get_headers(string $url ,[int $format] )","inheritdoc":0,"modifier":[],"return":""},"get_meta_tags":{"params":{"$filename":"","$use_include_path":""},"docComment":"Extracts all meta tag content attributes from a file and returns an array","signature":"get_meta_tags(string $filename ,[bool $use_include_path] )","inheritdoc":0,"modifier":[],"return":""},"http_build_query":{"params":{"$query_data":"","$numeric_prefix":"","$arg_separator":"","$enc_type":""},"docComment":"Generate URL-encoded query string","signature":"http_build_query(mixed $query_data ,string $numeric_prefix ,string $arg_separator ,[int $enc_type] )","inheritdoc":0,"modifier":[],"return":""},"parse_url":{"params":{"$url":"","$component":""},"docComment":"Parse a URL and return its components","signature":"parse_url(string $url ,[int $component] )","inheritdoc":0,"modifier":[],"return":""},"rawurldecode":{"params":{"$str":""},"docComment":"Decode URL-encoded strings","signature":"rawurldecode(string $str )","inheritdoc":0,"modifier":[],"return":""},"rawurlencode":{"params":{"$str":""},"docComment":"URL-encode according to RFC 3986","signature":"rawurlencode(string $str )","inheritdoc":0,"modifier":[],"return":""},"urldecode":{"params":{"$str":""},"docComment":"Decodes URL-encoded string","signature":"urldecode(string $str )","inheritdoc":0,"modifier":[],"return":""},"urlencode":{"params":{"$str":""},"docComment":"URL-encodes string","signature":"urlencode(string $str )","inheritdoc":0,"modifier":[],"return":""},"boolval":{"params":{"$var":""},"docComment":"Get the boolean value of a variable","signature":"boolval(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"debug_zval_dump":{"params":{"$variable":"","$...":""},"docComment":"Dumps a string representation of an internal zend value to output","signature":"debug_zval_dump(mixed $variable ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"doubleval":{"params":{"$var":""},"docComment":"Get float value of a variable","signature":"floatval(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"empty":{"params":{"$var":""},"docComment":"Determine whether a variable is empty","signature":"empty(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"floatval":{"params":{"$var":""},"docComment":"Get float value of a variable","signature":"floatval(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"get_defined_vars":{"params":[],"docComment":"\n   Returns an array of all defined variables\n  ","signature":"get_defined_vars( )","inheritdoc":0,"modifier":[],"return":""},"get_resource_type":{"params":{"$handle":""},"docComment":"\n   Returns the resource type\n  ","signature":"get_resource_type(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"gettype":{"params":{"$var":""},"docComment":"Get the type of a variable","signature":"gettype(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"import_request_variables":{"params":{"$types":"","$prefix":""},"docComment":"Import GET\/POST\/Cookie variables into the global scope","signature":"import_request_variables(string $types ,string $prefix )","inheritdoc":0,"modifier":[],"return":""},"intval":{"params":{"$var":"","$base":""},"docComment":"Get the integer value of a variable","signature":"intval(mixed $var ,[int $base] )","inheritdoc":0,"modifier":[],"return":""},"is_array":{"params":{"$var":""},"docComment":"Finds whether a variable is an array","signature":"is_array(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"is_bool":{"params":{"$var":""},"docComment":"\n   Finds out whether a variable is a boolean\n  ","signature":"is_bool(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"is_callable":{"params":{"$name":"","$syntax_only":"","&$callable_name":""},"docComment":"\n   Verify that the contents of a variable can be called as a function\n  ","signature":"is_callable(callable $name ,[bool $syntax_only] ,string &$callable_name )","inheritdoc":0,"modifier":[],"return":""},"is_double":{"params":{"$var":""},"docComment":"Finds whether the type of a variable is float","signature":"is_float(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"is_float":{"params":{"$var":""},"docComment":"Finds whether the type of a variable is float","signature":"is_float(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"is_int":{"params":{"$var":""},"docComment":"Find whether the type of a variable is integer","signature":"is_int(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"is_integer":{"params":{"$var":""},"docComment":"Find whether the type of a variable is integer","signature":"is_int(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"is_long":{"params":{"$var":""},"docComment":"Find whether the type of a variable is integer","signature":"is_int(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"is_null":{"params":{"$var":""},"docComment":"\n   Finds whether a variable is \n  ","signature":"is_null(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"is_numeric":{"params":{"$var":""},"docComment":"\n   Finds whether a variable is a number or a numeric string\n  ","signature":"is_numeric(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"is_object":{"params":{"$var":""},"docComment":"Finds whether a variable is an object","signature":"is_object(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"is_real":{"params":{"$var":""},"docComment":"Finds whether the type of a variable is float","signature":"is_float(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"is_resource":{"params":{"$var":""},"docComment":"\n   Finds whether a variable is a resource\n  ","signature":"is_resource(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"is_scalar":{"params":{"$var":""},"docComment":"\n   Finds whether a variable is a scalar\n  ","signature":"is_scalar(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"is_string":{"params":{"$var":""},"docComment":"Find whether the type of a variable is string","signature":"is_string(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"isset":{"params":{"$var":"","$...":""},"docComment":"Determine if a variable is set and is not ","signature":"isset(mixed $var ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"print_r":{"params":{"$expression":"","$return":""},"docComment":"\n   Prints human-readable information about a variable\n  ","signature":"print_r(mixed $expression ,[bool $return] )","inheritdoc":0,"modifier":[],"return":""},"serialize":{"params":{"$value":""},"docComment":"Generates a storable representation of a value","signature":"serialize(mixed $value )","inheritdoc":0,"modifier":[],"return":""},"settype":{"params":{"&$var":"","$type":""},"docComment":"Set the type of a variable","signature":"settype(mixed &$var ,string $type )","inheritdoc":0,"modifier":[],"return":""},"strval":{"params":{"$var":""},"docComment":"Get string value of a variable","signature":"strval(mixed $var )","inheritdoc":0,"modifier":[],"return":""},"unserialize":{"params":{"$str":""},"docComment":"\n   Creates a PHP value from a stored representation\n  ","signature":"unserialize(string $str )","inheritdoc":0,"modifier":[],"return":""},"unset":{"params":{"$var":"","$...":""},"docComment":"Unset a given variable","signature":"unset(mixed $var ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"var_dump":{"params":{"$expression":"","$...":""},"docComment":"Dumps information about a variable","signature":"var_dump(mixed $expression ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"var_export":{"params":{"$expression":"","$return":""},"docComment":"Outputs or returns a parsable string representation of a variable","signature":"var_export(mixed $expression ,[bool $return] )","inheritdoc":0,"modifier":[],"return":""},"apache_child_terminate":{"params":[],"docComment":"Terminate apache process after this request","signature":"apache_child_terminate( )","inheritdoc":0,"modifier":[],"return":""},"apache_get_modules":{"params":[],"docComment":"Get a list of loaded Apache modules","signature":"apache_get_modules( )","inheritdoc":0,"modifier":[],"return":""},"apache_get_version":{"params":[],"docComment":"Fetch Apache version","signature":"apache_get_version( )","inheritdoc":0,"modifier":[],"return":""},"apache_getenv":{"params":{"$variable":"","$walk_to_top":""},"docComment":"Get an Apache subprocess_env variable","signature":"apache_getenv(string $variable ,[bool $walk_to_top] )","inheritdoc":0,"modifier":[],"return":""},"apache_lookup_uri":{"params":{"$filename":""},"docComment":"Perform a partial request for the specified URI and return all info about it","signature":"apache_lookup_uri(string $filename )","inheritdoc":0,"modifier":[],"return":""},"apache_note":{"params":{"$note_name":"","$note_value":""},"docComment":"Get and set apache request notes","signature":"apache_note(string $note_name ,[string $note_value] )","inheritdoc":0,"modifier":[],"return":""},"apache_request_headers":{"params":[],"docComment":"Fetch all HTTP request headers","signature":"apache_request_headers( )","inheritdoc":0,"modifier":[],"return":""},"apache_reset_timeout":{"params":[],"docComment":"Reset the Apache write timer","signature":"apache_reset_timeout( )","inheritdoc":0,"modifier":[],"return":""},"apache_response_headers":{"params":[],"docComment":"Fetch all HTTP response headers","signature":"apache_response_headers( )","inheritdoc":0,"modifier":[],"return":""},"apache_setenv":{"params":{"$variable":"","$value":"","$walk_to_top":""},"docComment":"Set an Apache subprocess_env variable","signature":"apache_setenv(string $variable ,string $value ,[bool $walk_to_top] )","inheritdoc":0,"modifier":[],"return":""},"getallheaders":{"params":[],"docComment":"Fetch all HTTP request headers","signature":"getallheaders( )","inheritdoc":0,"modifier":[],"return":""},"virtual":{"params":{"$filename":""},"docComment":"Perform an Apache sub-request","signature":"virtual(string $filename )","inheritdoc":0,"modifier":[],"return":""},"bcadd":{"params":{"$left_operand":"","$right_operand":"","$scale":""},"docComment":"Add two arbitrary precision numbers","signature":"bcadd(string $left_operand ,string $right_operand ,int $scale )","inheritdoc":0,"modifier":[],"return":""},"bccomp":{"params":{"$left_operand":"","$right_operand":"","$scale":""},"docComment":"Compare two arbitrary precision numbers","signature":"bccomp(string $left_operand ,string $right_operand ,int $scale )","inheritdoc":0,"modifier":[],"return":""},"bcdiv":{"params":{"$left_operand":"","$right_operand":"","$scale":""},"docComment":"Divide two arbitrary precision numbers","signature":"bcdiv(string $left_operand ,string $right_operand ,int $scale )","inheritdoc":0,"modifier":[],"return":""},"bcmod":{"params":{"$left_operand":"","$modulus":""},"docComment":"Get modulus of an arbitrary precision number","signature":"bcmod(string $left_operand ,string $modulus )","inheritdoc":0,"modifier":[],"return":""},"bcmul":{"params":{"$left_operand":"","$right_operand":"","$scale":""},"docComment":"Multiply two arbitrary precision numbers","signature":"bcmul(string $left_operand ,string $right_operand ,int $scale )","inheritdoc":0,"modifier":[],"return":""},"bcpow":{"params":{"$left_operand":"","$right_operand":"","$scale":""},"docComment":"Raise an arbitrary precision number to another","signature":"bcpow(string $left_operand ,string $right_operand ,int $scale )","inheritdoc":0,"modifier":[],"return":""},"bcpowmod":{"params":{"$left_operand":"","$right_operand":"","$modulus":"","$scale":""},"docComment":"Raise an arbitrary precision number to another, reduced by a specified modulus","signature":"bcpowmod(string $left_operand ,string $right_operand ,string $modulus ,int $scale )","inheritdoc":0,"modifier":[],"return":""},"bcscale":{"params":{"$scale":""},"docComment":"Set default scale parameter for all bc math functions","signature":"bcscale(int $scale )","inheritdoc":0,"modifier":[],"return":""},"bcsqrt":{"params":{"$operand":"","$scale":""},"docComment":"Get the square root of an arbitrary precision number","signature":"bcsqrt(string $operand ,int $scale )","inheritdoc":0,"modifier":[],"return":""},"bcsub":{"params":{"$left_operand":"","$right_operand":"","$scale":""},"docComment":"Subtract one arbitrary precision number from another","signature":"bcsub(string $left_operand ,string $right_operand ,int $scale )","inheritdoc":0,"modifier":[],"return":""},"cal_days_in_month":{"params":{"$calendar":"","$month":"","$year":""},"docComment":"Return the number of days in a month for a given year and calendar","signature":"cal_days_in_month(int $calendar ,int $month ,int $year )","inheritdoc":0,"modifier":[],"return":""},"cal_from_jd":{"params":{"$jd":"","$calendar":""},"docComment":"Converts from Julian Day Count to a supported calendar","signature":"cal_from_jd(int $jd ,int $calendar )","inheritdoc":0,"modifier":[],"return":""},"cal_info":{"params":{"$calendar":""},"docComment":"Returns information about a particular calendar","signature":"cal_info([int $calendar] )","inheritdoc":0,"modifier":[],"return":""},"cal_to_jd":{"params":{"$calendar":"","$month":"","$day":"","$year":""},"docComment":"Converts from a supported calendar to Julian Day Count","signature":"cal_to_jd(int $calendar ,int $month ,int $day ,int $year )","inheritdoc":0,"modifier":[],"return":""},"easter_date":{"params":{"$year":""},"docComment":"Get Unix timestamp for midnight on Easter of a given year","signature":"easter_date(int $year )","inheritdoc":0,"modifier":[],"return":""},"easter_days":{"params":{"$year":"","$method":""},"docComment":"Get number of days after March 21 on which Easter falls for a given year","signature":"easter_days(int $year ,[int $method] )","inheritdoc":0,"modifier":[],"return":""},"FrenchToJD":{"params":{"$month":"","$day":"","$year":""},"docComment":"Converts a date from the French Republican Calendar to a Julian Day Count","signature":"frenchtojd(int $month ,int $day ,int $year )","inheritdoc":0,"modifier":[],"return":""},"GregorianToJD":{"params":{"$month":"","$day":"","$year":""},"docComment":"Converts a Gregorian date to Julian Day Count","signature":"gregoriantojd(int $month ,int $day ,int $year )","inheritdoc":0,"modifier":[],"return":""},"JDDayOfWeek":{"params":{"$julianday":"","$mode":""},"docComment":"Returns the day of the week","signature":"jddayofweek(int $julianday ,[int $mode] )","inheritdoc":0,"modifier":[],"return":""},"JDMonthName":{"params":{"$julianday":"","$mode":""},"docComment":"Returns a month name","signature":"jdmonthname(int $julianday ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"JDToFrench":{"params":{"$juliandaycount":""},"docComment":"Converts a Julian Day Count to the French Republican Calendar","signature":"jdtofrench(int $juliandaycount )","inheritdoc":0,"modifier":[],"return":""},"JDToGregorian":{"params":{"$julianday":""},"docComment":"Converts Julian Day Count to Gregorian date","signature":"jdtogregorian(int $julianday )","inheritdoc":0,"modifier":[],"return":""},"jdtojewish":{"params":{"$juliandaycount":"","$hebrew":"","$fl":""},"docComment":"Converts a Julian day count to a Jewish calendar date","signature":"jdtojewish(int $juliandaycount ,[bool $hebrew] ,[int $fl] )","inheritdoc":0,"modifier":[],"return":""},"JDToJulian":{"params":{"$julianday":""},"docComment":"Converts a Julian Day Count to a Julian Calendar Date","signature":"jdtojulian(int $julianday )","inheritdoc":0,"modifier":[],"return":""},"jdtounix":{"params":{"$jday":""},"docComment":"Convert Julian Day to Unix timestamp","signature":"jdtounix(int $jday )","inheritdoc":0,"modifier":[],"return":""},"JewishToJD":{"params":{"$month":"","$day":"","$year":""},"docComment":"Converts a date in the Jewish Calendar to Julian Day Count","signature":"jewishtojd(int $month ,int $day ,int $year )","inheritdoc":0,"modifier":[],"return":""},"JulianToJD":{"params":{"$month":"","$day":"","$year":""},"docComment":"Converts a Julian Calendar date to Julian Day Count","signature":"juliantojd(int $month ,int $day ,int $year )","inheritdoc":0,"modifier":[],"return":""},"unixtojd":{"params":{"$timestamp":""},"docComment":"Convert Unix timestamp to Julian Day","signature":"unixtojd([int $timestamp] )","inheritdoc":0,"modifier":[],"return":""},"com_addref":{"params":[],"docComment":"Increases the components reference counter [deprecated]","signature":"com_addref( )","inheritdoc":0,"modifier":[],"return":""},"com_create_guid":{"params":[],"docComment":"Generate a globally unique identifier (GUID)","signature":"com_create_guid( )","inheritdoc":0,"modifier":[],"return":""},"com_event_sink":{"params":{"$comobject":"variant","$sinkobject":"","$sinkinterface":""},"docComment":"Connect events from a COM object to a PHP object","signature":"com_event_sink(variant $comobject ,object $sinkobject ,mixed $sinkinterface )","inheritdoc":0,"modifier":[],"return":""},"com_get_active_object":{"params":{"$progid":"","$code_page":""},"docComment":"Returns a handle to an already running instance of a COM object","signature":"com_get_active_object(string $progid ,int $code_page )","inheritdoc":0,"modifier":[],"return":"variant"},"com_get":{"params":[],"docComment":"Gets the value of a COM Component's property [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"com_invoke":{"params":[],"docComment":"Calls a COM component's method [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"com_isenum":{"params":{"$com_module":"variant"},"docComment":"Indicates if a COM object has an IEnumVariant interface for iteration [deprecated]","signature":"com_isenum(variant $com_module )","inheritdoc":0,"modifier":[],"return":""},"com_load_typelib":{"params":{"$typelib_name":"","$case_insensitive":""},"docComment":"Loads a Typelib","signature":"com_load_typelib(string $typelib_name ,[bool $case_insensitive] )","inheritdoc":0,"modifier":[],"return":""},"com_load":{"params":[],"docComment":"Creates a new reference to a COM component [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"com_message_pump":{"params":{"$timeoutms":""},"docComment":"Process COM messages, sleeping for up to timeoutms milliseconds","signature":"com_message_pump([int $timeoutms] )","inheritdoc":0,"modifier":[],"return":""},"com_print_typeinfo":{"params":{"$comobject":"","$dispinterface":"","$wantsink":""},"docComment":"Print out a PHP class definition for a dispatchable interface","signature":"com_print_typeinfo(object $comobject ,string $dispinterface ,[bool $wantsink] )","inheritdoc":0,"modifier":[],"return":""},"com_propget":{"params":[],"docComment":"Gets the value of a COM Component's property [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"com_propput":{"params":[],"docComment":"Assigns a value to a COM component's property","signature":"","inheritdoc":0,"modifier":[],"return":""},"com_propset":{"params":[],"docComment":"Assigns a value to a COM component's property","signature":"","inheritdoc":0,"modifier":[],"return":""},"com_release":{"params":[],"docComment":"Decreases the components reference counter [deprecated]","signature":"com_release( )","inheritdoc":0,"modifier":[],"return":""},"com_set":{"params":[],"docComment":"Assigns a value to a COM component's property","signature":"","inheritdoc":0,"modifier":[],"return":""},"variant_abs":{"params":{"$val":""},"docComment":"Returns the absolute value of a variant","signature":"variant_abs(mixed $val )","inheritdoc":0,"modifier":[],"return":""},"variant_add":{"params":{"$left":"","$right":""},"docComment":"\"Adds\" two variant values together and returns the result","signature":"variant_add(mixed $left ,mixed $right )","inheritdoc":0,"modifier":[],"return":""},"variant_and":{"params":{"$left":"","$right":""},"docComment":"Performs a bitwise AND operation between two variants","signature":"variant_and(mixed $left ,mixed $right )","inheritdoc":0,"modifier":[],"return":""},"variant_cast":{"params":{"$variant":"variant","$type":""},"docComment":"Convert a variant into a new variant object of another type","signature":"variant_cast(variant $variant ,int $type )","inheritdoc":0,"modifier":[],"return":"variant"},"variant_cat":{"params":{"$left":"","$right":""},"docComment":"concatenates two variant values together and returns the result","signature":"variant_cat(mixed $left ,mixed $right )","inheritdoc":0,"modifier":[],"return":""},"variant_cmp":{"params":{"$left":"","$right":"","$lcid":"","$flags":""},"docComment":"Compares two variants","signature":"variant_cmp(mixed $left ,mixed $right ,int $lcid ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"variant_date_from_timestamp":{"params":{"$timestamp":""},"docComment":"Returns a variant date representation of a Unix timestamp","signature":"variant_date_from_timestamp(int $timestamp )","inheritdoc":0,"modifier":[],"return":"variant"},"variant_date_to_timestamp":{"params":{"$variant":"variant"},"docComment":"Converts a variant date\/time value to Unix timestamp","signature":"variant_date_to_timestamp(variant $variant )","inheritdoc":0,"modifier":[],"return":""},"variant_div":{"params":{"$left":"","$right":""},"docComment":"Returns the result from dividing two variants","signature":"variant_div(mixed $left ,mixed $right )","inheritdoc":0,"modifier":[],"return":""},"variant_eqv":{"params":{"$left":"","$right":""},"docComment":"Performs a bitwise equivalence on two variants","signature":"variant_eqv(mixed $left ,mixed $right )","inheritdoc":0,"modifier":[],"return":""},"variant_fix":{"params":{"$variant":""},"docComment":"Returns the integer portion of a variant","signature":"variant_fix(mixed $variant )","inheritdoc":0,"modifier":[],"return":""},"variant_get_type":{"params":{"$variant":"variant"},"docComment":"Returns the type of a variant object","signature":"variant_get_type(variant $variant )","inheritdoc":0,"modifier":[],"return":""},"variant_idiv":{"params":{"$left":"","$right":""},"docComment":"Converts variants to integers and then returns the result from dividing them","signature":"variant_idiv(mixed $left ,mixed $right )","inheritdoc":0,"modifier":[],"return":""},"variant_imp":{"params":{"$left":"","$right":""},"docComment":"Performs a bitwise implication on two variants","signature":"variant_imp(mixed $left ,mixed $right )","inheritdoc":0,"modifier":[],"return":""},"variant_int":{"params":{"$variant":""},"docComment":"Returns the integer portion of a variant","signature":"variant_int(mixed $variant )","inheritdoc":0,"modifier":[],"return":""},"variant_mod":{"params":{"$left":"","$right":""},"docComment":"Divides two variants and returns only the remainder","signature":"variant_mod(mixed $left ,mixed $right )","inheritdoc":0,"modifier":[],"return":""},"variant_mul":{"params":{"$left":"","$right":""},"docComment":"Multiplies the values of the two variants","signature":"variant_mul(mixed $left ,mixed $right )","inheritdoc":0,"modifier":[],"return":""},"variant_neg":{"params":{"$variant":""},"docComment":"Performs logical negation on a variant","signature":"variant_neg(mixed $variant )","inheritdoc":0,"modifier":[],"return":""},"variant_not":{"params":{"$variant":""},"docComment":"Performs bitwise not negation on a variant","signature":"variant_not(mixed $variant )","inheritdoc":0,"modifier":[],"return":""},"variant_or":{"params":{"$left":"","$right":""},"docComment":"Performs a logical disjunction on two variants","signature":"variant_or(mixed $left ,mixed $right )","inheritdoc":0,"modifier":[],"return":""},"variant_pow":{"params":{"$left":"","$right":""},"docComment":"Returns the result of performing the power function with two variants","signature":"variant_pow(mixed $left ,mixed $right )","inheritdoc":0,"modifier":[],"return":""},"variant_round":{"params":{"$variant":"","$decimals":""},"docComment":"Rounds a variant to the specified number of decimal places","signature":"variant_round(mixed $variant ,int $decimals )","inheritdoc":0,"modifier":[],"return":""},"variant_set_type":{"params":{"$variant":"variant","$type":""},"docComment":"Convert a variant into another type \"in-place\"","signature":"variant_set_type(variant $variant ,int $type )","inheritdoc":0,"modifier":[],"return":""},"variant_set":{"params":{"$variant":"variant","$value":""},"docComment":"Assigns a new value for a variant object","signature":"variant_set(variant $variant ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"variant_sub":{"params":{"$left":"","$right":""},"docComment":"Subtracts the value of the right variant from the left variant value","signature":"variant_sub(mixed $left ,mixed $right )","inheritdoc":0,"modifier":[],"return":""},"variant_xor":{"params":{"$left":"","$right":""},"docComment":"Performs a logical exclusion on two variants","signature":"variant_xor(mixed $left ,mixed $right )","inheritdoc":0,"modifier":[],"return":""},"ctype_alnum":{"params":{"$text":""},"docComment":"Check for alphanumeric character(s)","signature":"ctype_alnum(string $text )","inheritdoc":0,"modifier":[],"return":""},"ctype_alpha":{"params":{"$text":""},"docComment":"Check for alphabetic character(s)","signature":"ctype_alpha(string $text )","inheritdoc":0,"modifier":[],"return":""},"ctype_cntrl":{"params":{"$text":""},"docComment":"Check for control character(s)","signature":"ctype_cntrl(string $text )","inheritdoc":0,"modifier":[],"return":""},"ctype_digit":{"params":{"$text":""},"docComment":"Check for numeric character(s)","signature":"ctype_digit(string $text )","inheritdoc":0,"modifier":[],"return":""},"ctype_graph":{"params":{"$text":""},"docComment":"Check for any printable character(s) except space","signature":"ctype_graph(string $text )","inheritdoc":0,"modifier":[],"return":""},"ctype_lower":{"params":{"$text":""},"docComment":"Check for lowercase character(s)","signature":"ctype_lower(string $text )","inheritdoc":0,"modifier":[],"return":""},"ctype_print":{"params":{"$text":""},"docComment":"Check for printable character(s)","signature":"ctype_print(string $text )","inheritdoc":0,"modifier":[],"return":""},"ctype_punct":{"params":{"$text":""},"docComment":"\n   Check for any printable character which is not whitespace or an\n   alphanumeric character\n  ","signature":"ctype_punct(string $text )","inheritdoc":0,"modifier":[],"return":""},"ctype_space":{"params":{"$text":""},"docComment":"Check for whitespace character(s)","signature":"ctype_space(string $text )","inheritdoc":0,"modifier":[],"return":""},"ctype_upper":{"params":{"$text":""},"docComment":"Check for uppercase character(s)","signature":"ctype_upper(string $text )","inheritdoc":0,"modifier":[],"return":""},"ctype_xdigit":{"params":{"$text":""},"docComment":"\n   Check for character(s) representing a hexadecimal digit\n  ","signature":"ctype_xdigit(string $text )","inheritdoc":0,"modifier":[],"return":""},"dba_close":{"params":{"$handle":""},"docComment":"Close a DBA database","signature":"dba_close(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"dba_delete":{"params":{"$key":"","$handle":""},"docComment":"Delete DBA entry specified by key","signature":"dba_delete(string $key ,resource $handle )","inheritdoc":0,"modifier":[],"return":""},"dba_exists":{"params":{"$key":"","$handle":""},"docComment":"Check whether key exists","signature":"dba_exists(string $key ,resource $handle )","inheritdoc":0,"modifier":[],"return":""},"dba_fetch":{"params":{"$key":"","$handle":"","$skip":""},"docComment":"Fetch data specified by key","signature":"dba_fetch(string $key ,int $skip ,resource $handle )","inheritdoc":0,"modifier":[],"return":""},"dba_firstkey":{"params":{"$handle":""},"docComment":"Fetch first key","signature":"dba_firstkey(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"dba_handlers":{"params":{"$full_info":""},"docComment":"List all the handlers available","signature":"dba_handlers([bool $full_info] )","inheritdoc":0,"modifier":[],"return":""},"dba_insert":{"params":{"$key":"","$value":"","$handle":""},"docComment":"Insert entry","signature":"dba_insert(string $key ,string $value ,resource $handle )","inheritdoc":0,"modifier":[],"return":""},"dba_key_split":{"params":{"$key":""},"docComment":"\n   Splits a key in string representation into array representation\n  ","signature":"dba_key_split(mixed $key )","inheritdoc":0,"modifier":[],"return":""},"dba_list":{"params":[],"docComment":"List all open database files","signature":"dba_list( )","inheritdoc":0,"modifier":[],"return":""},"dba_nextkey":{"params":{"$handle":""},"docComment":"Fetch next key","signature":"dba_nextkey(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"dba_open":{"params":{"$path":"","$mode":"","$handler":"","$...":""},"docComment":"Open database","signature":"dba_open(string $path ,string $mode ,string $handler ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"dba_optimize":{"params":{"$handle":""},"docComment":"Optimize database","signature":"dba_optimize(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"dba_popen":{"params":{"$path":"","$mode":"","$handler":"","$...":""},"docComment":"Open database persistently","signature":"dba_popen(string $path ,string $mode ,string $handler ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"dba_replace":{"params":{"$key":"","$value":"","$handle":""},"docComment":"Replace or insert entry","signature":"dba_replace(string $key ,string $value ,resource $handle )","inheritdoc":0,"modifier":[],"return":""},"dba_sync":{"params":{"$handle":""},"docComment":"Synchronize database","signature":"dba_sync(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"dotnet_load":{"params":{"$assembly_name":"","$datatype_name":"","$codepage":""},"docComment":"Loads a DOTNET module","signature":"dotnet_load(string $assembly_name ,string $datatype_name ,int $codepage )","inheritdoc":0,"modifier":[],"return":""},"exif_imagetype":{"params":{"$filename":""},"docComment":"Determine the type of an image","signature":"exif_imagetype(string $filename )","inheritdoc":0,"modifier":[],"return":""},"exif_read_data":{"params":{"$filename":"","$sections":"","$arrays":"","$thumbnail":""},"docComment":"Reads the  headers from  or ","signature":"exif_read_data(string $filename ,[string $sections] ,[bool $arrays] ,[bool $thumbnail] )","inheritdoc":0,"modifier":[],"return":""},"exif_tagname":{"params":{"$index":""},"docComment":"Get the header name for an index","signature":"exif_tagname(int $index )","inheritdoc":0,"modifier":[],"return":""},"exif_thumbnail":{"params":{"$filename":"","&$width":"","&$height":"","&$imagetype":""},"docComment":"Retrieve the embedded thumbnail of a TIFF or JPEG image","signature":"exif_thumbnail(string $filename ,int &$width ,int &$height ,int &$imagetype )","inheritdoc":0,"modifier":[],"return":""},"read_exif_data":{"params":{"$filename":"","$sections":"","$arrays":"","$thumbnail":""},"docComment":"Reads the  headers from  or ","signature":"exif_read_data(string $filename ,[string $sections] ,[bool $arrays] ,[bool $thumbnail] )","inheritdoc":0,"modifier":[],"return":""},"finfo_buffer":{"params":{"$finfo":"","$string":"","$options":"","$context":""},"docComment":"Return information about a string buffer","signature":"public finfo::buffer([string $string] ,[int $options] ,[resource $context] )","inheritdoc":0,"modifier":["public"],"return":""},"finfo_close":{"params":{"$finfo":""},"docComment":"Close fileinfo resource","signature":"finfo_close(resource $finfo )","inheritdoc":0,"modifier":[],"return":""},"finfo_file":{"params":{"$finfo":"","$file_name":"","$options":"","$context":""},"docComment":"Return information about a file","signature":"public finfo::file([string $file_name] ,[int $options] ,[resource $context] )","inheritdoc":0,"modifier":["public"],"return":""},"finfo_open":{"params":{"$options":"","$magic_file":""},"docComment":"Create a new fileinfo resource","signature":"finfo_open([int $options] ,[string $magic_file] )","inheritdoc":0,"modifier":[],"return":""},"finfo_set_flags":{"params":{"$finfo":"","$options":""},"docComment":"Set libmagic configuration options","signature":"public finfo::set_flags(int $options )","inheritdoc":0,"modifier":["public"],"return":""},"mime_content_type":{"params":{"$filename":""},"docComment":"Detect MIME Content-type for a file (deprecated)","signature":"mime_content_type(string $filename )","inheritdoc":0,"modifier":[],"return":""},"ftp_alloc":{"params":{"$ftp_stream":"","$filesize":"","&$result":""},"docComment":"Allocates space for a file to be uploaded","signature":"ftp_alloc(resource $ftp_stream ,int $filesize ,string &$result )","inheritdoc":0,"modifier":[],"return":""},"ftp_cdup":{"params":{"$ftp_stream":""},"docComment":"Changes to the parent directory","signature":"ftp_cdup(resource $ftp_stream )","inheritdoc":0,"modifier":[],"return":""},"ftp_chdir":{"params":{"$ftp_stream":"","$directory":""},"docComment":"Changes the current directory on a FTP server","signature":"ftp_chdir(resource $ftp_stream ,string $directory )","inheritdoc":0,"modifier":[],"return":""},"ftp_chmod":{"params":{"$ftp_stream":"","$mode":"","$filename":""},"docComment":"Set permissions on a file via FTP","signature":"ftp_chmod(resource $ftp_stream ,int $mode ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"ftp_close":{"params":{"$ftp_stream":""},"docComment":"Closes an FTP connection","signature":"ftp_close(resource $ftp_stream )","inheritdoc":0,"modifier":[],"return":""},"ftp_connect":{"params":{"$host":"","$port":"","$timeout":""},"docComment":"Opens an FTP connection","signature":"ftp_connect(string $host ,[int $port] ,[int $timeout] )","inheritdoc":0,"modifier":[],"return":""},"ftp_delete":{"params":{"$ftp_stream":"","$path":""},"docComment":"Deletes a file on the FTP server","signature":"ftp_delete(resource $ftp_stream ,string $path )","inheritdoc":0,"modifier":[],"return":""},"ftp_exec":{"params":{"$ftp_stream":"","$command":""},"docComment":"Requests execution of a command on the FTP server","signature":"ftp_exec(resource $ftp_stream ,string $command )","inheritdoc":0,"modifier":[],"return":""},"ftp_fget":{"params":{"$ftp_stream":"","$handle":"","$remote_file":"","$mode":"","$resumepos":""},"docComment":"Downloads a file from the FTP server and saves to an open file","signature":"ftp_fget(resource $ftp_stream ,resource $handle ,string $remote_file ,int $mode ,[int $resumepos] )","inheritdoc":0,"modifier":[],"return":""},"ftp_fput":{"params":{"$ftp_stream":"","$remote_file":"","$handle":"","$mode":"","$startpos":""},"docComment":"Uploads from an open file to the FTP server","signature":"ftp_fput(resource $ftp_stream ,string $remote_file ,resource $handle ,int $mode ,[int $startpos] )","inheritdoc":0,"modifier":[],"return":""},"ftp_get_option":{"params":{"$ftp_stream":"","$option":""},"docComment":"Retrieves various runtime behaviours of the current FTP stream","signature":"ftp_get_option(resource $ftp_stream ,int $option )","inheritdoc":0,"modifier":[],"return":""},"ftp_get":{"params":{"$ftp_stream":"","$local_file":"","$remote_file":"","$mode":"","$resumepos":""},"docComment":"Downloads a file from the FTP server","signature":"ftp_get(resource $ftp_stream ,string $local_file ,string $remote_file ,int $mode ,[int $resumepos] )","inheritdoc":0,"modifier":[],"return":""},"ftp_login":{"params":{"$ftp_stream":"","$username":"","$password":""},"docComment":"Logs in to an FTP connection","signature":"ftp_login(resource $ftp_stream ,string $username ,string $password )","inheritdoc":0,"modifier":[],"return":""},"ftp_mdtm":{"params":{"$ftp_stream":"","$remote_file":""},"docComment":"Returns the last modified time of the given file","signature":"ftp_mdtm(resource $ftp_stream ,string $remote_file )","inheritdoc":0,"modifier":[],"return":""},"ftp_mkdir":{"params":{"$ftp_stream":"","$directory":""},"docComment":"Creates a directory","signature":"ftp_mkdir(resource $ftp_stream ,string $directory )","inheritdoc":0,"modifier":[],"return":""},"ftp_nb_continue":{"params":{"$ftp_stream":""},"docComment":"Continues retrieving\/sending a file (non-blocking)","signature":"ftp_nb_continue(resource $ftp_stream )","inheritdoc":0,"modifier":[],"return":""},"ftp_nb_fget":{"params":{"$ftp_stream":"","$handle":"","$remote_file":"","$mode":"","$resumepos":""},"docComment":"Retrieves a file from the FTP server and writes it to an open file (non-blocking)","signature":"ftp_nb_fget(resource $ftp_stream ,resource $handle ,string $remote_file ,int $mode ,[int $resumepos] )","inheritdoc":0,"modifier":[],"return":""},"ftp_nb_fput":{"params":{"$ftp_stream":"","$remote_file":"","$handle":"","$mode":"","$startpos":""},"docComment":"Stores a file from an open file to the FTP server (non-blocking)","signature":"ftp_nb_fput(resource $ftp_stream ,string $remote_file ,resource $handle ,int $mode ,[int $startpos] )","inheritdoc":0,"modifier":[],"return":""},"ftp_nb_get":{"params":{"$ftp_stream":"","$local_file":"","$remote_file":"","$mode":"","$resumepos":""},"docComment":"Retrieves a file from the FTP server and writes it to a local file (non-blocking)","signature":"ftp_nb_get(resource $ftp_stream ,string $local_file ,string $remote_file ,int $mode ,[int $resumepos] )","inheritdoc":0,"modifier":[],"return":""},"ftp_nb_put":{"params":{"$ftp_stream":"","$remote_file":"","$local_file":"","$mode":"","$startpos":""},"docComment":"Stores a file on the FTP server (non-blocking)","signature":"ftp_nb_put(resource $ftp_stream ,string $remote_file ,string $local_file ,int $mode ,[int $startpos] )","inheritdoc":0,"modifier":[],"return":""},"ftp_nlist":{"params":{"$ftp_stream":"","$directory":""},"docComment":"Returns a list of files in the given directory","signature":"ftp_nlist(resource $ftp_stream ,string $directory )","inheritdoc":0,"modifier":[],"return":""},"ftp_pasv":{"params":{"$ftp_stream":"","$pasv":""},"docComment":"Turns passive mode on or off","signature":"ftp_pasv(resource $ftp_stream ,bool $pasv )","inheritdoc":0,"modifier":[],"return":""},"ftp_put":{"params":{"$ftp_stream":"","$remote_file":"","$local_file":"","$mode":"","$startpos":""},"docComment":"Uploads a file to the FTP server","signature":"ftp_put(resource $ftp_stream ,string $remote_file ,string $local_file ,int $mode ,[int $startpos] )","inheritdoc":0,"modifier":[],"return":""},"ftp_pwd":{"params":{"$ftp_stream":""},"docComment":"Returns the current directory name","signature":"ftp_pwd(resource $ftp_stream )","inheritdoc":0,"modifier":[],"return":""},"ftp_quit":{"params":{"$ftp_stream":""},"docComment":"Closes an FTP connection","signature":"ftp_close(resource $ftp_stream )","inheritdoc":0,"modifier":[],"return":""},"ftp_raw":{"params":{"$ftp_stream":"","$command":""},"docComment":"Sends an arbitrary command to an FTP server","signature":"ftp_raw(resource $ftp_stream ,string $command )","inheritdoc":0,"modifier":[],"return":""},"ftp_rawlist":{"params":{"$ftp_stream":"","$directory":"","$recursive":""},"docComment":"Returns a detailed list of files in the given directory","signature":"ftp_rawlist(resource $ftp_stream ,string $directory ,[bool $recursive] )","inheritdoc":0,"modifier":[],"return":""},"ftp_rename":{"params":{"$ftp_stream":"","$oldname":"","$newname":""},"docComment":"Renames a file or a directory on the FTP server","signature":"ftp_rename(resource $ftp_stream ,string $oldname ,string $newname )","inheritdoc":0,"modifier":[],"return":""},"ftp_rmdir":{"params":{"$ftp_stream":"","$directory":""},"docComment":"Removes a directory","signature":"ftp_rmdir(resource $ftp_stream ,string $directory )","inheritdoc":0,"modifier":[],"return":""},"ftp_set_option":{"params":{"$ftp_stream":"","$option":"","$value":""},"docComment":"Set miscellaneous runtime FTP options","signature":"ftp_set_option(resource $ftp_stream ,int $option ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"ftp_site":{"params":{"$ftp_stream":"","$command":""},"docComment":"Sends a SITE command to the server","signature":"ftp_site(resource $ftp_stream ,string $command )","inheritdoc":0,"modifier":[],"return":""},"ftp_size":{"params":{"$ftp_stream":"","$remote_file":""},"docComment":"Returns the size of the given file","signature":"ftp_size(resource $ftp_stream ,string $remote_file )","inheritdoc":0,"modifier":[],"return":""},"ftp_ssl_connect":{"params":{"$host":"","$port":"","$timeout":""},"docComment":"Opens an Secure SSL-FTP connection","signature":"ftp_ssl_connect(string $host ,[int $port] ,[int $timeout] )","inheritdoc":0,"modifier":[],"return":""},"ftp_systype":{"params":{"$ftp_stream":""},"docComment":"Returns the system type identifier of the remote FTP server","signature":"ftp_systype(resource $ftp_stream )","inheritdoc":0,"modifier":[],"return":""},"iconv_get_encoding":{"params":{"$type":""},"docComment":"Retrieve internal configuration variables of iconv extension","signature":"iconv_get_encoding([string $type] )","inheritdoc":0,"modifier":[],"return":""},"iconv_mime_decode_headers":{"params":{"$encoded_headers":"","$mode":"","$charset":""},"docComment":"Decodes multiple  header fields at once","signature":"iconv_mime_decode_headers(string $encoded_headers ,[int $mode] ,[string $charset] )","inheritdoc":0,"modifier":[],"return":""},"iconv_mime_decode":{"params":{"$encoded_header":"","$mode":"","$charset":""},"docComment":"Decodes a  header field","signature":"iconv_mime_decode(string $encoded_header ,[int $mode] ,[string $charset] )","inheritdoc":0,"modifier":[],"return":""},"iconv_mime_encode":{"params":{"$field_name":"","$field_value":"","$preferences":""},"docComment":"Composes a  header field","signature":"iconv_mime_encode(string $field_name ,string $field_value ,[array $preferences] )","inheritdoc":0,"modifier":[],"return":""},"iconv_set_encoding":{"params":{"$type":"","$charset":""},"docComment":"Set current setting for character encoding conversion","signature":"iconv_set_encoding(string $type ,string $charset )","inheritdoc":0,"modifier":[],"return":""},"iconv_strlen":{"params":{"$str":"","$charset":""},"docComment":"Returns the character count of string","signature":"iconv_strlen(string $str ,[string $charset] )","inheritdoc":0,"modifier":[],"return":""},"iconv_strpos":{"params":{"$haystack":"","$needle":"","$offset":"","$charset":""},"docComment":"Finds position of first occurrence of a needle within a haystack","signature":"iconv_strpos(string $haystack ,string $needle ,[int $offset] ,[string $charset] )","inheritdoc":0,"modifier":[],"return":""},"iconv_strrpos":{"params":{"$haystack":"","$needle":"","$charset":""},"docComment":"Finds the last occurrence of a needle within a haystack","signature":"iconv_strrpos(string $haystack ,string $needle ,[string $charset] )","inheritdoc":0,"modifier":[],"return":""},"iconv_substr":{"params":{"$str":"","$offset":"","$length":"","$charset":""},"docComment":"Cut out part of a string","signature":"iconv_substr(string $str ,int $offset ,[int $length] ,[string $charset] )","inheritdoc":0,"modifier":[],"return":""},"iconv":{"params":{"$in_charset":"","$out_charset":"","$str":""},"docComment":"Convert string to requested character encoding","signature":"iconv(string $in_charset ,string $out_charset ,string $str )","inheritdoc":0,"modifier":[],"return":""},"ob_iconv_handler":{"params":{"$contents":"","$status":""},"docComment":"Convert character encoding as output buffer handler","signature":"ob_iconv_handler(string $contents ,int $status )","inheritdoc":0,"modifier":[],"return":""},"gd_info":{"params":[],"docComment":"Retrieve information about the currently installed GD library","signature":"gd_info( )","inheritdoc":0,"modifier":[],"return":""},"getimagesize":{"params":{"$filename":"","&$imageinfo":""},"docComment":"Get the size of an image","signature":"getimagesize(string $filename ,array &$imageinfo )","inheritdoc":0,"modifier":[],"return":""},"getimagesizefromstring":{"params":{"$imagedata":"","&$imageinfo":""},"docComment":"Get the size of an image from a string","signature":"getimagesizefromstring(string $imagedata ,array &$imageinfo )","inheritdoc":0,"modifier":[],"return":""},"image_type_to_extension":{"params":{"$imagetype":"","$include_dot":""},"docComment":"Get file extension for image type","signature":"image_type_to_extension(int $imagetype ,[bool $include_dot] )","inheritdoc":0,"modifier":[],"return":""},"image_type_to_mime_type":{"params":{"$imagetype":""},"docComment":"Get Mime-Type for image-type returned by getimagesize,\n   exif_read_data, exif_thumbnail, exif_imagetype","signature":"image_type_to_mime_type(int $imagetype )","inheritdoc":0,"modifier":[],"return":""},"image2wbmp":{"params":{"$image":"","$filename":"","$threshold":""},"docComment":"Output image to browser or file","signature":"image2wbmp(resource $image ,string $filename ,int $threshold )","inheritdoc":0,"modifier":[],"return":""},"imageaffine":{"params":{"$image":"","$affine":"","$clip":""},"docComment":"Return an image containing the affine tramsformed src image, using an optional clipping area","signature":"imageaffine(resource $image ,array $affine ,array $clip )","inheritdoc":0,"modifier":[],"return":""},"imageaffinematrixconcat":{"params":{"$m1":"","$m2":""},"docComment":"Concat two matrices (as in doing many ops in one go)","signature":"imageaffinematrixconcat(array $m1 ,array $m2 )","inheritdoc":0,"modifier":[],"return":""},"imageaffinematrixget":{"params":{"$type":"","$options":""},"docComment":"Return an image containing the affine tramsformed src image, using an optional clipping area","signature":"imageaffinematrixget(int $type ,mixed $options )","inheritdoc":0,"modifier":[],"return":""},"imagealphablending":{"params":{"$image":"","$blendmode":""},"docComment":"Set the blending mode for an image","signature":"imagealphablending(resource $image ,bool $blendmode )","inheritdoc":0,"modifier":[],"return":""},"imageantialias":{"params":{"$image":"","$enabled":""},"docComment":"Should antialias functions be used or not","signature":"imageantialias(resource $image ,bool $enabled )","inheritdoc":0,"modifier":[],"return":""},"imagearc":{"params":{"$image":"","$cx":"","$cy":"","$width":"","$height":"","$start":"","$end":"","$color":""},"docComment":"Draws an arc","signature":"imagearc(resource $image ,int $cx ,int $cy ,int $width ,int $height ,int $start ,int $end ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagechar":{"params":{"$image":"","$font":"","$x":"","$y":"","$c":"","$color":""},"docComment":"Draw a character horizontally","signature":"imagechar(resource $image ,int $font ,int $x ,int $y ,string $c ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagecharup":{"params":{"$image":"","$font":"","$x":"","$y":"","$c":"","$color":""},"docComment":"Draw a character vertically","signature":"imagecharup(resource $image ,int $font ,int $x ,int $y ,string $c ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagecolorallocate":{"params":{"$image":"","$red":"","$green":"","$blue":""},"docComment":"Allocate a color for an image","signature":"imagecolorallocate(resource $image ,int $red ,int $green ,int $blue )","inheritdoc":0,"modifier":[],"return":""},"imagecolorallocatealpha":{"params":{"$image":"","$red":"","$green":"","$blue":"","$alpha":""},"docComment":"Allocate a color for an image","signature":"imagecolorallocatealpha(resource $image ,int $red ,int $green ,int $blue ,int $alpha )","inheritdoc":0,"modifier":[],"return":""},"imagecolorat":{"params":{"$image":"","$x":"","$y":""},"docComment":"Get the index of the color of a pixel","signature":"imagecolorat(resource $image ,int $x ,int $y )","inheritdoc":0,"modifier":[],"return":""},"imagecolorclosest":{"params":{"$image":"","$red":"","$green":"","$blue":""},"docComment":"Get the index of the closest color to the specified color","signature":"imagecolorclosest(resource $image ,int $red ,int $green ,int $blue )","inheritdoc":0,"modifier":[],"return":""},"imagecolorclosestalpha":{"params":{"$image":"","$red":"","$green":"","$blue":"","$alpha":""},"docComment":"Get the index of the closest color to the specified color + alpha","signature":"imagecolorclosestalpha(resource $image ,int $red ,int $green ,int $blue ,int $alpha )","inheritdoc":0,"modifier":[],"return":""},"imagecolorclosesthwb":{"params":{"$image":"","$red":"","$green":"","$blue":""},"docComment":"Get the index of the color which has the hue, white and blackness","signature":"imagecolorclosesthwb(resource $image ,int $red ,int $green ,int $blue )","inheritdoc":0,"modifier":[],"return":""},"imagecolordeallocate":{"params":{"$image":"","$color":""},"docComment":"De-allocate a color for an image","signature":"imagecolordeallocate(resource $image ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagecolorexact":{"params":{"$image":"","$red":"","$green":"","$blue":""},"docComment":"Get the index of the specified color","signature":"imagecolorexact(resource $image ,int $red ,int $green ,int $blue )","inheritdoc":0,"modifier":[],"return":""},"imagecolorexactalpha":{"params":{"$image":"","$red":"","$green":"","$blue":"","$alpha":""},"docComment":"Get the index of the specified color + alpha","signature":"imagecolorexactalpha(resource $image ,int $red ,int $green ,int $blue ,int $alpha )","inheritdoc":0,"modifier":[],"return":""},"imagecolormatch":{"params":{"$image1":"","$image2":""},"docComment":"Makes the colors of the palette version of an image more closely match the true color version","signature":"imagecolormatch(resource $image1 ,resource $image2 )","inheritdoc":0,"modifier":[],"return":""},"imagecolorresolve":{"params":{"$image":"","$red":"","$green":"","$blue":""},"docComment":"Get the index of the specified color or its closest possible alternative","signature":"imagecolorresolve(resource $image ,int $red ,int $green ,int $blue )","inheritdoc":0,"modifier":[],"return":""},"imagecolorresolvealpha":{"params":{"$image":"","$red":"","$green":"","$blue":"","$alpha":""},"docComment":"Get the index of the specified color + alpha or its closest possible alternative","signature":"imagecolorresolvealpha(resource $image ,int $red ,int $green ,int $blue ,int $alpha )","inheritdoc":0,"modifier":[],"return":""},"imagecolorset":{"params":{"$image":"","$index":"","$red":"","$green":"","$blue":"","$alpha":""},"docComment":"Set the color for the specified palette index","signature":"imagecolorset(resource $image ,int $index ,int $red ,int $green ,int $blue ,[int $alpha] )","inheritdoc":0,"modifier":[],"return":""},"imagecolorsforindex":{"params":{"$image":"","$index":""},"docComment":"Get the colors for an index","signature":"imagecolorsforindex(resource $image ,int $index )","inheritdoc":0,"modifier":[],"return":""},"imagecolorstotal":{"params":{"$image":""},"docComment":"Find out the number of colors in an image's palette","signature":"imagecolorstotal(resource $image )","inheritdoc":0,"modifier":[],"return":""},"imagecolortransparent":{"params":{"$image":"","$color":""},"docComment":"Define a color as transparent","signature":"imagecolortransparent(resource $image ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imageconvolution":{"params":{"$image":"","$matrix":"","$div":"","$offset":""},"docComment":"Apply a 3x3 convolution matrix, using coefficient and offset","signature":"imageconvolution(resource $image ,array $matrix ,float $div ,float $offset )","inheritdoc":0,"modifier":[],"return":""},"imagecopy":{"params":{"$dst_im":"","$src_im":"","$dst_x":"","$dst_y":"","$src_x":"","$src_y":"","$src_w":"","$src_h":""},"docComment":"Copy part of an image","signature":"imagecopy(resource $dst_im ,resource $src_im ,int $dst_x ,int $dst_y ,int $src_x ,int $src_y ,int $src_w ,int $src_h )","inheritdoc":0,"modifier":[],"return":""},"imagecopymerge":{"params":{"$dst_im":"","$src_im":"","$dst_x":"","$dst_y":"","$src_x":"","$src_y":"","$src_w":"","$src_h":"","$pct":""},"docComment":"Copy and merge part of an image","signature":"imagecopymerge(resource $dst_im ,resource $src_im ,int $dst_x ,int $dst_y ,int $src_x ,int $src_y ,int $src_w ,int $src_h ,int $pct )","inheritdoc":0,"modifier":[],"return":""},"imagecopymergegray":{"params":{"$dst_im":"","$src_im":"","$dst_x":"","$dst_y":"","$src_x":"","$src_y":"","$src_w":"","$src_h":"","$pct":""},"docComment":"Copy and merge part of an image with gray scale","signature":"imagecopymergegray(resource $dst_im ,resource $src_im ,int $dst_x ,int $dst_y ,int $src_x ,int $src_y ,int $src_w ,int $src_h ,int $pct )","inheritdoc":0,"modifier":[],"return":""},"imagecopyresampled":{"params":{"$dst_image":"","$src_image":"","$dst_x":"","$dst_y":"","$src_x":"","$src_y":"","$dst_w":"","$dst_h":"","$src_w":"","$src_h":""},"docComment":"Copy and resize part of an image with resampling","signature":"imagecopyresampled(resource $dst_image ,resource $src_image ,int $dst_x ,int $dst_y ,int $src_x ,int $src_y ,int $dst_w ,int $dst_h ,int $src_w ,int $src_h )","inheritdoc":0,"modifier":[],"return":""},"imagecopyresized":{"params":{"$dst_image":"","$src_image":"","$dst_x":"","$dst_y":"","$src_x":"","$src_y":"","$dst_w":"","$dst_h":"","$src_w":"","$src_h":""},"docComment":"Copy and resize part of an image","signature":"imagecopyresized(resource $dst_image ,resource $src_image ,int $dst_x ,int $dst_y ,int $src_x ,int $src_y ,int $dst_w ,int $dst_h ,int $src_w ,int $src_h )","inheritdoc":0,"modifier":[],"return":""},"imagecreate":{"params":{"$width":"","$height":""},"docComment":"Create a new palette based image","signature":"imagecreate(int $width ,int $height )","inheritdoc":0,"modifier":[],"return":""},"imagecreatefromgd2":{"params":{"$filename":""},"docComment":"Create a new image from GD2 file or URL","signature":"imagecreatefromgd2(string $filename )","inheritdoc":0,"modifier":[],"return":""},"imagecreatefromgd2part":{"params":{"$filename":"","$srcX":"","$srcY":"","$width":"","$height":""},"docComment":"Create a new image from a given part of GD2 file or URL","signature":"imagecreatefromgd2part(string $filename ,int $srcX ,int $srcY ,int $width ,int $height )","inheritdoc":0,"modifier":[],"return":""},"imagecreatefromgd":{"params":{"$filename":""},"docComment":"Create a new image from GD file or URL","signature":"imagecreatefromgd(string $filename )","inheritdoc":0,"modifier":[],"return":""},"imagecreatefromgif":{"params":{"$filename":""},"docComment":"Create a new image from file or URL","signature":"imagecreatefromgif(string $filename )","inheritdoc":0,"modifier":[],"return":""},"imagecreatefromjpeg":{"params":{"$filename":""},"docComment":"Create a new image from file or URL","signature":"imagecreatefromjpeg(string $filename )","inheritdoc":0,"modifier":[],"return":""},"imagecreatefrompng":{"params":{"$filename":""},"docComment":"Create a new image from file or URL","signature":"imagecreatefrompng(string $filename )","inheritdoc":0,"modifier":[],"return":""},"imagecreatefromstring":{"params":{"$image":""},"docComment":"Create a new image from the image stream in the string","signature":"imagecreatefromstring(string $image )","inheritdoc":0,"modifier":[],"return":""},"imagecreatefromwbmp":{"params":{"$filename":""},"docComment":"Create a new image from file or URL","signature":"imagecreatefromwbmp(string $filename )","inheritdoc":0,"modifier":[],"return":""},"imagecreatefromwebp":{"params":{"$filename":""},"docComment":"Create a new image from file or URL","signature":"imagecreatefromwebp(string $filename )","inheritdoc":0,"modifier":[],"return":""},"imagecreatefromxbm":{"params":{"$filename":""},"docComment":"Create a new image from file or URL","signature":"imagecreatefromxbm(string $filename )","inheritdoc":0,"modifier":[],"return":""},"imagecreatefromxpm":{"params":{"$filename":""},"docComment":"Create a new image from file or URL","signature":"imagecreatefromxpm(string $filename )","inheritdoc":0,"modifier":[],"return":""},"imagecreatetruecolor":{"params":{"$width":"","$height":""},"docComment":"Create a new true color image","signature":"imagecreatetruecolor(int $width ,int $height )","inheritdoc":0,"modifier":[],"return":""},"imagecrop":{"params":{"$image":"","$rect":""},"docComment":"Crop an image using the given coordinates and size, x, y, width and height","signature":"imagecrop(resource $image ,array $rect )","inheritdoc":0,"modifier":[],"return":""},"imagecropauto":{"params":{"$image":"","$mode":"","$threshold":"","$color":""},"docComment":"Crop an image automatically using one of the available modes","signature":"imagecropauto(resource $image ,[int $mode] ,[float $threshold] ,[int $color] )","inheritdoc":0,"modifier":[],"return":""},"imagedashedline":{"params":{"$image":"","$x1":"","$y1":"","$x2":"","$y2":"","$color":""},"docComment":"Draw a dashed line","signature":"imagedashedline(resource $image ,int $x1 ,int $y1 ,int $x2 ,int $y2 ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagedestroy":{"params":{"$image":""},"docComment":"Destroy an image","signature":"imagedestroy(resource $image )","inheritdoc":0,"modifier":[],"return":""},"imageellipse":{"params":{"$image":"","$cx":"","$cy":"","$width":"","$height":"","$color":""},"docComment":"Draw an ellipse","signature":"imageellipse(resource $image ,int $cx ,int $cy ,int $width ,int $height ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagefill":{"params":{"$image":"","$x":"","$y":"","$color":""},"docComment":"Flood fill","signature":"imagefill(resource $image ,int $x ,int $y ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagefilledarc":{"params":{"$image":"","$cx":"","$cy":"","$width":"","$height":"","$start":"","$end":"","$color":"","$style":""},"docComment":"Draw a partial arc and fill it","signature":"imagefilledarc(resource $image ,int $cx ,int $cy ,int $width ,int $height ,int $start ,int $end ,int $color ,int $style )","inheritdoc":0,"modifier":[],"return":""},"imagefilledellipse":{"params":{"$image":"","$cx":"","$cy":"","$width":"","$height":"","$color":""},"docComment":"Draw a filled ellipse","signature":"imagefilledellipse(resource $image ,int $cx ,int $cy ,int $width ,int $height ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagefilledpolygon":{"params":{"$image":"","$points":"","$num_points":"","$color":""},"docComment":"Draw a filled polygon","signature":"imagefilledpolygon(resource $image ,array $points ,int $num_points ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagefilledrectangle":{"params":{"$image":"","$x1":"","$y1":"","$x2":"","$y2":"","$color":""},"docComment":"Draw a filled rectangle","signature":"imagefilledrectangle(resource $image ,int $x1 ,int $y1 ,int $x2 ,int $y2 ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagefilltoborder":{"params":{"$image":"","$x":"","$y":"","$border":"","$color":""},"docComment":"Flood fill to specific color","signature":"imagefilltoborder(resource $image ,int $x ,int $y ,int $border ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagefilter":{"params":{"$image":"","$filtertype":"","$arg1":"","$arg2":"","$arg3":"","$arg4":""},"docComment":"Applies a filter to an image","signature":"imagefilter(resource $image ,int $filtertype ,int $arg1 ,int $arg2 ,int $arg3 ,int $arg4 )","inheritdoc":0,"modifier":[],"return":""},"imageflip":{"params":{"$image":"","$mode":""},"docComment":"Flips an image using a given mode","signature":"imageflip(resource $image ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"imagefontheight":{"params":{"$font":""},"docComment":"Get font height","signature":"imagefontheight(int $font )","inheritdoc":0,"modifier":[],"return":""},"imagefontwidth":{"params":{"$font":""},"docComment":"Get font width","signature":"imagefontwidth(int $font )","inheritdoc":0,"modifier":[],"return":""},"imageftbbox":{"params":{"$size":"","$angle":"","$fontfile":"","$text":"","$extrainfo":""},"docComment":"Give the bounding box of a text using fonts via freetype2","signature":"imageftbbox(float $size ,float $angle ,string $fontfile ,string $text ,array $extrainfo )","inheritdoc":0,"modifier":[],"return":""},"imagefttext":{"params":{"$image":"","$size":"","$angle":"","$x":"","$y":"","$color":"","$fontfile":"","$text":"","$extrainfo":""},"docComment":"Write text to the image using fonts using FreeType 2","signature":"imagefttext(resource $image ,float $size ,float $angle ,int $x ,int $y ,int $color ,string $fontfile ,string $text ,array $extrainfo )","inheritdoc":0,"modifier":[],"return":""},"imagegammacorrect":{"params":{"$image":"","$inputgamma":"","$outputgamma":""},"docComment":"Apply a gamma correction to a GD image","signature":"imagegammacorrect(resource $image ,float $inputgamma ,float $outputgamma )","inheritdoc":0,"modifier":[],"return":""},"imagegd2":{"params":{"$image":"","$filename":"","$chunk_size":"","$type":""},"docComment":"Output GD2 image to browser or file","signature":"imagegd2(resource $image ,string $filename ,int $chunk_size ,[int $type] )","inheritdoc":0,"modifier":[],"return":""},"imagegd":{"params":{"$image":"","$filename":""},"docComment":"Output GD image to browser or file","signature":"imagegd(resource $image ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"imagegif":{"params":{"$image":"","$filename":""},"docComment":"Output image to browser or file","signature":"imagegif(resource $image ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"imagegrabscreen":{"params":[],"docComment":"Captures the whole screen","signature":"imagegrabscreen( )","inheritdoc":0,"modifier":[],"return":""},"imagegrabwindow":{"params":{"$window_handle":"","$client_area":""},"docComment":"Captures a window","signature":"imagegrabwindow(int $window_handle ,[int $client_area] )","inheritdoc":0,"modifier":[],"return":""},"imageinterlace":{"params":{"$image":"","$interlace":""},"docComment":"Enable or disable interlace","signature":"imageinterlace(resource $image ,[int $interlace] )","inheritdoc":0,"modifier":[],"return":""},"imageistruecolor":{"params":{"$image":""},"docComment":"Finds whether an image is a truecolor image","signature":"imageistruecolor(resource $image )","inheritdoc":0,"modifier":[],"return":""},"imagejpeg":{"params":{"$image":"","$filename":"","$quality":""},"docComment":"Output image to browser or file","signature":"imagejpeg(resource $image ,string $filename ,int $quality )","inheritdoc":0,"modifier":[],"return":""},"imagelayereffect":{"params":{"$image":"","$effect":""},"docComment":"Set the alpha blending flag to use the bundled libgd layering effects","signature":"imagelayereffect(resource $image ,int $effect )","inheritdoc":0,"modifier":[],"return":""},"imageline":{"params":{"$image":"","$x1":"","$y1":"","$x2":"","$y2":"","$color":""},"docComment":"Draw a line","signature":"imageline(resource $image ,int $x1 ,int $y1 ,int $x2 ,int $y2 ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imageloadfont":{"params":{"$file":""},"docComment":"Load a new font","signature":"imageloadfont(string $file )","inheritdoc":0,"modifier":[],"return":""},"imagepalettecopy":{"params":{"$destination":"","$source":""},"docComment":"Copy the palette from one image to another","signature":"imagepalettecopy(resource $destination ,resource $source )","inheritdoc":0,"modifier":[],"return":""},"imagepalettetotruecolor":{"params":{"$src":""},"docComment":"Converts a palette based image to true color","signature":"imagepalettetotruecolor(resource $src )","inheritdoc":0,"modifier":[],"return":""},"imagepng":{"params":{"$image":"","$filename":"","$quality":"","$filters":""},"docComment":"Output a PNG image to either the browser or a file","signature":"imagepng(resource $image ,string $filename ,int $quality ,int $filters )","inheritdoc":0,"modifier":[],"return":""},"imagepolygon":{"params":{"$image":"","$points":"","$num_points":"","$color":""},"docComment":"Draws a polygon","signature":"imagepolygon(resource $image ,array $points ,int $num_points ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagepsbbox":{"params":{"$text":"","$font":"","$size":"","$space":"","$tightness":"","$angle":""},"docComment":"Give the bounding box of a text rectangle using PostScript Type1 fonts","signature":"imagepsbbox(string $text ,resource $font ,int $size ,int $space ,int $tightness ,float $angle )","inheritdoc":0,"modifier":[],"return":""},"imagepsencodefont":{"params":{"$font_index":"","$encodingfile":""},"docComment":"Change the character encoding vector of a font","signature":"imagepsencodefont(resource $font_index ,string $encodingfile )","inheritdoc":0,"modifier":[],"return":""},"imagepsextendfont":{"params":{"$font_index":"","$extend":""},"docComment":"Extend or condense a font","signature":"imagepsextendfont(resource $font_index ,float $extend )","inheritdoc":0,"modifier":[],"return":""},"imagepsfreefont":{"params":{"$font_index":""},"docComment":"Free memory used by a PostScript Type 1 font","signature":"imagepsfreefont(resource $font_index )","inheritdoc":0,"modifier":[],"return":""},"imagepsloadfont":{"params":{"$filename":""},"docComment":"Load a PostScript Type 1 font from file","signature":"imagepsloadfont(string $filename )","inheritdoc":0,"modifier":[],"return":""},"imagepsslantfont":{"params":{"$font_index":"","$slant":""},"docComment":"Slant a font","signature":"imagepsslantfont(resource $font_index ,float $slant )","inheritdoc":0,"modifier":[],"return":""},"imagepstext":{"params":{"$image":"","$text":"","$font_index":"","$size":"","$foreground":"","$background":"","$x":"","$y":"","$space":"","$tightness":"","$angle":"","$antialias_steps":""},"docComment":"Draws a text over an image using PostScript Type1 fonts","signature":"imagepstext(resource $image ,string $text ,resource $font_index ,int $size ,int $foreground ,int $background ,int $x ,int $y ,[int $space] ,[int $tightness] ,[float $angle] ,[int $antialias_steps] )","inheritdoc":0,"modifier":[],"return":""},"imagerectangle":{"params":{"$image":"","$x1":"","$y1":"","$x2":"","$y2":"","$color":""},"docComment":"Draw a rectangle","signature":"imagerectangle(resource $image ,int $x1 ,int $y1 ,int $x2 ,int $y2 ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagerotate":{"params":{"$image":"","$angle":"","$bgd_color":"","$ignore_transparent":""},"docComment":"Rotate an image with a given angle","signature":"imagerotate(resource $image ,float $angle ,int $bgd_color ,[int $ignore_transparent] )","inheritdoc":0,"modifier":[],"return":""},"imagesavealpha":{"params":{"$image":"","$saveflag":""},"docComment":"Set the flag to save full alpha channel information (as opposed to single-color transparency) when saving PNG images","signature":"imagesavealpha(resource $image ,bool $saveflag )","inheritdoc":0,"modifier":[],"return":""},"imagescale":{"params":{"$image":"","$new_width":"","$new_height":"","$mode":""},"docComment":"Scale an image using the given new width and height","signature":"imagescale(resource $image ,int $new_width ,[int $new_height] ,[int $mode] )","inheritdoc":0,"modifier":[],"return":""},"imagesetbrush":{"params":{"$image":"","$brush":""},"docComment":"Set the brush image for line drawing","signature":"imagesetbrush(resource $image ,resource $brush )","inheritdoc":0,"modifier":[],"return":""},"imagesetinterpolation":{"params":{"$image":"","$method":""},"docComment":"Set the interpolation method","signature":"imagesetinterpolation(resource $image ,[int $method] )","inheritdoc":0,"modifier":[],"return":""},"imagesetpixel":{"params":{"$image":"","$x":"","$y":"","$color":""},"docComment":"Set a single pixel","signature":"imagesetpixel(resource $image ,int $x ,int $y ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagesetstyle":{"params":{"$image":"","$style":""},"docComment":"Set the style for line drawing","signature":"imagesetstyle(resource $image ,array $style )","inheritdoc":0,"modifier":[],"return":""},"imagesetthickness":{"params":{"$image":"","$thickness":""},"docComment":"Set the thickness for line drawing","signature":"imagesetthickness(resource $image ,int $thickness )","inheritdoc":0,"modifier":[],"return":""},"imagesettile":{"params":{"$image":"","$tile":""},"docComment":"Set the tile image for filling","signature":"imagesettile(resource $image ,resource $tile )","inheritdoc":0,"modifier":[],"return":""},"imagestring":{"params":{"$image":"","$font":"","$x":"","$y":"","$string":"","$color":""},"docComment":"Draw a string horizontally","signature":"imagestring(resource $image ,int $font ,int $x ,int $y ,string $string ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagestringup":{"params":{"$image":"","$font":"","$x":"","$y":"","$string":"","$color":""},"docComment":"Draw a string vertically","signature":"imagestringup(resource $image ,int $font ,int $x ,int $y ,string $string ,int $color )","inheritdoc":0,"modifier":[],"return":""},"imagesx":{"params":{"$image":""},"docComment":"Get image width","signature":"imagesx(resource $image )","inheritdoc":0,"modifier":[],"return":""},"imagesy":{"params":{"$image":""},"docComment":"Get image height","signature":"imagesy(resource $image )","inheritdoc":0,"modifier":[],"return":""},"imagetruecolortopalette":{"params":{"$image":"","$dither":"","$ncolors":""},"docComment":"Convert a true color image to a palette image","signature":"imagetruecolortopalette(resource $image ,bool $dither ,int $ncolors )","inheritdoc":0,"modifier":[],"return":""},"imagettfbbox":{"params":{"$size":"","$angle":"","$fontfile":"","$text":""},"docComment":"Give the bounding box of a text using TrueType fonts","signature":"imagettfbbox(float $size ,float $angle ,string $fontfile ,string $text )","inheritdoc":0,"modifier":[],"return":""},"imagettftext":{"params":{"$image":"","$size":"","$angle":"","$x":"","$y":"","$color":"","$fontfile":"","$text":""},"docComment":"Write text to the image using TrueType fonts","signature":"imagettftext(resource $image ,float $size ,float $angle ,int $x ,int $y ,int $color ,string $fontfile ,string $text )","inheritdoc":0,"modifier":[],"return":""},"imagetypes":{"params":[],"docComment":"Return the image types supported by this PHP build","signature":"imagetypes( )","inheritdoc":0,"modifier":[],"return":""},"imagewbmp":{"params":{"$image":"","$filename":"","$foreground":""},"docComment":"Output image to browser or file","signature":"imagewbmp(resource $image ,string $filename ,int $foreground )","inheritdoc":0,"modifier":[],"return":""},"imagewebp":{"params":{"$image":"","$filename":""},"docComment":"Output an WebP image to browser or file","signature":"imagewebp(resource $image ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"imagexbm":{"params":{"$image":"","$filename":"","$foreground":""},"docComment":"Output an XBM image to browser or file","signature":"imagexbm(resource $image ,string $filename ,int $foreground )","inheritdoc":0,"modifier":[],"return":""},"iptcembed":{"params":{"$iptcdata":"","$jpeg_file_name":"","$spool":""},"docComment":"Embeds binary IPTC data into a JPEG image","signature":"iptcembed(string $iptcdata ,string $jpeg_file_name ,int $spool )","inheritdoc":0,"modifier":[],"return":""},"iptcparse":{"params":{"$iptcblock":""},"docComment":"Parse a binary IPTC block into single tags.","signature":"iptcparse(string $iptcblock )","inheritdoc":0,"modifier":[],"return":""},"jpeg2wbmp":{"params":{"$jpegname":"","$wbmpname":"","$dest_height":"","$dest_width":"","$threshold":""},"docComment":"Convert JPEG image file to WBMP image file","signature":"jpeg2wbmp(string $jpegname ,string $wbmpname ,int $dest_height ,int $dest_width ,int $threshold )","inheritdoc":0,"modifier":[],"return":""},"png2wbmp":{"params":{"$pngname":"","$wbmpname":"","$dest_height":"","$dest_width":"","$threshold":""},"docComment":"Convert PNG image file to WBMP image file","signature":"png2wbmp(string $pngname ,string $wbmpname ,int $dest_height ,int $dest_width ,int $threshold )","inheritdoc":0,"modifier":[],"return":""},"grapheme_extract":{"params":{"$haystack":"","$size":"","$extract_type":"","$start":"","&$next":""},"docComment":"Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8.","signature":"grapheme_extract(string $haystack ,int $size ,int $extract_type ,[int $start] ,int &$next )","inheritdoc":0,"modifier":[],"return":""},"grapheme_stripos":{"params":{"$haystack":"","$needle":"","$offset":""},"docComment":"Find position (in grapheme units) of first occurrence of a case-insensitive string","signature":"grapheme_stripos(string $haystack ,string $needle ,[int $offset] )","inheritdoc":0,"modifier":[],"return":""},"grapheme_stristr":{"params":{"$haystack":"","$needle":"","$before_needle":""},"docComment":"Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack.","signature":"grapheme_stristr(string $haystack ,string $needle ,[bool $before_needle] )","inheritdoc":0,"modifier":[],"return":""},"grapheme_strlen":{"params":{"$input":""},"docComment":"Get string length in grapheme units","signature":"grapheme_strlen(string $input )","inheritdoc":0,"modifier":[],"return":""},"grapheme_strpos":{"params":{"$haystack":"","$needle":"","$offset":""},"docComment":"Find position (in grapheme units) of first occurrence of a string","signature":"grapheme_strpos(string $haystack ,string $needle ,[int $offset] )","inheritdoc":0,"modifier":[],"return":""},"grapheme_strripos":{"params":{"$haystack":"","$needle":"","$offset":""},"docComment":"Find position (in grapheme units) of last occurrence of a case-insensitive string","signature":"grapheme_strripos(string $haystack ,string $needle ,[int $offset] )","inheritdoc":0,"modifier":[],"return":""},"grapheme_strrpos":{"params":{"$haystack":"","$needle":"","$offset":""},"docComment":"Find position (in grapheme units) of last occurrence of a string","signature":"grapheme_strrpos(string $haystack ,string $needle ,[int $offset] )","inheritdoc":0,"modifier":[],"return":""},"grapheme_strstr":{"params":{"$haystack":"","$needle":"","$before_needle":""},"docComment":"Returns part of haystack string from the first occurrence of needle to the end of haystack.","signature":"grapheme_strstr(string $haystack ,string $needle ,[bool $before_needle] )","inheritdoc":0,"modifier":[],"return":""},"grapheme_substr":{"params":{"$string":"","$start":"","$length":""},"docComment":"Return part of a string","signature":"grapheme_substr(string $string ,int $start ,int $length )","inheritdoc":0,"modifier":[],"return":""},"idn_to_ascii":{"params":{"$domain":"","$options":"","$variant":"","&$idna_info":""},"docComment":"Convert domain name to IDNA ASCII form.","signature":"idn_to_ascii(string $domain ,[int $options] ,[int $variant] ,array &$idna_info )","inheritdoc":0,"modifier":[],"return":""},"idn_to_unicode":{"params":{"$domain":"","$options":"","$variant":"","&$idna_info":""},"docComment":"Convert domain name from IDNA ASCII to Unicode.","signature":"idn_to_utf8(string $domain ,[int $options] ,[int $variant] ,array &$idna_info )","inheritdoc":0,"modifier":[],"return":""},"idn_to_utf8":{"params":{"$domain":"","$options":"","$variant":"","&$idna_info":""},"docComment":"Convert domain name from IDNA ASCII to Unicode.","signature":"idn_to_utf8(string $domain ,[int $options] ,[int $variant] ,array &$idna_info )","inheritdoc":0,"modifier":[],"return":""},"intl_error_name":{"params":{"$error_code":""},"docComment":"Get symbolic name for a given error code","signature":"intl_error_name(int $error_code )","inheritdoc":0,"modifier":[],"return":""},"intl_get_error_code":{"params":[],"docComment":"Get the last error code","signature":"intl_get_error_code( )","inheritdoc":0,"modifier":[],"return":""},"intl_get_error_message":{"params":[],"docComment":"Get description of the last error","signature":"intl_get_error_message( )","inheritdoc":0,"modifier":[],"return":""},"intl_is_failure":{"params":{"$error_code":""},"docComment":"Check whether the given error code indicates failure","signature":"intl_is_failure(int $error_code )","inheritdoc":0,"modifier":[],"return":""},"json_decode":{"params":{"$json":"","$assoc":"","$depth":"","$options":""},"docComment":"Decodes a JSON string","signature":"json_decode(string $json ,[bool $assoc] ,[int $depth] ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"json_encode":{"params":{"$value":"","$options":"","$depth":""},"docComment":"Returns the JSON representation of a value","signature":"json_encode(mixed $value ,[int $options] ,[int $depth] )","inheritdoc":0,"modifier":[],"return":""},"json_last_error_msg":{"params":[],"docComment":"Returns the error string of the last json_encode() or json_decode() call","signature":"json_last_error_msg( )","inheritdoc":0,"modifier":[],"return":""},"json_last_error":{"params":[],"docComment":"Returns the last error occurred","signature":"json_last_error( )","inheritdoc":0,"modifier":[],"return":""},"mb_check_encoding":{"params":{"$var":"","$encoding":""},"docComment":"Check if the string is valid for the specified encoding","signature":"mb_check_encoding([string $var] ,[string $encoding] )","inheritdoc":0,"modifier":[],"return":""},"mb_convert_case":{"params":{"$str":"","$mode":"","$encoding":""},"docComment":"Perform case folding on a string","signature":"mb_convert_case(string $str ,int $mode ,[string $encoding] )","inheritdoc":0,"modifier":[],"return":""},"mb_convert_encoding":{"params":{"$str":"","$to_encoding":"","$from_encoding":""},"docComment":"Convert character encoding","signature":"mb_convert_encoding(string $str ,string $to_encoding ,mixed $from_encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_convert_kana":{"params":{"$str":"","$option":"","$encoding":""},"docComment":"Convert \"kana\" one from another (\"zen-kaku\", \"han-kaku\" and more)","signature":"mb_convert_kana(string $str ,[string $option] ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_convert_variables":{"params":{"$to_encoding":"","$from_encoding":"","&$vars":"","&$...":""},"docComment":"Convert character code in variable(s)","signature":"mb_convert_variables(string $to_encoding ,mixed $from_encoding ,mixed &$vars ,mixed &$... )","inheritdoc":0,"modifier":[],"return":""},"mb_decode_mimeheader":{"params":{"$str":""},"docComment":"Decode string in MIME header field","signature":"mb_decode_mimeheader(string $str )","inheritdoc":0,"modifier":[],"return":""},"mb_decode_numericentity":{"params":{"$str":"","$convmap":"","$encoding":""},"docComment":"Decode HTML numeric string reference to character","signature":"mb_decode_numericentity(string $str ,array $convmap ,[string $encoding] )","inheritdoc":0,"modifier":[],"return":""},"mb_detect_encoding":{"params":{"$str":"","$encoding_list":"","$strict":""},"docComment":"Detect character encoding","signature":"mb_detect_encoding(string $str ,[mixed $encoding_list] ,[bool $strict] )","inheritdoc":0,"modifier":[],"return":""},"mb_detect_order":{"params":{"$encoding_list":""},"docComment":"Set\/Get character encoding detection order","signature":"mb_detect_order(mixed $encoding_list )","inheritdoc":0,"modifier":[],"return":""},"mb_encode_mimeheader":{"params":{"$str":"","$charset":"","$transfer_encoding":"","$linefeed":"","$indent":""},"docComment":"Encode string for MIME header","signature":"mb_encode_mimeheader(string $str ,string $charset ,string $transfer_encoding ,[string $linefeed] ,[int $indent] )","inheritdoc":0,"modifier":[],"return":""},"mb_encode_numericentity":{"params":{"$str":"","$convmap":"","$encoding":"","$is_hex":""},"docComment":"Encode character to HTML numeric string reference","signature":"mb_encode_numericentity(string $str ,array $convmap ,[string $encoding] ,bool $is_hex )","inheritdoc":0,"modifier":[],"return":""},"mb_encoding_aliases":{"params":{"$encoding":""},"docComment":"Get aliases of a known encoding type","signature":"mb_encoding_aliases(string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_ereg_match":{"params":{"$pattern":"","$string":"","$option":""},"docComment":"Regular expression match for multibyte string","signature":"mb_ereg_match(string $pattern ,string $string ,[string $option] )","inheritdoc":0,"modifier":[],"return":""},"mb_ereg_replace_callback":{"params":{"$pattern":"","$callback":"","$string":"","$option":""},"docComment":"Perform a regular expresssion seach and replace with multibyte support using a callback\n  ","signature":"mb_ereg_replace_callback(string $pattern ,callable $callback ,string $string ,[string $option] )","inheritdoc":0,"modifier":[],"return":""},"mb_ereg_replace":{"params":{"$pattern":"","$replacement":"","$string":"","$option":""},"docComment":"Replace regular expression with multibyte support","signature":"mb_ereg_replace(string $pattern ,string $replacement ,string $string ,[string $option] )","inheritdoc":0,"modifier":[],"return":""},"mb_ereg_search_getpos":{"params":[],"docComment":"Returns start point for next regular expression match","signature":"mb_ereg_search_getpos( )","inheritdoc":0,"modifier":[],"return":""},"mb_ereg_search_getregs":{"params":[],"docComment":"Retrieve the result from the last multibyte regular expression match","signature":"mb_ereg_search_getregs( )","inheritdoc":0,"modifier":[],"return":""},"mb_ereg_search_init":{"params":{"$string":"","$pattern":"","$option":""},"docComment":"Setup string and regular expression for a multibyte regular expression match","signature":"mb_ereg_search_init(string $string ,string $pattern ,[string $option] )","inheritdoc":0,"modifier":[],"return":""},"mb_ereg_search_pos":{"params":{"$pattern":"","$option":""},"docComment":"Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string","signature":"mb_ereg_search_pos(string $pattern ,[string $option] )","inheritdoc":0,"modifier":[],"return":""},"mb_ereg_search_regs":{"params":{"$pattern":"","$option":""},"docComment":"Returns the matched part of a multibyte regular expression","signature":"mb_ereg_search_regs(string $pattern ,[string $option] )","inheritdoc":0,"modifier":[],"return":""},"mb_ereg_search_setpos":{"params":{"$position":""},"docComment":"Set start point of next regular expression match","signature":"mb_ereg_search_setpos(int $position )","inheritdoc":0,"modifier":[],"return":""},"mb_ereg_search":{"params":{"$pattern":"","$option":""},"docComment":"Multibyte regular expression match for predefined multibyte string","signature":"mb_ereg_search(string $pattern ,[string $option] )","inheritdoc":0,"modifier":[],"return":""},"mb_ereg":{"params":{"$pattern":"","$string":"","$regs":""},"docComment":"Regular expression match with multibyte support","signature":"mb_ereg(string $pattern ,string $string ,array $regs )","inheritdoc":0,"modifier":[],"return":""},"mb_eregi_replace":{"params":{"$pattern":"","$replace":"","$string":"","$option":""},"docComment":"Replace regular expression with multibyte support ignoring case","signature":"mb_eregi_replace(string $pattern ,string $replace ,string $string ,[string $option] )","inheritdoc":0,"modifier":[],"return":""},"mb_eregi":{"params":{"$pattern":"","$string":"","$regs":""},"docComment":"Regular expression match ignoring case with multibyte support","signature":"mb_eregi(string $pattern ,string $string ,array $regs )","inheritdoc":0,"modifier":[],"return":""},"mb_get_info":{"params":{"$type":""},"docComment":"Get internal settings of mbstring","signature":"mb_get_info([string $type] )","inheritdoc":0,"modifier":[],"return":""},"mb_http_input":{"params":{"$type":""},"docComment":"Detect HTTP input character encoding","signature":"mb_http_input([string $type] )","inheritdoc":0,"modifier":[],"return":""},"mb_http_output":{"params":{"$encoding":""},"docComment":"Set\/Get HTTP output character encoding","signature":"mb_http_output(string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_internal_encoding":{"params":{"$encoding":""},"docComment":"Set\/Get internal character encoding","signature":"mb_internal_encoding([string $encoding] )","inheritdoc":0,"modifier":[],"return":""},"mb_language":{"params":{"$language":""},"docComment":"Set\/Get current language","signature":"mb_language(string $language )","inheritdoc":0,"modifier":[],"return":""},"mb_list_encodings":{"params":[],"docComment":"Returns an array of all supported encodings","signature":"mb_list_encodings( )","inheritdoc":0,"modifier":[],"return":""},"mb_output_handler":{"params":{"$contents":"","$status":""},"docComment":"Callback function converts character encoding in output buffer","signature":"mb_output_handler(string $contents ,int $status )","inheritdoc":0,"modifier":[],"return":""},"mb_parse_str":{"params":{"$encoded_string":"","&$result":""},"docComment":"Parse GET\/POST\/COOKIE data and set global variable","signature":"mb_parse_str(string $encoded_string ,array &$result )","inheritdoc":0,"modifier":[],"return":""},"mb_preferred_mime_name":{"params":{"$encoding":""},"docComment":"Get MIME charset string","signature":"mb_preferred_mime_name(string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_regex_encoding":{"params":{"$encoding":""},"docComment":"Set\/Get character encoding for multibyte regex","signature":"mb_regex_encoding(string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_regex_set_options":{"params":{"$options":""},"docComment":"Set\/Get the default options for mbregex functions","signature":"mb_regex_set_options(string $options )","inheritdoc":0,"modifier":[],"return":""},"mb_send_mail":{"params":{"$to":"","$subject":"","$message":"","$additional_headers":"","$additional_parameter":""},"docComment":"Send encoded mail","signature":"mb_send_mail(string $to ,string $subject ,string $message ,[string $additional_headers] ,[string $additional_parameter] )","inheritdoc":0,"modifier":[],"return":""},"mb_split":{"params":{"$pattern":"","$string":"","$limit":""},"docComment":"Split multibyte string using regular expression","signature":"mb_split(string $pattern ,string $string ,[int $limit] )","inheritdoc":0,"modifier":[],"return":""},"mb_strcut":{"params":{"$str":"","$start":"","$length":"","$encoding":""},"docComment":"Get part of string","signature":"mb_strcut(string $str ,int $start ,int $length ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_strimwidth":{"params":{"$str":"","$start":"","$width":"","$trimmarker":"","$encoding":""},"docComment":"Get truncated string with specified width","signature":"mb_strimwidth(string $str ,int $start ,int $width ,string $trimmarker ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_stripos":{"params":{"$haystack":"","$needle":"","$offset":"","$encoding":""},"docComment":"Finds position of first occurrence of a string within another, case insensitive","signature":"mb_stripos(string $haystack ,string $needle ,int $offset ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_stristr":{"params":{"$haystack":"","$needle":"","$before_needle":"","$encoding":""},"docComment":"Finds first occurrence of a string within another, case insensitive","signature":"mb_stristr(string $haystack ,string $needle ,[bool $before_needle] ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_strlen":{"params":{"$str":"","$encoding":""},"docComment":"Get string length","signature":"mb_strlen(string $str ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_strpos":{"params":{"$haystack":"","$needle":"","$offset":"","$encoding":""},"docComment":"Find position of first occurrence of string in a string","signature":"mb_strpos(string $haystack ,string $needle ,[int $offset] ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_strrchr":{"params":{"$haystack":"","$needle":"","$part":"","$encoding":""},"docComment":"Finds the last occurrence of a character in a string within another","signature":"mb_strrchr(string $haystack ,string $needle ,[bool $part] ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_strrichr":{"params":{"$haystack":"","$needle":"","$part":"","$encoding":""},"docComment":"Finds the last occurrence of a character in a string within another, case insensitive","signature":"mb_strrichr(string $haystack ,string $needle ,[bool $part] ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_strripos":{"params":{"$haystack":"","$needle":"","$offset":"","$encoding":""},"docComment":"Finds position of last occurrence of a string within another, case insensitive","signature":"mb_strripos(string $haystack ,string $needle ,[int $offset] ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_strrpos":{"params":{"$haystack":"","$needle":"","$offset":"","$encoding":""},"docComment":"Find position of last occurrence of a string in a string","signature":"mb_strrpos(string $haystack ,string $needle ,[int $offset] ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_strstr":{"params":{"$haystack":"","$needle":"","$before_needle":"","$encoding":""},"docComment":"Finds first occurrence of a string within another","signature":"mb_strstr(string $haystack ,string $needle ,[bool $before_needle] ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_strtolower":{"params":{"$str":"","$encoding":""},"docComment":"Make a string lowercase","signature":"mb_strtolower(string $str ,[string $encoding] )","inheritdoc":0,"modifier":[],"return":""},"mb_strtoupper":{"params":{"$str":"","$encoding":""},"docComment":"Make a string uppercase","signature":"mb_strtoupper(string $str ,[string $encoding] )","inheritdoc":0,"modifier":[],"return":""},"mb_strwidth":{"params":{"$str":"","$encoding":""},"docComment":"Return width of string","signature":"mb_strwidth(string $str ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_substitute_character":{"params":{"$substrchar":""},"docComment":"Set\/Get substitution character","signature":"mb_substitute_character(mixed $substrchar )","inheritdoc":0,"modifier":[],"return":""},"mb_substr_count":{"params":{"$haystack":"","$needle":"","$encoding":""},"docComment":"Count the number of substring occurrences","signature":"mb_substr_count(string $haystack ,string $needle ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mb_substr":{"params":{"$str":"","$start":"","$length":"","$encoding":""},"docComment":"Get part of string","signature":"mb_substr(string $str ,int $start ,int $length ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"nsapi_request_headers":{"params":[],"docComment":"Fetch all HTTP request headers","signature":"nsapi_request_headers( )","inheritdoc":0,"modifier":[],"return":""},"nsapi_response_headers":{"params":[],"docComment":"\n   Fetch all HTTP response headers\n  ","signature":"nsapi_response_headers( )","inheritdoc":0,"modifier":[],"return":""},"nsapi_virtual":{"params":{"$uri":""},"docComment":"Perform an NSAPI sub-request","signature":"nsapi_virtual(string $uri )","inheritdoc":0,"modifier":[],"return":""},"aggregate_info":{"params":{"$object":""},"docComment":"\n   Gets aggregation information for a given object\n  ","signature":"aggregate_info(object $object )","inheritdoc":0,"modifier":[],"return":""},"aggregate_methods_by_list":{"params":{"$object":"","$class_name":"","$methods_list":"","$exclude":""},"docComment":"\n   Selective dynamic class methods aggregation to an object\n  ","signature":"aggregate_methods_by_list(object $object ,string $class_name ,array $methods_list ,[bool $exclude] )","inheritdoc":0,"modifier":[],"return":""},"aggregate_methods_by_regexp":{"params":{"$object":"","$class_name":"","$regexp":"","$exclude":""},"docComment":"\n   Selective class methods aggregation to an object using a regular\n   expression\n  ","signature":"aggregate_methods_by_regexp(object $object ,string $class_name ,string $regexp ,[bool $exclude] )","inheritdoc":0,"modifier":[],"return":""},"aggregate_methods":{"params":{"$object":"","$class_name":""},"docComment":"\n   Dynamic class and object aggregation of methods\n  ","signature":"aggregate_methods(object $object ,string $class_name )","inheritdoc":0,"modifier":[],"return":""},"aggregate_properties_by_list":{"params":{"$object":"","$class_name":"","$properties_list":"","$exclude":""},"docComment":"\n   Selective dynamic class properties aggregation to an object\n  ","signature":"aggregate_properties_by_list(object $object ,string $class_name ,array $properties_list ,[bool $exclude] )","inheritdoc":0,"modifier":[],"return":""},"aggregate_properties_by_regexp":{"params":{"$object":"","$class_name":"","$regexp":"","$exclude":""},"docComment":"\n   Selective class properties aggregation to an object using a regular\n   expression\n  ","signature":"aggregate_properties_by_regexp(object $object ,string $class_name ,string $regexp ,[bool $exclude] )","inheritdoc":0,"modifier":[],"return":""},"aggregate_properties":{"params":{"$object":"","$class_name":""},"docComment":"\n   Dynamic aggregation of  class properties to an object\n  ","signature":"aggregate_properties(object $object ,string $class_name )","inheritdoc":0,"modifier":[],"return":""},"aggregate":{"params":{"$object":"","$class_name":""},"docComment":"\n   Dynamic class and object aggregation of methods and properties\n  ","signature":"aggregate(object $object ,string $class_name )","inheritdoc":0,"modifier":[],"return":""},"aggregation_info":{"params":{"$object":""},"docComment":"\n   Gets aggregation information for a given object\n  ","signature":"aggregate_info(object $object )","inheritdoc":0,"modifier":[],"return":""},"deaggregate":{"params":{"$object":"","$class_name":""},"docComment":"\n   Removes the aggregated methods and properties from an object\n  ","signature":"deaggregate(object $object ,string $class_name )","inheritdoc":0,"modifier":[],"return":""},"pcntl_alarm":{"params":{"$seconds":""},"docComment":"Set an alarm clock for delivery of a signal","signature":"pcntl_alarm(int $seconds )","inheritdoc":0,"modifier":[],"return":""},"pcntl_errno":{"params":{"$errno":""},"docComment":"Retrieve the system error message associated with the given errno","signature":"pcntl_strerror(int $errno )","inheritdoc":0,"modifier":[],"return":""},"pcntl_exec":{"params":{"$path":"","$args":"","$envs":""},"docComment":"Executes specified program in current process space","signature":"pcntl_exec(string $path ,array $args ,array $envs )","inheritdoc":0,"modifier":[],"return":""},"pcntl_fork":{"params":[],"docComment":"Forks the currently running process","signature":"pcntl_fork( )","inheritdoc":0,"modifier":[],"return":""},"pcntl_get_last_error":{"params":[],"docComment":"Retrieve the error number set by the last pcntl function which failed","signature":"pcntl_get_last_error( )","inheritdoc":0,"modifier":[],"return":""},"pcntl_getpriority":{"params":{"$pid":"","$process_identifier":""},"docComment":"Get the priority of any process","signature":"pcntl_getpriority([int $pid] ,[int $process_identifier] )","inheritdoc":0,"modifier":[],"return":""},"pcntl_setpriority":{"params":{"$priority":"","$pid":"","$process_identifier":""},"docComment":"Change the priority of any process","signature":"pcntl_setpriority(int $priority ,[int $pid] ,[int $process_identifier] )","inheritdoc":0,"modifier":[],"return":""},"pcntl_signal_dispatch":{"params":[],"docComment":"Calls signal handlers for pending signals","signature":"pcntl_signal_dispatch( )","inheritdoc":0,"modifier":[],"return":""},"pcntl_signal":{"params":{"$signo":"","$handler":"","$restart_syscalls":""},"docComment":"Installs a signal handler","signature":"pcntl_signal(int $signo , $handler ,[bool $restart_syscalls] )","inheritdoc":0,"modifier":[],"return":""},"pcntl_sigprocmask":{"params":{"$how":"","$set":"","&$oldset":""},"docComment":"Sets and retrieves blocked signals","signature":"pcntl_sigprocmask(int $how ,array $set ,array &$oldset )","inheritdoc":0,"modifier":[],"return":""},"pcntl_sigtimedwait":{"params":{"$set":"","&$siginfo":"","$seconds":"","$nanoseconds":""},"docComment":"Waits for signals, with a timeout","signature":"pcntl_sigtimedwait(array $set ,array &$siginfo ,[int $seconds] ,[int $nanoseconds] )","inheritdoc":0,"modifier":[],"return":""},"pcntl_sigwaitinfo":{"params":{"$set":"","&$siginfo":""},"docComment":"Waits for signals","signature":"pcntl_sigwaitinfo(array $set ,array &$siginfo )","inheritdoc":0,"modifier":[],"return":""},"pcntl_strerror":{"params":{"$errno":""},"docComment":"Retrieve the system error message associated with the given errno","signature":"pcntl_strerror(int $errno )","inheritdoc":0,"modifier":[],"return":""},"pcntl_wait":{"params":{"&$status":"","$options":""},"docComment":"Waits on or returns the status of a forked child","signature":"pcntl_wait(int &$status ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"pcntl_waitpid":{"params":{"$pid":"","&$status":"","$options":""},"docComment":"Waits on or returns the status of a forked child","signature":"pcntl_waitpid(int $pid ,int &$status ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"pcntl_wexitstatus":{"params":{"$status":""},"docComment":"Returns the return code of a terminated child","signature":"pcntl_wexitstatus(int $status )","inheritdoc":0,"modifier":[],"return":""},"pcntl_wifexited":{"params":{"$status":""},"docComment":"Checks if status code represents a normal exit","signature":"pcntl_wifexited(int $status )","inheritdoc":0,"modifier":[],"return":""},"pcntl_wifsignaled":{"params":{"$status":""},"docComment":"Checks whether the status code represents a termination due to a signal","signature":"pcntl_wifsignaled(int $status )","inheritdoc":0,"modifier":[],"return":""},"pcntl_wifstopped":{"params":{"$status":""},"docComment":"Checks whether the child process is currently stopped","signature":"pcntl_wifstopped(int $status )","inheritdoc":0,"modifier":[],"return":""},"pcntl_wstopsig":{"params":{"$status":""},"docComment":"Returns the signal which caused the child to stop","signature":"pcntl_wstopsig(int $status )","inheritdoc":0,"modifier":[],"return":""},"pcntl_wtermsig":{"params":{"$status":""},"docComment":"Returns the signal which caused the child to terminate","signature":"pcntl_wtermsig(int $status )","inheritdoc":0,"modifier":[],"return":""},"preg_filter":{"params":{"$pattern":"","$replacement":"","$subject":"","$limit":"","&$count":""},"docComment":"Perform a regular expression search and replace","signature":"preg_filter(mixed $pattern ,mixed $replacement ,mixed $subject ,[int $limit] ,int &$count )","inheritdoc":0,"modifier":[],"return":""},"preg_grep":{"params":{"$pattern":"","$input":"","$flags":""},"docComment":"Return array entries that match the pattern","signature":"preg_grep(string $pattern ,array $input ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"preg_last_error":{"params":[],"docComment":"Returns the error code of the last PCRE regex execution","signature":"preg_last_error( )","inheritdoc":0,"modifier":[],"return":""},"preg_match_all":{"params":{"$pattern":"","$subject":"","&$matches":"","$flags":"","$offset":""},"docComment":"Perform a global regular expression match","signature":"preg_match_all(string $pattern ,string $subject ,array &$matches ,[int $flags] ,[int $offset] )","inheritdoc":0,"modifier":[],"return":""},"preg_match":{"params":{"$pattern":"","$subject":"","&$matches":"","$flags":"","$offset":""},"docComment":"Perform a regular expression match","signature":"preg_match(string $pattern ,string $subject ,array &$matches ,[int $flags] ,[int $offset] )","inheritdoc":0,"modifier":[],"return":""},"preg_quote":{"params":{"$str":"","$delimiter":""},"docComment":"Quote regular expression characters","signature":"preg_quote(string $str ,[string $delimiter] )","inheritdoc":0,"modifier":[],"return":""},"preg_replace_callback":{"params":{"$pattern":"","$callback":"","$subject":"","$limit":"","&$count":""},"docComment":"Perform a regular expression search and replace using a callback","signature":"preg_replace_callback(mixed $pattern ,callable $callback ,mixed $subject ,[int $limit] ,int &$count )","inheritdoc":0,"modifier":[],"return":""},"preg_replace":{"params":{"$pattern":"","$replacement":"","$subject":"","$limit":"","&$count":""},"docComment":"Perform a regular expression search and replace","signature":"preg_replace(mixed $pattern ,mixed $replacement ,mixed $subject ,[int $limit] ,int &$count )","inheritdoc":0,"modifier":[],"return":""},"preg_split":{"params":{"$pattern":"","$subject":"","$limit":"","$flags":""},"docComment":"Split string by a regular expression","signature":"preg_split(string $pattern ,string $subject ,[int $limit] ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"PDO_CUBRID DSN":{"params":[],"docComment":"Connecting to CUBRID databases","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDO::cubrid_schema":{"params":{"$schema_type":"","$table_name":"","$col_name":""},"docComment":"Get the requested schema information","signature":"public PDO::cubrid_schema(int $schema_type ,string $table_name ,string $col_name )","inheritdoc":0,"modifier":["public"],"return":""},"PDO_SQLSRV DSN":{"params":[],"docComment":"Connecting to MS SQL Server and SQL Azure databases","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDO_FIREBIRD DSN":{"params":[],"docComment":"Connecting to Firebird and Interbase databases","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDO_IBM DSN":{"params":[],"docComment":"Connecting to IBM databases","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDO_INFORMIX DSN":{"params":[],"docComment":"Connecting to Informix databases","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDO_MYSQL DSN":{"params":[],"docComment":"Connecting to MySQL databases","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDO_OCI DSN":{"params":[],"docComment":"Connecting to Oracle databases","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDO_ODBC DSN":{"params":[],"docComment":"Connecting to ODBC or DB2 databases","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDO_PGSQL DSN":{"params":[],"docComment":"Connecting to PostgreSQL databases","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDO::pgsqlLOBCreate":{"params":[],"docComment":"Creates a new large object","signature":"public PDO::pgsqlLOBCreate( )","inheritdoc":0,"modifier":["public"],"return":""},"PDO::pgsqlLOBOpen":{"params":{"$oid":"","$mode":""},"docComment":"Opens an existing large object stream","signature":"public PDO::pgsqlLOBOpen(string $oid ,[string $mode] )","inheritdoc":0,"modifier":["public"],"return":""},"PDO::pgsqlLOBUnlink":{"params":{"$oid":""},"docComment":"Deletes the large object","signature":"public PDO::pgsqlLOBUnlink(string $oid )","inheritdoc":0,"modifier":["public"],"return":""},"PDO_SQLITE DSN":{"params":[],"docComment":"Connecting to SQLite databases","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDO::sqliteCreateAggregate":{"params":{"$function_name":"","$step_func":"","$finalize_func":"","$num_args":""},"docComment":"\n   Registers an aggregating User Defined Function for use in SQL statements\n  ","signature":"public PDO::sqliteCreateAggregate(string $function_name ,callable $step_func ,callable $finalize_func ,int $num_args )","inheritdoc":0,"modifier":["public"],"return":""},"PDO::sqliteCreateFunction":{"params":{"$function_name":"","$callback":"","$num_args":""},"docComment":"\n   Registers a User Defined Function for use in SQL statements\n  ","signature":"public PDO::sqliteCreateFunction(string $function_name ,callable $callback ,int $num_args )","inheritdoc":0,"modifier":["public"],"return":""},"PDO_4D DSN":{"params":[],"docComment":"Connecting to 4D SQL server","signature":"","inheritdoc":0,"modifier":[],"return":""},"Constants for PDO_4D":{"params":[],"docComment":"Constants for PDO_4D","signature":"","inheritdoc":0,"modifier":[],"return":""},"SQL types with PDO_4D and PHP":{"params":[],"docComment":"SQL types with PDO_4D and PHP","signature":"","inheritdoc":0,"modifier":[],"return":""},"SQL acceptable by 4D":{"params":[],"docComment":"PDO and SQL 4D","signature":"","inheritdoc":0,"modifier":[],"return":""},"Examples with PDO_4D":{"params":[],"docComment":"Examples PDO_4D","signature":"","inheritdoc":0,"modifier":[],"return":""},"posix_access":{"params":{"$file":"","$mode":""},"docComment":"\n   Determine accessibility of a file\n  ","signature":"posix_access(string $file ,[int $mode] )","inheritdoc":0,"modifier":[],"return":""},"posix_ctermid":{"params":[],"docComment":"Get path name of controlling terminal","signature":"posix_ctermid( )","inheritdoc":0,"modifier":[],"return":""},"posix_errno":{"params":[],"docComment":"Retrieve the error number set by the last posix function that failed","signature":"posix_get_last_error( )","inheritdoc":0,"modifier":[],"return":""},"posix_get_last_error":{"params":[],"docComment":"Retrieve the error number set by the last posix function that failed","signature":"posix_get_last_error( )","inheritdoc":0,"modifier":[],"return":""},"posix_getcwd":{"params":[],"docComment":"Pathname of current directory","signature":"posix_getcwd( )","inheritdoc":0,"modifier":[],"return":""},"posix_getegid":{"params":[],"docComment":"Return the effective group ID of the current process","signature":"posix_getegid( )","inheritdoc":0,"modifier":[],"return":""},"posix_geteuid":{"params":[],"docComment":"Return the effective user ID of the current process","signature":"posix_geteuid( )","inheritdoc":0,"modifier":[],"return":""},"posix_getgid":{"params":[],"docComment":"Return the real group ID of the current process","signature":"posix_getgid( )","inheritdoc":0,"modifier":[],"return":""},"posix_getgrgid":{"params":{"$gid":""},"docComment":"Return info about a group by group id","signature":"posix_getgrgid(int $gid )","inheritdoc":0,"modifier":[],"return":""},"posix_getgrnam":{"params":{"$name":""},"docComment":"Return info about a group by name","signature":"posix_getgrnam(string $name )","inheritdoc":0,"modifier":[],"return":""},"posix_getgroups":{"params":[],"docComment":"Return the group set of the current process","signature":"posix_getgroups( )","inheritdoc":0,"modifier":[],"return":""},"posix_getlogin":{"params":[],"docComment":"Return login name","signature":"posix_getlogin( )","inheritdoc":0,"modifier":[],"return":""},"posix_getpgid":{"params":{"$pid":""},"docComment":"Get process group id for job control","signature":"posix_getpgid(int $pid )","inheritdoc":0,"modifier":[],"return":""},"posix_getpgrp":{"params":[],"docComment":"Return the current process group identifier","signature":"posix_getpgrp( )","inheritdoc":0,"modifier":[],"return":""},"posix_getpid":{"params":[],"docComment":"Return the current process identifier","signature":"posix_getpid( )","inheritdoc":0,"modifier":[],"return":""},"posix_getppid":{"params":[],"docComment":"Return the parent process identifier","signature":"posix_getppid( )","inheritdoc":0,"modifier":[],"return":""},"posix_getpwnam":{"params":{"$username":""},"docComment":"Return info about a user by username","signature":"posix_getpwnam(string $username )","inheritdoc":0,"modifier":[],"return":""},"posix_getpwuid":{"params":{"$uid":""},"docComment":"Return info about a user by user id","signature":"posix_getpwuid(int $uid )","inheritdoc":0,"modifier":[],"return":""},"posix_getrlimit":{"params":[],"docComment":"Return info about system resource limits","signature":"posix_getrlimit( )","inheritdoc":0,"modifier":[],"return":""},"posix_getsid":{"params":{"$pid":""},"docComment":"Get the current sid of the process","signature":"posix_getsid(int $pid )","inheritdoc":0,"modifier":[],"return":""},"posix_getuid":{"params":[],"docComment":"Return the real user ID of the current process","signature":"posix_getuid( )","inheritdoc":0,"modifier":[],"return":""},"posix_initgroups":{"params":{"$name":"","$base_group_id":""},"docComment":"Calculate the group access list","signature":"posix_initgroups(string $name ,int $base_group_id )","inheritdoc":0,"modifier":[],"return":""},"posix_isatty":{"params":{"$fd":""},"docComment":"Determine if a file descriptor is an interactive terminal","signature":"posix_isatty(int $fd )","inheritdoc":0,"modifier":[],"return":""},"posix_kill":{"params":{"$pid":"","$sig":""},"docComment":"Send a signal to a process","signature":"posix_kill(int $pid ,int $sig )","inheritdoc":0,"modifier":[],"return":""},"posix_mkfifo":{"params":{"$pathname":"","$mode":""},"docComment":"Create a fifo special file (a named pipe)","signature":"posix_mkfifo(string $pathname ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"posix_mknod":{"params":{"$pathname":"","$mode":"","$major":"","$minor":""},"docComment":"\n   Create a special or ordinary file (POSIX.1)\n  ","signature":"posix_mknod(string $pathname ,int $mode ,[int $major] ,[int $minor] )","inheritdoc":0,"modifier":[],"return":""},"posix_setegid":{"params":{"$gid":""},"docComment":"Set the effective GID of the current process","signature":"posix_setegid(int $gid )","inheritdoc":0,"modifier":[],"return":""},"posix_seteuid":{"params":{"$uid":""},"docComment":"Set the effective UID of the current process","signature":"posix_seteuid(int $uid )","inheritdoc":0,"modifier":[],"return":""},"posix_setgid":{"params":{"$gid":""},"docComment":"Set the GID of the current process","signature":"posix_setgid(int $gid )","inheritdoc":0,"modifier":[],"return":""},"posix_setpgid":{"params":{"$pid":"","$pgid":""},"docComment":"Set process group id for job control","signature":"posix_setpgid(int $pid ,int $pgid )","inheritdoc":0,"modifier":[],"return":""},"posix_setsid":{"params":[],"docComment":"Make the current process a session leader","signature":"posix_setsid( )","inheritdoc":0,"modifier":[],"return":""},"posix_setuid":{"params":{"$uid":""},"docComment":"Set the UID of the current process","signature":"posix_setuid(int $uid )","inheritdoc":0,"modifier":[],"return":""},"posix_strerror":{"params":{"$errno":""},"docComment":"Retrieve the system error message associated with the given errno","signature":"posix_strerror(int $errno )","inheritdoc":0,"modifier":[],"return":""},"posix_times":{"params":[],"docComment":"Get process times","signature":"posix_times( )","inheritdoc":0,"modifier":[],"return":""},"posix_ttyname":{"params":{"$fd":""},"docComment":"Determine terminal device name","signature":"posix_ttyname(int $fd )","inheritdoc":0,"modifier":[],"return":""},"posix_uname":{"params":[],"docComment":"Get system name","signature":"posix_uname( )","inheritdoc":0,"modifier":[],"return":""},"ftok":{"params":{"$pathname":"","$proj":""},"docComment":"Convert a pathname and a project identifier to a System V IPC key","signature":"ftok(string $pathname ,string $proj )","inheritdoc":0,"modifier":[],"return":""},"msg_get_queue":{"params":{"$key":"","$perms":""},"docComment":"Create or attach to a message queue","signature":"msg_get_queue(int $key ,[int $perms] )","inheritdoc":0,"modifier":[],"return":""},"msg_queue_exists":{"params":{"$key":""},"docComment":"Check whether a message queue exists","signature":"msg_queue_exists(int $key )","inheritdoc":0,"modifier":[],"return":""},"msg_receive":{"params":{"$queue":"","$desiredmsgtype":"","&$msgtype":"","$maxsize":"","&$message":"","$unserialize":"","$flags":"","&$errorcode":""},"docComment":"Receive a message from a message queue","signature":"msg_receive(resource $queue ,int $desiredmsgtype ,int &$msgtype ,int $maxsize ,mixed &$message ,[bool $unserialize] ,[int $flags] ,int &$errorcode )","inheritdoc":0,"modifier":[],"return":""},"msg_remove_queue":{"params":{"$queue":""},"docComment":"Destroy a message queue","signature":"msg_remove_queue(resource $queue )","inheritdoc":0,"modifier":[],"return":""},"msg_send":{"params":{"$queue":"","$msgtype":"","$message":"","$serialize":"","$blocking":"","&$errorcode":""},"docComment":"Send a message to a message queue","signature":"msg_send(resource $queue ,int $msgtype ,mixed $message ,[bool $serialize] ,[bool $blocking] ,int &$errorcode )","inheritdoc":0,"modifier":[],"return":""},"msg_set_queue":{"params":{"$queue":"","$data":""},"docComment":"Set information in the message queue data structure","signature":"msg_set_queue(resource $queue ,array $data )","inheritdoc":0,"modifier":[],"return":""},"msg_stat_queue":{"params":{"$queue":""},"docComment":"Returns information from the message queue data structure","signature":"msg_stat_queue(resource $queue )","inheritdoc":0,"modifier":[],"return":""},"sem_acquire":{"params":{"$sem_identifier":""},"docComment":"Acquire a semaphore","signature":"sem_acquire(resource $sem_identifier )","inheritdoc":0,"modifier":[],"return":""},"sem_get":{"params":{"$key":"","$max_acquire":"","$perm":"","$auto_release":""},"docComment":"Get a semaphore id","signature":"sem_get(int $key ,[int $max_acquire] ,[int $perm] ,[int $auto_release] )","inheritdoc":0,"modifier":[],"return":""},"sem_release":{"params":{"$sem_identifier":""},"docComment":"Release a semaphore","signature":"sem_release(resource $sem_identifier )","inheritdoc":0,"modifier":[],"return":""},"sem_remove":{"params":{"$sem_identifier":""},"docComment":"Remove a semaphore","signature":"sem_remove(resource $sem_identifier )","inheritdoc":0,"modifier":[],"return":""},"shm_attach":{"params":{"$key":"","$memsize":"","$perm":""},"docComment":"Creates or open a shared memory segment","signature":"shm_attach(int $key ,int $memsize ,[int $perm] )","inheritdoc":0,"modifier":[],"return":""},"shm_detach":{"params":{"$shm_identifier":""},"docComment":"Disconnects from shared memory segment","signature":"shm_detach(resource $shm_identifier )","inheritdoc":0,"modifier":[],"return":""},"shm_get_var":{"params":{"$shm_identifier":"","$variable_key":""},"docComment":"Returns a variable from shared memory","signature":"shm_get_var(resource $shm_identifier ,int $variable_key )","inheritdoc":0,"modifier":[],"return":""},"shm_has_var":{"params":{"$shm_identifier":"","$variable_key":""},"docComment":"Check whether a specific entry exists","signature":"shm_has_var(resource $shm_identifier ,int $variable_key )","inheritdoc":0,"modifier":[],"return":""},"shm_put_var":{"params":{"$shm_identifier":"","$variable_key":"","$variable":""},"docComment":"Inserts or updates a variable in shared memory","signature":"shm_put_var(resource $shm_identifier ,int $variable_key ,mixed $variable )","inheritdoc":0,"modifier":[],"return":""},"shm_remove_var":{"params":{"$shm_identifier":"","$variable_key":""},"docComment":"Removes a variable from shared memory\n  ","signature":"shm_remove_var(resource $shm_identifier ,int $variable_key )","inheritdoc":0,"modifier":[],"return":""},"shm_remove":{"params":{"$shm_identifier":""},"docComment":"Removes shared memory from Unix systems","signature":"shm_remove(resource $shm_identifier )","inheritdoc":0,"modifier":[],"return":""},"shmop_close":{"params":{"$shmid":""},"docComment":"Close shared memory block","signature":"shmop_close(int $shmid )","inheritdoc":0,"modifier":[],"return":""},"shmop_delete":{"params":{"$shmid":""},"docComment":"Delete shared memory block","signature":"shmop_delete(int $shmid )","inheritdoc":0,"modifier":[],"return":""},"shmop_open":{"params":{"$key":"","$flags":"","$mode":"","$size":""},"docComment":"Create or open shared memory block","signature":"shmop_open(int $key ,string $flags ,int $mode ,int $size )","inheritdoc":0,"modifier":[],"return":""},"shmop_read":{"params":{"$shmid":"","$start":"","$count":""},"docComment":"Read data from shared memory block","signature":"shmop_read(int $shmid ,int $start ,int $count )","inheritdoc":0,"modifier":[],"return":""},"shmop_size":{"params":{"$shmid":""},"docComment":"Get size of shared memory block","signature":"shmop_size(int $shmid )","inheritdoc":0,"modifier":[],"return":""},"shmop_write":{"params":{"$shmid":"","$data":"","$offset":""},"docComment":"Write data into shared memory block","signature":"shmop_write(int $shmid ,string $data ,int $offset )","inheritdoc":0,"modifier":[],"return":""},"socket_accept":{"params":{"$socket":""},"docComment":"Accepts a connection on a socket","signature":"socket_accept(resource $socket )","inheritdoc":0,"modifier":[],"return":""},"socket_bind":{"params":{"$socket":"","$address":"","$port":""},"docComment":"Binds a name to a socket","signature":"socket_bind(resource $socket ,string $address ,[int $port] )","inheritdoc":0,"modifier":[],"return":""},"socket_clear_error":{"params":{"$socket":""},"docComment":"Clears the error on the socket or the last error code","signature":"socket_clear_error(resource $socket )","inheritdoc":0,"modifier":[],"return":""},"socket_close":{"params":{"$socket":""},"docComment":"Closes a socket resource","signature":"socket_close(resource $socket )","inheritdoc":0,"modifier":[],"return":""},"socket_cmsg_space":{"params":{"$level":"","$type":""},"docComment":"Calculate message buffer size","signature":"socket_cmsg_space(int $level ,int $type )","inheritdoc":0,"modifier":[],"return":""},"socket_connect":{"params":{"$socket":"","$address":"","$port":""},"docComment":"Initiates a connection on a socket","signature":"socket_connect(resource $socket ,string $address ,[int $port] )","inheritdoc":0,"modifier":[],"return":""},"socket_create_listen":{"params":{"$port":"","$backlog":""},"docComment":"Opens a socket on port to accept connections ","signature":"socket_create_listen(int $port ,[int $backlog] )","inheritdoc":0,"modifier":[],"return":""},"socket_create_pair":{"params":{"$domain":"","$type":"","$protocol":"","&$fd":""},"docComment":"Creates a pair of indistinguishable sockets and stores them in an array","signature":"socket_create_pair(int $domain ,int $type ,int $protocol ,array &$fd )","inheritdoc":0,"modifier":[],"return":""},"socket_create":{"params":{"$domain":"","$type":"","$protocol":""},"docComment":"Create a socket (endpoint for communication)","signature":"socket_create(int $domain ,int $type ,int $protocol )","inheritdoc":0,"modifier":[],"return":""},"socket_get_option":{"params":{"$socket":"","$level":"","$optname":""},"docComment":"Gets socket options for the socket ","signature":"socket_get_option(resource $socket ,int $level ,int $optname )","inheritdoc":0,"modifier":[],"return":""},"socket_getpeername":{"params":{"$socket":"","&$address":"","&$port":""},"docComment":"Queries the remote side of the given socket which may either result in host\/port or in a Unix filesystem path, dependent on its type","signature":"socket_getpeername(resource $socket ,string &$address ,int &$port )","inheritdoc":0,"modifier":[],"return":""},"socket_getsockname":{"params":{"$socket":"","&$addr":"","&$port":""},"docComment":"Queries the local side of the given socket which may either result in host\/port or in a Unix filesystem path, dependent on its type","signature":"socket_getsockname(resource $socket ,string &$addr ,int &$port )","inheritdoc":0,"modifier":[],"return":""},"socket_import_stream":{"params":{"$stream":""},"docComment":"Import a stream","signature":"socket_import_stream(resource $stream )","inheritdoc":0,"modifier":[],"return":""},"socket_last_error":{"params":{"$socket":""},"docComment":"Returns the last error on the socket ","signature":"socket_last_error(resource $socket )","inheritdoc":0,"modifier":[],"return":""},"socket_listen":{"params":{"$socket":"","$backlog":""},"docComment":"Listens for a connection on a socket","signature":"socket_listen(resource $socket ,[int $backlog] )","inheritdoc":0,"modifier":[],"return":""},"socket_read":{"params":{"$socket":"","$length":"","$type":""},"docComment":"Reads a maximum of length bytes from a socket","signature":"socket_read(resource $socket ,int $length ,[int $type] )","inheritdoc":0,"modifier":[],"return":""},"socket_recv":{"params":{"$socket":"","&$buf":"","$len":"","$flags":""},"docComment":"Receives data from a connected socket ","signature":"socket_recv(resource $socket ,string &$buf ,int $len ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"socket_recvfrom":{"params":{"$socket":"","&$buf":"","$len":"","$flags":"","&$name":"","&$port":""},"docComment":"Receives data from a socket whether or not it is connection-oriented","signature":"socket_recvfrom(resource $socket ,string &$buf ,int $len ,int $flags ,string &$name ,int &$port )","inheritdoc":0,"modifier":[],"return":""},"socket_recvmsg":{"params":{"$socket":"","$message":"","$flags":""},"docComment":"Read a message","signature":"socket_recvmsg(resource $socket ,string $message ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"socket_select":{"params":{"&$read":"","&$write":"","&$except":"","$tv_sec":"","$tv_usec":""},"docComment":"Runs the select() system call on the given arrays of sockets with a specified timeout","signature":"socket_select(array &$read ,array &$write ,array &$except ,int $tv_sec ,[int $tv_usec] )","inheritdoc":0,"modifier":[],"return":""},"socket_send":{"params":{"$socket":"","$buf":"","$len":"","$flags":""},"docComment":"Sends data to a connected socket","signature":"socket_send(resource $socket ,string $buf ,int $len ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"socket_sendmsg":{"params":{"$socket":"","$message":"","$flags":""},"docComment":"Send a message","signature":"socket_sendmsg(resource $socket ,array $message ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"socket_sendto":{"params":{"$socket":"","$buf":"","$len":"","$flags":"","$addr":"","$port":""},"docComment":"Sends a message to a socket, whether it is connected or not ","signature":"socket_sendto(resource $socket ,string $buf ,int $len ,int $flags ,string $addr ,[int $port] )","inheritdoc":0,"modifier":[],"return":""},"socket_set_block":{"params":{"$socket":""},"docComment":"Sets blocking mode on a socket resource","signature":"socket_set_block(resource $socket )","inheritdoc":0,"modifier":[],"return":""},"socket_set_nonblock":{"params":{"$socket":""},"docComment":"Sets nonblocking mode for file descriptor fd ","signature":"socket_set_nonblock(resource $socket )","inheritdoc":0,"modifier":[],"return":""},"socket_set_option":{"params":{"$socket":"","$level":"","$optname":"","$optval":""},"docComment":"Sets socket options for the socket","signature":"socket_set_option(resource $socket ,int $level ,int $optname ,mixed $optval )","inheritdoc":0,"modifier":[],"return":""},"socket_shutdown":{"params":{"$socket":"","$how":""},"docComment":"Shuts down a socket for receiving, sending, or both","signature":"socket_shutdown(resource $socket ,[int $how] )","inheritdoc":0,"modifier":[],"return":""},"socket_strerror":{"params":{"$errno":""},"docComment":"Return a string describing a socket error","signature":"socket_strerror(int $errno )","inheritdoc":0,"modifier":[],"return":""},"socket_write":{"params":{"$socket":"","$buffer":"","$length":""},"docComment":"Write to a socket","signature":"socket_write(resource $socket ,string $buffer ,[int $length] )","inheritdoc":0,"modifier":[],"return":""},"xmlrpc_decode_request":{"params":{"$xml":"","&$method":"","$encoding":""},"docComment":"Decodes XML into native PHP types","signature":"xmlrpc_decode_request(string $xml ,string &$method ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"xmlrpc_decode":{"params":{"$xml":"","$encoding":""},"docComment":"Decodes XML into native PHP types","signature":"xmlrpc_decode(string $xml ,[string $encoding] )","inheritdoc":0,"modifier":[],"return":""},"xmlrpc_encode_request":{"params":{"$method":"","$params":"","$output_options":""},"docComment":"Generates XML for a method request","signature":"xmlrpc_encode_request(string $method ,mixed $params ,array $output_options )","inheritdoc":0,"modifier":[],"return":""},"xmlrpc_encode":{"params":{"$value":""},"docComment":"Generates XML for a PHP value","signature":"xmlrpc_encode(mixed $value )","inheritdoc":0,"modifier":[],"return":""},"xmlrpc_get_type":{"params":{"$value":""},"docComment":"Gets xmlrpc type for a PHP value","signature":"xmlrpc_get_type(mixed $value )","inheritdoc":0,"modifier":[],"return":""},"xmlrpc_is_fault":{"params":{"$arg":""},"docComment":"Determines if an array value represents an XMLRPC fault","signature":"xmlrpc_is_fault(array $arg )","inheritdoc":0,"modifier":[],"return":""},"xmlrpc_parse_method_descriptions":{"params":{"$xml":""},"docComment":"Decodes XML into a list of method descriptions","signature":"xmlrpc_parse_method_descriptions(string $xml )","inheritdoc":0,"modifier":[],"return":""},"xmlrpc_server_add_introspection_data":{"params":{"$server":"","$desc":""},"docComment":"Adds introspection documentation","signature":"xmlrpc_server_add_introspection_data(resource $server ,array $desc )","inheritdoc":0,"modifier":[],"return":""},"xmlrpc_server_call_method":{"params":{"$server":"","$xml":"","$user_data":"","$output_options":""},"docComment":"Parses XML requests and call methods","signature":"xmlrpc_server_call_method(resource $server ,string $xml ,mixed $user_data ,array $output_options )","inheritdoc":0,"modifier":[],"return":""},"xmlrpc_server_create":{"params":[],"docComment":"Creates an xmlrpc server","signature":"xmlrpc_server_create( )","inheritdoc":0,"modifier":[],"return":""},"xmlrpc_server_destroy":{"params":{"$server":""},"docComment":"Destroys server resources","signature":"xmlrpc_server_destroy(resource $server )","inheritdoc":0,"modifier":[],"return":""},"xmlrpc_server_register_introspection_callback":{"params":{"$server":"","$function":""},"docComment":"Register a PHP function to generate documentation","signature":"xmlrpc_server_register_introspection_callback(resource $server ,string $function )","inheritdoc":0,"modifier":[],"return":""},"xmlrpc_server_register_method":{"params":{"$server":"","$method_name":"","$function":""},"docComment":"Register a PHP function to resource method matching method_name","signature":"xmlrpc_server_register_method(resource $server ,string $method_name ,string $function )","inheritdoc":0,"modifier":[],"return":""},"xmlrpc_set_type":{"params":{"&$value":"","$type":""},"docComment":"Sets xmlrpc type, base64 or datetime, for a PHP string value","signature":"xmlrpc_set_type(string &$value ,string $type )","inheritdoc":0,"modifier":[],"return":""},"gzclose":{"params":{"$zp":""},"docComment":"Close an open gz-file pointer","signature":"gzclose(resource $zp )","inheritdoc":0,"modifier":[],"return":""},"gzcompress":{"params":{"$data":"","$level":"","$encoding":""},"docComment":"Compress a string","signature":"gzcompress(string $data ,[int $level] ,[int $encoding] )","inheritdoc":0,"modifier":[],"return":""},"gzdecode":{"params":{"$data":"","$length":""},"docComment":"Decodes a gzip compressed string","signature":"gzdecode(string $data ,int $length )","inheritdoc":0,"modifier":[],"return":""},"gzdeflate":{"params":{"$data":"","$level":"","$encoding":""},"docComment":"Deflate a string","signature":"gzdeflate(string $data ,[int $level] ,[int $encoding] )","inheritdoc":0,"modifier":[],"return":""},"gzencode":{"params":{"$data":"","$level":"","$encoding_mode":""},"docComment":"Create a gzip compressed string","signature":"gzencode(string $data ,[int $level] ,[int $encoding_mode] )","inheritdoc":0,"modifier":[],"return":""},"gzeof":{"params":{"$zp":""},"docComment":"Test for  on a gz-file pointer","signature":"gzeof(resource $zp )","inheritdoc":0,"modifier":[],"return":""},"gzfile":{"params":{"$filename":"","$use_include_path":""},"docComment":"Read entire gz-file into an array","signature":"gzfile(string $filename ,[int $use_include_path] )","inheritdoc":0,"modifier":[],"return":""},"gzgetc":{"params":{"$zp":""},"docComment":"Get character from gz-file pointer","signature":"gzgetc(resource $zp )","inheritdoc":0,"modifier":[],"return":""},"gzgets":{"params":{"$zp":"","$length":""},"docComment":"Get line from file pointer","signature":"gzgets(resource $zp ,int $length )","inheritdoc":0,"modifier":[],"return":""},"gzgetss":{"params":{"$zp":"","$length":"","$allowable_tags":""},"docComment":"\n   Get line from gz-file pointer and strip HTML tags\n  ","signature":"gzgetss(resource $zp ,int $length ,string $allowable_tags )","inheritdoc":0,"modifier":[],"return":""},"gzinflate":{"params":{"$data":"","$length":""},"docComment":"Inflate a deflated string","signature":"gzinflate(string $data ,[int $length] )","inheritdoc":0,"modifier":[],"return":""},"gzopen":{"params":{"$filename":"","$mode":"","$use_include_path":""},"docComment":"Open gz-file","signature":"gzopen(string $filename ,string $mode ,[int $use_include_path] )","inheritdoc":0,"modifier":[],"return":""},"gzpassthru":{"params":{"$zp":""},"docComment":"\n   Output all remaining data on a gz-file pointer\n  ","signature":"gzpassthru(resource $zp )","inheritdoc":0,"modifier":[],"return":""},"gzputs":{"params":{"$zp":"","$string":"","$length":""},"docComment":"Binary-safe gz-file write","signature":"gzwrite(resource $zp ,string $string ,int $length )","inheritdoc":0,"modifier":[],"return":""},"gzread":{"params":{"$zp":"","$length":""},"docComment":"Binary-safe gz-file read","signature":"gzread(resource $zp ,int $length )","inheritdoc":0,"modifier":[],"return":""},"gzrewind":{"params":{"$zp":""},"docComment":"Rewind the position of a gz-file pointer","signature":"gzrewind(resource $zp )","inheritdoc":0,"modifier":[],"return":""},"gzseek":{"params":{"$zp":"","$offset":"","$whence":""},"docComment":"Seek on a gz-file pointer","signature":"gzseek(resource $zp ,int $offset ,[int $whence] )","inheritdoc":0,"modifier":[],"return":""},"gztell":{"params":{"$zp":""},"docComment":"Tell gz-file pointer read\/write position","signature":"gztell(resource $zp )","inheritdoc":0,"modifier":[],"return":""},"gzuncompress":{"params":{"$data":"","$length":""},"docComment":"Uncompress a compressed string","signature":"gzuncompress(string $data ,[int $length] )","inheritdoc":0,"modifier":[],"return":""},"gzwrite":{"params":{"$zp":"","$string":"","$length":""},"docComment":"Binary-safe gz-file write","signature":"gzwrite(resource $zp ,string $string ,int $length )","inheritdoc":0,"modifier":[],"return":""},"readgzfile":{"params":{"$filename":"","$use_include_path":""},"docComment":"Output a gz-file","signature":"readgzfile(string $filename ,[int $use_include_path] )","inheritdoc":0,"modifier":[],"return":""},"zlib_decode":{"params":{"$data":"","$max_decoded_len":""},"docComment":"Uncompress any raw\/gzip\/zlib encoded data","signature":"zlib_decode(string $data ,string $max_decoded_len )","inheritdoc":0,"modifier":[],"return":""},"zlib_encode":{"params":{"$data":"","$encoding":"","$level":""},"docComment":"Compress data with the specified encoding","signature":"zlib_encode(string $data ,string $encoding ,[string $level] )","inheritdoc":0,"modifier":[],"return":""},"zlib_get_coding_type":{"params":[],"docComment":"Returns the coding type used for output compression","signature":"zlib_get_coding_type( )","inheritdoc":0,"modifier":[],"return":""},"bzclose":{"params":{"$bz":""},"docComment":"Close a bzip2 file","signature":"bzclose(resource $bz )","inheritdoc":0,"modifier":[],"return":""},"bzcompress":{"params":{"$source":"","$blocksize":"","$workfactor":""},"docComment":"Compress a string into bzip2 encoded data","signature":"bzcompress(string $source ,[int $blocksize] ,[int $workfactor] )","inheritdoc":0,"modifier":[],"return":""},"bzdecompress":{"params":{"$source":"","$small":""},"docComment":"Decompresses bzip2 encoded data","signature":"bzdecompress(string $source ,[int $small] )","inheritdoc":0,"modifier":[],"return":""},"bzerrno":{"params":{"$bz":""},"docComment":"Returns a bzip2 error number","signature":"bzerrno(resource $bz )","inheritdoc":0,"modifier":[],"return":""},"bzerror":{"params":{"$bz":""},"docComment":"\n   Returns the bzip2 error number and error string in an array\n  ","signature":"bzerror(resource $bz )","inheritdoc":0,"modifier":[],"return":""},"bzerrstr":{"params":{"$bz":""},"docComment":"Returns a bzip2 error string","signature":"bzerrstr(resource $bz )","inheritdoc":0,"modifier":[],"return":""},"bzflush":{"params":{"$bz":""},"docComment":"Force a write of all buffered data","signature":"bzflush(resource $bz )","inheritdoc":0,"modifier":[],"return":""},"bzopen":{"params":{"$filename":"","$mode":""},"docComment":"Opens a bzip2 compressed file","signature":"bzopen(string $filename ,string $mode )","inheritdoc":0,"modifier":[],"return":""},"bzread":{"params":{"$bz":"","$length":""},"docComment":"Binary safe bzip2 file read","signature":"bzread(resource $bz ,[int $length] )","inheritdoc":0,"modifier":[],"return":""},"bzwrite":{"params":{"$bz":"","$data":"","$length":""},"docComment":"Binary safe bzip2 file write","signature":"bzwrite(resource $bz ,string $data ,int $length )","inheritdoc":0,"modifier":[],"return":""},"curl_close":{"params":{"$ch":""},"docComment":"Close a cURL session","signature":"curl_close(resource $ch )","inheritdoc":0,"modifier":[],"return":""},"curl_copy_handle":{"params":{"$ch":""},"docComment":"Copy a cURL handle along with all of its preferences","signature":"curl_copy_handle(resource $ch )","inheritdoc":0,"modifier":[],"return":""},"curl_errno":{"params":{"$ch":""},"docComment":"Return the last error number","signature":"curl_errno(resource $ch )","inheritdoc":0,"modifier":[],"return":""},"curl_error":{"params":{"$ch":""},"docComment":"Return a string containing the last error for the current session","signature":"curl_error(resource $ch )","inheritdoc":0,"modifier":[],"return":""},"curl_escape":{"params":{"$ch":"","$str":""},"docComment":"URL encodes the given string","signature":"curl_escape(resource $ch ,string $str )","inheritdoc":0,"modifier":[],"return":""},"curl_exec":{"params":{"$ch":""},"docComment":"Perform a cURL session","signature":"curl_exec(resource $ch )","inheritdoc":0,"modifier":[],"return":""},"curl_file_create":{"params":{"$filename":"","$mimetype":"","$postname":""},"docComment":"Create a CURLFile object","signature":"curl_file_create(string $filename ,string $mimetype ,string $postname )","inheritdoc":0,"modifier":[],"return":"CURLFile"},"curl_getinfo":{"params":{"$ch":"","$opt":""},"docComment":"Get information regarding a specific transfer","signature":"curl_getinfo(resource $ch ,[int $opt] )","inheritdoc":0,"modifier":[],"return":""},"curl_init":{"params":{"$url":""},"docComment":"Initialize a cURL session","signature":"curl_init([string $url] )","inheritdoc":0,"modifier":[],"return":""},"curl_multi_add_handle":{"params":{"$mh":"","$ch":""},"docComment":"Add a normal cURL handle to a cURL multi handle","signature":"curl_multi_add_handle(resource $mh ,resource $ch )","inheritdoc":0,"modifier":[],"return":""},"curl_multi_close":{"params":{"$mh":""},"docComment":"Close a set of cURL handles","signature":"curl_multi_close(resource $mh )","inheritdoc":0,"modifier":[],"return":""},"curl_multi_exec":{"params":{"$mh":"","&$still_running":""},"docComment":"Run the sub-connections of the current cURL handle","signature":"curl_multi_exec(resource $mh ,int &$still_running )","inheritdoc":0,"modifier":[],"return":""},"curl_multi_getcontent":{"params":{"$ch":""},"docComment":"Return the content of a cURL handle if  is set","signature":"curl_multi_getcontent(resource $ch )","inheritdoc":0,"modifier":[],"return":""},"curl_multi_info_read":{"params":{"$mh":"","&$msgs_in_queue":""},"docComment":"Get information about the current transfers","signature":"curl_multi_info_read(resource $mh ,[int &$msgs_in_queue] )","inheritdoc":0,"modifier":[],"return":""},"curl_multi_init":{"params":[],"docComment":"Returns a new cURL multi handle","signature":"curl_multi_init( )","inheritdoc":0,"modifier":[],"return":""},"curl_multi_remove_handle":{"params":{"$mh":"","$ch":""},"docComment":"Remove a multi handle from a set of cURL handles","signature":"curl_multi_remove_handle(resource $mh ,resource $ch )","inheritdoc":0,"modifier":[],"return":""},"curl_multi_select":{"params":{"$mh":"","$timeout":""},"docComment":"Wait for activity on any curl_multi connection","signature":"curl_multi_select(resource $mh ,[float $timeout] )","inheritdoc":0,"modifier":[],"return":""},"curl_multi_setopt":{"params":{"$mh":"","$option":"","$value":""},"docComment":"Set an option for the cURL multi handle","signature":"curl_multi_setopt(resource $mh ,int $option ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"curl_multi_strerror":{"params":{"$errornum":""},"docComment":"Return string describing error code","signature":"curl_multi_strerror(int $errornum )","inheritdoc":0,"modifier":[],"return":""},"curl_pause":{"params":{"$ch":"","$bitmask":""},"docComment":"Pause and unpause a connection","signature":"curl_pause(resource $ch ,int $bitmask )","inheritdoc":0,"modifier":[],"return":""},"curl_reset":{"params":{"$ch":""},"docComment":"Reset all options of a libcurl session handle","signature":"curl_reset(resource $ch )","inheritdoc":0,"modifier":[],"return":""},"curl_setopt_array":{"params":{"$ch":"","$options":""},"docComment":"Set multiple options for a cURL transfer","signature":"curl_setopt_array(resource $ch ,array $options )","inheritdoc":0,"modifier":[],"return":""},"curl_setopt":{"params":{"$ch":"","$option":"","$value":""},"docComment":"Set an option for a cURL transfer","signature":"curl_setopt(resource $ch ,int $option ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"curl_share_close":{"params":{"$sh":""},"docComment":"Close a cURL share handle","signature":"curl_share_close(resource $sh )","inheritdoc":0,"modifier":[],"return":""},"curl_share_init":{"params":[],"docComment":"Initialize a cURL share handle","signature":"curl_share_init( )","inheritdoc":0,"modifier":[],"return":""},"curl_share_setopt":{"params":{"$sh":"","$option":"","$value":""},"docComment":"Set an option for a cURL share handle.","signature":"curl_share_setopt(resource $sh ,int $option ,string $value )","inheritdoc":0,"modifier":[],"return":""},"curl_strerror":{"params":{"$errornum":""},"docComment":"Return string describing the given error code","signature":"curl_strerror(int $errornum )","inheritdoc":0,"modifier":[],"return":""},"curl_unescape":{"params":{"$ch":"","$str":""},"docComment":"Decodes the given URL encoded string","signature":"curl_unescape(resource $ch ,string $str )","inheritdoc":0,"modifier":[],"return":""},"curl_version":{"params":{"$age":""},"docComment":"Gets cURL version information","signature":"curl_version([int $age] )","inheritdoc":0,"modifier":[],"return":""},"dbase_add_record":{"params":{"$dbase_identifier":"","$record":""},"docComment":"Adds a record to a database","signature":"dbase_add_record(int $dbase_identifier ,array $record )","inheritdoc":0,"modifier":[],"return":""},"dbase_close":{"params":{"$dbase_identifier":""},"docComment":"Closes a database","signature":"dbase_close(int $dbase_identifier )","inheritdoc":0,"modifier":[],"return":""},"dbase_create":{"params":{"$filename":"","$fields":""},"docComment":"Creates a database","signature":"dbase_create(string $filename ,array $fields )","inheritdoc":0,"modifier":[],"return":""},"dbase_delete_record":{"params":{"$dbase_identifier":"","$record_number":""},"docComment":"Deletes a record from a database","signature":"dbase_delete_record(int $dbase_identifier ,int $record_number )","inheritdoc":0,"modifier":[],"return":""},"dbase_get_header_info":{"params":{"$dbase_identifier":""},"docComment":"Gets the header info of a database","signature":"dbase_get_header_info(int $dbase_identifier )","inheritdoc":0,"modifier":[],"return":""},"dbase_get_record_with_names":{"params":{"$dbase_identifier":"","$record_number":""},"docComment":"\n   Gets a record from a database as an associative array\n  ","signature":"dbase_get_record_with_names(int $dbase_identifier ,int $record_number )","inheritdoc":0,"modifier":[],"return":""},"dbase_get_record":{"params":{"$dbase_identifier":"","$record_number":""},"docComment":"\n   Gets a record from a database as an indexed array\n  ","signature":"dbase_get_record(int $dbase_identifier ,int $record_number )","inheritdoc":0,"modifier":[],"return":""},"dbase_numfields":{"params":{"$dbase_identifier":""},"docComment":"Gets the number of fields of a database","signature":"dbase_numfields(int $dbase_identifier )","inheritdoc":0,"modifier":[],"return":""},"dbase_numrecords":{"params":{"$dbase_identifier":""},"docComment":"Gets the number of records in a database","signature":"dbase_numrecords(int $dbase_identifier )","inheritdoc":0,"modifier":[],"return":""},"dbase_open":{"params":{"$filename":"","$mode":""},"docComment":"Opens a database","signature":"dbase_open(string $filename ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"dbase_pack":{"params":{"$dbase_identifier":""},"docComment":"Packs a database","signature":"dbase_pack(int $dbase_identifier )","inheritdoc":0,"modifier":[],"return":""},"dbase_replace_record":{"params":{"$dbase_identifier":"","$record":"","$record_number":""},"docComment":"Replaces a record in a database","signature":"dbase_replace_record(int $dbase_identifier ,array $record ,int $record_number )","inheritdoc":0,"modifier":[],"return":""},"dom_import_simplexml":{"params":{"$node":"SimpleXMLElement"},"docComment":"\n   Gets a  object from a\n    object\n  ","signature":"dom_import_simplexml(SimpleXMLElement $node )","inheritdoc":0,"modifier":[],"return":"DOMElement"},"enchant_broker_describe":{"params":{"$broker":""},"docComment":"Enumerates the Enchant providers","signature":"enchant_broker_describe(resource $broker )","inheritdoc":0,"modifier":[],"return":""},"enchant_broker_dict_exists":{"params":{"$broker":"","$tag":""},"docComment":"Whether a dictionary exists or not. Using non-empty tag","signature":"enchant_broker_dict_exists(resource $broker ,string $tag )","inheritdoc":0,"modifier":[],"return":""},"enchant_broker_free_dict":{"params":{"$dict":""},"docComment":"Free a dictionary resource","signature":"enchant_broker_free_dict(resource $dict )","inheritdoc":0,"modifier":[],"return":""},"enchant_broker_free":{"params":{"$broker":""},"docComment":"Free the broker resource and its dictionnaries","signature":"enchant_broker_free(resource $broker )","inheritdoc":0,"modifier":[],"return":""},"enchant_broker_get_error":{"params":{"$broker":""},"docComment":"Returns the last error of the broker","signature":"enchant_broker_get_error(resource $broker )","inheritdoc":0,"modifier":[],"return":""},"enchant_broker_init":{"params":[],"docComment":"create a new broker object capable of requesting","signature":"enchant_broker_init( )","inheritdoc":0,"modifier":[],"return":""},"enchant_broker_list_dicts":{"params":{"$broker":""},"docComment":"Returns a list of available dictionaries","signature":"enchant_broker_list_dicts(resource $broker )","inheritdoc":0,"modifier":[],"return":""},"enchant_broker_request_dict":{"params":{"$broker":"","$tag":""},"docComment":"create a new dictionary using a tag","signature":"enchant_broker_request_dict(resource $broker ,string $tag )","inheritdoc":0,"modifier":[],"return":""},"enchant_broker_request_pwl_dict":{"params":{"$broker":"","$filename":""},"docComment":"creates a dictionary using a PWL file","signature":"enchant_broker_request_pwl_dict(resource $broker ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"enchant_broker_set_ordering":{"params":{"$broker":"","$tag":"","$ordering":""},"docComment":"Declares a preference of dictionaries to use for the language","signature":"enchant_broker_set_ordering(resource $broker ,string $tag ,string $ordering )","inheritdoc":0,"modifier":[],"return":""},"enchant_dict_add_to_personal":{"params":{"$dict":"","$word":""},"docComment":"add a word to personal word list","signature":"enchant_dict_add_to_personal(resource $dict ,string $word )","inheritdoc":0,"modifier":[],"return":""},"enchant_dict_add_to_session":{"params":{"$dict":"","$word":""},"docComment":"add 'word' to this spell-checking session","signature":"enchant_dict_add_to_session(resource $dict ,string $word )","inheritdoc":0,"modifier":[],"return":""},"enchant_dict_check":{"params":{"$dict":"","$word":""},"docComment":"Check whether a word is correctly spelled or not","signature":"enchant_dict_check(resource $dict ,string $word )","inheritdoc":0,"modifier":[],"return":""},"enchant_dict_describe":{"params":{"$dict":""},"docComment":"Describes an individual dictionary","signature":"enchant_dict_describe(resource $dict )","inheritdoc":0,"modifier":[],"return":""},"enchant_dict_get_error":{"params":{"$dict":""},"docComment":"Returns the last error of the current spelling-session","signature":"enchant_dict_get_error(resource $dict )","inheritdoc":0,"modifier":[],"return":""},"enchant_dict_is_in_session":{"params":{"$dict":"","$word":""},"docComment":"whether or not 'word' exists in this spelling-session","signature":"enchant_dict_is_in_session(resource $dict ,string $word )","inheritdoc":0,"modifier":[],"return":""},"enchant_dict_quick_check":{"params":{"$dict":"","$word":"","&$suggestions":""},"docComment":"Check the word is correctly spelled and provide suggestions","signature":"enchant_dict_quick_check(resource $dict ,string $word ,array &$suggestions )","inheritdoc":0,"modifier":[],"return":""},"enchant_dict_store_replacement":{"params":{"$dict":"","$mis":"","$cor":""},"docComment":"Add a correction for a word","signature":"enchant_dict_store_replacement(resource $dict ,string $mis ,string $cor )","inheritdoc":0,"modifier":[],"return":""},"enchant_dict_suggest":{"params":{"$dict":"","$word":""},"docComment":"Will return a list of values if any of those pre-conditions are not met","signature":"enchant_dict_suggest(resource $dict ,string $word )","inheritdoc":0,"modifier":[],"return":""},"fbsql_affected_rows":{"params":{"$link_identifier":""},"docComment":"Get number of affected rows in previous FrontBase operation","signature":"fbsql_affected_rows(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_autocommit":{"params":{"$link_identifier":"","$OnOff":""},"docComment":"Enable or disable autocommit","signature":"fbsql_autocommit(resource $link_identifier ,bool $OnOff )","inheritdoc":0,"modifier":[],"return":""},"fbsql_blob_size":{"params":{"$blob_handle":"","$link_identifier":""},"docComment":"Get the size of a BLOB","signature":"fbsql_blob_size(string $blob_handle ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_change_user":{"params":{"$user":"","$password":"","$database":"","$link_identifier":""},"docComment":"Change logged in user of the active connection","signature":"fbsql_change_user(string $user ,string $password ,string $database ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_clob_size":{"params":{"$clob_handle":"","$link_identifier":""},"docComment":"Get the size of a CLOB","signature":"fbsql_clob_size(string $clob_handle ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_close":{"params":{"$link_identifier":""},"docComment":"Close FrontBase connection","signature":"fbsql_close(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_commit":{"params":{"$link_identifier":""},"docComment":"Commits a transaction to the database","signature":"fbsql_commit(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_connect":{"params":{"$hostname":"","$username":"","$password":""},"docComment":"Open a connection to a FrontBase Server","signature":"fbsql_connect([string $hostname] ,[string $username] ,[string $password] )","inheritdoc":0,"modifier":[],"return":""},"fbsql_create_blob":{"params":{"$blob_data":"","$link_identifier":""},"docComment":"Create a BLOB","signature":"fbsql_create_blob(string $blob_data ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_create_clob":{"params":{"$clob_data":"","$link_identifier":""},"docComment":"Create a CLOB","signature":"fbsql_create_clob(string $clob_data ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_create_db":{"params":{"$database_name":"","$link_identifier":"","$database_options":""},"docComment":"Create a FrontBase database","signature":"fbsql_create_db(string $database_name ,resource $link_identifier ,string $database_options )","inheritdoc":0,"modifier":[],"return":""},"fbsql_data_seek":{"params":{"$result":"","$row_number":""},"docComment":"Move internal result pointer","signature":"fbsql_data_seek(resource $result ,int $row_number )","inheritdoc":0,"modifier":[],"return":""},"fbsql_database_password":{"params":{"$link_identifier":"","$database_password":""},"docComment":"Sets or retrieves the password for a FrontBase database","signature":"fbsql_database_password(resource $link_identifier ,string $database_password )","inheritdoc":0,"modifier":[],"return":""},"fbsql_database":{"params":{"$link_identifier":"","$database":""},"docComment":"Get or set the database name used with a connection","signature":"fbsql_database(resource $link_identifier ,string $database )","inheritdoc":0,"modifier":[],"return":""},"fbsql_db_query":{"params":{"$database":"","$query":"","$link_identifier":""},"docComment":"Send a FrontBase query","signature":"fbsql_db_query(string $database ,string $query ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_db_status":{"params":{"$database_name":"","$link_identifier":""},"docComment":"Get the status for a given database","signature":"fbsql_db_status(string $database_name ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_drop_db":{"params":{"$database_name":"","$link_identifier":""},"docComment":"Drop (delete) a FrontBase database","signature":"fbsql_drop_db(string $database_name ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_errno":{"params":{"$link_identifier":""},"docComment":"Returns the error number from previous operation","signature":"fbsql_errno(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_error":{"params":{"$link_identifier":""},"docComment":"Returns the error message from previous operation","signature":"fbsql_error(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_fetch_array":{"params":{"$result":"","$result_type":""},"docComment":"Fetch a result row as an associative array, a numeric array, or both","signature":"fbsql_fetch_array(resource $result ,int $result_type )","inheritdoc":0,"modifier":[],"return":""},"fbsql_fetch_assoc":{"params":{"$result":""},"docComment":"Fetch a result row as an associative array","signature":"fbsql_fetch_assoc(resource $result )","inheritdoc":0,"modifier":[],"return":""},"fbsql_fetch_field":{"params":{"$result":"","$field_offset":""},"docComment":"Get column information from a result and return as an object","signature":"fbsql_fetch_field(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"fbsql_fetch_lengths":{"params":{"$result":""},"docComment":"Get the length of each output in a result","signature":"fbsql_fetch_lengths(resource $result )","inheritdoc":0,"modifier":[],"return":""},"fbsql_fetch_object":{"params":{"$result":""},"docComment":"Fetch a result row as an object","signature":"fbsql_fetch_object(resource $result )","inheritdoc":0,"modifier":[],"return":""},"fbsql_fetch_row":{"params":{"$result":""},"docComment":"Get a result row as an enumerated array","signature":"fbsql_fetch_row(resource $result )","inheritdoc":0,"modifier":[],"return":""},"fbsql_field_flags":{"params":{"$result":"","$field_offset":""},"docComment":"Get the flags associated with the specified field in a result","signature":"fbsql_field_flags(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"fbsql_field_len":{"params":{"$result":"","$field_offset":""},"docComment":"Returns the length of the specified field","signature":"fbsql_field_len(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"fbsql_field_name":{"params":{"$result":"","$field_index":""},"docComment":"Get the name of the specified field in a result","signature":"fbsql_field_name(resource $result ,int $field_index )","inheritdoc":0,"modifier":[],"return":""},"fbsql_field_seek":{"params":{"$result":"","$field_offset":""},"docComment":"Set result pointer to a specified field offset","signature":"fbsql_field_seek(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"fbsql_field_table":{"params":{"$result":"","$field_offset":""},"docComment":"Get name of the table the specified field is in","signature":"fbsql_field_table(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"fbsql_field_type":{"params":{"$result":"","$field_offset":""},"docComment":"Get the type of the specified field in a result","signature":"fbsql_field_type(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"fbsql_free_result":{"params":{"$result":""},"docComment":"Free result memory","signature":"fbsql_free_result(resource $result )","inheritdoc":0,"modifier":[],"return":""},"fbsql_get_autostart_info":{"params":{"$link_identifier":""},"docComment":"\n ","signature":"fbsql_get_autostart_info(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_hostname":{"params":{"$link_identifier":"","$host_name":""},"docComment":"Get or set the host name used with a connection","signature":"fbsql_hostname(resource $link_identifier ,string $host_name )","inheritdoc":0,"modifier":[],"return":""},"fbsql_insert_id":{"params":{"$link_identifier":""},"docComment":"Get the id generated from the previous INSERT operation","signature":"fbsql_insert_id(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_list_dbs":{"params":{"$link_identifier":""},"docComment":"List databases available on a FrontBase server","signature":"fbsql_list_dbs(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_list_fields":{"params":{"$database_name":"","$table_name":"","$link_identifier":""},"docComment":"List FrontBase result fields","signature":"fbsql_list_fields(string $database_name ,string $table_name ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_list_tables":{"params":{"$database":"","$link_identifier":""},"docComment":"List tables in a FrontBase database","signature":"fbsql_list_tables(string $database ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_next_result":{"params":{"$result":""},"docComment":"Move the internal result pointer to the next result","signature":"fbsql_next_result(resource $result )","inheritdoc":0,"modifier":[],"return":""},"fbsql_num_fields":{"params":{"$result":""},"docComment":"Get number of fields in result","signature":"fbsql_num_fields(resource $result )","inheritdoc":0,"modifier":[],"return":""},"fbsql_num_rows":{"params":{"$result":""},"docComment":"Get number of rows in result","signature":"fbsql_num_rows(resource $result )","inheritdoc":0,"modifier":[],"return":""},"fbsql_password":{"params":{"$link_identifier":"","$password":""},"docComment":"Get or set the user password used with a connection","signature":"fbsql_password(resource $link_identifier ,string $password )","inheritdoc":0,"modifier":[],"return":""},"fbsql_pconnect":{"params":{"$hostname":"","$username":"","$password":""},"docComment":"Open a persistent connection to a FrontBase Server","signature":"fbsql_pconnect([string $hostname] ,[string $username] ,[string $password] )","inheritdoc":0,"modifier":[],"return":""},"fbsql_query":{"params":{"$query":"","$link_identifier":"","$batch_size":""},"docComment":"Send a FrontBase query","signature":"fbsql_query(string $query ,resource $link_identifier ,int $batch_size )","inheritdoc":0,"modifier":[],"return":""},"fbsql_read_blob":{"params":{"$blob_handle":"","$link_identifier":""},"docComment":"Read a BLOB from the database","signature":"fbsql_read_blob(string $blob_handle ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_read_clob":{"params":{"$clob_handle":"","$link_identifier":""},"docComment":"Read a CLOB from the database","signature":"fbsql_read_clob(string $clob_handle ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_result":{"params":{"$result":"","$row":"","$field":""},"docComment":"Get result data","signature":"fbsql_result(resource $result ,int $row ,mixed $field )","inheritdoc":0,"modifier":[],"return":""},"fbsql_rollback":{"params":{"$link_identifier":""},"docComment":"Rollback a transaction to the database","signature":"fbsql_rollback(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_rows_fetched":{"params":{"$result":""},"docComment":"Get the number of rows affected by the last statement","signature":"fbsql_rows_fetched(resource $result )","inheritdoc":0,"modifier":[],"return":""},"fbsql_select_db":{"params":{"$database_name":"","$link_identifier":""},"docComment":"Select a FrontBase database","signature":"fbsql_select_db(string $database_name ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_set_characterset":{"params":{"$link_identifier":"","$characterset":"","$in_out_both":""},"docComment":"Change input\/output character set","signature":"fbsql_set_characterset(resource $link_identifier ,int $characterset ,int $in_out_both )","inheritdoc":0,"modifier":[],"return":""},"fbsql_set_lob_mode":{"params":{"$result":"","$lob_mode":""},"docComment":"Set the LOB retrieve mode for a FrontBase result set","signature":"fbsql_set_lob_mode(resource $result ,int $lob_mode )","inheritdoc":0,"modifier":[],"return":""},"fbsql_set_password":{"params":{"$link_identifier":"","$user":"","$password":"","$old_password":""},"docComment":"Change the password for a given user","signature":"fbsql_set_password(resource $link_identifier ,string $user ,string $password ,string $old_password )","inheritdoc":0,"modifier":[],"return":""},"fbsql_set_transaction":{"params":{"$link_identifier":"","$locking":"","$isolation":""},"docComment":"Set the transaction locking and isolation","signature":"fbsql_set_transaction(resource $link_identifier ,int $locking ,int $isolation )","inheritdoc":0,"modifier":[],"return":""},"fbsql_start_db":{"params":{"$database_name":"","$link_identifier":"","$database_options":""},"docComment":"Start a database on local or remote server","signature":"fbsql_start_db(string $database_name ,resource $link_identifier ,string $database_options )","inheritdoc":0,"modifier":[],"return":""},"fbsql_stop_db":{"params":{"$database_name":"","$link_identifier":""},"docComment":"Stop a database on local or remote server","signature":"fbsql_stop_db(string $database_name ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"fbsql_table_name":{"params":{"$result":"","$index":""},"docComment":"Get table name of field","signature":"fbsql_table_name(resource $result ,int $index )","inheritdoc":0,"modifier":[],"return":""},"fbsql_tablename":{"params":{"$result":"","$index":""},"docComment":"Get table name of field","signature":"fbsql_table_name(resource $result ,int $index )","inheritdoc":0,"modifier":[],"return":""},"fbsql_username":{"params":{"$link_identifier":"","$username":""},"docComment":"Get or set the username for the connection","signature":"fbsql_username(resource $link_identifier ,string $username )","inheritdoc":0,"modifier":[],"return":""},"fbsql_warnings":{"params":{"$OnOff":""},"docComment":"Enable or disable FrontBase warnings","signature":"fbsql_warnings(bool $OnOff )","inheritdoc":0,"modifier":[],"return":""},"bind_textdomain_codeset":{"params":{"$domain":"","$codeset":""},"docComment":"Specify the character encoding in which the messages from the DOMAIN message catalog will be returned","signature":"bind_textdomain_codeset(string $domain ,string $codeset )","inheritdoc":0,"modifier":[],"return":""},"bindtextdomain":{"params":{"$domain":"","$directory":""},"docComment":"Sets the path for a domain","signature":"bindtextdomain(string $domain ,string $directory )","inheritdoc":0,"modifier":[],"return":""},"dcgettext":{"params":{"$domain":"","$message":"","$category":""},"docComment":"Overrides the domain for a single lookup","signature":"dcgettext(string $domain ,string $message ,int $category )","inheritdoc":0,"modifier":[],"return":""},"dcngettext":{"params":{"$domain":"","$msgid1":"","$msgid2":"","$n":"","$category":""},"docComment":"Plural version of dcgettext","signature":"dcngettext(string $domain ,string $msgid1 ,string $msgid2 ,int $n ,int $category )","inheritdoc":0,"modifier":[],"return":""},"dgettext":{"params":{"$domain":"","$message":""},"docComment":"Override the current domain","signature":"dgettext(string $domain ,string $message )","inheritdoc":0,"modifier":[],"return":""},"dngettext":{"params":{"$domain":"","$msgid1":"","$msgid2":"","$n":""},"docComment":"Plural version of dgettext","signature":"dngettext(string $domain ,string $msgid1 ,string $msgid2 ,int $n )","inheritdoc":0,"modifier":[],"return":""},"gettext":{"params":{"$message":""},"docComment":"Lookup a message in the current domain","signature":"gettext(string $message )","inheritdoc":0,"modifier":[],"return":""},"ngettext":{"params":{"$msgid1":"","$msgid2":"","$n":""},"docComment":"Plural version of gettext","signature":"ngettext(string $msgid1 ,string $msgid2 ,int $n )","inheritdoc":0,"modifier":[],"return":""},"textdomain":{"params":{"$text_domain":""},"docComment":"Sets the default domain","signature":"textdomain(string $text_domain )","inheritdoc":0,"modifier":[],"return":""},"gmp_abs":{"params":{"$a":""},"docComment":"Absolute value","signature":"gmp_abs(resource $a )","inheritdoc":0,"modifier":[],"return":""},"gmp_add":{"params":{"$a":"","$b":""},"docComment":"Add numbers","signature":"gmp_add(resource $a ,resource $b )","inheritdoc":0,"modifier":[],"return":""},"gmp_and":{"params":{"$a":"","$b":""},"docComment":"Bitwise AND","signature":"gmp_and(resource $a ,resource $b )","inheritdoc":0,"modifier":[],"return":""},"gmp_clrbit":{"params":{"$a":"","$index":""},"docComment":"Clear bit","signature":"gmp_clrbit(resource $a ,int $index )","inheritdoc":0,"modifier":[],"return":""},"gmp_cmp":{"params":{"$a":"","$b":""},"docComment":"Compare numbers","signature":"gmp_cmp(resource $a ,resource $b )","inheritdoc":0,"modifier":[],"return":""},"gmp_com":{"params":{"$a":""},"docComment":"Calculates one's complement","signature":"gmp_com(resource $a )","inheritdoc":0,"modifier":[],"return":""},"gmp_div_q":{"params":{"$a":"","$b":"","$round":""},"docComment":"Divide numbers","signature":"gmp_div_q(resource $a ,resource $b ,[int $round] )","inheritdoc":0,"modifier":[],"return":""},"gmp_div_qr":{"params":{"$n":"","$d":"","$round":""},"docComment":"Divide numbers and get quotient and remainder","signature":"gmp_div_qr(resource $n ,resource $d ,[int $round] )","inheritdoc":0,"modifier":[],"return":""},"gmp_div_r":{"params":{"$n":"","$d":"","$round":""},"docComment":"Remainder of the division of numbers","signature":"gmp_div_r(resource $n ,resource $d ,[int $round] )","inheritdoc":0,"modifier":[],"return":""},"gmp_div":{"params":{"$a":"","$b":"","$round":""},"docComment":"Divide numbers","signature":"gmp_div_q(resource $a ,resource $b ,[int $round] )","inheritdoc":0,"modifier":[],"return":""},"gmp_divexact":{"params":{"$n":"","$d":""},"docComment":"Exact division of numbers","signature":"gmp_divexact(resource $n ,resource $d )","inheritdoc":0,"modifier":[],"return":""},"gmp_fact":{"params":{"$a":""},"docComment":"Factorial","signature":"gmp_fact(mixed $a )","inheritdoc":0,"modifier":[],"return":""},"gmp_gcd":{"params":{"$a":"","$b":""},"docComment":"Calculate GCD","signature":"gmp_gcd(resource $a ,resource $b )","inheritdoc":0,"modifier":[],"return":""},"gmp_gcdext":{"params":{"$a":"","$b":""},"docComment":"Calculate GCD and multipliers","signature":"gmp_gcdext(resource $a ,resource $b )","inheritdoc":0,"modifier":[],"return":""},"gmp_hamdist":{"params":{"$a":"","$b":""},"docComment":"Hamming distance","signature":"gmp_hamdist(resource $a ,resource $b )","inheritdoc":0,"modifier":[],"return":""},"gmp_init":{"params":{"$number":"","$base":""},"docComment":"Create GMP number","signature":"gmp_init(mixed $number ,[int $base] )","inheritdoc":0,"modifier":[],"return":""},"gmp_intval":{"params":{"$gmpnumber":""},"docComment":"Convert GMP number to integer","signature":"gmp_intval(resource $gmpnumber )","inheritdoc":0,"modifier":[],"return":""},"gmp_invert":{"params":{"$a":"","$b":""},"docComment":"Inverse by modulo","signature":"gmp_invert(resource $a ,resource $b )","inheritdoc":0,"modifier":[],"return":""},"gmp_jacobi":{"params":{"$a":"","$p":""},"docComment":"Jacobi symbol","signature":"gmp_jacobi(resource $a ,resource $p )","inheritdoc":0,"modifier":[],"return":""},"gmp_legendre":{"params":{"$a":"","$p":""},"docComment":"Legendre symbol","signature":"gmp_legendre(resource $a ,resource $p )","inheritdoc":0,"modifier":[],"return":""},"gmp_mod":{"params":{"$n":"","$d":""},"docComment":"Modulo operation","signature":"gmp_mod(resource $n ,resource $d )","inheritdoc":0,"modifier":[],"return":""},"gmp_mul":{"params":{"$a":"","$b":""},"docComment":"Multiply numbers","signature":"gmp_mul(resource $a ,resource $b )","inheritdoc":0,"modifier":[],"return":""},"gmp_neg":{"params":{"$a":""},"docComment":"Negate number","signature":"gmp_neg(resource $a )","inheritdoc":0,"modifier":[],"return":""},"gmp_nextprime":{"params":{"$a":""},"docComment":"Find next prime number","signature":"gmp_nextprime(int $a )","inheritdoc":0,"modifier":[],"return":""},"gmp_or":{"params":{"$a":"","$b":""},"docComment":"Bitwise OR","signature":"gmp_or(resource $a ,resource $b )","inheritdoc":0,"modifier":[],"return":""},"gmp_perfect_square":{"params":{"$a":""},"docComment":"Perfect square check","signature":"gmp_perfect_square(resource $a )","inheritdoc":0,"modifier":[],"return":""},"gmp_popcount":{"params":{"$a":""},"docComment":"Population count","signature":"gmp_popcount(resource $a )","inheritdoc":0,"modifier":[],"return":""},"gmp_pow":{"params":{"$base":"","$exp":""},"docComment":"Raise number into power","signature":"gmp_pow(resource $base ,int $exp )","inheritdoc":0,"modifier":[],"return":""},"gmp_powm":{"params":{"$base":"","$exp":"","$mod":""},"docComment":"Raise number into power with modulo","signature":"gmp_powm(resource $base ,resource $exp ,resource $mod )","inheritdoc":0,"modifier":[],"return":""},"gmp_prob_prime":{"params":{"$a":"","$reps":""},"docComment":"Check if number is \"probably prime\"","signature":"gmp_prob_prime(resource $a ,[int $reps] )","inheritdoc":0,"modifier":[],"return":""},"gmp_random":{"params":{"$limiter":""},"docComment":"Random number","signature":"gmp_random([int $limiter] )","inheritdoc":0,"modifier":[],"return":""},"gmp_scan0":{"params":{"$a":"","$start":""},"docComment":"Scan for 0","signature":"gmp_scan0(resource $a ,int $start )","inheritdoc":0,"modifier":[],"return":""},"gmp_scan1":{"params":{"$a":"","$start":""},"docComment":"Scan for 1","signature":"gmp_scan1(resource $a ,int $start )","inheritdoc":0,"modifier":[],"return":""},"gmp_setbit":{"params":{"&$a":"","$index":"","$bit_on":""},"docComment":"Set bit","signature":"gmp_setbit(resource &$a ,int $index ,[bool $bit_on] )","inheritdoc":0,"modifier":[],"return":""},"gmp_sign":{"params":{"$a":""},"docComment":"Sign of number","signature":"gmp_sign(resource $a )","inheritdoc":0,"modifier":[],"return":""},"gmp_sqrt":{"params":{"$a":""},"docComment":"Calculate square root","signature":"gmp_sqrt(resource $a )","inheritdoc":0,"modifier":[],"return":""},"gmp_sqrtrem":{"params":{"$a":""},"docComment":"Square root with remainder","signature":"gmp_sqrtrem(resource $a )","inheritdoc":0,"modifier":[],"return":""},"gmp_strval":{"params":{"$gmpnumber":"","$base":""},"docComment":"Convert GMP number to string","signature":"gmp_strval(resource $gmpnumber ,[int $base] )","inheritdoc":0,"modifier":[],"return":""},"gmp_sub":{"params":{"$a":"","$b":""},"docComment":"Subtract numbers","signature":"gmp_sub(resource $a ,resource $b )","inheritdoc":0,"modifier":[],"return":""},"gmp_testbit":{"params":{"$a":"","$index":""},"docComment":"Tests if a bit is set","signature":"gmp_testbit(resource $a ,int $index )","inheritdoc":0,"modifier":[],"return":""},"gmp_xor":{"params":{"$a":"","$b":""},"docComment":"Bitwise XOR","signature":"gmp_xor(resource $a ,resource $b )","inheritdoc":0,"modifier":[],"return":""},"ibase_add_user":{"params":{"$service_handle":"","$user_name":"","$password":"","$first_name":"","$middle_name":"","$last_name":""},"docComment":"Add a user to a security database","signature":"ibase_add_user(resource $service_handle ,string $user_name ,string $password ,string $first_name ,string $middle_name ,string $last_name )","inheritdoc":0,"modifier":[],"return":""},"ibase_affected_rows":{"params":{"$link_identifier":""},"docComment":"Return the number of rows that were affected by the previous query","signature":"ibase_affected_rows(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"ibase_backup":{"params":{"$service_handle":"","$source_db":"","$dest_file":"","$options":"","$verbose":""},"docComment":"Initiates a backup task in the service manager and returns immediately","signature":"ibase_backup(resource $service_handle ,string $source_db ,string $dest_file ,[int $options] ,[bool $verbose] )","inheritdoc":0,"modifier":[],"return":""},"ibase_blob_add":{"params":{"$blob_handle":"","$data":""},"docComment":"Add data into a newly created blob","signature":"ibase_blob_add(resource $blob_handle ,string $data )","inheritdoc":0,"modifier":[],"return":""},"ibase_blob_cancel":{"params":{"$blob_handle":""},"docComment":"Cancel creating blob","signature":"ibase_blob_cancel(resource $blob_handle )","inheritdoc":0,"modifier":[],"return":""},"ibase_blob_close":{"params":{"$blob_handle":""},"docComment":"Close blob","signature":"ibase_blob_close(resource $blob_handle )","inheritdoc":0,"modifier":[],"return":""},"ibase_blob_create":{"params":{"$link_identifier":""},"docComment":"Create a new blob for adding data","signature":"ibase_blob_create([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"ibase_blob_echo":{"params":{"$blob_id":"","$link_identifier":""},"docComment":"Output blob contents to browser","signature":"ibase_blob_echo(resource $link_identifier ,string $blob_id )","inheritdoc":0,"modifier":[],"return":""},"ibase_blob_get":{"params":{"$blob_handle":"","$len":""},"docComment":"Get len bytes data from open blob","signature":"ibase_blob_get(resource $blob_handle ,int $len )","inheritdoc":0,"modifier":[],"return":""},"ibase_blob_import":{"params":{"$link_identifier":"","$file_handle":""},"docComment":"Create blob, copy file in it, and close it","signature":"ibase_blob_import(resource $file_handle )","inheritdoc":0,"modifier":[],"return":""},"ibase_blob_info":{"params":{"$link_identifier":"","$blob_id":""},"docComment":"Return blob length and other useful info","signature":"ibase_blob_info(string $blob_id )","inheritdoc":0,"modifier":[],"return":""},"ibase_blob_open":{"params":{"$link_identifier":"","$blob_id":""},"docComment":"Open blob for retrieving data parts","signature":"ibase_blob_open(string $blob_id )","inheritdoc":0,"modifier":[],"return":""},"ibase_close":{"params":{"$connection_id":""},"docComment":"Close a connection to an InterBase database","signature":"ibase_close([resource $connection_id] )","inheritdoc":0,"modifier":[],"return":""},"ibase_commit_ret":{"params":{"$link_or_trans_identifier":""},"docComment":"Commit a transaction without closing it","signature":"ibase_commit_ret([resource $link_or_trans_identifier] )","inheritdoc":0,"modifier":[],"return":""},"ibase_commit":{"params":{"$link_or_trans_identifier":""},"docComment":"Commit a transaction","signature":"ibase_commit([resource $link_or_trans_identifier] )","inheritdoc":0,"modifier":[],"return":""},"ibase_connect":{"params":{"$database":"","$username":"","$password":"","$charset":"","$buffers":"","$dialect":"","$role":"","$sync":""},"docComment":"Open a connection to a database","signature":"ibase_connect(string $database ,string $username ,string $password ,string $charset ,int $buffers ,int $dialect ,string $role ,int $sync )","inheritdoc":0,"modifier":[],"return":""},"ibase_db_info":{"params":{"$service_handle":"","$db":"","$action":"","$argument":""},"docComment":"Request statistics about a database","signature":"ibase_db_info(resource $service_handle ,string $db ,int $action ,[int $argument] )","inheritdoc":0,"modifier":[],"return":""},"ibase_delete_user":{"params":{"$service_handle":"","$user_name":""},"docComment":"Delete a user from a security database","signature":"ibase_delete_user(resource $service_handle ,string $user_name )","inheritdoc":0,"modifier":[],"return":""},"ibase_drop_db":{"params":{"$connection":""},"docComment":"Drops a database","signature":"ibase_drop_db([resource $connection] )","inheritdoc":0,"modifier":[],"return":""},"ibase_errcode":{"params":[],"docComment":"Return an error code","signature":"ibase_errcode( )","inheritdoc":0,"modifier":[],"return":""},"ibase_errmsg":{"params":[],"docComment":"Return error messages","signature":"ibase_errmsg( )","inheritdoc":0,"modifier":[],"return":""},"ibase_execute":{"params":{"$query":"","$bind_arg":"","$...":""},"docComment":"Execute a previously prepared query","signature":"ibase_execute(resource $query ,mixed $bind_arg ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"ibase_fetch_assoc":{"params":{"$result":"","$fetch_flag":""},"docComment":"Fetch a result row from a query as an associative array","signature":"ibase_fetch_assoc(resource $result ,[int $fetch_flag] )","inheritdoc":0,"modifier":[],"return":""},"ibase_fetch_object":{"params":{"$result_id":"","$fetch_flag":""},"docComment":"Get an object from a InterBase database","signature":"ibase_fetch_object(resource $result_id ,[int $fetch_flag] )","inheritdoc":0,"modifier":[],"return":""},"ibase_fetch_row":{"params":{"$result_identifier":"","$fetch_flag":""},"docComment":"Fetch a row from an InterBase database","signature":"ibase_fetch_row(resource $result_identifier ,[int $fetch_flag] )","inheritdoc":0,"modifier":[],"return":""},"ibase_field_info":{"params":{"$result":"","$field_number":""},"docComment":"Get information about a field","signature":"ibase_field_info(resource $result ,int $field_number )","inheritdoc":0,"modifier":[],"return":""},"ibase_free_event_handler":{"params":{"$event":""},"docComment":"Cancels a registered event handler","signature":"ibase_free_event_handler(resource $event )","inheritdoc":0,"modifier":[],"return":""},"ibase_free_query":{"params":{"$query":""},"docComment":"Free memory allocated by a prepared query","signature":"ibase_free_query(resource $query )","inheritdoc":0,"modifier":[],"return":""},"ibase_free_result":{"params":{"$result_identifier":""},"docComment":"Free a result set","signature":"ibase_free_result(resource $result_identifier )","inheritdoc":0,"modifier":[],"return":""},"ibase_gen_id":{"params":{"$generator":"","$increment":"","$link_identifier":""},"docComment":"Increments the named generator and returns its new value","signature":"ibase_gen_id(string $generator ,[int $increment] ,[resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"ibase_maintain_db":{"params":{"$service_handle":"","$db":"","$action":"","$argument":""},"docComment":"Execute a maintenance command on the database server","signature":"ibase_maintain_db(resource $service_handle ,string $db ,int $action ,[int $argument] )","inheritdoc":0,"modifier":[],"return":""},"ibase_modify_user":{"params":{"$service_handle":"","$user_name":"","$password":"","$first_name":"","$middle_name":"","$last_name":""},"docComment":"Modify a user to a security database","signature":"ibase_modify_user(resource $service_handle ,string $user_name ,string $password ,string $first_name ,string $middle_name ,string $last_name )","inheritdoc":0,"modifier":[],"return":""},"ibase_name_result":{"params":{"$result":"","$name":""},"docComment":"Assigns a name to a result set","signature":"ibase_name_result(resource $result ,string $name )","inheritdoc":0,"modifier":[],"return":""},"ibase_num_fields":{"params":{"$result_id":""},"docComment":"Get the number of fields in a result set","signature":"ibase_num_fields(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"ibase_num_params":{"params":{"$query":""},"docComment":"Return the number of parameters in a prepared query","signature":"ibase_num_params(resource $query )","inheritdoc":0,"modifier":[],"return":""},"ibase_param_info":{"params":{"$query":"","$param_number":""},"docComment":"Return information about a parameter in a prepared query","signature":"ibase_param_info(resource $query ,int $param_number )","inheritdoc":0,"modifier":[],"return":""},"ibase_pconnect":{"params":{"$database":"","$username":"","$password":"","$charset":"","$buffers":"","$dialect":"","$role":"","$sync":""},"docComment":"Open a persistent connection to an InterBase database","signature":"ibase_pconnect(string $database ,string $username ,string $password ,string $charset ,int $buffers ,int $dialect ,string $role ,int $sync )","inheritdoc":0,"modifier":[],"return":""},"ibase_prepare":{"params":{"$query":"","$link_identifier":"","$trans":""},"docComment":"Prepare a query for later binding of parameter placeholders and execution","signature":"ibase_prepare(resource $link_identifier ,string $trans ,string $query )","inheritdoc":0,"modifier":[],"return":""},"ibase_query":{"params":{"$link_identifier":"","$query":"","$bind_args":""},"docComment":"Execute a query on an InterBase database","signature":"ibase_query(resource $link_identifier ,string $query ,int $bind_args )","inheritdoc":0,"modifier":[],"return":""},"ibase_restore":{"params":{"$service_handle":"","$source_file":"","$dest_db":"","$options":"","$verbose":""},"docComment":"Initiates a restore task in the service manager and returns immediately","signature":"ibase_restore(resource $service_handle ,string $source_file ,string $dest_db ,[int $options] ,[bool $verbose] )","inheritdoc":0,"modifier":[],"return":""},"ibase_rollback_ret":{"params":{"$link_or_trans_identifier":""},"docComment":"Roll back a transaction without closing it","signature":"ibase_rollback_ret([resource $link_or_trans_identifier] )","inheritdoc":0,"modifier":[],"return":""},"ibase_rollback":{"params":{"$link_or_trans_identifier":""},"docComment":"Roll back a transaction","signature":"ibase_rollback([resource $link_or_trans_identifier] )","inheritdoc":0,"modifier":[],"return":""},"ibase_server_info":{"params":{"$service_handle":"","$action":""},"docComment":"Request information about a database server","signature":"ibase_server_info(resource $service_handle ,int $action )","inheritdoc":0,"modifier":[],"return":""},"ibase_service_attach":{"params":{"$host":"","$dba_username":"","$dba_password":""},"docComment":"Connect to the service manager","signature":"ibase_service_attach(string $host ,string $dba_username ,string $dba_password )","inheritdoc":0,"modifier":[],"return":""},"ibase_service_detach":{"params":{"$service_handle":""},"docComment":"Disconnect from the service manager","signature":"ibase_service_detach(resource $service_handle )","inheritdoc":0,"modifier":[],"return":""},"ibase_set_event_handler":{"params":{"$event_handler":"","$event_name1":"","$event_name2":"","$...":"","$connection":""},"docComment":"Register a callback function to be called when events are posted","signature":"ibase_set_event_handler(resource $connection ,callable $event_handler ,string $event_name1 ,string $event_name2 ,string $... )","inheritdoc":0,"modifier":[],"return":""},"ibase_trans":{"params":{"$trans_args":"","$link_identifier":""},"docComment":"Begin a transaction","signature":"ibase_trans(resource $link_identifier ,int $trans_args )","inheritdoc":0,"modifier":[],"return":""},"ibase_wait_event":{"params":{"$event_name1":"","$event_name2":"","$...":"","$connection":""},"docComment":"Wait for an event to be posted by the database","signature":"ibase_wait_event(resource $connection ,string $event_name1 ,string $event_name2 ,string $... )","inheritdoc":0,"modifier":[],"return":""},"ifx_affected_rows":{"params":{"$result_id":""},"docComment":"Get number of rows affected by a query","signature":"ifx_affected_rows(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"ifx_blobinfile_mode":{"params":{"$mode":""},"docComment":"Set the default blob mode for all select queries","signature":"ifx_blobinfile_mode(int $mode )","inheritdoc":0,"modifier":[],"return":""},"ifx_byteasvarchar":{"params":{"$mode":""},"docComment":"Set the default byte mode","signature":"ifx_byteasvarchar(int $mode )","inheritdoc":0,"modifier":[],"return":""},"ifx_close":{"params":{"$link_identifier":""},"docComment":"Close Informix connection","signature":"ifx_close(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"ifx_connect":{"params":{"$database":"","$userid":"","$password":""},"docComment":"Open Informix server connection","signature":"ifx_connect(string $database ,string $userid ,string $password )","inheritdoc":0,"modifier":[],"return":""},"ifx_copy_blob":{"params":{"$bid":""},"docComment":"Duplicates the given blob object","signature":"ifx_copy_blob(int $bid )","inheritdoc":0,"modifier":[],"return":""},"ifx_create_blob":{"params":{"$type":"","$mode":"","$param":""},"docComment":"Creates an blob object","signature":"ifx_create_blob(int $type ,int $mode ,string $param )","inheritdoc":0,"modifier":[],"return":""},"ifx_create_char":{"params":{"$param":""},"docComment":"Creates an char object","signature":"ifx_create_char(string $param )","inheritdoc":0,"modifier":[],"return":""},"ifx_do":{"params":{"$result_id":""},"docComment":"Execute a previously prepared SQL-statement","signature":"ifx_do(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"ifx_error":{"params":{"$link_identifier":""},"docComment":"Returns error code of last Informix call","signature":"ifx_error(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"ifx_errormsg":{"params":{"$errorcode":""},"docComment":"Returns error message of last Informix call","signature":"ifx_errormsg(int $errorcode )","inheritdoc":0,"modifier":[],"return":""},"ifx_fetch_row":{"params":{"$result_id":"","$position":""},"docComment":"Get row as an associative array","signature":"ifx_fetch_row(resource $result_id ,mixed $position )","inheritdoc":0,"modifier":[],"return":""},"ifx_fieldproperties":{"params":{"$result_id":""},"docComment":"List of SQL fieldproperties","signature":"ifx_fieldproperties(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"ifx_fieldtypes":{"params":{"$result_id":""},"docComment":"List of Informix SQL fields","signature":"ifx_fieldtypes(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"ifx_free_blob":{"params":{"$bid":""},"docComment":"Deletes the blob object","signature":"ifx_free_blob(int $bid )","inheritdoc":0,"modifier":[],"return":""},"ifx_free_char":{"params":{"$bid":""},"docComment":"Deletes the char object","signature":"ifx_free_char(int $bid )","inheritdoc":0,"modifier":[],"return":""},"ifx_free_result":{"params":{"$result_id":""},"docComment":"Releases resources for the query","signature":"ifx_free_result(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"ifx_get_blob":{"params":{"$bid":""},"docComment":"Return the content of a blob object","signature":"ifx_get_blob(int $bid )","inheritdoc":0,"modifier":[],"return":""},"ifx_get_char":{"params":{"$bid":""},"docComment":"Return the content of the char object","signature":"ifx_get_char(int $bid )","inheritdoc":0,"modifier":[],"return":""},"ifx_getsqlca":{"params":{"$result_id":""},"docComment":"Get the contents of sqlca.sqlerrd[0..5] after a query","signature":"ifx_getsqlca(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"ifx_htmltbl_result":{"params":{"$result_id":"","$html_table_options":""},"docComment":"Formats all rows of a query into a HTML table","signature":"ifx_htmltbl_result(resource $result_id ,string $html_table_options )","inheritdoc":0,"modifier":[],"return":""},"ifx_nullformat":{"params":{"$mode":""},"docComment":"Sets the default return value on a fetch row","signature":"ifx_nullformat(int $mode )","inheritdoc":0,"modifier":[],"return":""},"ifx_num_fields":{"params":{"$result_id":""},"docComment":"Returns the number of columns in the query","signature":"ifx_num_fields(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"ifx_num_rows":{"params":{"$result_id":""},"docComment":"Count the rows already fetched from a query","signature":"ifx_num_rows(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"ifx_pconnect":{"params":{"$database":"","$userid":"","$password":""},"docComment":"Open persistent Informix connection","signature":"ifx_pconnect(string $database ,string $userid ,string $password )","inheritdoc":0,"modifier":[],"return":""},"ifx_prepare":{"params":{"$query":"","$link_identifier":"","$cursor_def":"","$blobidarray":""},"docComment":"Prepare an SQL-statement for execution","signature":"ifx_prepare(string $query ,resource $link_identifier ,int $cursor_def ,mixed $blobidarray )","inheritdoc":0,"modifier":[],"return":""},"ifx_query":{"params":{"$query":"","$link_identifier":"","$cursor_type":"","$blobidarray":""},"docComment":"Send Informix query","signature":"ifx_query(string $query ,resource $link_identifier ,int $cursor_type ,mixed $blobidarray )","inheritdoc":0,"modifier":[],"return":""},"ifx_textasvarchar":{"params":{"$mode":""},"docComment":"Set the default text mode","signature":"ifx_textasvarchar(int $mode )","inheritdoc":0,"modifier":[],"return":""},"ifx_update_blob":{"params":{"$bid":"","$content":""},"docComment":"Updates the content of the blob object","signature":"ifx_update_blob(int $bid ,string $content )","inheritdoc":0,"modifier":[],"return":""},"ifx_update_char":{"params":{"$bid":"","$content":""},"docComment":"Updates the content of the char object","signature":"ifx_update_char(int $bid ,string $content )","inheritdoc":0,"modifier":[],"return":""},"ifxus_close_slob":{"params":{"$bid":""},"docComment":"Deletes the slob object","signature":"ifxus_close_slob(int $bid )","inheritdoc":0,"modifier":[],"return":""},"ifxus_create_slob":{"params":{"$mode":""},"docComment":"Creates an slob object and opens it","signature":"ifxus_create_slob(int $mode )","inheritdoc":0,"modifier":[],"return":""},"ifxus_free_slob":{"params":{"$bid":""},"docComment":"Deletes the slob object","signature":"ifxus_free_slob(int $bid )","inheritdoc":0,"modifier":[],"return":""},"ifxus_open_slob":{"params":{"$bid":"","$mode":""},"docComment":"Opens an slob object","signature":"ifxus_open_slob(int $bid ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"ifxus_read_slob":{"params":{"$bid":"","$nbytes":""},"docComment":"Reads nbytes of the slob object","signature":"ifxus_read_slob(int $bid ,int $nbytes )","inheritdoc":0,"modifier":[],"return":""},"ifxus_seek_slob":{"params":{"$bid":"","$mode":"","$offset":""},"docComment":"Sets the current file or seek position","signature":"ifxus_seek_slob(int $bid ,int $mode ,int $offset )","inheritdoc":0,"modifier":[],"return":""},"ifxus_tell_slob":{"params":{"$bid":""},"docComment":"Returns the current file or seek position","signature":"ifxus_tell_slob(int $bid )","inheritdoc":0,"modifier":[],"return":""},"ifxus_write_slob":{"params":{"$bid":"","$content":""},"docComment":"Writes a string into the slob object","signature":"ifxus_write_slob(int $bid ,string $content )","inheritdoc":0,"modifier":[],"return":""},"imap_8bit":{"params":{"$string":""},"docComment":"Convert an 8bit string to a quoted-printable string","signature":"imap_8bit(string $string )","inheritdoc":0,"modifier":[],"return":""},"imap_alerts":{"params":[],"docComment":"Returns all IMAP alert messages that have occurred","signature":"imap_alerts( )","inheritdoc":0,"modifier":[],"return":""},"imap_append":{"params":{"$imap_stream":"","$mailbox":"","$message":"","$options":"","$internal_date":""},"docComment":"Append a string message to a specified mailbox","signature":"imap_append(resource $imap_stream ,string $mailbox ,string $message ,[string $options] ,[string $internal_date] )","inheritdoc":0,"modifier":[],"return":""},"imap_base64":{"params":{"$text":""},"docComment":"Decode BASE64 encoded text","signature":"imap_base64(string $text )","inheritdoc":0,"modifier":[],"return":""},"imap_binary":{"params":{"$string":""},"docComment":"Convert an 8bit string to a base64 string","signature":"imap_binary(string $string )","inheritdoc":0,"modifier":[],"return":""},"imap_body":{"params":{"$imap_stream":"","$msg_number":"","$options":""},"docComment":"Read the message body","signature":"imap_body(resource $imap_stream ,int $msg_number ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"imap_bodystruct":{"params":{"$imap_stream":"","$msg_number":"","$section":""},"docComment":"Read the structure of a specified body section of a specific message","signature":"imap_bodystruct(resource $imap_stream ,int $msg_number ,string $section )","inheritdoc":0,"modifier":[],"return":""},"imap_check":{"params":{"$imap_stream":""},"docComment":"Check current mailbox","signature":"imap_check(resource $imap_stream )","inheritdoc":0,"modifier":[],"return":""},"imap_clearflag_full":{"params":{"$imap_stream":"","$sequence":"","$flag":"","$options":""},"docComment":"Clears flags on messages","signature":"imap_clearflag_full(resource $imap_stream ,string $sequence ,string $flag ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"imap_close":{"params":{"$imap_stream":"","$flag":""},"docComment":"Close an IMAP stream","signature":"imap_close(resource $imap_stream ,[int $flag] )","inheritdoc":0,"modifier":[],"return":""},"imap_create":{"params":{"$imap_stream":"","$mailbox":""},"docComment":"Create a new mailbox","signature":"imap_createmailbox(resource $imap_stream ,string $mailbox )","inheritdoc":0,"modifier":[],"return":""},"imap_createmailbox":{"params":{"$imap_stream":"","$mailbox":""},"docComment":"Create a new mailbox","signature":"imap_createmailbox(resource $imap_stream ,string $mailbox )","inheritdoc":0,"modifier":[],"return":""},"imap_delete":{"params":{"$imap_stream":"","$msg_number":"","$options":""},"docComment":"Mark a message for deletion from current mailbox","signature":"imap_delete(resource $imap_stream ,int $msg_number ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"imap_deletemailbox":{"params":{"$imap_stream":"","$mailbox":""},"docComment":"Delete a mailbox","signature":"imap_deletemailbox(resource $imap_stream ,string $mailbox )","inheritdoc":0,"modifier":[],"return":""},"imap_errors":{"params":[],"docComment":"Returns all of the IMAP errors that have occurred","signature":"imap_errors( )","inheritdoc":0,"modifier":[],"return":""},"imap_expunge":{"params":{"$imap_stream":""},"docComment":"Delete all messages marked for deletion","signature":"imap_expunge(resource $imap_stream )","inheritdoc":0,"modifier":[],"return":""},"imap_fetch_overview":{"params":{"$imap_stream":"","$sequence":"","$options":""},"docComment":"Read an overview of the information in the headers of the given message","signature":"imap_fetch_overview(resource $imap_stream ,string $sequence ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"imap_fetchbody":{"params":{"$imap_stream":"","$msg_number":"","$section":"","$options":""},"docComment":"Fetch a particular section of the body of the message","signature":"imap_fetchbody(resource $imap_stream ,int $msg_number ,string $section ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"imap_fetchheader":{"params":{"$imap_stream":"","$msg_number":"","$options":""},"docComment":"Returns header for a message","signature":"imap_fetchheader(resource $imap_stream ,int $msg_number ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"imap_fetchmime":{"params":{"$imap_stream":"","$msg_number":"","$section":"","$options":""},"docComment":"Fetch MIME headers for a particular section of the message","signature":"imap_fetchmime(resource $imap_stream ,int $msg_number ,string $section ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"imap_fetchstructure":{"params":{"$imap_stream":"","$msg_number":"","$options":""},"docComment":"Read the structure of a particular message","signature":"imap_fetchstructure(resource $imap_stream ,int $msg_number ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"imap_fetchtext":{"params":{"$imap_stream":"","$msg_number":"","$options":""},"docComment":"Read the message body","signature":"imap_body(resource $imap_stream ,int $msg_number ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"imap_gc":{"params":{"$imap_stream":"","$caches":""},"docComment":"Clears IMAP cache","signature":"imap_gc(resource $imap_stream ,int $caches )","inheritdoc":0,"modifier":[],"return":""},"imap_get_quota":{"params":{"$imap_stream":"","$quota_root":""},"docComment":"Retrieve the quota level settings, and usage statics per mailbox","signature":"imap_get_quota(resource $imap_stream ,string $quota_root )","inheritdoc":0,"modifier":[],"return":""},"imap_get_quotaroot":{"params":{"$imap_stream":"","$quota_root":""},"docComment":"Retrieve the quota settings per user","signature":"imap_get_quotaroot(resource $imap_stream ,string $quota_root )","inheritdoc":0,"modifier":[],"return":""},"imap_getacl":{"params":{"$imap_stream":"","$mailbox":""},"docComment":"Gets the ACL for a given mailbox","signature":"imap_getacl(resource $imap_stream ,string $mailbox )","inheritdoc":0,"modifier":[],"return":""},"imap_getmailboxes":{"params":{"$imap_stream":"","$ref":"","$pattern":""},"docComment":"Read the list of mailboxes, returning detailed information on each one","signature":"imap_getmailboxes(resource $imap_stream ,string $ref ,string $pattern )","inheritdoc":0,"modifier":[],"return":""},"imap_getsubscribed":{"params":{"$imap_stream":"","$ref":"","$pattern":""},"docComment":"List all the subscribed mailboxes","signature":"imap_getsubscribed(resource $imap_stream ,string $ref ,string $pattern )","inheritdoc":0,"modifier":[],"return":""},"imap_header":{"params":{"$imap_stream":"","$msg_number":"","$fromlength":"","$subjectlength":"","$defaulthost":""},"docComment":"Read the header of the message","signature":"imap_headerinfo(resource $imap_stream ,int $msg_number ,[int $fromlength] ,[int $subjectlength] ,[string $defaulthost] )","inheritdoc":0,"modifier":[],"return":""},"imap_headerinfo":{"params":{"$imap_stream":"","$msg_number":"","$fromlength":"","$subjectlength":"","$defaulthost":""},"docComment":"Read the header of the message","signature":"imap_headerinfo(resource $imap_stream ,int $msg_number ,[int $fromlength] ,[int $subjectlength] ,[string $defaulthost] )","inheritdoc":0,"modifier":[],"return":""},"imap_headers":{"params":{"$imap_stream":""},"docComment":"Returns headers for all messages in a mailbox","signature":"imap_headers(resource $imap_stream )","inheritdoc":0,"modifier":[],"return":""},"imap_last_error":{"params":[],"docComment":"Gets the last IMAP error that occurred during this page request","signature":"imap_last_error( )","inheritdoc":0,"modifier":[],"return":""},"imap_list":{"params":{"$imap_stream":"","$ref":"","$pattern":""},"docComment":"Read the list of mailboxes","signature":"imap_list(resource $imap_stream ,string $ref ,string $pattern )","inheritdoc":0,"modifier":[],"return":""},"imap_listmailbox":{"params":{"$imap_stream":"","$ref":"","$pattern":""},"docComment":"Read the list of mailboxes","signature":"imap_list(resource $imap_stream ,string $ref ,string $pattern )","inheritdoc":0,"modifier":[],"return":""},"imap_listscan":{"params":{"$imap_stream":"","$ref":"","$pattern":"","$content":""},"docComment":"Returns the list of mailboxes that matches the given text","signature":"imap_listscan(resource $imap_stream ,string $ref ,string $pattern ,string $content )","inheritdoc":0,"modifier":[],"return":""},"imap_listsubscribed":{"params":{"$imap_stream":"","$ref":"","$pattern":""},"docComment":"List all the subscribed mailboxes","signature":"imap_lsub(resource $imap_stream ,string $ref ,string $pattern )","inheritdoc":0,"modifier":[],"return":""},"imap_lsub":{"params":{"$imap_stream":"","$ref":"","$pattern":""},"docComment":"List all the subscribed mailboxes","signature":"imap_lsub(resource $imap_stream ,string $ref ,string $pattern )","inheritdoc":0,"modifier":[],"return":""},"imap_mail_compose":{"params":{"$envelope":"","$body":""},"docComment":"Create a MIME message based on given envelope and body sections","signature":"imap_mail_compose(array $envelope ,array $body )","inheritdoc":0,"modifier":[],"return":""},"imap_mail_copy":{"params":{"$imap_stream":"","$msglist":"","$mailbox":"","$options":""},"docComment":"Copy specified messages to a mailbox","signature":"imap_mail_copy(resource $imap_stream ,string $msglist ,string $mailbox ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"imap_mail_move":{"params":{"$imap_stream":"","$msglist":"","$mailbox":"","$options":""},"docComment":"Move specified messages to a mailbox","signature":"imap_mail_move(resource $imap_stream ,string $msglist ,string $mailbox ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"imap_mail":{"params":{"$to":"","$subject":"","$message":"","$additional_headers":"","$cc":"","$bcc":"","$rpath":""},"docComment":"Send an email message","signature":"imap_mail(string $to ,string $subject ,string $message ,[string $additional_headers] ,[string $cc] ,[string $bcc] ,[string $rpath] )","inheritdoc":0,"modifier":[],"return":""},"imap_mailboxmsginfo":{"params":{"$imap_stream":""},"docComment":"Get information about the current mailbox","signature":"imap_mailboxmsginfo(resource $imap_stream )","inheritdoc":0,"modifier":[],"return":""},"imap_mime_header_decode":{"params":{"$text":""},"docComment":"Decode MIME header elements","signature":"imap_mime_header_decode(string $text )","inheritdoc":0,"modifier":[],"return":""},"imap_msgno":{"params":{"$imap_stream":"","$uid":""},"docComment":"Gets the message sequence number for the given UID","signature":"imap_msgno(resource $imap_stream ,int $uid )","inheritdoc":0,"modifier":[],"return":""},"imap_num_msg":{"params":{"$imap_stream":""},"docComment":"Gets the number of messages in the current mailbox","signature":"imap_num_msg(resource $imap_stream )","inheritdoc":0,"modifier":[],"return":""},"imap_num_recent":{"params":{"$imap_stream":""},"docComment":"Gets the number of recent messages in current mailbox","signature":"imap_num_recent(resource $imap_stream )","inheritdoc":0,"modifier":[],"return":""},"imap_open":{"params":{"$mailbox":"","$username":"","$password":"","$options":"","$n_retries":"","$params":""},"docComment":"Open an  stream to a mailbox","signature":"imap_open(string $mailbox ,string $username ,string $password ,[int $options] ,[int $n_retries] ,[array $params] )","inheritdoc":0,"modifier":[],"return":""},"imap_ping":{"params":{"$imap_stream":""},"docComment":"Check if the IMAP stream is still active","signature":"imap_ping(resource $imap_stream )","inheritdoc":0,"modifier":[],"return":""},"imap_qprint":{"params":{"$string":""},"docComment":"Convert a quoted-printable string to an 8 bit string","signature":"imap_qprint(string $string )","inheritdoc":0,"modifier":[],"return":""},"imap_rename":{"params":{"$imap_stream":"","$old_mbox":"","$new_mbox":""},"docComment":"Rename an old mailbox to new mailbox","signature":"imap_renamemailbox(resource $imap_stream ,string $old_mbox ,string $new_mbox )","inheritdoc":0,"modifier":[],"return":""},"imap_renamemailbox":{"params":{"$imap_stream":"","$old_mbox":"","$new_mbox":""},"docComment":"Rename an old mailbox to new mailbox","signature":"imap_renamemailbox(resource $imap_stream ,string $old_mbox ,string $new_mbox )","inheritdoc":0,"modifier":[],"return":""},"imap_reopen":{"params":{"$imap_stream":"","$mailbox":"","$options":"","$n_retries":""},"docComment":"Reopen  stream to new mailbox","signature":"imap_reopen(resource $imap_stream ,string $mailbox ,[int $options] ,[int $n_retries] )","inheritdoc":0,"modifier":[],"return":""},"imap_rfc822_parse_adrlist":{"params":{"$address":"","$default_host":""},"docComment":"Parses an address string","signature":"imap_rfc822_parse_adrlist(string $address ,string $default_host )","inheritdoc":0,"modifier":[],"return":""},"imap_rfc822_parse_headers":{"params":{"$headers":"","$defaulthost":""},"docComment":"Parse mail headers from a string","signature":"imap_rfc822_parse_headers(string $headers ,[string $defaulthost] )","inheritdoc":0,"modifier":[],"return":""},"imap_rfc822_write_address":{"params":{"$mailbox":"","$host":"","$personal":""},"docComment":"Returns a properly formatted email address given the mailbox, host, and personal info","signature":"imap_rfc822_write_address(string $mailbox ,string $host ,string $personal )","inheritdoc":0,"modifier":[],"return":""},"imap_savebody":{"params":{"$imap_stream":"","$file":"","$msg_number":"","$part_number":"","$options":""},"docComment":"Save a specific body section to a file","signature":"imap_savebody(resource $imap_stream ,mixed $file ,int $msg_number ,[string $part_number] ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"imap_scan":{"params":{"$imap_stream":"","$ref":"","$pattern":"","$content":""},"docComment":"Returns the list of mailboxes that matches the given text","signature":"imap_listscan(resource $imap_stream ,string $ref ,string $pattern ,string $content )","inheritdoc":0,"modifier":[],"return":""},"imap_scanmailbox":{"params":{"$imap_stream":"","$ref":"","$pattern":"","$content":""},"docComment":"Returns the list of mailboxes that matches the given text","signature":"imap_listscan(resource $imap_stream ,string $ref ,string $pattern ,string $content )","inheritdoc":0,"modifier":[],"return":""},"imap_search":{"params":{"$imap_stream":"","$criteria":"","$options":"","$charset":""},"docComment":"This function returns an array of messages matching the given search criteria","signature":"imap_search(resource $imap_stream ,string $criteria ,[int $options] ,[string $charset] )","inheritdoc":0,"modifier":[],"return":""},"imap_set_quota":{"params":{"$imap_stream":"","$quota_root":"","$quota_limit":""},"docComment":"Sets a quota for a given mailbox","signature":"imap_set_quota(resource $imap_stream ,string $quota_root ,int $quota_limit )","inheritdoc":0,"modifier":[],"return":""},"imap_setacl":{"params":{"$imap_stream":"","$mailbox":"","$id":"","$rights":""},"docComment":"Sets the ACL for a given mailbox","signature":"imap_setacl(resource $imap_stream ,string $mailbox ,string $id ,string $rights )","inheritdoc":0,"modifier":[],"return":""},"imap_setflag_full":{"params":{"$imap_stream":"","$sequence":"","$flag":"","$options":""},"docComment":"Sets flags on messages","signature":"imap_setflag_full(resource $imap_stream ,string $sequence ,string $flag ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"imap_sort":{"params":{"$imap_stream":"","$criteria":"","$reverse":"","$options":"","$search_criteria":"","$charset":""},"docComment":"Gets and sort messages","signature":"imap_sort(resource $imap_stream ,int $criteria ,int $reverse ,[int $options] ,[string $search_criteria] ,[string $charset] )","inheritdoc":0,"modifier":[],"return":""},"imap_status":{"params":{"$imap_stream":"","$mailbox":"","$options":""},"docComment":"Returns status information on a mailbox","signature":"imap_status(resource $imap_stream ,string $mailbox ,int $options )","inheritdoc":0,"modifier":[],"return":""},"imap_subscribe":{"params":{"$imap_stream":"","$mailbox":""},"docComment":"Subscribe to a mailbox","signature":"imap_subscribe(resource $imap_stream ,string $mailbox )","inheritdoc":0,"modifier":[],"return":""},"imap_thread":{"params":{"$imap_stream":"","$options":""},"docComment":"Returns a tree of threaded message","signature":"imap_thread(resource $imap_stream ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"imap_timeout":{"params":{"$timeout_type":"","$timeout":""},"docComment":"Set or fetch imap timeout","signature":"imap_timeout(int $timeout_type ,[int $timeout] )","inheritdoc":0,"modifier":[],"return":""},"imap_uid":{"params":{"$imap_stream":"","$msg_number":""},"docComment":"This function returns the UID for the given message sequence number","signature":"imap_uid(resource $imap_stream ,int $msg_number )","inheritdoc":0,"modifier":[],"return":""},"imap_undelete":{"params":{"$imap_stream":"","$msg_number":"","$flags":""},"docComment":"Unmark the message which is marked deleted","signature":"imap_undelete(resource $imap_stream ,int $msg_number ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"imap_unsubscribe":{"params":{"$imap_stream":"","$mailbox":""},"docComment":"Unsubscribe from a mailbox","signature":"imap_unsubscribe(resource $imap_stream ,string $mailbox )","inheritdoc":0,"modifier":[],"return":""},"imap_utf7_decode":{"params":{"$text":""},"docComment":"Decodes a modified UTF-7 encoded string","signature":"imap_utf7_decode(string $text )","inheritdoc":0,"modifier":[],"return":""},"imap_utf7_encode":{"params":{"$data":""},"docComment":"Converts ISO-8859-1 string to modified UTF-7 text","signature":"imap_utf7_encode(string $data )","inheritdoc":0,"modifier":[],"return":""},"imap_utf8":{"params":{"$mime_encoded_text":""},"docComment":"Converts MIME-encoded text to UTF-8","signature":"imap_utf8(string $mime_encoded_text )","inheritdoc":0,"modifier":[],"return":""},"ldap_8859_to_t61":{"params":{"$value":""},"docComment":"Translate 8859 characters to t61 characters","signature":"ldap_8859_to_t61(string $value )","inheritdoc":0,"modifier":[],"return":""},"ldap_add":{"params":{"$link_identifier":"","$dn":"","$entry":""},"docComment":"Add entries to LDAP directory","signature":"ldap_add(resource $link_identifier ,string $dn ,array $entry )","inheritdoc":0,"modifier":[],"return":""},"ldap_bind":{"params":{"$link_identifier":"","$bind_rdn":"","$bind_password":""},"docComment":"Bind to LDAP directory","signature":"ldap_bind(resource $link_identifier ,[string $bind_rdn] ,[string $bind_password] )","inheritdoc":0,"modifier":[],"return":""},"ldap_close":{"params":{"$link_identifier":""},"docComment":"Unbind from LDAP directory","signature":"ldap_unbind(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"ldap_compare":{"params":{"$link_identifier":"","$dn":"","$attribute":"","$value":""},"docComment":"Compare value of attribute found in entry specified with DN","signature":"ldap_compare(resource $link_identifier ,string $dn ,string $attribute ,string $value )","inheritdoc":0,"modifier":[],"return":""},"ldap_connect":{"params":{"$hostname":"","$port":""},"docComment":"Connect to an LDAP server","signature":"ldap_connect([string $hostname] ,[int $port] )","inheritdoc":0,"modifier":[],"return":""},"ldap_control_paged_result_response":{"params":{"$link":"","$result":"","&$cookie":"","&$estimated":""},"docComment":"Retrieve the LDAP pagination cookie","signature":"ldap_control_paged_result_response(resource $link ,resource $result ,string &$cookie ,int &$estimated )","inheritdoc":0,"modifier":[],"return":""},"ldap_control_paged_result":{"params":{"$link":"","$pagesize":"","$iscritical":"","$cookie":""},"docComment":"Send LDAP pagination control","signature":"ldap_control_paged_result(resource $link ,int $pagesize ,[bool $iscritical] ,[string $cookie] )","inheritdoc":0,"modifier":[],"return":""},"ldap_count_entries":{"params":{"$link_identifier":"","$result_identifier":""},"docComment":"Count the number of entries in a search","signature":"ldap_count_entries(resource $link_identifier ,resource $result_identifier )","inheritdoc":0,"modifier":[],"return":""},"ldap_delete":{"params":{"$link_identifier":"","$dn":""},"docComment":"Delete an entry from a directory","signature":"ldap_delete(resource $link_identifier ,string $dn )","inheritdoc":0,"modifier":[],"return":""},"ldap_dn2ufn":{"params":{"$dn":""},"docComment":"Convert DN to User Friendly Naming format","signature":"ldap_dn2ufn(string $dn )","inheritdoc":0,"modifier":[],"return":""},"ldap_err2str":{"params":{"$errno":""},"docComment":"Convert LDAP error number into string error message","signature":"ldap_err2str(int $errno )","inheritdoc":0,"modifier":[],"return":""},"ldap_errno":{"params":{"$link_identifier":""},"docComment":"Return the LDAP error number of the last LDAP command","signature":"ldap_errno(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"ldap_error":{"params":{"$link_identifier":""},"docComment":"Return the LDAP error message of the last LDAP command","signature":"ldap_error(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"ldap_explode_dn":{"params":{"$dn":"","$with_attrib":""},"docComment":"Splits DN into its component parts","signature":"ldap_explode_dn(string $dn ,int $with_attrib )","inheritdoc":0,"modifier":[],"return":""},"ldap_first_attribute":{"params":{"$link_identifier":"","$result_entry_identifier":""},"docComment":"Return first attribute","signature":"ldap_first_attribute(resource $link_identifier ,resource $result_entry_identifier )","inheritdoc":0,"modifier":[],"return":""},"ldap_first_entry":{"params":{"$link_identifier":"","$result_identifier":""},"docComment":"Return first result id","signature":"ldap_first_entry(resource $link_identifier ,resource $result_identifier )","inheritdoc":0,"modifier":[],"return":""},"ldap_first_reference":{"params":{"$link":"","$result":""},"docComment":"Return first reference","signature":"ldap_first_reference(resource $link ,resource $result )","inheritdoc":0,"modifier":[],"return":""},"ldap_free_result":{"params":{"$result_identifier":""},"docComment":"Free result memory","signature":"ldap_free_result(resource $result_identifier )","inheritdoc":0,"modifier":[],"return":""},"ldap_get_attributes":{"params":{"$link_identifier":"","$result_entry_identifier":""},"docComment":"Get attributes from a search result entry","signature":"ldap_get_attributes(resource $link_identifier ,resource $result_entry_identifier )","inheritdoc":0,"modifier":[],"return":""},"ldap_get_dn":{"params":{"$link_identifier":"","$result_entry_identifier":""},"docComment":"Get the DN of a result entry","signature":"ldap_get_dn(resource $link_identifier ,resource $result_entry_identifier )","inheritdoc":0,"modifier":[],"return":""},"ldap_get_entries":{"params":{"$link_identifier":"","$result_identifier":""},"docComment":"Get all result entries","signature":"ldap_get_entries(resource $link_identifier ,resource $result_identifier )","inheritdoc":0,"modifier":[],"return":""},"ldap_get_option":{"params":{"$link_identifier":"","$option":"","&$retval":""},"docComment":"Get the current value for given option","signature":"ldap_get_option(resource $link_identifier ,int $option ,mixed &$retval )","inheritdoc":0,"modifier":[],"return":""},"ldap_get_values_len":{"params":{"$link_identifier":"","$result_entry_identifier":"","$attribute":""},"docComment":"Get all binary values from a result entry","signature":"ldap_get_values_len(resource $link_identifier ,resource $result_entry_identifier ,string $attribute )","inheritdoc":0,"modifier":[],"return":""},"ldap_get_values":{"params":{"$link_identifier":"","$result_entry_identifier":"","$attribute":""},"docComment":"Get all values from a result entry","signature":"ldap_get_values(resource $link_identifier ,resource $result_entry_identifier ,string $attribute )","inheritdoc":0,"modifier":[],"return":""},"ldap_list":{"params":{"$link_identifier":"","$base_dn":"","$filter":"","$attributes":"","$attrsonly":"","$sizelimit":"","$timelimit":"","$deref":""},"docComment":"Single-level search","signature":"ldap_list(resource $link_identifier ,string $base_dn ,string $filter ,array $attributes ,int $attrsonly ,int $sizelimit ,int $timelimit ,int $deref )","inheritdoc":0,"modifier":[],"return":""},"ldap_mod_add":{"params":{"$link_identifier":"","$dn":"","$entry":""},"docComment":"Add attribute values to current attributes","signature":"ldap_mod_add(resource $link_identifier ,string $dn ,array $entry )","inheritdoc":0,"modifier":[],"return":""},"ldap_mod_del":{"params":{"$link_identifier":"","$dn":"","$entry":""},"docComment":"Delete attribute values from current attributes","signature":"ldap_mod_del(resource $link_identifier ,string $dn ,array $entry )","inheritdoc":0,"modifier":[],"return":""},"ldap_mod_replace":{"params":{"$link_identifier":"","$dn":"","$entry":""},"docComment":"Replace attribute values with new ones","signature":"ldap_mod_replace(resource $link_identifier ,string $dn ,array $entry )","inheritdoc":0,"modifier":[],"return":""},"ldap_modify":{"params":{"$link_identifier":"","$dn":"","$entry":""},"docComment":"Modify an LDAP entry","signature":"ldap_modify(resource $link_identifier ,string $dn ,array $entry )","inheritdoc":0,"modifier":[],"return":""},"ldap_next_attribute":{"params":{"$link_identifier":"","$result_entry_identifier":""},"docComment":"Get the next attribute in result","signature":"ldap_next_attribute(resource $link_identifier ,resource $result_entry_identifier )","inheritdoc":0,"modifier":[],"return":""},"ldap_next_entry":{"params":{"$link_identifier":"","$result_entry_identifier":""},"docComment":"Get next result entry","signature":"ldap_next_entry(resource $link_identifier ,resource $result_entry_identifier )","inheritdoc":0,"modifier":[],"return":""},"ldap_next_reference":{"params":{"$link":"","$entry":""},"docComment":"Get next reference","signature":"ldap_next_reference(resource $link ,resource $entry )","inheritdoc":0,"modifier":[],"return":""},"ldap_parse_reference":{"params":{"$link":"","$entry":"","&$referrals":""},"docComment":"Extract information from reference entry","signature":"ldap_parse_reference(resource $link ,resource $entry ,array &$referrals )","inheritdoc":0,"modifier":[],"return":""},"ldap_parse_result":{"params":{"$link":"","$result":"","&$errcode":"","&$matcheddn":"","&$errmsg":"","&$referrals":""},"docComment":"Extract information from result","signature":"ldap_parse_result(resource $link ,resource $result ,int &$errcode ,string &$matcheddn ,string &$errmsg ,array &$referrals )","inheritdoc":0,"modifier":[],"return":""},"ldap_read":{"params":{"$link_identifier":"","$base_dn":"","$filter":"","$attributes":"","$attrsonly":"","$sizelimit":"","$timelimit":"","$deref":""},"docComment":"Read an entry","signature":"ldap_read(resource $link_identifier ,string $base_dn ,string $filter ,array $attributes ,int $attrsonly ,int $sizelimit ,int $timelimit ,int $deref )","inheritdoc":0,"modifier":[],"return":""},"ldap_rename":{"params":{"$link_identifier":"","$dn":"","$newrdn":"","$newparent":"","$deleteoldrdn":""},"docComment":"Modify the name of an entry","signature":"ldap_rename(resource $link_identifier ,string $dn ,string $newrdn ,string $newparent ,bool $deleteoldrdn )","inheritdoc":0,"modifier":[],"return":""},"ldap_sasl_bind":{"params":{"$link":"","$binddn":"","$password":"","$sasl_mech":"","$sasl_realm":"","$sasl_authc_id":"","$sasl_authz_id":"","$props":""},"docComment":"Bind to LDAP directory using SASL","signature":"ldap_sasl_bind(resource $link ,[string $binddn] ,[string $password] ,[string $sasl_mech] ,[string $sasl_realm] ,[string $sasl_authc_id] ,[string $sasl_authz_id] ,[string $props] )","inheritdoc":0,"modifier":[],"return":""},"ldap_search":{"params":{"$link_identifier":"","$base_dn":"","$filter":"","$attributes":"","$attrsonly":"","$sizelimit":"","$timelimit":"","$deref":""},"docComment":"Search LDAP tree","signature":"ldap_search(resource $link_identifier ,string $base_dn ,string $filter ,array $attributes ,int $attrsonly ,int $sizelimit ,int $timelimit ,int $deref )","inheritdoc":0,"modifier":[],"return":""},"ldap_set_option":{"params":{"$link_identifier":"","$option":"","$newval":""},"docComment":"Set the value of the given option","signature":"ldap_set_option(resource $link_identifier ,int $option ,mixed $newval )","inheritdoc":0,"modifier":[],"return":""},"ldap_set_rebind_proc":{"params":{"$link":"","$callback":""},"docComment":"Set a callback function to do re-binds on referral chasing","signature":"ldap_set_rebind_proc(resource $link ,callable $callback )","inheritdoc":0,"modifier":[],"return":""},"ldap_sort":{"params":{"$link":"","$result":"","$sortfilter":""},"docComment":"Sort LDAP result entries","signature":"ldap_sort(resource $link ,resource $result ,string $sortfilter )","inheritdoc":0,"modifier":[],"return":""},"ldap_start_tls":{"params":{"$link":""},"docComment":"Start TLS","signature":"ldap_start_tls(resource $link )","inheritdoc":0,"modifier":[],"return":""},"ldap_t61_to_8859":{"params":{"$value":""},"docComment":"Translate t61 characters to 8859 characters","signature":"ldap_t61_to_8859(string $value )","inheritdoc":0,"modifier":[],"return":""},"ldap_unbind":{"params":{"$link_identifier":""},"docComment":"Unbind from LDAP directory","signature":"ldap_unbind(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"libxml_clear_errors":{"params":[],"docComment":"\n   Clear libxml error buffer\n  ","signature":"libxml_clear_errors( )","inheritdoc":0,"modifier":[],"return":""},"libxml_disable_entity_loader":{"params":{"$disable":""},"docComment":"Disable the ability to load external entities","signature":"libxml_disable_entity_loader([bool $disable] )","inheritdoc":0,"modifier":[],"return":""},"libxml_get_errors":{"params":[],"docComment":"\n   Retrieve array of errors\n  ","signature":"libxml_get_errors( )","inheritdoc":0,"modifier":[],"return":""},"libxml_get_last_error":{"params":[],"docComment":"\n   Retrieve last error from libxml\n  ","signature":"libxml_get_last_error( )","inheritdoc":0,"modifier":[],"return":"LibXMLError"},"libxml_set_external_entity_loader":{"params":{"$resolver_function":""},"docComment":"Changes the default external entity loader","signature":"libxml_set_external_entity_loader(callable $resolver_function )","inheritdoc":0,"modifier":[],"return":""},"libxml_set_streams_context":{"params":{"$streams_context":""},"docComment":"\n   Set the streams context for the next libxml document load or write\n  ","signature":"libxml_set_streams_context(resource $streams_context )","inheritdoc":0,"modifier":[],"return":""},"libxml_use_internal_errors":{"params":{"$use_errors":""},"docComment":"\n   Disable libxml errors and allow user to fetch error information as needed\n  ","signature":"libxml_use_internal_errors([bool $use_errors] )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_cbc":{"params":{"$cipher":"","$key":"","$data":"","$mode":"","$iv":""},"docComment":"Encrypts\/decrypts data in CBC mode","signature":"mcrypt_cbc(string $cipher ,string $key ,string $data ,int $mode ,string $iv )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_cfb":{"params":{"$cipher":"","$key":"","$data":"","$mode":"","$iv":""},"docComment":"Encrypts\/decrypts data in CFB mode","signature":"mcrypt_cfb(string $cipher ,string $key ,string $data ,int $mode ,string $iv )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_create_iv":{"params":{"$size":"","$source":""},"docComment":"Creates an initialization vector (IV) from a random source","signature":"mcrypt_create_iv(int $size ,[int $source] )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_decrypt":{"params":{"$cipher":"","$key":"","$data":"","$mode":"","$iv":""},"docComment":"Decrypts crypttext with given parameters","signature":"mcrypt_decrypt(string $cipher ,string $key ,string $data ,string $mode ,string $iv )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_ecb":{"params":{"$cipher":"","$key":"","$data":"","$mode":"","$iv":""},"docComment":"Deprecated: Encrypts\/decrypts data in ECB mode","signature":"mcrypt_ecb(string $cipher ,string $key ,string $data ,int $mode ,string $iv )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_enc_get_algorithms_name":{"params":{"$td":""},"docComment":"Returns the name of the opened algorithm","signature":"mcrypt_enc_get_algorithms_name(resource $td )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_enc_get_block_size":{"params":{"$td":""},"docComment":"Returns the blocksize of the opened algorithm","signature":"mcrypt_enc_get_block_size(resource $td )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_enc_get_iv_size":{"params":{"$td":""},"docComment":"Returns the size of the IV of the opened algorithm","signature":"mcrypt_enc_get_iv_size(resource $td )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_enc_get_key_size":{"params":{"$td":""},"docComment":"Returns the maximum supported keysize of the opened mode","signature":"mcrypt_enc_get_key_size(resource $td )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_enc_get_modes_name":{"params":{"$td":""},"docComment":"Returns the name of the opened mode","signature":"mcrypt_enc_get_modes_name(resource $td )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_enc_get_supported_key_sizes":{"params":{"$td":""},"docComment":"Returns an array with the supported keysizes of the opened algorithm","signature":"mcrypt_enc_get_supported_key_sizes(resource $td )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_enc_is_block_algorithm_mode":{"params":{"$td":""},"docComment":"Checks whether the encryption of the opened mode works on blocks","signature":"mcrypt_enc_is_block_algorithm_mode(resource $td )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_enc_is_block_algorithm":{"params":{"$td":""},"docComment":"Checks whether the algorithm of the opened mode is a block algorithm","signature":"mcrypt_enc_is_block_algorithm(resource $td )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_enc_is_block_mode":{"params":{"$td":""},"docComment":"Checks whether the opened mode outputs blocks","signature":"mcrypt_enc_is_block_mode(resource $td )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_enc_self_test":{"params":{"$td":""},"docComment":"Runs a self test on the opened module","signature":"mcrypt_enc_self_test(resource $td )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_encrypt":{"params":{"$cipher":"","$key":"","$data":"","$mode":"","$iv":""},"docComment":"Encrypts plaintext with given parameters","signature":"mcrypt_encrypt(string $cipher ,string $key ,string $data ,string $mode ,string $iv )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_generic_deinit":{"params":{"$td":""},"docComment":"This function deinitializes an encryption module","signature":"mcrypt_generic_deinit(resource $td )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_generic_end":{"params":{"$td":""},"docComment":"This function terminates encryption","signature":"mcrypt_generic_end(resource $td )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_generic_init":{"params":{"$td":"","$key":"","$iv":""},"docComment":"This function initializes all buffers needed for encryption","signature":"mcrypt_generic_init(resource $td ,string $key ,string $iv )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_generic":{"params":{"$td":"","$data":""},"docComment":"This function encrypts data","signature":"mcrypt_generic(resource $td ,string $data )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_get_block_size":{"params":{"$cipher":"","$mode":""},"docComment":"Gets the block size of the specified cipher","signature":"mcrypt_get_block_size(string $cipher ,string $mode )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_get_cipher_name":{"params":{"$cipher":""},"docComment":"Gets the name of the specified cipher","signature":"mcrypt_get_cipher_name(string $cipher )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_get_iv_size":{"params":{"$cipher":"","$mode":""},"docComment":"Returns the size of the IV belonging to a specific cipher\/mode combination","signature":"mcrypt_get_iv_size(string $cipher ,string $mode )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_get_key_size":{"params":{"$cipher":"","$mode":""},"docComment":"Gets the key size of the specified cipher","signature":"mcrypt_get_key_size(string $cipher ,string $mode )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_list_algorithms":{"params":{"$lib_dir":""},"docComment":"Gets an array of all supported ciphers","signature":"mcrypt_list_algorithms([string $lib_dir] )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_list_modes":{"params":{"$lib_dir":""},"docComment":"Gets an array of all supported modes","signature":"mcrypt_list_modes([string $lib_dir] )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_module_close":{"params":{"$td":""},"docComment":"Closes the mcrypt module","signature":"mcrypt_module_close(resource $td )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_module_get_algo_block_size":{"params":{"$algorithm":"","$lib_dir":""},"docComment":"Returns the blocksize of the specified algorithm","signature":"mcrypt_module_get_algo_block_size(string $algorithm ,string $lib_dir )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_module_get_algo_key_size":{"params":{"$algorithm":"","$lib_dir":""},"docComment":"Returns the maximum supported keysize of the opened mode","signature":"mcrypt_module_get_algo_key_size(string $algorithm ,string $lib_dir )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_module_get_supported_key_sizes":{"params":{"$algorithm":"","$lib_dir":""},"docComment":"Returns an array with the supported keysizes of the opened algorithm","signature":"mcrypt_module_get_supported_key_sizes(string $algorithm ,string $lib_dir )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_module_is_block_algorithm_mode":{"params":{"$mode":"","$lib_dir":""},"docComment":"Returns if the specified module is a block algorithm or not","signature":"mcrypt_module_is_block_algorithm_mode(string $mode ,string $lib_dir )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_module_is_block_algorithm":{"params":{"$algorithm":"","$lib_dir":""},"docComment":"This function checks whether the specified algorithm is a block algorithm","signature":"mcrypt_module_is_block_algorithm(string $algorithm ,string $lib_dir )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_module_is_block_mode":{"params":{"$mode":"","$lib_dir":""},"docComment":"Returns if the specified mode outputs blocks or not","signature":"mcrypt_module_is_block_mode(string $mode ,string $lib_dir )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_module_open":{"params":{"$algorithm":"","$algorithm_directory":"","$mode":"","$mode_directory":""},"docComment":"Opens the module of the algorithm and the mode to be used","signature":"mcrypt_module_open(string $algorithm ,string $algorithm_directory ,string $mode ,string $mode_directory )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_module_self_test":{"params":{"$algorithm":"","$lib_dir":""},"docComment":"This function runs a self test on the specified module","signature":"mcrypt_module_self_test(string $algorithm ,string $lib_dir )","inheritdoc":0,"modifier":[],"return":""},"mcrypt_ofb":{"params":{"$cipher":"","$key":"","$data":"","$mode":"","$iv":""},"docComment":"Encrypts\/decrypts data in OFB mode","signature":"mcrypt_ofb(string $cipher ,string $key ,string $data ,int $mode ,string $iv )","inheritdoc":0,"modifier":[],"return":""},"mdecrypt_generic":{"params":{"$td":"","$data":""},"docComment":"Decrypts data","signature":"mdecrypt_generic(resource $td ,string $data )","inheritdoc":0,"modifier":[],"return":""},"mhash_count":{"params":[],"docComment":"Gets the highest available hash ID","signature":"mhash_count( )","inheritdoc":0,"modifier":[],"return":""},"mhash_get_block_size":{"params":{"$hash":""},"docComment":"Gets the block size of the specified hash","signature":"mhash_get_block_size(int $hash )","inheritdoc":0,"modifier":[],"return":""},"mhash_get_hash_name":{"params":{"$hash":""},"docComment":"Gets the name of the specified hash","signature":"mhash_get_hash_name(int $hash )","inheritdoc":0,"modifier":[],"return":""},"mhash_keygen_s2k":{"params":{"$hash":"","$password":"","$salt":"","$bytes":""},"docComment":"Generates a key","signature":"mhash_keygen_s2k(int $hash ,string $password ,string $salt ,int $bytes )","inheritdoc":0,"modifier":[],"return":""},"mhash":{"params":{"$hash":"","$data":"","$key":""},"docComment":"Computes hash","signature":"mhash(int $hash ,string $data ,string $key )","inheritdoc":0,"modifier":[],"return":""},"msql_affected_rows":{"params":{"$result":""},"docComment":"Returns number of affected rows","signature":"msql_affected_rows(resource $result )","inheritdoc":0,"modifier":[],"return":""},"msql_close":{"params":{"$link_identifier":""},"docComment":"Close mSQL connection","signature":"msql_close(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"msql_connect":{"params":{"$hostname":""},"docComment":"Open mSQL connection","signature":"msql_connect(string $hostname )","inheritdoc":0,"modifier":[],"return":""},"msql_create_db":{"params":{"$database_name":"","$link_identifier":""},"docComment":"Create mSQL database","signature":"msql_create_db(string $database_name ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"msql_createdb":{"params":{"$database_name":"","$link_identifier":""},"docComment":"Create mSQL database","signature":"msql_create_db(string $database_name ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"msql_data_seek":{"params":{"$result":"","$row_number":""},"docComment":"Move internal row pointer","signature":"msql_data_seek(resource $result ,int $row_number )","inheritdoc":0,"modifier":[],"return":""},"msql_db_query":{"params":{"$database":"","$query":"","$link_identifier":""},"docComment":"Send mSQL query","signature":"msql_db_query(string $database ,string $query ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"msql_dbname":{"params":{"$result":"","$row":"","$field":""},"docComment":"Get result data","signature":"msql_result(resource $result ,int $row ,mixed $field )","inheritdoc":0,"modifier":[],"return":""},"msql_drop_db":{"params":{"$database_name":"","$link_identifier":""},"docComment":"Drop (delete) mSQL database","signature":"msql_drop_db(string $database_name ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"msql_error":{"params":[],"docComment":"Returns error message of last msql call","signature":"msql_error( )","inheritdoc":0,"modifier":[],"return":""},"msql_fetch_array":{"params":{"$result":"","$result_type":""},"docComment":"Fetch row as array","signature":"msql_fetch_array(resource $result ,int $result_type )","inheritdoc":0,"modifier":[],"return":""},"msql_fetch_field":{"params":{"$result":"","$field_offset":""},"docComment":"Get field information","signature":"msql_fetch_field(resource $result ,[int $field_offset] )","inheritdoc":0,"modifier":[],"return":""},"msql_fetch_object":{"params":{"$result":""},"docComment":"Fetch row as object","signature":"msql_fetch_object(resource $result )","inheritdoc":0,"modifier":[],"return":""},"msql_fetch_row":{"params":{"$result":""},"docComment":"Get row as enumerated array","signature":"msql_fetch_row(resource $result )","inheritdoc":0,"modifier":[],"return":""},"msql_field_flags":{"params":{"$result":"","$field_offset":""},"docComment":"Get field flags","signature":"msql_field_flags(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"msql_field_len":{"params":{"$result":"","$field_offset":""},"docComment":"Get field length","signature":"msql_field_len(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"msql_field_name":{"params":{"$result":"","$field_offset":""},"docComment":"Get the name of the specified field in a result","signature":"msql_field_name(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"msql_field_seek":{"params":{"$result":"","$field_offset":""},"docComment":"Set field offset","signature":"msql_field_seek(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"msql_field_table":{"params":{"$result":"","$field_offset":""},"docComment":"Get table name for field","signature":"msql_field_table(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"msql_field_type":{"params":{"$result":"","$field_offset":""},"docComment":"Get field type","signature":"msql_field_type(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"msql_fieldflags":{"params":{"$result":"","$field_offset":""},"docComment":"Get field flags","signature":"msql_field_flags(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"msql_fieldlen":{"params":{"$result":"","$field_offset":""},"docComment":"Get field length","signature":"msql_field_len(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"msql_fieldname":{"params":{"$result":"","$field_offset":""},"docComment":"Get the name of the specified field in a result","signature":"msql_field_name(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"msql_fieldtable":{"params":{"$result":"","$field_offset":""},"docComment":"Get table name for field","signature":"msql_field_table(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"msql_fieldtype":{"params":{"$result":"","$field_offset":""},"docComment":"Get field type","signature":"msql_field_type(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"msql_free_result":{"params":{"$result":""},"docComment":"Free result memory","signature":"msql_free_result(resource $result )","inheritdoc":0,"modifier":[],"return":""},"msql_list_dbs":{"params":{"$link_identifier":""},"docComment":"List mSQL databases on server","signature":"msql_list_dbs(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"msql_list_fields":{"params":{"$database":"","$tablename":"","$link_identifier":""},"docComment":"List result fields","signature":"msql_list_fields(string $database ,string $tablename ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"msql_list_tables":{"params":{"$database":"","$link_identifier":""},"docComment":"List tables in an mSQL database","signature":"msql_list_tables(string $database ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"msql_num_fields":{"params":{"$result":""},"docComment":"Get number of fields in result","signature":"msql_num_fields(resource $result )","inheritdoc":0,"modifier":[],"return":""},"msql_num_rows":{"params":{"$query_identifier":""},"docComment":"Get number of rows in result","signature":"msql_num_rows(resource $query_identifier )","inheritdoc":0,"modifier":[],"return":""},"msql_numfields":{"params":{"$result":""},"docComment":"Get number of fields in result","signature":"msql_num_fields(resource $result )","inheritdoc":0,"modifier":[],"return":""},"msql_numrows":{"params":{"$query_identifier":""},"docComment":"Get number of rows in result","signature":"msql_num_rows(resource $query_identifier )","inheritdoc":0,"modifier":[],"return":""},"msql_pconnect":{"params":{"$hostname":""},"docComment":"Open persistent mSQL connection","signature":"msql_pconnect(string $hostname )","inheritdoc":0,"modifier":[],"return":""},"msql_query":{"params":{"$query":"","$link_identifier":""},"docComment":"Send mSQL query","signature":"msql_query(string $query ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"msql_regcase":{"params":{"$string":""},"docComment":"Make regular expression for case insensitive match","signature":"sql_regcase(string $string )","inheritdoc":0,"modifier":[],"return":""},"msql_result":{"params":{"$result":"","$row":"","$field":""},"docComment":"Get result data","signature":"msql_result(resource $result ,int $row ,mixed $field )","inheritdoc":0,"modifier":[],"return":""},"msql_select_db":{"params":{"$database_name":"","$link_identifier":""},"docComment":"Select mSQL database","signature":"msql_select_db(string $database_name ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"msql_tablename":{"params":{"$result":"","$row":"","$field":""},"docComment":"Get result data","signature":"msql_result(resource $result ,int $row ,mixed $field )","inheritdoc":0,"modifier":[],"return":""},"msql":{"params":{"$database":"","$query":"","$link_identifier":""},"docComment":"Send mSQL query","signature":"msql_db_query(string $database ,string $query ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"mssql_bind":{"params":{"$stmt":"","$param_name":"","&$var":"","$type":"","$is_output":"","$is_null":"","$maxlen":""},"docComment":"Adds a parameter to a stored procedure or a remote stored procedure","signature":"mssql_bind(resource $stmt ,string $param_name ,mixed &$var ,int $type ,[bool $is_output] ,[bool $is_null] ,[int $maxlen] )","inheritdoc":0,"modifier":[],"return":""},"mssql_close":{"params":{"$link_identifier":""},"docComment":"Close MS SQL Server connection","signature":"mssql_close(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"mssql_connect":{"params":{"$servername":"","$username":"","$password":"","$new_link":""},"docComment":"Open MS SQL server connection","signature":"mssql_connect(string $servername ,string $username ,string $password ,[bool $new_link] )","inheritdoc":0,"modifier":[],"return":""},"mssql_data_seek":{"params":{"$result_identifier":"","$row_number":""},"docComment":"Moves internal row pointer","signature":"mssql_data_seek(resource $result_identifier ,int $row_number )","inheritdoc":0,"modifier":[],"return":""},"mssql_execute":{"params":{"$stmt":"","$skip_results":""},"docComment":"Executes a stored procedure on a MS SQL server database","signature":"mssql_execute(resource $stmt ,[bool $skip_results] )","inheritdoc":0,"modifier":[],"return":""},"mssql_fetch_array":{"params":{"$result":"","$result_type":""},"docComment":"Fetch a result row as an associative array, a numeric array, or both","signature":"mssql_fetch_array(resource $result ,[int $result_type] )","inheritdoc":0,"modifier":[],"return":""},"mssql_fetch_assoc":{"params":{"$result_id":""},"docComment":"Returns an associative array of the current row in the result","signature":"mssql_fetch_assoc(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"mssql_fetch_batch":{"params":{"$result":""},"docComment":"Returns the next batch of records","signature":"mssql_fetch_batch(resource $result )","inheritdoc":0,"modifier":[],"return":""},"mssql_fetch_field":{"params":{"$result":"","$field_offset":""},"docComment":"Get field information","signature":"mssql_fetch_field(resource $result ,[int $field_offset] )","inheritdoc":0,"modifier":[],"return":""},"mssql_fetch_object":{"params":{"$result":""},"docComment":"Fetch row as object","signature":"mssql_fetch_object(resource $result )","inheritdoc":0,"modifier":[],"return":""},"mssql_fetch_row":{"params":{"$result":""},"docComment":"Get row as enumerated array","signature":"mssql_fetch_row(resource $result )","inheritdoc":0,"modifier":[],"return":""},"mssql_field_length":{"params":{"$result":"","$offset":""},"docComment":"Get the length of a field","signature":"mssql_field_length(resource $result ,[int $offset] )","inheritdoc":0,"modifier":[],"return":""},"mssql_field_name":{"params":{"$result":"","$offset":""},"docComment":"Get the name of a field","signature":"mssql_field_name(resource $result ,[int $offset] )","inheritdoc":0,"modifier":[],"return":""},"mssql_field_seek":{"params":{"$result":"","$field_offset":""},"docComment":"Seeks to the specified field offset","signature":"mssql_field_seek(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"mssql_field_type":{"params":{"$result":"","$offset":""},"docComment":"Gets the type of a field","signature":"mssql_field_type(resource $result ,[int $offset] )","inheritdoc":0,"modifier":[],"return":""},"mssql_free_result":{"params":{"$result":""},"docComment":"Free result memory","signature":"mssql_free_result(resource $result )","inheritdoc":0,"modifier":[],"return":""},"mssql_free_statement":{"params":{"$stmt":""},"docComment":"Free statement memory","signature":"mssql_free_statement(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"mssql_get_last_message":{"params":[],"docComment":"Returns the last message from the server","signature":"mssql_get_last_message( )","inheritdoc":0,"modifier":[],"return":""},"mssql_guid_string":{"params":{"$binary":"","$short_format":""},"docComment":"Converts a 16 byte binary GUID to a string","signature":"mssql_guid_string(string $binary ,[bool $short_format] )","inheritdoc":0,"modifier":[],"return":""},"mssql_init":{"params":{"$sp_name":"","$link_identifier":""},"docComment":"Initializes a stored procedure or a remote stored procedure","signature":"mssql_init(string $sp_name ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"mssql_min_error_severity":{"params":{"$severity":""},"docComment":"Sets the minimum error severity","signature":"mssql_min_error_severity(int $severity )","inheritdoc":0,"modifier":[],"return":""},"mssql_min_message_severity":{"params":{"$severity":""},"docComment":"Sets the minimum message severity","signature":"mssql_min_message_severity(int $severity )","inheritdoc":0,"modifier":[],"return":""},"mssql_next_result":{"params":{"$result_id":""},"docComment":"Move the internal result pointer to the next result","signature":"mssql_next_result(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"mssql_num_fields":{"params":{"$result":""},"docComment":"Gets the number of fields in result","signature":"mssql_num_fields(resource $result )","inheritdoc":0,"modifier":[],"return":""},"mssql_num_rows":{"params":{"$result":""},"docComment":"Gets the number of rows in result","signature":"mssql_num_rows(resource $result )","inheritdoc":0,"modifier":[],"return":""},"mssql_pconnect":{"params":{"$servername":"","$username":"","$password":"","$new_link":""},"docComment":"Open persistent MS SQL connection","signature":"mssql_pconnect(string $servername ,string $username ,string $password ,[bool $new_link] )","inheritdoc":0,"modifier":[],"return":""},"mssql_query":{"params":{"$query":"","$link_identifier":"","$batch_size":""},"docComment":"Send MS SQL query","signature":"mssql_query(string $query ,resource $link_identifier ,[int $batch_size] )","inheritdoc":0,"modifier":[],"return":""},"mssql_result":{"params":{"$result":"","$row":"","$field":""},"docComment":"Get result data","signature":"mssql_result(resource $result ,int $row ,mixed $field )","inheritdoc":0,"modifier":[],"return":""},"mssql_rows_affected":{"params":{"$link_identifier":""},"docComment":"Returns the number of records affected by the query","signature":"mssql_rows_affected(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"mssql_select_db":{"params":{"$database_name":"","$link_identifier":""},"docComment":"Select MS SQL database","signature":"mssql_select_db(string $database_name ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"mysql_affected_rows":{"params":{"$link_identifier":""},"docComment":"Get number of affected rows in previous MySQL operation","signature":"mysql_affected_rows([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_client_encoding":{"params":{"$link_identifier":""},"docComment":"Returns the name of the character set","signature":"mysql_client_encoding([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_close":{"params":{"$link_identifier":""},"docComment":"Close MySQL connection","signature":"mysql_close([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_connect":{"params":{"$server":"","$username":"","$password":"","$new_link":"","$client_flags":""},"docComment":"Open a connection to a MySQL Server","signature":"mysql_connect([string $server] ,[string $username] ,[string $password] ,[bool $new_link] ,[int $client_flags] )","inheritdoc":0,"modifier":[],"return":""},"mysql_create_db":{"params":{"$database_name":"","$link_identifier":""},"docComment":"Create a MySQL database","signature":"mysql_create_db(string $database_name ,[resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_data_seek":{"params":{"$result":"","$row_number":""},"docComment":"Move internal result pointer","signature":"mysql_data_seek(resource $result ,int $row_number )","inheritdoc":0,"modifier":[],"return":""},"mysql_db_name":{"params":{"$result":"","$row":"","$field":""},"docComment":"Retrieves database name from the call to  ","signature":"mysql_db_name(resource $result ,int $row ,[mixed $field] )","inheritdoc":0,"modifier":[],"return":""},"mysql_db_query":{"params":{"$database":"","$query":"","$link_identifier":""},"docComment":"Selects a database and executes a query on it","signature":"mysql_db_query(string $database ,string $query ,[resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_drop_db":{"params":{"$database_name":"","$link_identifier":""},"docComment":"Drop (delete) a MySQL database","signature":"mysql_drop_db(string $database_name ,[resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_errno":{"params":{"$link_identifier":""},"docComment":"Returns the numerical value of the error message from previous MySQL operation","signature":"mysql_errno([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_error":{"params":{"$link_identifier":""},"docComment":"Returns the text of the error message from previous MySQL operation","signature":"mysql_error([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_escape_string":{"params":{"$unescaped_string":""},"docComment":"Escapes a string for use in a mysql_query","signature":"mysql_escape_string(string $unescaped_string )","inheritdoc":0,"modifier":[],"return":""},"mysql_fetch_array":{"params":{"$result":"","$result_type":""},"docComment":"Fetch a result row as an associative array, a numeric array, or both","signature":"mysql_fetch_array(resource $result ,[int $result_type] )","inheritdoc":0,"modifier":[],"return":""},"mysql_fetch_assoc":{"params":{"$result":""},"docComment":"Fetch a result row as an associative array","signature":"mysql_fetch_assoc(resource $result )","inheritdoc":0,"modifier":[],"return":""},"mysql_fetch_field":{"params":{"$result":"","$field_offset":""},"docComment":"Get column information from a result and return as an object","signature":"mysql_fetch_field(resource $result ,[int $field_offset] )","inheritdoc":0,"modifier":[],"return":""},"mysql_fetch_lengths":{"params":{"$result":""},"docComment":"Get the length of each output in a result","signature":"mysql_fetch_lengths(resource $result )","inheritdoc":0,"modifier":[],"return":""},"mysql_fetch_object":{"params":{"$result":"","$class_name":"","$params":""},"docComment":"Fetch a result row as an object","signature":"mysql_fetch_object(resource $result ,string $class_name ,array $params )","inheritdoc":0,"modifier":[],"return":""},"mysql_fetch_row":{"params":{"$result":""},"docComment":"Get a result row as an enumerated array","signature":"mysql_fetch_row(resource $result )","inheritdoc":0,"modifier":[],"return":""},"mysql_field_flags":{"params":{"$result":"","$field_offset":""},"docComment":"Get the flags associated with the specified field in a result","signature":"mysql_field_flags(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"mysql_field_len":{"params":{"$result":"","$field_offset":""},"docComment":"Returns the length of the specified field","signature":"mysql_field_len(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"mysql_field_name":{"params":{"$result":"","$field_offset":""},"docComment":"Get the name of the specified field in a result","signature":"mysql_field_name(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"mysql_field_seek":{"params":{"$result":"","$field_offset":""},"docComment":"Set result pointer to a specified field offset","signature":"mysql_field_seek(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"mysql_field_table":{"params":{"$result":"","$field_offset":""},"docComment":"Get name of the table the specified field is in","signature":"mysql_field_table(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"mysql_field_type":{"params":{"$result":"","$field_offset":""},"docComment":"Get the type of the specified field in a result","signature":"mysql_field_type(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"mysql_free_result":{"params":{"$result":""},"docComment":"Free result memory","signature":"mysql_free_result(resource $result )","inheritdoc":0,"modifier":[],"return":""},"mysql_get_client_info":{"params":[],"docComment":"Get MySQL client info","signature":"mysql_get_client_info( )","inheritdoc":0,"modifier":[],"return":""},"mysql_get_host_info":{"params":{"$link_identifier":""},"docComment":"Get MySQL host info","signature":"mysql_get_host_info([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_get_proto_info":{"params":{"$link_identifier":""},"docComment":"Get MySQL protocol info","signature":"mysql_get_proto_info([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_get_server_info":{"params":{"$link_identifier":""},"docComment":"Get MySQL server info","signature":"mysql_get_server_info([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_info":{"params":{"$link_identifier":""},"docComment":"Get information about the most recent query","signature":"mysql_info([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_insert_id":{"params":{"$link_identifier":""},"docComment":"Get the ID generated in the last query","signature":"mysql_insert_id([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_list_dbs":{"params":{"$link_identifier":""},"docComment":"List databases available on a MySQL server","signature":"mysql_list_dbs([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_list_fields":{"params":{"$database_name":"","$table_name":"","$link_identifier":""},"docComment":"List MySQL table fields","signature":"mysql_list_fields(string $database_name ,string $table_name ,[resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_list_processes":{"params":{"$link_identifier":""},"docComment":"List MySQL processes","signature":"mysql_list_processes([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_list_tables":{"params":{"$database":"","$link_identifier":""},"docComment":"List tables in a MySQL database","signature":"mysql_list_tables(string $database ,[resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_num_fields":{"params":{"$result":""},"docComment":"Get number of fields in result","signature":"mysql_num_fields(resource $result )","inheritdoc":0,"modifier":[],"return":""},"mysql_num_rows":{"params":{"$result":""},"docComment":"Get number of rows in result","signature":"mysql_num_rows(resource $result )","inheritdoc":0,"modifier":[],"return":""},"mysql_pconnect":{"params":{"$server":"","$username":"","$password":"","$client_flags":""},"docComment":"Open a persistent connection to a MySQL server","signature":"mysql_pconnect([string $server] ,[string $username] ,[string $password] ,[int $client_flags] )","inheritdoc":0,"modifier":[],"return":""},"mysql_ping":{"params":{"$link_identifier":""},"docComment":"Ping a server connection or reconnect if there is no connection","signature":"mysql_ping([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_query":{"params":{"$query":"","$link_identifier":""},"docComment":"Send a MySQL query","signature":"mysql_query(string $query ,[resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_real_escape_string":{"params":{"$unescaped_string":"","$link_identifier":""},"docComment":"Escapes special characters in a string for use in an SQL statement","signature":"mysql_real_escape_string(string $unescaped_string ,[resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_result":{"params":{"$result":"","$row":"","$field":""},"docComment":"Get result data","signature":"mysql_result(resource $result ,int $row ,[mixed $field] )","inheritdoc":0,"modifier":[],"return":""},"mysql_select_db":{"params":{"$database_name":"","$link_identifier":""},"docComment":"Select a MySQL database","signature":"mysql_select_db(string $database_name ,[resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_set_charset":{"params":{"$charset":"","$link_identifier":""},"docComment":"Sets the client character set","signature":"mysql_set_charset(string $charset ,[resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_stat":{"params":{"$link_identifier":""},"docComment":"Get current system status","signature":"mysql_stat([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_tablename":{"params":{"$result":"","$i":""},"docComment":"Get table name of field","signature":"mysql_tablename(resource $result ,int $i )","inheritdoc":0,"modifier":[],"return":""},"mysql_thread_id":{"params":{"$link_identifier":""},"docComment":"Return the current thread ID","signature":"mysql_thread_id([resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysql_unbuffered_query":{"params":{"$query":"","$link_identifier":""},"docComment":"Send an SQL query to MySQL without fetching and buffering the result rows.","signature":"mysql_unbuffered_query(string $query ,[resource $link_identifier] )","inheritdoc":0,"modifier":[],"return":""},"mysqli_bind_param":{"params":{"$types":"","&$var1":"","&$...":"","$stmt":"mysqli_stmt"},"docComment":"Binds variables to a prepared statement as parameters","signature":"mysqli_stmt_bind_param(mysqli_stmt $stmt ,string $types ,mixed &$var1 ,mixed &$... )","inheritdoc":0,"modifier":[],"return":""},"mysqli_bind_result":{"params":{"&$var1":"","&$...":"","$stmt":"mysqli_stmt"},"docComment":"Binds variables to a prepared statement for result storage","signature":"mysqli_stmt_bind_result(mysqli_stmt $stmt ,mixed &$var1 ,mixed &$... )","inheritdoc":0,"modifier":[],"return":""},"mysqli_client_encoding":{"params":{"$link":"mysqli"},"docComment":"Returns the default character set for the database connection","signature":"mysqli_character_set_name(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"mysqli_connect":{"params":{"$host":"","$username":"","$passwd":"","$dbname":"","$port":"","$socket":""},"docComment":"Open a new connection to the MySQL server","signature":"([string $host] ,[string $username] ,[string $passwd] ,[string $dbname] ,[int $port] ,[string $socket] )","inheritdoc":0,"modifier":[],"return":"mysqli"},"mysqli::disable_reads_from_master":{"params":{"$link":"mysqli"},"docComment":"Disable reads from master","signature":"mysqli_disable_reads_from_master(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"mysqli_disable_rpl_parse":{"params":{"$link":"mysqli"},"docComment":"Disable RPL parse","signature":"mysqli_disable_rpl_parse(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"mysqli_enable_reads_from_master":{"params":{"$link":"mysqli"},"docComment":"Enable reads from master","signature":"mysqli_enable_reads_from_master(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"mysqli_enable_rpl_parse":{"params":{"$link":"mysqli"},"docComment":"Enable RPL parse","signature":"mysqli_enable_rpl_parse(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"mysqli_escape_string":{"params":{"$escapestr":"","$link":"mysqli"},"docComment":"Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection","signature":"mysqli_real_escape_string(mysqli $link ,string $escapestr )","inheritdoc":0,"modifier":[],"return":""},"mysqli_execute":{"params":{"$stmt":"mysqli_stmt"},"docComment":"Executes a prepared Query","signature":"mysqli_stmt_execute(mysqli_stmt $stmt )","inheritdoc":0,"modifier":[],"return":""},"mysqli_fetch":{"params":{"$stmt":"mysqli_stmt"},"docComment":"Fetch results from a prepared statement into the bound variables","signature":"mysqli_stmt_fetch(mysqli_stmt $stmt )","inheritdoc":0,"modifier":[],"return":""},"mysqli_get_cache_stats":{"params":[],"docComment":"Returns client Zval cache statistics","signature":"mysqli_get_cache_stats( )","inheritdoc":0,"modifier":[],"return":""},"mysqli_get_metadata":{"params":{"$stmt":"mysqli_stmt"},"docComment":"Returns result set metadata from a prepared statement","signature":"mysqli_stmt_result_metadata(mysqli_stmt $stmt )","inheritdoc":0,"modifier":[],"return":"mysqli_result"},"mysqli_master_query":{"params":{"$link":"mysqli","$query":""},"docComment":"Enforce execution of a query on the master in a master\/slave setup","signature":"mysqli_master_query(mysqli $link ,string $query )","inheritdoc":0,"modifier":[],"return":""},"mysqli_param_count":{"params":{"$stmt":"mysqli_stmt"},"docComment":"Returns the number of parameter for the given statement","signature":"mysqli_stmt_param_count(mysqli_stmt $stmt )","inheritdoc":0,"modifier":[],"return":""},"mysqli_report":{"params":[],"docComment":"","signature":"","inheritdoc":0,"modifier":[],"return":""},"mysqli_rpl_parse_enabled":{"params":{"$link":"mysqli"},"docComment":"Check if RPL parse is enabled","signature":"mysqli_rpl_parse_enabled(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"mysqli_rpl_probe":{"params":{"$link":"mysqli"},"docComment":"RPL probe","signature":"mysqli_rpl_probe(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"mysqli_send_long_data":{"params":{"$param_nr":"","$data":"","$stmt":"mysqli_stmt"},"docComment":"Send data in blocks","signature":"mysqli_stmt_send_long_data(mysqli_stmt $stmt ,int $param_nr ,string $data )","inheritdoc":0,"modifier":[],"return":""},"mysqli::set_opt":{"params":{"$option":"","$value":"","$link":"mysqli"},"docComment":"Set options","signature":"mysqli_options(mysqli $link ,int $option ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"mysqli_slave_query":{"params":{"$link":"mysqli","$query":""},"docComment":"Force execution of a query on a slave in a master\/slave setup","signature":"mysqli_slave_query(mysqli $link ,string $query )","inheritdoc":0,"modifier":[],"return":""},"OCI-Collection::append":{"params":{"$value":""},"docComment":"Appends element to the collection","signature":"OCI-Collection::append(mixed $value )","inheritdoc":0,"modifier":[],"return":""},"OCI-Collection::assign":{"params":{"$from":""},"docComment":"Assigns a value to the collection from another existing collection","signature":"OCI-Collection::assign( $from )","inheritdoc":0,"modifier":[],"return":""},"OCI-Collection::assignElem":{"params":{"$index":"","$value":""},"docComment":"Assigns a value to the element of the collection","signature":"OCI-Collection::assignElem(int $index ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"OCI-Collection::free":{"params":[],"docComment":"Frees the resources associated with the collection object","signature":"OCI-Collection::free( )","inheritdoc":0,"modifier":[],"return":""},"OCI-Collection::getElem":{"params":{"$index":""},"docComment":"Returns value of the element","signature":"OCI-Collection::getElem(int $index )","inheritdoc":0,"modifier":[],"return":""},"OCI-Collection::max":{"params":[],"docComment":"Returns the maximum number of elements in the collection","signature":"OCI-Collection::max( )","inheritdoc":0,"modifier":[],"return":""},"OCI-Collection::size":{"params":[],"docComment":"Returns size of the collection","signature":"OCI-Collection::size( )","inheritdoc":0,"modifier":[],"return":""},"OCI-Collection::trim":{"params":{"$num":""},"docComment":"Trims elements from the end of the collection","signature":"OCI-Collection::trim(int $num )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::append":{"params":{"$lob_from":""},"docComment":"Appends data from the large object to another large object","signature":"OCI-Lob::append( $lob_from )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::close":{"params":[],"docComment":"Closes LOB descriptor","signature":"OCI-Lob::close( )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::eof":{"params":[],"docComment":"Tests for end-of-file on a large object's descriptor","signature":"OCI-Lob::eof( )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::erase":{"params":{"$offset":"","$length":""},"docComment":"Erases a specified portion of the internal LOB data","signature":"OCI-Lob::erase(int $offset ,int $length )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::export":{"params":{"$filename":"","$start":"","$length":""},"docComment":"Exports LOB's contents to a file","signature":"OCI-Lob::export(string $filename ,int $start ,int $length )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::flush":{"params":{"$flag":""},"docComment":"Flushes\/writes buffer of the LOB to the server","signature":"OCI-Lob::flush(int $flag )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::free":{"params":[],"docComment":"Frees resources associated with the LOB descriptor","signature":"OCI-Lob::free( )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::getBuffering":{"params":[],"docComment":"Returns current state of buffering for the large object","signature":"OCI-Lob::getBuffering( )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::import":{"params":{"$filename":""},"docComment":"Imports file data to the LOB","signature":"OCI-Lob::import(string $filename )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::load":{"params":[],"docComment":"Returns large object's contents","signature":"OCI-Lob::load( )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::read":{"params":{"$length":""},"docComment":"Reads part of the large object","signature":"OCI-Lob::read(int $length )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::rewind":{"params":[],"docComment":"Moves the internal pointer to the beginning of the large object","signature":"OCI-Lob::rewind( )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::save":{"params":{"$data":"","$offset":""},"docComment":"Saves data to the large object","signature":"OCI-Lob::save(string $data ,int $offset )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::saveFile":{"params":{"$filename":""},"docComment":"Imports file data to the LOB","signature":"OCI-Lob::import(string $filename )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::seek":{"params":{"$offset":"","$whence":""},"docComment":"Sets the internal pointer of the large object","signature":"OCI-Lob::seek(int $offset ,[int $whence] )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::setBuffering":{"params":{"$on_off":""},"docComment":"Changes current state of buffering for the large object","signature":"OCI-Lob::setBuffering(bool $on_off )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::size":{"params":[],"docComment":"Returns size of large object","signature":"OCI-Lob::size( )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::tell":{"params":[],"docComment":"Returns the current position of internal pointer of large object","signature":"OCI-Lob::tell( )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::truncate":{"params":{"$length":""},"docComment":"Truncates large object","signature":"OCI-Lob::truncate([int $length] )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::write":{"params":{"$data":"","$length":""},"docComment":"Writes data to the large object","signature":"OCI-Lob::write(string $data ,int $length )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::writeTemporary":{"params":{"$data":"","$lob_type":""},"docComment":"Writes a temporary large object","signature":"OCI-Lob::writeTemporary(string $data ,[int $lob_type] )","inheritdoc":0,"modifier":[],"return":""},"OCI-Lob::writeToFile":{"params":{"$filename":"","$start":"","$length":""},"docComment":"Exports LOB's contents to a file","signature":"OCI-Lob::export(string $filename ,int $start ,int $length )","inheritdoc":0,"modifier":[],"return":""},"oci_bind_array_by_name":{"params":{"$statement":"","$name":"","&$var_array":"","$max_table_length":"","$max_item_length":"","$type":""},"docComment":"Binds a PHP array to an Oracle PL\/SQL array parameter","signature":"oci_bind_array_by_name(resource $statement ,string $name ,array &$var_array ,int $max_table_length ,[int $max_item_length] ,[int $type] )","inheritdoc":0,"modifier":[],"return":""},"oci_bind_by_name":{"params":{"$statement":"","$bv_name":"","&$variable":"","$maxlength":"","$type":""},"docComment":"Binds a PHP variable to an Oracle placeholder","signature":"oci_bind_by_name(resource $statement ,string $bv_name ,mixed &$variable ,[int $maxlength] ,[int $type] )","inheritdoc":0,"modifier":[],"return":""},"oci_cancel":{"params":{"$statement":""},"docComment":"Cancels reading from cursor","signature":"oci_cancel(resource $statement )","inheritdoc":0,"modifier":[],"return":""},"oci_client_version":{"params":[],"docComment":"Returns the Oracle client library version","signature":"oci_client_version( )","inheritdoc":0,"modifier":[],"return":""},"oci_close":{"params":{"$connection":""},"docComment":"Closes an Oracle connection","signature":"oci_close(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"oci_commit":{"params":{"$connection":""},"docComment":"Commits the outstanding database transaction","signature":"oci_commit(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"oci_connect":{"params":{"$username":"","$password":"","$connection_string":"","$character_set":"","$session_mode":""},"docComment":"Connect to an Oracle database","signature":"oci_connect(string $username ,string $password ,string $connection_string ,string $character_set ,int $session_mode )","inheritdoc":0,"modifier":[],"return":""},"oci_define_by_name":{"params":{"$statement":"","$column_name":"","&$variable":"","$type":""},"docComment":"Associates a PHP variable with a column for query fetches","signature":"oci_define_by_name(resource $statement ,string $column_name ,mixed &$variable ,[int $type] )","inheritdoc":0,"modifier":[],"return":""},"oci_error":{"params":{"$resource":""},"docComment":"Returns the last error found","signature":"oci_error(resource $resource )","inheritdoc":0,"modifier":[],"return":""},"oci_execute":{"params":{"$statement":"","$mode":""},"docComment":"Executes a statement","signature":"oci_execute(resource $statement ,[int $mode] )","inheritdoc":0,"modifier":[],"return":""},"oci_fetch_all":{"params":{"$statement":"","&$output":"","$skip":"","$maxrows":"","$flags":""},"docComment":"Fetches multiple rows from a query into a two-dimensional array","signature":"oci_fetch_all(resource $statement ,array &$output ,[int $skip] ,[int $maxrows] ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"oci_fetch_array":{"params":{"$statement":"","$mode":""},"docComment":"Returns the next row from a query as an associative or numeric array\n  ","signature":"oci_fetch_array(resource $statement ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"oci_fetch_assoc":{"params":{"$statement":""},"docComment":"Returns the next row from a query as an associative array","signature":"oci_fetch_assoc(resource $statement )","inheritdoc":0,"modifier":[],"return":""},"oci_fetch_object":{"params":{"$statement":""},"docComment":"Returns the next row from a query as an object","signature":"oci_fetch_object(resource $statement )","inheritdoc":0,"modifier":[],"return":""},"oci_fetch_row":{"params":{"$statement":""},"docComment":"Returns the next row from a query as a numeric array","signature":"oci_fetch_row(resource $statement )","inheritdoc":0,"modifier":[],"return":""},"oci_fetch":{"params":{"$statement":""},"docComment":"Fetches the next row from a query into internal buffers","signature":"oci_fetch(resource $statement )","inheritdoc":0,"modifier":[],"return":""},"oci_field_is_null":{"params":{"$statement":"","$field":""},"docComment":"Checks if the field is ","signature":"oci_field_is_null(resource $statement ,mixed $field )","inheritdoc":0,"modifier":[],"return":""},"oci_field_name":{"params":{"$statement":"","$field":""},"docComment":"Returns the name of a field from the statement","signature":"oci_field_name(resource $statement ,int $field )","inheritdoc":0,"modifier":[],"return":""},"oci_field_precision":{"params":{"$statement":"","$field":""},"docComment":"Tell the precision of a field","signature":"oci_field_precision(resource $statement ,int $field )","inheritdoc":0,"modifier":[],"return":""},"oci_field_scale":{"params":{"$statement":"","$field":""},"docComment":"Tell the scale of the field","signature":"oci_field_scale(resource $statement ,int $field )","inheritdoc":0,"modifier":[],"return":""},"oci_field_size":{"params":{"$statement":"","$field":""},"docComment":"Returns field's size","signature":"oci_field_size(resource $statement ,mixed $field )","inheritdoc":0,"modifier":[],"return":""},"oci_field_type_raw":{"params":{"$statement":"","$field":""},"docComment":"Tell the raw Oracle data type of the field","signature":"oci_field_type_raw(resource $statement ,int $field )","inheritdoc":0,"modifier":[],"return":""},"oci_field_type":{"params":{"$statement":"","$field":""},"docComment":"Returns field's data type","signature":"oci_field_type(resource $statement ,int $field )","inheritdoc":0,"modifier":[],"return":""},"oci_free_descriptor":{"params":{"$descriptor":""},"docComment":"Frees a descriptor","signature":"oci_free_descriptor(resource $descriptor )","inheritdoc":0,"modifier":[],"return":""},"oci_free_statement":{"params":{"$statement":""},"docComment":"Frees all resources associated with statement or cursor","signature":"oci_free_statement(resource $statement )","inheritdoc":0,"modifier":[],"return":""},"oci_internal_debug":{"params":{"$onoff":""},"docComment":"Enables or disables internal debug output","signature":"oci_internal_debug(bool $onoff )","inheritdoc":0,"modifier":[],"return":""},"oci_lob_copy":{"params":{"$lob_to":"","$lob_from":"","$length":""},"docComment":"Copies large object","signature":"oci_lob_copy( $lob_to , $lob_from ,[int $length] )","inheritdoc":0,"modifier":[],"return":""},"oci_lob_is_equal":{"params":{"$lob1":"","$lob2":""},"docComment":"Compares two LOB\/FILE locators for equality","signature":"oci_lob_is_equal( $lob1 , $lob2 )","inheritdoc":0,"modifier":[],"return":""},"oci_new_collection":{"params":{"$connection":"","$tdo":"","$schema":""},"docComment":"Allocates new collection object","signature":"oci_new_collection(resource $connection ,string $tdo ,[string $schema] )","inheritdoc":0,"modifier":[],"return":""},"oci_new_connect":{"params":{"$username":"","$password":"","$connection_string":"","$character_set":"","$session_mode":""},"docComment":"Connect to the Oracle server using a unique connection","signature":"oci_new_connect(string $username ,string $password ,string $connection_string ,string $character_set ,int $session_mode )","inheritdoc":0,"modifier":[],"return":""},"oci_new_cursor":{"params":{"$connection":""},"docComment":"Allocates and returns a new cursor (statement handle)","signature":"oci_new_cursor(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"oci_new_descriptor":{"params":{"$connection":"","$type":""},"docComment":"Initializes a new empty LOB or FILE descriptor","signature":"oci_new_descriptor(resource $connection ,[int $type] )","inheritdoc":0,"modifier":[],"return":""},"oci_num_fields":{"params":{"$statement":""},"docComment":"Returns the number of result columns in a statement","signature":"oci_num_fields(resource $statement )","inheritdoc":0,"modifier":[],"return":""},"oci_num_rows":{"params":{"$statement":""},"docComment":"Returns number of rows affected during statement execution","signature":"oci_num_rows(resource $statement )","inheritdoc":0,"modifier":[],"return":""},"oci_parse":{"params":{"$connection":"","$sql_text":""},"docComment":"Prepares an Oracle statement for execution","signature":"oci_parse(resource $connection ,string $sql_text )","inheritdoc":0,"modifier":[],"return":""},"oci_password_change":{"params":{"$connection":"","$username":"","$old_password":"","$new_password":"","$dbname":""},"docComment":"Changes password of Oracle's user","signature":"oci_password_change(string $dbname ,string $username ,string $old_password ,string $new_password )","inheritdoc":0,"modifier":[],"return":""},"oci_pconnect":{"params":{"$username":"","$password":"","$connection_string":"","$character_set":"","$session_mode":""},"docComment":"Connect to an Oracle database using a persistent connection","signature":"oci_pconnect(string $username ,string $password ,string $connection_string ,string $character_set ,int $session_mode )","inheritdoc":0,"modifier":[],"return":""},"oci_result":{"params":{"$statement":"","$field":""},"docComment":"Returns field's value from the fetched row","signature":"oci_result(resource $statement ,mixed $field )","inheritdoc":0,"modifier":[],"return":""},"oci_rollback":{"params":{"$connection":""},"docComment":"Rolls back the outstanding database transaction","signature":"oci_rollback(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"oci_server_version":{"params":{"$connection":""},"docComment":"Returns the Oracle Database version","signature":"oci_server_version(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"oci_set_action":{"params":{"$connection":"","$action_name":""},"docComment":"Sets the action name","signature":"oci_set_action(resource $connection ,string $action_name )","inheritdoc":0,"modifier":[],"return":""},"oci_set_client_identifier":{"params":{"$connection":"","$client_identifier":""},"docComment":"Sets the client identifier","signature":"oci_set_client_identifier(resource $connection ,string $client_identifier )","inheritdoc":0,"modifier":[],"return":""},"oci_set_client_info":{"params":{"$connection":"","$client_info":""},"docComment":"Sets the client information","signature":"oci_set_client_info(resource $connection ,string $client_info )","inheritdoc":0,"modifier":[],"return":""},"oci_set_edition":{"params":{"$edition":""},"docComment":"Sets the database edition","signature":"oci_set_edition(string $edition )","inheritdoc":0,"modifier":[],"return":""},"oci_set_module_name":{"params":{"$connection":"","$module_name":""},"docComment":"Sets the module name","signature":"oci_set_module_name(resource $connection ,string $module_name )","inheritdoc":0,"modifier":[],"return":""},"oci_set_prefetch":{"params":{"$statement":"","$rows":""},"docComment":"Sets number of rows to be prefetched by queries","signature":"oci_set_prefetch(resource $statement ,int $rows )","inheritdoc":0,"modifier":[],"return":""},"oci_statement_type":{"params":{"$statement":""},"docComment":"Returns the type of a statement","signature":"oci_statement_type(resource $statement )","inheritdoc":0,"modifier":[],"return":""},"openssl_cipher_iv_length":{"params":{"$method":""},"docComment":"Gets the cipher iv length","signature":"openssl_cipher_iv_length(string $method )","inheritdoc":0,"modifier":[],"return":""},"openssl_csr_export_to_file":{"params":{"$csr":"","$outfilename":"","$notext":""},"docComment":"Exports a CSR to a file","signature":"openssl_csr_export_to_file(resource $csr ,string $outfilename ,[bool $notext] )","inheritdoc":0,"modifier":[],"return":""},"openssl_csr_export":{"params":{"$csr":"","&$out":"","$notext":""},"docComment":"Exports a CSR as a string","signature":"openssl_csr_export(resource $csr ,string &$out ,[bool $notext] )","inheritdoc":0,"modifier":[],"return":""},"openssl_csr_get_public_key":{"params":{"$csr":"","$use_shortnames":""},"docComment":"Returns the public key of a CERT","signature":"openssl_csr_get_public_key(mixed $csr ,[bool $use_shortnames] )","inheritdoc":0,"modifier":[],"return":""},"openssl_csr_get_subject":{"params":{"$csr":"","$use_shortnames":""},"docComment":"Returns the subject of a CERT","signature":"openssl_csr_get_subject(mixed $csr ,[bool $use_shortnames] )","inheritdoc":0,"modifier":[],"return":""},"openssl_csr_new":{"params":{"$dn":"","&$privkey":"","$configargs":"","$extraattribs":""},"docComment":"Generates a CSR","signature":"openssl_csr_new(array $dn ,resource &$privkey ,array $configargs ,array $extraattribs )","inheritdoc":0,"modifier":[],"return":""},"openssl_csr_sign":{"params":{"$csr":"","$cacert":"","$priv_key":"","$days":"","$configargs":"","$serial":""},"docComment":"Sign a CSR with another certificate (or itself) and generate a certificate","signature":"openssl_csr_sign(mixed $csr ,mixed $cacert ,mixed $priv_key ,int $days ,array $configargs ,[int $serial] )","inheritdoc":0,"modifier":[],"return":""},"openssl_decrypt":{"params":{"$data":"","$method":"","$password":"","$options":"","$iv":""},"docComment":"Decrypts data","signature":"openssl_decrypt(string $data ,string $method ,string $password ,[int $options] ,[string $iv] )","inheritdoc":0,"modifier":[],"return":""},"openssl_dh_compute_key":{"params":{"$pub_key":"","$dh_key":""},"docComment":"Computes shared secret for public value of remote DH key and local DH key","signature":"openssl_dh_compute_key(string $pub_key ,resource $dh_key )","inheritdoc":0,"modifier":[],"return":""},"openssl_digest":{"params":{"$data":"","$method":"","$raw_output":""},"docComment":"Computes a digest","signature":"openssl_digest(string $data ,string $method ,[bool $raw_output] )","inheritdoc":0,"modifier":[],"return":""},"openssl_encrypt":{"params":{"$data":"","$method":"","$password":"","$options":"","$iv":""},"docComment":"Encrypts data","signature":"openssl_encrypt(string $data ,string $method ,string $password ,[int $options] ,[string $iv] )","inheritdoc":0,"modifier":[],"return":""},"openssl_error_string":{"params":[],"docComment":"Return openSSL error message","signature":"openssl_error_string( )","inheritdoc":0,"modifier":[],"return":""},"openssl_free_key":{"params":{"$key_identifier":""},"docComment":"Free key resource","signature":"openssl_free_key(resource $key_identifier )","inheritdoc":0,"modifier":[],"return":""},"openssl_get_cipher_methods":{"params":{"$aliases":""},"docComment":"Gets available cipher methods","signature":"openssl_get_cipher_methods([bool $aliases] )","inheritdoc":0,"modifier":[],"return":""},"openssl_get_md_methods":{"params":{"$aliases":""},"docComment":"Gets available digest methods","signature":"openssl_get_md_methods([bool $aliases] )","inheritdoc":0,"modifier":[],"return":""},"openssl_get_privatekey":{"params":{"$key":"","$passphrase":""},"docComment":"Get a private key","signature":"openssl_pkey_get_private(mixed $key ,[string $passphrase] )","inheritdoc":0,"modifier":[],"return":""},"openssl_get_publickey":{"params":{"$certificate":""},"docComment":"Extract public key from certificate and prepare it for use","signature":"openssl_pkey_get_public(mixed $certificate )","inheritdoc":0,"modifier":[],"return":""},"openssl_open":{"params":{"$sealed_data":"","&$open_data":"","$env_key":"","$priv_key_id":"","$method":""},"docComment":"Open sealed data","signature":"openssl_open(string $sealed_data ,string &$open_data ,string $env_key ,mixed $priv_key_id ,string $method )","inheritdoc":0,"modifier":[],"return":""},"openssl_pbkdf2":{"params":{"$password":"","$salt":"","$key_length":"","$iterations":"","$digest_algorithm":""},"docComment":"Generates a PKCS5 v2 PBKDF2 string, defaults to SHA-1","signature":"openssl_pbkdf2(string $password ,string $salt ,int $key_length ,int $iterations ,string $digest_algorithm )","inheritdoc":0,"modifier":[],"return":""},"openssl_pkcs12_export_to_file":{"params":{"$x509":"","$filename":"","$priv_key":"","$pass":"","$args":""},"docComment":"Exports a PKCS#12 Compatible Certificate Store File","signature":"openssl_pkcs12_export_to_file(mixed $x509 ,string $filename ,mixed $priv_key ,string $pass ,array $args )","inheritdoc":0,"modifier":[],"return":""},"openssl_pkcs12_export":{"params":{"$x509":"","&$out":"","$priv_key":"","$pass":"","$args":""},"docComment":"Exports a PKCS#12 Compatible Certificate Store File to variable.","signature":"openssl_pkcs12_export(mixed $x509 ,string &$out ,mixed $priv_key ,string $pass ,array $args )","inheritdoc":0,"modifier":[],"return":""},"openssl_pkcs12_read":{"params":{"$pkcs12":"","&$certs":"","$pass":""},"docComment":"Parse a PKCS#12 Certificate Store into an array","signature":"openssl_pkcs12_read(string $pkcs12 ,array &$certs ,string $pass )","inheritdoc":0,"modifier":[],"return":""},"openssl_pkcs7_decrypt":{"params":{"$infilename":"","$outfilename":"","$recipcert":"","$recipkey":""},"docComment":"Decrypts an S\/MIME encrypted message","signature":"openssl_pkcs7_decrypt(string $infilename ,string $outfilename ,mixed $recipcert ,mixed $recipkey )","inheritdoc":0,"modifier":[],"return":""},"openssl_pkcs7_encrypt":{"params":{"$infile":"","$outfile":"","$recipcerts":"","$headers":"","$flags":"","$cipherid":""},"docComment":"Encrypt an S\/MIME message","signature":"openssl_pkcs7_encrypt(string $infile ,string $outfile ,mixed $recipcerts ,array $headers ,[int $flags] ,[int $cipherid] )","inheritdoc":0,"modifier":[],"return":""},"openssl_pkcs7_sign":{"params":{"$infilename":"","$outfilename":"","$signcert":"","$privkey":"","$headers":"","$flags":"","$extracerts":""},"docComment":"Sign an S\/MIME message","signature":"openssl_pkcs7_sign(string $infilename ,string $outfilename ,mixed $signcert ,mixed $privkey ,array $headers ,[int $flags] ,string $extracerts )","inheritdoc":0,"modifier":[],"return":""},"openssl_pkcs7_verify":{"params":{"$filename":"","$flags":"","$outfilename":"","$cainfo":"","$extracerts":"","$content":""},"docComment":"Verifies the signature of an S\/MIME signed message","signature":"openssl_pkcs7_verify(string $filename ,int $flags ,string $outfilename ,array $cainfo ,string $extracerts ,string $content )","inheritdoc":0,"modifier":[],"return":""},"openssl_pkey_export_to_file":{"params":{"$key":"","$outfilename":"","$passphrase":"","$configargs":""},"docComment":"Gets an exportable representation of a key into a file ","signature":"openssl_pkey_export_to_file(mixed $key ,string $outfilename ,string $passphrase ,array $configargs )","inheritdoc":0,"modifier":[],"return":""},"openssl_pkey_export":{"params":{"$key":"","&$out":"","$passphrase":"","$configargs":""},"docComment":"Gets an exportable representation of a key into a string","signature":"openssl_pkey_export(mixed $key ,string &$out ,string $passphrase ,array $configargs )","inheritdoc":0,"modifier":[],"return":""},"openssl_pkey_free":{"params":{"$key":""},"docComment":"Frees a private key","signature":"openssl_pkey_free(resource $key )","inheritdoc":0,"modifier":[],"return":""},"openssl_pkey_get_details":{"params":{"$key":""},"docComment":"Returns an array with the key details","signature":"openssl_pkey_get_details(resource $key )","inheritdoc":0,"modifier":[],"return":""},"openssl_pkey_get_private":{"params":{"$key":"","$passphrase":""},"docComment":"Get a private key","signature":"openssl_pkey_get_private(mixed $key ,[string $passphrase] )","inheritdoc":0,"modifier":[],"return":""},"openssl_pkey_get_public":{"params":{"$certificate":""},"docComment":"Extract public key from certificate and prepare it for use","signature":"openssl_pkey_get_public(mixed $certificate )","inheritdoc":0,"modifier":[],"return":""},"openssl_pkey_new":{"params":{"$configargs":""},"docComment":"Generates a new private key ","signature":"openssl_pkey_new(array $configargs )","inheritdoc":0,"modifier":[],"return":""},"openssl_private_decrypt":{"params":{"$data":"","&$decrypted":"","$key":"","$padding":""},"docComment":"Decrypts data with private key ","signature":"openssl_private_decrypt(string $data ,string &$decrypted ,mixed $key ,[int $padding] )","inheritdoc":0,"modifier":[],"return":""},"openssl_private_encrypt":{"params":{"$data":"","&$crypted":"","$key":"","$padding":""},"docComment":"Encrypts data with private key ","signature":"openssl_private_encrypt(string $data ,string &$crypted ,mixed $key ,[int $padding] )","inheritdoc":0,"modifier":[],"return":""},"openssl_public_decrypt":{"params":{"$data":"","&$decrypted":"","$key":"","$padding":""},"docComment":"Decrypts data with public key ","signature":"openssl_public_decrypt(string $data ,string &$decrypted ,mixed $key ,[int $padding] )","inheritdoc":0,"modifier":[],"return":""},"openssl_public_encrypt":{"params":{"$data":"","&$crypted":"","$key":"","$padding":""},"docComment":"Encrypts data with public key ","signature":"openssl_public_encrypt(string $data ,string &$crypted ,mixed $key ,[int $padding] )","inheritdoc":0,"modifier":[],"return":""},"openssl_random_pseudo_bytes":{"params":{"$length":"","&$crypto_strong":""},"docComment":"Generate a pseudo-random string of bytes","signature":"openssl_random_pseudo_bytes(int $length ,bool &$crypto_strong )","inheritdoc":0,"modifier":[],"return":""},"openssl_seal":{"params":{"$data":"","&$sealed_data":"","&$env_keys":"","$pub_key_ids":"","$method":""},"docComment":"Seal (encrypt) data","signature":"openssl_seal(string $data ,string &$sealed_data ,array &$env_keys ,array $pub_key_ids ,string $method )","inheritdoc":0,"modifier":[],"return":""},"openssl_sign":{"params":{"$data":"","&$signature":"","$priv_key_id":"","$signature_alg":""},"docComment":"Generate signature","signature":"openssl_sign(string $data ,string &$signature ,mixed $priv_key_id ,[int $signature_alg] )","inheritdoc":0,"modifier":[],"return":""},"openssl_verify":{"params":{"$data":"","$signature":"","$pub_key_id":"","$signature_alg":""},"docComment":"Verify signature","signature":"openssl_verify(string $data ,string $signature ,mixed $pub_key_id ,[int $signature_alg] )","inheritdoc":0,"modifier":[],"return":""},"openssl_x509_check_private_key":{"params":{"$cert":"","$key":""},"docComment":"Checks if a private key corresponds to a certificate","signature":"openssl_x509_check_private_key(mixed $cert ,mixed $key )","inheritdoc":0,"modifier":[],"return":""},"openssl_x509_checkpurpose":{"params":{"$x509cert":"","$purpose":"","$cainfo":"","$untrustedfile":""},"docComment":"Verifies if a certificate can be used for a particular purpose","signature":"openssl_x509_checkpurpose(mixed $x509cert ,int $purpose ,[array $cainfo] ,string $untrustedfile )","inheritdoc":0,"modifier":[],"return":""},"openssl_x509_export_to_file":{"params":{"$x509":"","$outfilename":"","$notext":""},"docComment":"Exports a certificate to file","signature":"openssl_x509_export_to_file(mixed $x509 ,string $outfilename ,[bool $notext] )","inheritdoc":0,"modifier":[],"return":""},"openssl_x509_export":{"params":{"$x509":"","&$output":"","$notext":""},"docComment":"Exports a certificate as a string","signature":"openssl_x509_export(mixed $x509 ,string &$output ,[bool $notext] )","inheritdoc":0,"modifier":[],"return":""},"openssl_x509_free":{"params":{"$x509cert":""},"docComment":"Free certificate resource","signature":"openssl_x509_free(resource $x509cert )","inheritdoc":0,"modifier":[],"return":""},"openssl_x509_parse":{"params":{"$x509cert":"","$shortnames":""},"docComment":"Parse an X509 certificate and return the information as an array","signature":"openssl_x509_parse(mixed $x509cert ,[bool $shortnames] )","inheritdoc":0,"modifier":[],"return":""},"openssl_x509_read":{"params":{"$x509certdata":""},"docComment":"Parse an X.509 certificate and return a resource identifier for\n  it","signature":"openssl_x509_read(mixed $x509certdata )","inheritdoc":0,"modifier":[],"return":""},"pg_affected_rows":{"params":{"$result":""},"docComment":"Returns number of affected records (tuples)","signature":"pg_affected_rows(resource $result )","inheritdoc":0,"modifier":[],"return":""},"pg_cancel_query":{"params":{"$connection":""},"docComment":"\n   Cancel an asynchronous query\n  ","signature":"pg_cancel_query(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_client_encoding":{"params":{"$connection":""},"docComment":"\n   Gets the client encoding\n  ","signature":"pg_client_encoding(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_close":{"params":{"$connection":""},"docComment":"Closes a PostgreSQL connection","signature":"pg_close(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_connect":{"params":{"$connection_string":"","$connect_type":""},"docComment":"Open a PostgreSQL connection","signature":"pg_connect(string $connection_string ,int $connect_type )","inheritdoc":0,"modifier":[],"return":""},"pg_connection_busy":{"params":{"$connection":""},"docComment":"\n   Get connection is busy or not\n  ","signature":"pg_connection_busy(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_connection_reset":{"params":{"$connection":""},"docComment":"\n   Reset connection (reconnect)\n  ","signature":"pg_connection_reset(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_connection_status":{"params":{"$connection":""},"docComment":"\n   Get connection status\n  ","signature":"pg_connection_status(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_convert":{"params":{"$connection":"","$table_name":"","$assoc_array":"","$options":""},"docComment":"\n   Convert associative array values into suitable for SQL statement\n  ","signature":"pg_convert(resource $connection ,string $table_name ,array $assoc_array ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"pg_copy_from":{"params":{"$connection":"","$table_name":"","$rows":"","$delimiter":"","$null_as":""},"docComment":"\n   Insert records into a table from an array\n  ","signature":"pg_copy_from(resource $connection ,string $table_name ,array $rows ,string $delimiter ,string $null_as )","inheritdoc":0,"modifier":[],"return":""},"pg_copy_to":{"params":{"$connection":"","$table_name":"","$delimiter":"","$null_as":""},"docComment":"\n   Copy a table to an array\n  ","signature":"pg_copy_to(resource $connection ,string $table_name ,string $delimiter ,string $null_as )","inheritdoc":0,"modifier":[],"return":""},"pg_dbname":{"params":{"$connection":""},"docComment":"Get the database name","signature":"pg_dbname(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_delete":{"params":{"$connection":"","$table_name":"","$assoc_array":"","$options":""},"docComment":"\n   Deletes records\n  ","signature":"pg_delete(resource $connection ,string $table_name ,array $assoc_array ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"pg_end_copy":{"params":{"$connection":""},"docComment":"Sync with PostgreSQL backend","signature":"pg_end_copy(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_escape_bytea":{"params":{"$connection":"","$data":""},"docComment":"\n   Escape a string for insertion into a bytea field\n  ","signature":"pg_escape_bytea(resource $connection ,string $data )","inheritdoc":0,"modifier":[],"return":""},"pg_escape_identifier":{"params":{"$connection":"","$data":""},"docComment":"\n   Escape a identifier for insertion into a text field\n  ","signature":"pg_escape_identifier(resource $connection ,string $data )","inheritdoc":0,"modifier":[],"return":""},"pg_escape_literal":{"params":{"$connection":"","$data":""},"docComment":"\n   Escape a literal for insertion into a text field\n  ","signature":"pg_escape_literal(resource $connection ,string $data )","inheritdoc":0,"modifier":[],"return":""},"pg_escape_string":{"params":{"$connection":"","$data":""},"docComment":"\n   Escape a string for query\n  ","signature":"pg_escape_string(resource $connection ,string $data )","inheritdoc":0,"modifier":[],"return":""},"pg_execute":{"params":{"$connection":"","$stmtname":"","$params":""},"docComment":"Sends a request to execute a prepared statement with given parameters, and waits for the result.","signature":"pg_execute(resource $connection ,string $stmtname ,array $params )","inheritdoc":0,"modifier":[],"return":""},"pg_fetch_all_columns":{"params":{"$result":"","$column":""},"docComment":"Fetches all rows in a particular result column as an array","signature":"pg_fetch_all_columns(resource $result ,[int $column] )","inheritdoc":0,"modifier":[],"return":""},"pg_fetch_all":{"params":{"$result":""},"docComment":"Fetches all rows from a result as an array","signature":"pg_fetch_all(resource $result )","inheritdoc":0,"modifier":[],"return":""},"pg_fetch_array":{"params":{"$result":"","$row":"","$result_type":""},"docComment":"Fetch a row as an array","signature":"pg_fetch_array(resource $result ,int $row ,[int $result_type] )","inheritdoc":0,"modifier":[],"return":""},"pg_fetch_assoc":{"params":{"$result":"","$row":""},"docComment":"Fetch a row as an associative array","signature":"pg_fetch_assoc(resource $result ,int $row )","inheritdoc":0,"modifier":[],"return":""},"pg_fetch_object":{"params":{"$result":"","$row":"","$result_type":"","$class_name":"","$params":""},"docComment":"Fetch a row as an object","signature":"pg_fetch_object(resource $result ,int $row ,string $class_name ,array $params )","inheritdoc":0,"modifier":[],"return":""},"pg_fetch_result":{"params":{"$result":"","$row":"","$field":""},"docComment":"Returns values from a result resource","signature":"pg_fetch_result(resource $result ,mixed $field )","inheritdoc":0,"modifier":[],"return":""},"pg_fetch_row":{"params":{"$result":"","$row":""},"docComment":"Get a row as an enumerated array","signature":"pg_fetch_row(resource $result ,int $row )","inheritdoc":0,"modifier":[],"return":""},"pg_field_is_null":{"params":{"$result":"","$row":"","$field":""},"docComment":"Test if a field is SQL ","signature":"pg_field_is_null(resource $result ,mixed $field )","inheritdoc":0,"modifier":[],"return":""},"pg_field_name":{"params":{"$result":"","$field_number":""},"docComment":"Returns the name of a field","signature":"pg_field_name(resource $result ,int $field_number )","inheritdoc":0,"modifier":[],"return":""},"pg_field_num":{"params":{"$result":"","$field_name":""},"docComment":"Returns the field number of the named field","signature":"pg_field_num(resource $result ,string $field_name )","inheritdoc":0,"modifier":[],"return":""},"pg_field_prtlen":{"params":{"$result":"","$row_number":"","$field_name_or_number":""},"docComment":"Returns the printed length","signature":"pg_field_prtlen(resource $result ,mixed $field_name_or_number )","inheritdoc":0,"modifier":[],"return":""},"pg_field_size":{"params":{"$result":"","$field_number":""},"docComment":"\n   Returns the internal storage size of the named field\n  ","signature":"pg_field_size(resource $result ,int $field_number )","inheritdoc":0,"modifier":[],"return":""},"pg_field_table":{"params":{"$result":"","$field_number":"","$oid_only":""},"docComment":"Returns the name or oid of the tables field","signature":"pg_field_table(resource $result ,int $field_number ,[bool $oid_only] )","inheritdoc":0,"modifier":[],"return":""},"pg_field_type_oid":{"params":{"$result":"","$field_number":""},"docComment":"\n   Returns the type ID (OID) for the corresponding field number\n  ","signature":"pg_field_type_oid(resource $result ,int $field_number )","inheritdoc":0,"modifier":[],"return":""},"pg_field_type":{"params":{"$result":"","$field_number":""},"docComment":"\n   Returns the type name for the corresponding field number\n  ","signature":"pg_field_type(resource $result ,int $field_number )","inheritdoc":0,"modifier":[],"return":""},"pg_free_result":{"params":{"$result":""},"docComment":"Free result memory","signature":"pg_free_result(resource $result )","inheritdoc":0,"modifier":[],"return":""},"pg_get_notify":{"params":{"$connection":"","$result_type":""},"docComment":"Gets SQL NOTIFY message","signature":"pg_get_notify(resource $connection ,int $result_type )","inheritdoc":0,"modifier":[],"return":""},"pg_get_pid":{"params":{"$connection":""},"docComment":"Gets the backend's process ID","signature":"pg_get_pid(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_get_result":{"params":{"$connection":""},"docComment":"\n   Get asynchronous query result\n  ","signature":"pg_get_result(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_host":{"params":{"$connection":""},"docComment":"\n   Returns the host name associated with the connection\n  ","signature":"pg_host(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_insert":{"params":{"$connection":"","$table_name":"","$assoc_array":"","$options":""},"docComment":"\n   Insert array into table\n  ","signature":"pg_insert(resource $connection ,string $table_name ,array $assoc_array ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"pg_last_error":{"params":{"$connection":""},"docComment":"Get the last error message string of a connection","signature":"pg_last_error(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_last_notice":{"params":{"$connection":""},"docComment":"\n   Returns the last notice message from PostgreSQL server\n  ","signature":"pg_last_notice(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_last_oid":{"params":{"$result":""},"docComment":"Returns the last row's OID","signature":"pg_last_oid(resource $result )","inheritdoc":0,"modifier":[],"return":""},"pg_lo_close":{"params":{"$large_object":""},"docComment":"Close a large object","signature":"pg_lo_close(resource $large_object )","inheritdoc":0,"modifier":[],"return":""},"pg_lo_create":{"params":{"$connection":"","$object_id":""},"docComment":"Create a large object","signature":"pg_lo_create(mixed $object_id )","inheritdoc":0,"modifier":[],"return":""},"pg_lo_export":{"params":{"$connection":"","$oid":"","$pathname":""},"docComment":"Export a large object to file","signature":"pg_lo_export(resource $connection ,int $oid ,string $pathname )","inheritdoc":0,"modifier":[],"return":""},"pg_lo_import":{"params":{"$connection":"","$pathname":"","$object_id":""},"docComment":"Import a large object from file","signature":"pg_lo_import(resource $connection ,string $pathname ,mixed $object_id )","inheritdoc":0,"modifier":[],"return":""},"pg_lo_open":{"params":{"$connection":"","$oid":"","$mode":""},"docComment":"Open a large object","signature":"pg_lo_open(resource $connection ,int $oid ,string $mode )","inheritdoc":0,"modifier":[],"return":""},"pg_lo_read_all":{"params":{"$large_object":""},"docComment":"\n   Reads an entire large object and send straight to browser\n  ","signature":"pg_lo_read_all(resource $large_object )","inheritdoc":0,"modifier":[],"return":""},"pg_lo_read":{"params":{"$large_object":"","$len":""},"docComment":"Read a large object","signature":"pg_lo_read(resource $large_object ,[int $len] )","inheritdoc":0,"modifier":[],"return":""},"pg_lo_seek":{"params":{"$large_object":"","$offset":"","$whence":""},"docComment":"\n   Seeks position within a large object\n  ","signature":"pg_lo_seek(resource $large_object ,int $offset ,[int $whence] )","inheritdoc":0,"modifier":[],"return":""},"pg_lo_tell":{"params":{"$large_object":""},"docComment":"\n   Returns current seek position a of large object\n  ","signature":"pg_lo_tell(resource $large_object )","inheritdoc":0,"modifier":[],"return":""},"pg_lo_unlink":{"params":{"$connection":"","$oid":""},"docComment":"Delete a large object","signature":"pg_lo_unlink(resource $connection ,int $oid )","inheritdoc":0,"modifier":[],"return":""},"pg_lo_write":{"params":{"$large_object":"","$data":"","$len":""},"docComment":"Write to a large object","signature":"pg_lo_write(resource $large_object ,string $data ,int $len )","inheritdoc":0,"modifier":[],"return":""},"pg_meta_data":{"params":{"$connection":"","$table_name":""},"docComment":"\n   Get meta data for table\n  ","signature":"pg_meta_data(resource $connection ,string $table_name )","inheritdoc":0,"modifier":[],"return":""},"pg_num_fields":{"params":{"$result":""},"docComment":"Returns the number of fields in a result","signature":"pg_num_fields(resource $result )","inheritdoc":0,"modifier":[],"return":""},"pg_num_rows":{"params":{"$result":""},"docComment":"Returns the number of rows in a result","signature":"pg_num_rows(resource $result )","inheritdoc":0,"modifier":[],"return":""},"pg_options":{"params":{"$connection":""},"docComment":"Get the options associated with the connection","signature":"pg_options(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_parameter_status":{"params":{"$connection":"","$param_name":""},"docComment":"Looks up a current parameter setting of the server.","signature":"pg_parameter_status(resource $connection ,string $param_name )","inheritdoc":0,"modifier":[],"return":""},"pg_pconnect":{"params":{"$connection_string":"","$connect_type":""},"docComment":"Open a persistent PostgreSQL connection","signature":"pg_pconnect(string $connection_string ,int $connect_type )","inheritdoc":0,"modifier":[],"return":""},"pg_ping":{"params":{"$connection":""},"docComment":"Ping database connection","signature":"pg_ping(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_port":{"params":{"$connection":""},"docComment":"\n   Return the port number associated with the connection\n  ","signature":"pg_port(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_prepare":{"params":{"$connection":"","$stmtname":"","$query":""},"docComment":" Submits a request to create a prepared statement with the \n  given parameters, and waits for completion.","signature":"pg_prepare(resource $connection ,string $stmtname ,string $query )","inheritdoc":0,"modifier":[],"return":""},"pg_put_line":{"params":{"$connection":"","$data":""},"docComment":"Send a NULL-terminated string to PostgreSQL backend","signature":"pg_put_line(resource $connection ,string $data )","inheritdoc":0,"modifier":[],"return":""},"pg_query_params":{"params":{"$connection":"","$query":"","$params":""},"docComment":"Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.","signature":"pg_query_params(resource $connection ,string $query ,array $params )","inheritdoc":0,"modifier":[],"return":""},"pg_query":{"params":{"$connection":"","$query":""},"docComment":"Execute a query","signature":"pg_query(resource $connection ,string $query )","inheritdoc":0,"modifier":[],"return":""},"pg_result_error_field":{"params":{"$result":"","$fieldcode":""},"docComment":"Returns an individual field of an error report.","signature":"pg_result_error_field(resource $result ,int $fieldcode )","inheritdoc":0,"modifier":[],"return":""},"pg_result_error":{"params":{"$result":""},"docComment":"\n   Get error message associated with result\n  ","signature":"pg_result_error(resource $result )","inheritdoc":0,"modifier":[],"return":""},"pg_result_seek":{"params":{"$result":"","$offset":""},"docComment":"Set internal row offset in result resource","signature":"pg_result_seek(resource $result ,int $offset )","inheritdoc":0,"modifier":[],"return":""},"pg_result_status":{"params":{"$result":"","$type":""},"docComment":"\n   Get status of query result\n  ","signature":"pg_result_status(resource $result ,[int $type] )","inheritdoc":0,"modifier":[],"return":""},"pg_select":{"params":{"$connection":"","$table_name":"","$assoc_array":"","$options":""},"docComment":"\n   Select records\n  ","signature":"pg_select(resource $connection ,string $table_name ,array $assoc_array ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"pg_send_execute":{"params":{"$connection":"","$stmtname":"","$params":""},"docComment":"Sends a request to execute a prepared statement with given parameters, without waiting for the result(s).","signature":"pg_send_execute(resource $connection ,string $stmtname ,array $params )","inheritdoc":0,"modifier":[],"return":""},"pg_send_prepare":{"params":{"$connection":"","$stmtname":"","$query":""},"docComment":"Sends a request to create a prepared statement with the given parameters, without waiting for completion.","signature":"pg_send_prepare(resource $connection ,string $stmtname ,string $query )","inheritdoc":0,"modifier":[],"return":""},"pg_send_query_params":{"params":{"$connection":"","$query":"","$params":""},"docComment":"Submits a command and separate parameters to the server without waiting for the result(s).","signature":"pg_send_query_params(resource $connection ,string $query ,array $params )","inheritdoc":0,"modifier":[],"return":""},"pg_send_query":{"params":{"$connection":"","$query":""},"docComment":"\n   Sends asynchronous query\n  ","signature":"pg_send_query(resource $connection ,string $query )","inheritdoc":0,"modifier":[],"return":""},"pg_set_client_encoding":{"params":{"$connection":"","$encoding":""},"docComment":"\n   Set the client encoding\n  ","signature":"pg_set_client_encoding(resource $connection ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"pg_set_error_verbosity":{"params":{"$connection":"","$verbosity":""},"docComment":"\n   Determines the verbosity of messages returned by   \n   and  .\n  ","signature":"pg_set_error_verbosity(resource $connection ,int $verbosity )","inheritdoc":0,"modifier":[],"return":""},"pg_trace":{"params":{"$pathname":"","$mode":"","$connection":""},"docComment":"Enable tracing a PostgreSQL connection","signature":"pg_trace(string $pathname ,[string $mode] ,resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_transaction_status":{"params":{"$connection":""},"docComment":"Returns the current in-transaction status of the server.","signature":"pg_transaction_status(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_tty":{"params":{"$connection":""},"docComment":"\n   Return the TTY name associated with the connection\n  ","signature":"pg_tty(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_unescape_bytea":{"params":{"$data":""},"docComment":"\n   Unescape binary for bytea type\n  ","signature":"pg_unescape_bytea(string $data )","inheritdoc":0,"modifier":[],"return":""},"pg_untrace":{"params":{"$connection":""},"docComment":"Disable tracing of a PostgreSQL connection","signature":"pg_untrace(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pg_update":{"params":{"$connection":"","$table_name":"","$data":"","$condition":"","$options":""},"docComment":"\n   Update table\n  ","signature":"pg_update(resource $connection ,string $table_name ,array $data ,array $condition ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"pg_version":{"params":{"$connection":""},"docComment":"\n   Returns an array with client, protocol and server version (when available)\n  ","signature":"pg_version(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"pspell_add_to_personal":{"params":{"$dictionary_link":"","$word":""},"docComment":"Add the word to a personal wordlist","signature":"pspell_add_to_personal(int $dictionary_link ,string $word )","inheritdoc":0,"modifier":[],"return":""},"pspell_add_to_session":{"params":{"$dictionary_link":"","$word":""},"docComment":"Add the word to the wordlist in the current session","signature":"pspell_add_to_session(int $dictionary_link ,string $word )","inheritdoc":0,"modifier":[],"return":""},"pspell_check":{"params":{"$dictionary_link":"","$word":""},"docComment":"Check a word","signature":"pspell_check(int $dictionary_link ,string $word )","inheritdoc":0,"modifier":[],"return":""},"pspell_clear_session":{"params":{"$dictionary_link":""},"docComment":"Clear the current session","signature":"pspell_clear_session(int $dictionary_link )","inheritdoc":0,"modifier":[],"return":""},"pspell_config_create":{"params":{"$language":"","$spelling":"","$jargon":"","$encoding":""},"docComment":"Create a config used to open a dictionary","signature":"pspell_config_create(string $language ,string $spelling ,string $jargon ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"pspell_config_data_dir":{"params":{"$conf":"","$directory":""},"docComment":"location of language data files","signature":"pspell_config_data_dir(int $conf ,string $directory )","inheritdoc":0,"modifier":[],"return":""},"pspell_config_dict_dir":{"params":{"$conf":"","$directory":""},"docComment":"Location of the main word list","signature":"pspell_config_dict_dir(int $conf ,string $directory )","inheritdoc":0,"modifier":[],"return":""},"pspell_config_ignore":{"params":{"$dictionary_link":"","$n":""},"docComment":"Ignore words less than N characters long","signature":"pspell_config_ignore(int $dictionary_link ,int $n )","inheritdoc":0,"modifier":[],"return":""},"pspell_config_mode":{"params":{"$dictionary_link":"","$mode":""},"docComment":"Change the mode number of suggestions returned","signature":"pspell_config_mode(int $dictionary_link ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"pspell_config_personal":{"params":{"$dictionary_link":"","$file":""},"docComment":"Set a file that contains personal wordlist","signature":"pspell_config_personal(int $dictionary_link ,string $file )","inheritdoc":0,"modifier":[],"return":""},"pspell_config_repl":{"params":{"$dictionary_link":"","$file":""},"docComment":"Set a file that contains replacement pairs","signature":"pspell_config_repl(int $dictionary_link ,string $file )","inheritdoc":0,"modifier":[],"return":""},"pspell_config_runtogether":{"params":{"$dictionary_link":"","$flag":""},"docComment":"Consider run-together words as valid compounds","signature":"pspell_config_runtogether(int $dictionary_link ,bool $flag )","inheritdoc":0,"modifier":[],"return":""},"pspell_config_save_repl":{"params":{"$dictionary_link":"","$flag":""},"docComment":"Determine whether to save a replacement pairs list\n  along with the wordlist","signature":"pspell_config_save_repl(int $dictionary_link ,bool $flag )","inheritdoc":0,"modifier":[],"return":""},"pspell_new_config":{"params":{"$config":""},"docComment":"Load a new dictionary with settings based on a given config\n  ","signature":"pspell_new_config(int $config )","inheritdoc":0,"modifier":[],"return":""},"pspell_new_personal":{"params":{"$personal":"","$language":"","$spelling":"","$jargon":"","$encoding":"","$mode":""},"docComment":"Load a new dictionary with personal wordlist","signature":"pspell_new_personal(string $personal ,string $language ,string $spelling ,string $jargon ,string $encoding ,[int $mode] )","inheritdoc":0,"modifier":[],"return":""},"pspell_new":{"params":{"$language":"","$spelling":"","$jargon":"","$encoding":"","$mode":""},"docComment":"Load a new dictionary","signature":"pspell_new(string $language ,string $spelling ,string $jargon ,string $encoding ,[int $mode] )","inheritdoc":0,"modifier":[],"return":""},"pspell_save_wordlist":{"params":{"$dictionary_link":""},"docComment":"Save the personal wordlist to a file","signature":"pspell_save_wordlist(int $dictionary_link )","inheritdoc":0,"modifier":[],"return":""},"pspell_store_replacement":{"params":{"$dictionary_link":"","$misspelled":"","$correct":""},"docComment":"Store a replacement pair for a word","signature":"pspell_store_replacement(int $dictionary_link ,string $misspelled ,string $correct )","inheritdoc":0,"modifier":[],"return":""},"pspell_suggest":{"params":{"$dictionary_link":"","$word":""},"docComment":"Suggest spellings of a word","signature":"pspell_suggest(int $dictionary_link ,string $word )","inheritdoc":0,"modifier":[],"return":""},"readline_add_history":{"params":{"$line":""},"docComment":"Adds a line to the history","signature":"readline_add_history(string $line )","inheritdoc":0,"modifier":[],"return":""},"readline_callback_handler_install":{"params":{"$prompt":"","$callback":""},"docComment":"Initializes the readline callback interface and terminal, prints the prompt and returns immediately","signature":"readline_callback_handler_install(string $prompt ,callable $callback )","inheritdoc":0,"modifier":[],"return":""},"readline_callback_handler_remove":{"params":[],"docComment":"Removes a previously installed callback handler and restores terminal settings","signature":"readline_callback_handler_remove( )","inheritdoc":0,"modifier":[],"return":""},"readline_callback_read_char":{"params":[],"docComment":"Reads a character and informs the readline callback interface when a line is received","signature":"readline_callback_read_char( )","inheritdoc":0,"modifier":[],"return":""},"readline_clear_history":{"params":[],"docComment":"Clears the history","signature":"readline_clear_history( )","inheritdoc":0,"modifier":[],"return":""},"readline_completion_function":{"params":{"$function":""},"docComment":"Registers a completion function","signature":"readline_completion_function(callable $function )","inheritdoc":0,"modifier":[],"return":""},"readline_info":{"params":{"$varname":"","$newvalue":""},"docComment":"Gets\/sets various internal readline variables","signature":"readline_info(string $varname ,string $newvalue )","inheritdoc":0,"modifier":[],"return":""},"readline_list_history":{"params":[],"docComment":"Lists the history","signature":"readline_list_history( )","inheritdoc":0,"modifier":[],"return":""},"readline_on_new_line":{"params":[],"docComment":"Inform readline that the cursor has moved to a new line","signature":"readline_on_new_line( )","inheritdoc":0,"modifier":[],"return":""},"readline_read_history":{"params":{"$filename":""},"docComment":"Reads the history","signature":"readline_read_history(string $filename )","inheritdoc":0,"modifier":[],"return":""},"readline_redisplay":{"params":[],"docComment":"Redraws the display","signature":"readline_redisplay( )","inheritdoc":0,"modifier":[],"return":""},"readline_write_history":{"params":{"$filename":""},"docComment":"Writes the history","signature":"readline_write_history(string $filename )","inheritdoc":0,"modifier":[],"return":""},"readline":{"params":{"$prompt":""},"docComment":"Reads a line","signature":"readline(string $prompt )","inheritdoc":0,"modifier":[],"return":""},"recode_file":{"params":{"$request":"","$input":"","$output":""},"docComment":"Recode from file to file according to recode request","signature":"recode_file(string $request ,resource $input ,resource $output )","inheritdoc":0,"modifier":[],"return":""},"recode_string":{"params":{"$request":"","$string":""},"docComment":"Recode a string according to a recode request","signature":"recode_string(string $request ,string $string )","inheritdoc":0,"modifier":[],"return":""},"recode":{"params":{"$request":"","$string":""},"docComment":"Recode a string according to a recode request","signature":"recode_string(string $request ,string $string )","inheritdoc":0,"modifier":[],"return":""},"simplexml_import_dom":{"params":{"$node":"DOMNode","$class_name":""},"docComment":"Get a  object from a DOM node.","signature":"simplexml_import_dom(DOMNode $node ,[string $class_name] )","inheritdoc":0,"modifier":[],"return":"SimpleXMLElement"},"simplexml_load_file":{"params":{"$filename":"","$class_name":"","$options":"","$ns":"","$is_prefix":""},"docComment":"\n   Interprets an XML file into an object\n  ","signature":"simplexml_load_file(string $filename ,[string $class_name] ,[int $options] ,[string $ns] ,[bool $is_prefix] )","inheritdoc":0,"modifier":[],"return":"SimpleXMLElement"},"simplexml_load_string":{"params":{"$data":"","$class_name":"","$options":"","$ns":"","$is_prefix":""},"docComment":"\n   Interprets a string of XML into an object\n  ","signature":"simplexml_load_string(string $data ,[string $class_name] ,[int $options] ,[string $ns] ,[bool $is_prefix] )","inheritdoc":0,"modifier":[],"return":"SimpleXMLElement"},"snmp_get_quick_print":{"params":[],"docComment":"\n   Fetches the current value of the UCD library's quick_print setting\n  ","signature":"snmp_get_quick_print( )","inheritdoc":0,"modifier":[],"return":""},"snmp_get_valueretrieval":{"params":[],"docComment":"\n   Return the method how the SNMP values will be returned\n  ","signature":"snmp_get_valueretrieval( )","inheritdoc":0,"modifier":[],"return":""},"snmp_read_mib":{"params":{"$filename":""},"docComment":"\n   Reads and parses a MIB file into the active MIB tree\n  ","signature":"snmp_read_mib(string $filename )","inheritdoc":0,"modifier":[],"return":""},"snmp_set_enum_print":{"params":{"$enum_print":""},"docComment":"\n   Return all values that are enums with their enum value instead of the raw integer\n  ","signature":"snmp_set_enum_print(int $enum_print )","inheritdoc":0,"modifier":[],"return":""},"snmp_set_oid_numeric_print":{"params":{"$oid_format":""},"docComment":"\n   Return all objects including their respective object id within the specified one\n  ","signature":"snmp_set_oid_numeric_print(int $oid_format )","inheritdoc":0,"modifier":[],"return":""},"snmp_set_oid_output_format":{"params":{"$oid_format":""},"docComment":"\n   Set the OID output format\n  ","signature":"snmp_set_oid_output_format([int $oid_format] )","inheritdoc":0,"modifier":[],"return":""},"snmp_set_quick_print":{"params":{"$quick_print":""},"docComment":"Set the value of  within the UCD  library\n  ","signature":"snmp_set_quick_print(bool $quick_print )","inheritdoc":0,"modifier":[],"return":""},"snmp_set_valueretrieval":{"params":{"$method":""},"docComment":"\n   Specify the method how the SNMP values will be returned\n  ","signature":"snmp_set_valueretrieval([int $method] )","inheritdoc":0,"modifier":[],"return":""},"snmp2_get":{"params":{"$host":"","$community":"","$object_id":"","$timeout":"","$retries":""},"docComment":"Fetch an  object","signature":"snmp2_get(string $host ,string $community ,string $object_id ,[string $timeout] ,[string $retries] )","inheritdoc":0,"modifier":[],"return":""},"snmp2_getnext":{"params":{"$host":"","$community":"","$object_id":"","$timeout":"","$retries":""},"docComment":"Fetch the  object which follows the given object id","signature":"snmp2_getnext(string $host ,string $community ,string $object_id ,[string $timeout] ,[string $retries] )","inheritdoc":0,"modifier":[],"return":""},"snmp2_real_walk":{"params":{"$host":"","$community":"","$object_id":"","$timeout":"","$retries":""},"docComment":"Return all objects including their respective object ID within the specified one","signature":"snmp2_real_walk(string $host ,string $community ,string $object_id ,[string $timeout] ,[string $retries] )","inheritdoc":0,"modifier":[],"return":""},"snmp2_set":{"params":{"$host":"","$community":"","$object_id":"","$type":"","$value":"","$timeout":"","$retries":""},"docComment":"Set the value of an  object","signature":"snmp2_set(string $host ,string $community ,string $object_id ,string $type ,string $value ,[string $timeout] ,[string $retries] )","inheritdoc":0,"modifier":[],"return":""},"snmp2_walk":{"params":{"$host":"","$community":"","$object_id":"","$timeout":"","$retries":""},"docComment":"Fetch all the  objects from an agent","signature":"snmp2_walk(string $host ,string $community ,string $object_id ,[string $timeout] ,[string $retries] )","inheritdoc":0,"modifier":[],"return":""},"snmp3_get":{"params":{"$host":"","$sec_name":"","$sec_level":"","$auth_protocol":"","$auth_passphrase":"","$priv_protocol":"","$priv_passphrase":"","$object_id":"","$timeout":"","$retries":""},"docComment":"Fetch an  object","signature":"snmp3_get(string $host ,string $sec_name ,string $sec_level ,string $auth_protocol ,string $auth_passphrase ,string $priv_protocol ,string $priv_passphrase ,string $object_id ,[string $timeout] ,[string $retries] )","inheritdoc":0,"modifier":[],"return":""},"snmp3_getnext":{"params":{"$host":"","$sec_name":"","$sec_level":"","$auth_protocol":"","$auth_passphrase":"","$priv_protocol":"","$priv_passphrase":"","$object_id":"","$timeout":"","$retries":""},"docComment":"Fetch the  object which follows the given object id","signature":"snmp3_getnext(string $host ,string $sec_name ,string $sec_level ,string $auth_protocol ,string $auth_passphrase ,string $priv_protocol ,string $priv_passphrase ,string $object_id ,[string $timeout] ,[string $retries] )","inheritdoc":0,"modifier":[],"return":""},"snmp3_real_walk":{"params":{"$host":"","$sec_name":"","$sec_level":"","$auth_protocol":"","$auth_passphrase":"","$priv_protocol":"","$priv_passphrase":"","$object_id":"","$timeout":"","$retries":""},"docComment":"Return all objects including their respective object ID within the specified one","signature":"snmp3_real_walk(string $host ,string $sec_name ,string $sec_level ,string $auth_protocol ,string $auth_passphrase ,string $priv_protocol ,string $priv_passphrase ,string $object_id ,[string $timeout] ,[string $retries] )","inheritdoc":0,"modifier":[],"return":""},"snmp3_set":{"params":{"$host":"","$sec_name":"","$sec_level":"","$auth_protocol":"","$auth_passphrase":"","$priv_protocol":"","$priv_passphrase":"","$object_id":"","$type":"","$value":"","$timeout":"","$retries":""},"docComment":"Set the value of an SNMP object","signature":"snmp3_set(string $host ,string $sec_name ,string $sec_level ,string $auth_protocol ,string $auth_passphrase ,string $priv_protocol ,string $priv_passphrase ,string $object_id ,string $type ,string $value ,[int $timeout] ,[int $retries] )","inheritdoc":0,"modifier":[],"return":""},"snmp3_walk":{"params":{"$host":"","$sec_name":"","$sec_level":"","$auth_protocol":"","$auth_passphrase":"","$priv_protocol":"","$priv_passphrase":"","$object_id":"","$timeout":"","$retries":""},"docComment":"Fetch all the  objects from an agent","signature":"snmp3_walk(string $host ,string $sec_name ,string $sec_level ,string $auth_protocol ,string $auth_passphrase ,string $priv_protocol ,string $priv_passphrase ,string $object_id ,[string $timeout] ,[string $retries] )","inheritdoc":0,"modifier":[],"return":""},"snmpget":{"params":{"$hostname":"","$community":"","$object_id":"","$timeout":"","$retries":""},"docComment":"Fetch an  object","signature":"snmpget(string $hostname ,string $community ,string $object_id ,[int $timeout] ,[int $retries] )","inheritdoc":0,"modifier":[],"return":""},"snmpgetnext":{"params":{"$host":"","$community":"","$object_id":"","$timeout":"","$retries":""},"docComment":"\n   Fetch the  object which follows the given object id\n  ","signature":"snmpgetnext(string $host ,string $community ,string $object_id ,[int $timeout] ,[int $retries] )","inheritdoc":0,"modifier":[],"return":""},"snmprealwalk":{"params":{"$host":"","$community":"","$object_id":"","$timeout":"","$retries":""},"docComment":"\n   Return all objects including their respective object ID within the specified one\n  ","signature":"snmprealwalk(string $host ,string $community ,string $object_id ,[int $timeout] ,[int $retries] )","inheritdoc":0,"modifier":[],"return":""},"snmpset":{"params":{"$host":"","$community":"","$object_id":"","$type":"","$value":"","$timeout":"","$retries":""},"docComment":"Set the value of an  object","signature":"snmpset(string $host ,string $community ,string $object_id ,string $type ,mixed $value ,[int $timeout] ,[int $retries] )","inheritdoc":0,"modifier":[],"return":""},"snmpwalk":{"params":{"$hostname":"","$community":"","$object_id":"","$timeout":"","$retries":""},"docComment":"Fetch all the  objects from an agent","signature":"snmpwalk(string $hostname ,string $community ,string $object_id ,[int $timeout] ,[int $retries] )","inheritdoc":0,"modifier":[],"return":""},"snmpwalkoid":{"params":{"$hostname":"","$community":"","$object_id":"","$timeout":"","$retries":""},"docComment":"Query for a tree of information about a network entity\n  ","signature":"snmpwalkoid(string $hostname ,string $community ,string $object_id ,[int $timeout] ,[int $retries] )","inheritdoc":0,"modifier":[],"return":""},"is_soap_fault":{"params":{"$object":""},"docComment":"Checks if a SOAP call has failed","signature":"is_soap_fault(mixed $object )","inheritdoc":0,"modifier":[],"return":""},"use_soap_error_handler":{"params":{"$handler":""},"docComment":"Set whether to use the SOAP error handler","signature":"use_soap_error_handler([bool $handler] )","inheritdoc":0,"modifier":[],"return":""},"sybase_affected_rows":{"params":{"$link_identifier":""},"docComment":"Gets number of affected rows in last query","signature":"sybase_affected_rows(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"sybase_close":{"params":{"$link_identifier":""},"docComment":"Closes a Sybase connection","signature":"sybase_close(resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"sybase_connect":{"params":{"$servername":"","$username":"","$password":"","$charset":"","$appname":"","$new":""},"docComment":"Opens a Sybase server connection","signature":"sybase_connect(string $servername ,string $username ,string $password ,string $charset ,string $appname ,[bool $new] )","inheritdoc":0,"modifier":[],"return":""},"sybase_data_seek":{"params":{"$result_identifier":"","$row_number":""},"docComment":"Moves internal row pointer","signature":"sybase_data_seek(resource $result_identifier ,int $row_number )","inheritdoc":0,"modifier":[],"return":""},"sybase_deadlock_retry_count":{"params":{"$retry_count":""},"docComment":"Sets the deadlock retry count","signature":"sybase_deadlock_retry_count(int $retry_count )","inheritdoc":0,"modifier":[],"return":""},"sybase_fetch_array":{"params":{"$result":""},"docComment":"Fetch row as array","signature":"sybase_fetch_array(resource $result )","inheritdoc":0,"modifier":[],"return":""},"sybase_fetch_assoc":{"params":{"$result":""},"docComment":"Fetch a result row as an associative array","signature":"sybase_fetch_assoc(resource $result )","inheritdoc":0,"modifier":[],"return":""},"sybase_fetch_field":{"params":{"$result":"","$field_offset":""},"docComment":"Get field information from a result","signature":"sybase_fetch_field(resource $result ,[int $field_offset] )","inheritdoc":0,"modifier":[],"return":""},"sybase_fetch_object":{"params":{"$result":"","$object":""},"docComment":"Fetch a row as an object","signature":"sybase_fetch_object(resource $result ,mixed $object )","inheritdoc":0,"modifier":[],"return":""},"sybase_fetch_row":{"params":{"$result":""},"docComment":"Get a result row as an enumerated array","signature":"sybase_fetch_row(resource $result )","inheritdoc":0,"modifier":[],"return":""},"sybase_field_seek":{"params":{"$result":"","$field_offset":""},"docComment":"Sets field offset","signature":"sybase_field_seek(resource $result ,int $field_offset )","inheritdoc":0,"modifier":[],"return":""},"sybase_free_result":{"params":{"$result":""},"docComment":"Frees result memory","signature":"sybase_free_result(resource $result )","inheritdoc":0,"modifier":[],"return":""},"sybase_get_last_message":{"params":[],"docComment":"Returns the last message from the server","signature":"sybase_get_last_message( )","inheritdoc":0,"modifier":[],"return":""},"sybase_min_client_severity":{"params":{"$severity":""},"docComment":"Sets minimum client severity","signature":"sybase_min_client_severity(int $severity )","inheritdoc":0,"modifier":[],"return":""},"sybase_min_error_severity":{"params":{"$severity":""},"docComment":"Sets minimum error severity","signature":"sybase_min_error_severity(int $severity )","inheritdoc":0,"modifier":[],"return":""},"sybase_min_message_severity":{"params":{"$severity":""},"docComment":"Sets minimum message severity","signature":"sybase_min_message_severity(int $severity )","inheritdoc":0,"modifier":[],"return":""},"sybase_min_server_severity":{"params":{"$severity":""},"docComment":"Sets minimum server severity","signature":"sybase_min_server_severity(int $severity )","inheritdoc":0,"modifier":[],"return":""},"sybase_num_fields":{"params":{"$result":""},"docComment":"Gets the number of fields in a result set","signature":"sybase_num_fields(resource $result )","inheritdoc":0,"modifier":[],"return":""},"sybase_num_rows":{"params":{"$result":""},"docComment":"Get number of rows in a result set","signature":"sybase_num_rows(resource $result )","inheritdoc":0,"modifier":[],"return":""},"sybase_pconnect":{"params":{"$servername":"","$username":"","$password":"","$charset":"","$appname":""},"docComment":"Open persistent Sybase connection","signature":"sybase_pconnect(string $servername ,string $username ,string $password ,string $charset ,string $appname )","inheritdoc":0,"modifier":[],"return":""},"sybase_query":{"params":{"$query":"","$link_identifier":""},"docComment":"Sends a Sybase query","signature":"sybase_query(string $query ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"sybase_result":{"params":{"$result":"","$row":"","$field":""},"docComment":"Get result data","signature":"sybase_result(resource $result ,int $row ,mixed $field )","inheritdoc":0,"modifier":[],"return":""},"sybase_select_db":{"params":{"$database_name":"","$link_identifier":""},"docComment":"Selects a Sybase database","signature":"sybase_select_db(string $database_name ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"sybase_set_message_handler":{"params":{"$handler":"","$link_identifier":""},"docComment":"Sets the handler called when a server message is raised","signature":"sybase_set_message_handler(callable $handler ,resource $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"sybase_unbuffered_query":{"params":{"$query":"","$link_identifier":"","$store_result":""},"docComment":"Send a Sybase query and do not block","signature":"sybase_unbuffered_query(string $query ,resource $link_identifier ,bool $store_result )","inheritdoc":0,"modifier":[],"return":""},"ob_tidyhandler":{"params":{"$input":"","$mode":""},"docComment":"ob_start callback function to repair the buffer","signature":"ob_tidyhandler(string $input ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"tidy_access_count":{"params":{"$object":"tidy"},"docComment":"Returns the Number of Tidy accessibility warnings encountered for specified document","signature":"tidy_access_count(tidy $object )","inheritdoc":0,"modifier":[],"return":""},"tidy_config_count":{"params":{"$object":"tidy"},"docComment":"Returns the Number of Tidy configuration errors encountered for specified document","signature":"tidy_config_count(tidy $object )","inheritdoc":0,"modifier":[],"return":""},"tidy_error_count":{"params":{"$object":"tidy"},"docComment":"Returns the Number of Tidy errors encountered for specified document","signature":"tidy_error_count(tidy $object )","inheritdoc":0,"modifier":[],"return":""},"tidy_get_output":{"params":{"$object":"tidy"},"docComment":"Return a string representing the parsed tidy markup","signature":"tidy_get_output(tidy $object )","inheritdoc":0,"modifier":[],"return":""},"tidy_load_config":{"params":{"$filename":"","$encoding":""},"docComment":"Load an ASCII Tidy configuration file with the specified encoding","signature":"tidy_load_config(string $filename ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"tidy_reset_config":{"params":[],"docComment":"Restore Tidy configuration to default values","signature":"tidy_reset_config( )","inheritdoc":0,"modifier":[],"return":""},"tidy_save_config":{"params":{"$filename":""},"docComment":"Save current settings to named file","signature":"tidy_save_config(string $filename )","inheritdoc":0,"modifier":[],"return":""},"tidy_set_encoding":{"params":{"$encoding":""},"docComment":"Set the input\/output character encoding for parsing markup","signature":"tidy_set_encoding(string $encoding )","inheritdoc":0,"modifier":[],"return":""},"tidy_setopt":{"params":{"$option":"","$value":""},"docComment":"Updates the configuration settings for the specified tidy document","signature":"tidy_setopt(string $option ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"tidy_warning_count":{"params":{"$object":"tidy"},"docComment":"Returns the Number of Tidy warnings encountered for specified document","signature":"tidy_warning_count(tidy $object )","inheritdoc":0,"modifier":[],"return":""},"odbc_autocommit":{"params":{"$connection_id":"","$OnOff":""},"docComment":"Toggle autocommit behaviour","signature":"odbc_autocommit(resource $connection_id ,[bool $OnOff] )","inheritdoc":0,"modifier":[],"return":""},"odbc_binmode":{"params":{"$result_id":"","$mode":""},"docComment":"Handling of binary column data","signature":"odbc_binmode(resource $result_id ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"odbc_close_all":{"params":[],"docComment":"Close all ODBC connections","signature":"odbc_close_all( )","inheritdoc":0,"modifier":[],"return":""},"odbc_close":{"params":{"$connection_id":""},"docComment":"Close an ODBC connection","signature":"odbc_close(resource $connection_id )","inheritdoc":0,"modifier":[],"return":""},"odbc_columnprivileges":{"params":{"$connection_id":"","$qualifier":"","$owner":"","$table_name":"","$column_name":""},"docComment":"Lists columns and associated privileges for the given table","signature":"odbc_columnprivileges(resource $connection_id ,string $qualifier ,string $owner ,string $table_name ,string $column_name )","inheritdoc":0,"modifier":[],"return":""},"odbc_columns":{"params":{"$connection_id":"","$qualifier":"","$schema":"","$table_name":"","$column_name":""},"docComment":"Lists the column names in specified tables","signature":"odbc_columns(resource $connection_id ,string $qualifier ,string $schema ,string $table_name ,string $column_name )","inheritdoc":0,"modifier":[],"return":""},"odbc_commit":{"params":{"$connection_id":""},"docComment":"Commit an ODBC transaction","signature":"odbc_commit(resource $connection_id )","inheritdoc":0,"modifier":[],"return":""},"odbc_connect":{"params":{"$dsn":"","$user":"","$password":"","$cursor_type":""},"docComment":"Connect to a datasource","signature":"odbc_connect(string $dsn ,string $user ,string $password ,int $cursor_type )","inheritdoc":0,"modifier":[],"return":""},"odbc_cursor":{"params":{"$result_id":""},"docComment":"Get cursorname","signature":"odbc_cursor(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"odbc_data_source":{"params":{"$connection_id":"","$fetch_type":""},"docComment":"Returns information about a current connection","signature":"odbc_data_source(resource $connection_id ,int $fetch_type )","inheritdoc":0,"modifier":[],"return":""},"odbc_do":{"params":{"$connection_id":"","$query_string":"","$flags":""},"docComment":"Prepare and execute an SQL statement","signature":"odbc_exec(resource $connection_id ,string $query_string ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"odbc_error":{"params":{"$connection_id":""},"docComment":"Get the last error code","signature":"odbc_error(resource $connection_id )","inheritdoc":0,"modifier":[],"return":""},"odbc_errormsg":{"params":{"$connection_id":""},"docComment":"Get the last error message","signature":"odbc_errormsg(resource $connection_id )","inheritdoc":0,"modifier":[],"return":""},"odbc_exec":{"params":{"$connection_id":"","$query_string":"","$flags":""},"docComment":"Prepare and execute an SQL statement","signature":"odbc_exec(resource $connection_id ,string $query_string ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"odbc_execute":{"params":{"$result_id":"","$parameters_array":""},"docComment":"Execute a prepared statement","signature":"odbc_execute(resource $result_id ,array $parameters_array )","inheritdoc":0,"modifier":[],"return":""},"odbc_fetch_array":{"params":{"$result":"","$rownumber":""},"docComment":"Fetch a result row as an associative array","signature":"odbc_fetch_array(resource $result ,int $rownumber )","inheritdoc":0,"modifier":[],"return":""},"odbc_fetch_into":{"params":{"$result_id":"","&$result_array":"","$rownumber":""},"docComment":"Fetch one result row into array","signature":"odbc_fetch_into(resource $result_id ,array &$result_array ,int $rownumber )","inheritdoc":0,"modifier":[],"return":""},"odbc_fetch_object":{"params":{"$result":"","$rownumber":""},"docComment":"Fetch a result row as an object","signature":"odbc_fetch_object(resource $result ,int $rownumber )","inheritdoc":0,"modifier":[],"return":""},"odbc_fetch_row":{"params":{"$result_id":"","$row_number":""},"docComment":"Fetch a row","signature":"odbc_fetch_row(resource $result_id ,int $row_number )","inheritdoc":0,"modifier":[],"return":""},"odbc_field_len":{"params":{"$result_id":"","$field_number":""},"docComment":"Get the length (precision) of a field","signature":"odbc_field_len(resource $result_id ,int $field_number )","inheritdoc":0,"modifier":[],"return":""},"odbc_field_name":{"params":{"$result_id":"","$field_number":""},"docComment":"Get the columnname","signature":"odbc_field_name(resource $result_id ,int $field_number )","inheritdoc":0,"modifier":[],"return":""},"odbc_field_num":{"params":{"$result_id":"","$field_name":""},"docComment":"Return column number","signature":"odbc_field_num(resource $result_id ,string $field_name )","inheritdoc":0,"modifier":[],"return":""},"odbc_field_precision":{"params":{"$result_id":"","$field_number":""},"docComment":"Get the length (precision) of a field","signature":"odbc_field_len(resource $result_id ,int $field_number )","inheritdoc":0,"modifier":[],"return":""},"odbc_field_scale":{"params":{"$result_id":"","$field_number":""},"docComment":"Get the scale of a field","signature":"odbc_field_scale(resource $result_id ,int $field_number )","inheritdoc":0,"modifier":[],"return":""},"odbc_field_type":{"params":{"$result_id":"","$field_number":""},"docComment":"Datatype of a field","signature":"odbc_field_type(resource $result_id ,int $field_number )","inheritdoc":0,"modifier":[],"return":""},"odbc_foreignkeys":{"params":{"$connection_id":"","$pk_qualifier":"","$pk_owner":"","$pk_table":"","$fk_qualifier":"","$fk_owner":"","$fk_table":""},"docComment":"Retrieves a list of foreign keys","signature":"odbc_foreignkeys(resource $connection_id ,string $pk_qualifier ,string $pk_owner ,string $pk_table ,string $fk_qualifier ,string $fk_owner ,string $fk_table )","inheritdoc":0,"modifier":[],"return":""},"odbc_free_result":{"params":{"$result_id":""},"docComment":"Free resources associated with a result","signature":"odbc_free_result(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"odbc_gettypeinfo":{"params":{"$connection_id":"","$data_type":""},"docComment":"Retrieves information about data types supported by the data source","signature":"odbc_gettypeinfo(resource $connection_id ,int $data_type )","inheritdoc":0,"modifier":[],"return":""},"odbc_longreadlen":{"params":{"$result_id":"","$length":""},"docComment":"Handling of LONG columns","signature":"odbc_longreadlen(resource $result_id ,int $length )","inheritdoc":0,"modifier":[],"return":""},"odbc_next_result":{"params":{"$result_id":""},"docComment":"Checks if multiple results are available","signature":"odbc_next_result(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"odbc_num_fields":{"params":{"$result_id":""},"docComment":"Number of columns in a result","signature":"odbc_num_fields(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"odbc_num_rows":{"params":{"$result_id":""},"docComment":"Number of rows in a result","signature":"odbc_num_rows(resource $result_id )","inheritdoc":0,"modifier":[],"return":""},"odbc_pconnect":{"params":{"$dsn":"","$user":"","$password":"","$cursor_type":""},"docComment":"Open a persistent database connection","signature":"odbc_pconnect(string $dsn ,string $user ,string $password ,int $cursor_type )","inheritdoc":0,"modifier":[],"return":""},"odbc_prepare":{"params":{"$connection_id":"","$query_string":""},"docComment":"Prepares a statement for execution","signature":"odbc_prepare(resource $connection_id ,string $query_string )","inheritdoc":0,"modifier":[],"return":""},"odbc_primarykeys":{"params":{"$connection_id":"","$qualifier":"","$owner":"","$table":""},"docComment":"Gets the primary keys for a table","signature":"odbc_primarykeys(resource $connection_id ,string $qualifier ,string $owner ,string $table )","inheritdoc":0,"modifier":[],"return":""},"odbc_procedurecolumns":{"params":{"$connection_id":"","$qualifier":"","$owner":"","$proc":"","$column":""},"docComment":"Retrieve information about parameters to procedures","signature":"odbc_procedurecolumns(resource $connection_id ,string $qualifier ,string $owner ,string $proc ,string $column )","inheritdoc":0,"modifier":[],"return":""},"odbc_procedures":{"params":{"$connection_id":"","$qualifier":"","$owner":"","$name":""},"docComment":"Get the list of procedures stored in a specific data source","signature":"odbc_procedures(resource $connection_id ,string $qualifier ,string $owner ,string $name )","inheritdoc":0,"modifier":[],"return":""},"odbc_result_all":{"params":{"$result_id":"","$format":""},"docComment":"Print result as HTML table","signature":"odbc_result_all(resource $result_id ,string $format )","inheritdoc":0,"modifier":[],"return":""},"odbc_result":{"params":{"$result_id":"","$field":""},"docComment":"Get result data","signature":"odbc_result(resource $result_id ,mixed $field )","inheritdoc":0,"modifier":[],"return":""},"odbc_rollback":{"params":{"$connection_id":""},"docComment":"Rollback a transaction","signature":"odbc_rollback(resource $connection_id )","inheritdoc":0,"modifier":[],"return":""},"odbc_setoption":{"params":{"$id":"","$function":"","$option":"","$param":""},"docComment":"Adjust ODBC settings","signature":"odbc_setoption(resource $id ,int $function ,int $option ,int $param )","inheritdoc":0,"modifier":[],"return":""},"odbc_specialcolumns":{"params":{"$connection_id":"","$type":"","$qualifier":"","$owner":"","$table":"","$scope":"","$nullable":""},"docComment":"Retrieves special columns","signature":"odbc_specialcolumns(resource $connection_id ,int $type ,string $qualifier ,string $owner ,string $table ,int $scope ,int $nullable )","inheritdoc":0,"modifier":[],"return":""},"odbc_statistics":{"params":{"$connection_id":"","$qualifier":"","$owner":"","$table_name":"","$unique":"","$accuracy":""},"docComment":"Retrieve statistics about a table","signature":"odbc_statistics(resource $connection_id ,string $qualifier ,string $owner ,string $table_name ,int $unique ,int $accuracy )","inheritdoc":0,"modifier":[],"return":""},"odbc_tableprivileges":{"params":{"$connection_id":"","$qualifier":"","$owner":"","$name":""},"docComment":"Lists tables and the privileges associated with each table","signature":"odbc_tableprivileges(resource $connection_id ,string $qualifier ,string $owner ,string $name )","inheritdoc":0,"modifier":[],"return":""},"odbc_tables":{"params":{"$connection_id":"","$qualifier":"","$owner":"","$name":"","$types":""},"docComment":"Get the list of table names stored in a specific data source","signature":"odbc_tables(resource $connection_id ,string $qualifier ,string $owner ,string $name ,string $types )","inheritdoc":0,"modifier":[],"return":""},"wddx_add_vars":{"params":{"$packet_id":"","$var_name":"","$...":""},"docComment":"Add variables to a WDDX packet with the specified ID","signature":"wddx_add_vars(resource $packet_id ,mixed $var_name ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"wddx_deserialize":{"params":{"$packet":""},"docComment":"Unserializes a WDDX packet","signature":"wddx_deserialize(string $packet )","inheritdoc":0,"modifier":[],"return":""},"wddx_packet_end":{"params":{"$packet_id":""},"docComment":"Ends a WDDX packet with the specified ID","signature":"wddx_packet_end(resource $packet_id )","inheritdoc":0,"modifier":[],"return":""},"wddx_packet_start":{"params":{"$comment":""},"docComment":"Starts a new WDDX packet with structure inside it","signature":"wddx_packet_start(string $comment )","inheritdoc":0,"modifier":[],"return":""},"wddx_serialize_value":{"params":{"$var":"","$comment":""},"docComment":"Serialize a single value into a WDDX packet","signature":"wddx_serialize_value(mixed $var ,string $comment )","inheritdoc":0,"modifier":[],"return":""},"wddx_serialize_vars":{"params":{"$var_name":"","$...":""},"docComment":"Serialize variables into a WDDX packet","signature":"wddx_serialize_vars(mixed $var_name ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"utf8_decode":{"params":{"$data":""},"docComment":"\n   Converts a string with ISO-8859-1 characters encoded with UTF-8\n   to single-byte ISO-8859-1\n  ","signature":"utf8_decode(string $data )","inheritdoc":0,"modifier":[],"return":""},"utf8_encode":{"params":{"$data":""},"docComment":"Encodes an ISO-8859-1 string to UTF-8","signature":"utf8_encode(string $data )","inheritdoc":0,"modifier":[],"return":""},"xml_error_string":{"params":{"$code":""},"docComment":"Get XML parser error string","signature":"xml_error_string(int $code )","inheritdoc":0,"modifier":[],"return":""},"xml_get_current_byte_index":{"params":{"$parser":""},"docComment":"Get current byte index for an XML parser","signature":"xml_get_current_byte_index(resource $parser )","inheritdoc":0,"modifier":[],"return":""},"xml_get_current_column_number":{"params":{"$parser":""},"docComment":"\n   Get current column number for an XML parser\n  ","signature":"xml_get_current_column_number(resource $parser )","inheritdoc":0,"modifier":[],"return":""},"xml_get_current_line_number":{"params":{"$parser":""},"docComment":"Get current line number for an XML parser","signature":"xml_get_current_line_number(resource $parser )","inheritdoc":0,"modifier":[],"return":""},"xml_get_error_code":{"params":{"$parser":""},"docComment":"Get XML parser error code","signature":"xml_get_error_code(resource $parser )","inheritdoc":0,"modifier":[],"return":""},"xml_parse_into_struct":{"params":{"$parser":"","$data":"","&$values":"","&$index":""},"docComment":"Parse XML data into an array structure","signature":"xml_parse_into_struct(resource $parser ,string $data ,array &$values ,array &$index )","inheritdoc":0,"modifier":[],"return":""},"xml_parse":{"params":{"$parser":"","$data":"","$is_final":""},"docComment":"Start parsing an XML document","signature":"xml_parse(resource $parser ,string $data ,[bool $is_final] )","inheritdoc":0,"modifier":[],"return":""},"xml_parser_create_ns":{"params":{"$encoding":"","$separator":""},"docComment":"Create an XML parser with namespace support","signature":"xml_parser_create_ns(string $encoding ,[string $separator] )","inheritdoc":0,"modifier":[],"return":""},"xml_parser_create":{"params":{"$encoding":""},"docComment":"Create an XML parser","signature":"xml_parser_create(string $encoding )","inheritdoc":0,"modifier":[],"return":""},"xml_parser_free":{"params":{"$parser":""},"docComment":"Free an XML parser","signature":"xml_parser_free(resource $parser )","inheritdoc":0,"modifier":[],"return":""},"xml_parser_get_option":{"params":{"$parser":"","$option":""},"docComment":"Get options from an XML parser","signature":"xml_parser_get_option(resource $parser ,int $option )","inheritdoc":0,"modifier":[],"return":""},"xml_parser_set_option":{"params":{"$parser":"","$option":"","$value":""},"docComment":"Set options in an XML parser","signature":"xml_parser_set_option(resource $parser ,int $option ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"xml_set_character_data_handler":{"params":{"$parser":"","$handler":""},"docComment":"Set up character data handler","signature":"xml_set_character_data_handler(resource $parser ,callable $handler )","inheritdoc":0,"modifier":[],"return":""},"xml_set_default_handler":{"params":{"$parser":"","$handler":""},"docComment":"Set up default handler","signature":"xml_set_default_handler(resource $parser ,callable $handler )","inheritdoc":0,"modifier":[],"return":""},"xml_set_element_handler":{"params":{"$parser":"","$start_element_handler":"","$end_element_handler":""},"docComment":"Set up start and end element handlers","signature":"xml_set_element_handler(resource $parser ,callable $start_element_handler ,callable $end_element_handler )","inheritdoc":0,"modifier":[],"return":""},"xml_set_end_namespace_decl_handler":{"params":{"$parser":"","$handler":""},"docComment":"Set up end namespace declaration handler","signature":"xml_set_end_namespace_decl_handler(resource $parser ,callable $handler )","inheritdoc":0,"modifier":[],"return":""},"xml_set_external_entity_ref_handler":{"params":{"$parser":"","$handler":""},"docComment":"Set up external entity reference handler","signature":"xml_set_external_entity_ref_handler(resource $parser ,callable $handler )","inheritdoc":0,"modifier":[],"return":""},"xml_set_notation_decl_handler":{"params":{"$parser":"","$handler":""},"docComment":"Set up notation declaration handler","signature":"xml_set_notation_decl_handler(resource $parser ,callable $handler )","inheritdoc":0,"modifier":[],"return":""},"xml_set_object":{"params":{"$parser":"","&$object":""},"docComment":"Use XML Parser within an object","signature":"xml_set_object(resource $parser ,object &$object )","inheritdoc":0,"modifier":[],"return":""},"xml_set_processing_instruction_handler":{"params":{"$parser":"","$handler":""},"docComment":"\n   Set up processing instruction (PI) handler\n  ","signature":"xml_set_processing_instruction_handler(resource $parser ,callable $handler )","inheritdoc":0,"modifier":[],"return":""},"xml_set_start_namespace_decl_handler":{"params":{"$parser":"","$handler":""},"docComment":"\n   Set up start namespace declaration handler\n  ","signature":"xml_set_start_namespace_decl_handler(resource $parser ,callable $handler )","inheritdoc":0,"modifier":[],"return":""},"xml_set_unparsed_entity_decl_handler":{"params":{"$parser":"","$handler":""},"docComment":"\n   Set up unparsed entity declaration handler\n  ","signature":"xml_set_unparsed_entity_decl_handler(resource $parser ,callable $handler )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::endAttribute":{"params":{"$xmlwriter":""},"docComment":"End attribute","signature":"xmlwriter_end_attribute(resource $xmlwriter )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::endCData":{"params":{"$xmlwriter":""},"docComment":"End current CDATA","signature":"xmlwriter_end_cdata(resource $xmlwriter )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::endComment":{"params":{"$xmlwriter":""},"docComment":"Create end comment","signature":"xmlwriter_end_comment(resource $xmlwriter )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::endDocument":{"params":{"$xmlwriter":""},"docComment":"End current document","signature":"xmlwriter_end_document(resource $xmlwriter )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::endDTDAttlist":{"params":{"$xmlwriter":""},"docComment":"End current DTD AttList","signature":"xmlwriter_end_dtd_attlist(resource $xmlwriter )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::endDTDElement":{"params":{"$xmlwriter":""},"docComment":"End current DTD element","signature":"xmlwriter_end_dtd_element(resource $xmlwriter )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::endDTDEntity":{"params":{"$xmlwriter":""},"docComment":"End current DTD Entity","signature":"xmlwriter_end_dtd_entity(resource $xmlwriter )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::endDTD":{"params":{"$xmlwriter":""},"docComment":"End current DTD","signature":"xmlwriter_end_dtd(resource $xmlwriter )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::endElement":{"params":{"$xmlwriter":""},"docComment":"End current element","signature":"xmlwriter_end_element(resource $xmlwriter )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::endPI":{"params":{"$xmlwriter":""},"docComment":"End current PI","signature":"xmlwriter_end_pi(resource $xmlwriter )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::flush":{"params":{"$empty":"","$xmlwriter":""},"docComment":"Flush current buffer","signature":"xmlwriter_flush(resource $xmlwriter ,[bool $empty] )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::fullEndElement":{"params":{"$xmlwriter":""},"docComment":"End current element","signature":"xmlwriter_full_end_element(resource $xmlwriter )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::openMemory":{"params":[],"docComment":"Create new xmlwriter using memory for string output","signature":"xmlwriter_open_memory( )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::openURI":{"params":{"$uri":""},"docComment":"Create new xmlwriter using source uri for output","signature":"xmlwriter_open_uri(string $uri )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::outputMemory":{"params":{"$flush":"","$xmlwriter":""},"docComment":"Returns current buffer","signature":"xmlwriter_output_memory(resource $xmlwriter ,[bool $flush] )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::setIndentString":{"params":{"$indentString":"","$xmlwriter":""},"docComment":"Set string used for indenting","signature":"xmlwriter_set_indent_string(resource $xmlwriter ,string $indentString )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::setIndent":{"params":{"$indent":"","$xmlwriter":""},"docComment":"Toggle indentation on\/off","signature":"xmlwriter_set_indent(resource $xmlwriter ,bool $indent )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::startAttributeNS":{"params":{"$prefix":"","$name":"","$uri":"","$xmlwriter":""},"docComment":"Create start namespaced attribute","signature":"xmlwriter_start_attribute_ns(resource $xmlwriter ,string $prefix ,string $name ,string $uri )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::startAttribute":{"params":{"$name":"","$xmlwriter":""},"docComment":"Create start attribute","signature":"xmlwriter_start_attribute(resource $xmlwriter ,string $name )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::startCData":{"params":{"$xmlwriter":""},"docComment":"Create start CDATA tag","signature":"xmlwriter_start_cdata(resource $xmlwriter )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::startComment":{"params":{"$xmlwriter":""},"docComment":"Create start comment","signature":"xmlwriter_start_comment(resource $xmlwriter )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::startDocument":{"params":{"$version":"","$encoding":"","$standalone":"","$xmlwriter":""},"docComment":"Create document tag","signature":"xmlwriter_start_document(resource $xmlwriter ,[string $version] ,[string $encoding] ,string $standalone )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::startDTDAttlist":{"params":{"$name":"","$xmlwriter":""},"docComment":"Create start DTD AttList","signature":"xmlwriter_start_dtd_attlist(resource $xmlwriter ,string $name )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::startDTDElement":{"params":{"$qualifiedName":"","$xmlwriter":""},"docComment":"Create start DTD element","signature":"xmlwriter_start_dtd_element(resource $xmlwriter ,string $qualifiedName )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::startDTDEntity":{"params":{"$name":"","$isparam":"","$xmlwriter":""},"docComment":"Create start DTD Entity","signature":"xmlwriter_start_dtd_entity(resource $xmlwriter ,string $name ,bool $isparam )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::startDTD":{"params":{"$qualifiedName":"","$publicId":"","$systemId":"","$xmlwriter":""},"docComment":"Create start DTD tag","signature":"xmlwriter_start_dtd(resource $xmlwriter ,string $qualifiedName ,string $publicId ,string $systemId )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::startElementNS":{"params":{"$prefix":"","$name":"","$uri":"","$xmlwriter":""},"docComment":"Create start namespaced element tag","signature":"xmlwriter_start_element_ns(resource $xmlwriter ,string $prefix ,string $name ,string $uri )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::startElement":{"params":{"$name":"","$xmlwriter":""},"docComment":"Create start element tag","signature":"xmlwriter_start_element(resource $xmlwriter ,string $name )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::startPI":{"params":{"$target":"","$xmlwriter":""},"docComment":"Create start PI tag","signature":"xmlwriter_start_pi(resource $xmlwriter ,string $target )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::text":{"params":{"$content":"","$xmlwriter":""},"docComment":"Write text","signature":"xmlwriter_text(resource $xmlwriter ,string $content )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::writeAttributeNS":{"params":{"$prefix":"","$name":"","$uri":"","$content":"","$xmlwriter":""},"docComment":"Write full namespaced attribute","signature":"xmlwriter_write_attribute_ns(resource $xmlwriter ,string $prefix ,string $name ,string $uri ,string $content )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::writeAttribute":{"params":{"$name":"","$value":"","$xmlwriter":""},"docComment":"Write full attribute","signature":"xmlwriter_write_attribute(resource $xmlwriter ,string $name ,string $value )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::writeCData":{"params":{"$content":"","$xmlwriter":""},"docComment":"Write full CDATA tag","signature":"xmlwriter_write_cdata(resource $xmlwriter ,string $content )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::writeComment":{"params":{"$content":"","$xmlwriter":""},"docComment":"Write full comment tag","signature":"xmlwriter_write_comment(resource $xmlwriter ,string $content )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::writeDTDAttlist":{"params":{"$name":"","$content":"","$xmlwriter":""},"docComment":"Write full DTD AttList tag","signature":"xmlwriter_write_dtd_attlist(resource $xmlwriter ,string $name ,string $content )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::writeDTDElement":{"params":{"$name":"","$content":"","$xmlwriter":""},"docComment":"Write full DTD element tag","signature":"xmlwriter_write_dtd_element(resource $xmlwriter ,string $name ,string $content )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::writeDTDEntity":{"params":{"$name":"","$content":"","$pe":"","$pubid":"","$sysid":"","$ndataid":"","$xmlwriter":""},"docComment":"Write full DTD Entity tag","signature":"xmlwriter_write_dtd_entity(resource $xmlwriter ,string $name ,string $content ,bool $pe ,string $pubid ,string $sysid ,string $ndataid )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::writeDTD":{"params":{"$name":"","$publicId":"","$systemId":"","$subset":"","$xmlwriter":""},"docComment":"Write full DTD tag","signature":"xmlwriter_write_dtd(resource $xmlwriter ,string $name ,string $publicId ,string $systemId ,string $subset )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::writeElementNS":{"params":{"$prefix":"","$name":"","$uri":"","$content":"","$xmlwriter":""},"docComment":"Write full namespaced element tag","signature":"xmlwriter_write_element_ns(resource $xmlwriter ,string $prefix ,string $name ,string $uri ,string $content )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::writeElement":{"params":{"$name":"","$content":"","$xmlwriter":""},"docComment":"Write full element tag","signature":"xmlwriter_write_element(resource $xmlwriter ,string $name ,string $content )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::writePI":{"params":{"$target":"","$content":"","$xmlwriter":""},"docComment":"Writes a PI","signature":"xmlwriter_write_pi(resource $xmlwriter ,string $target ,string $content )","inheritdoc":0,"modifier":[],"return":""},"XMLWriter::writeRaw":{"params":{"$content":"","$xmlwriter":""},"docComment":"Write a raw XML text","signature":"xmlwriter_write_raw(resource $xmlwriter ,string $content )","inheritdoc":0,"modifier":[],"return":""},"zip_close":{"params":{"$zip":""},"docComment":"Close a ZIP file archive","signature":"zip_close(resource $zip )","inheritdoc":0,"modifier":[],"return":""},"zip_entry_close":{"params":{"$zip_entry":""},"docComment":"Close a directory entry","signature":"zip_entry_close(resource $zip_entry )","inheritdoc":0,"modifier":[],"return":""},"zip_entry_compressedsize":{"params":{"$zip_entry":""},"docComment":"Retrieve the compressed size of a directory entry","signature":"zip_entry_compressedsize(resource $zip_entry )","inheritdoc":0,"modifier":[],"return":""},"zip_entry_compressionmethod":{"params":{"$zip_entry":""},"docComment":"Retrieve the compression method of a directory entry","signature":"zip_entry_compressionmethod(resource $zip_entry )","inheritdoc":0,"modifier":[],"return":""},"zip_entry_filesize":{"params":{"$zip_entry":""},"docComment":"Retrieve the actual file size of a directory entry","signature":"zip_entry_filesize(resource $zip_entry )","inheritdoc":0,"modifier":[],"return":""},"zip_entry_name":{"params":{"$zip_entry":""},"docComment":"Retrieve the name of a directory entry","signature":"zip_entry_name(resource $zip_entry )","inheritdoc":0,"modifier":[],"return":""},"zip_entry_open":{"params":{"$zip":"","$zip_entry":"","$mode":""},"docComment":"Open a directory entry for reading","signature":"zip_entry_open(resource $zip ,resource $zip_entry ,string $mode )","inheritdoc":0,"modifier":[],"return":""},"zip_entry_read":{"params":{"$zip_entry":"","$length":""},"docComment":"Read from an open directory entry","signature":"zip_entry_read(resource $zip_entry ,[int $length] )","inheritdoc":0,"modifier":[],"return":""},"zip_open":{"params":{"$filename":""},"docComment":"Open a ZIP file archive","signature":"zip_open(string $filename )","inheritdoc":0,"modifier":[],"return":""},"zip_read":{"params":{"$zip":""},"docComment":"Read next entry in a ZIP file archive","signature":"zip_read(resource $zip )","inheritdoc":0,"modifier":[],"return":""},"apc_add":{"params":{"$key":"","$var":"","$ttl":"","$values":"","$unused":""},"docComment":"\n   Cache a new variable in the data store\n  ","signature":"apc_add(array $values ,mixed $unused ,[int $ttl] )","inheritdoc":0,"modifier":[],"return":""},"apc_bin_dump":{"params":{"$files":"","$user_vars":""},"docComment":"Get a binary dump of the given files and user variables","signature":"apc_bin_dump(array $files ,array $user_vars )","inheritdoc":0,"modifier":[],"return":""},"apc_bin_dumpfile":{"params":{"$files":"","$user_vars":"","$filename":"","$flags":"","$context":""},"docComment":"Output a binary dump of cached files and user variables to a file","signature":"apc_bin_dumpfile(array $files ,array $user_vars ,string $filename ,[int $flags] ,resource $context )","inheritdoc":0,"modifier":[],"return":""},"apc_bin_load":{"params":{"$data":"","$flags":""},"docComment":"Load a binary dump into the APC file\/user cache","signature":"apc_bin_load(string $data ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"apc_bin_loadfile":{"params":{"$filename":"","$context":"","$flags":""},"docComment":"Load a binary dump from a file into the APC file\/user cache","signature":"apc_bin_loadfile(string $filename ,resource $context ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"apc_cache_info":{"params":{"$cache_type":"","$limited":""},"docComment":"\n   Retrieves cached information from APC's data store\n  ","signature":"apc_cache_info(string $cache_type ,[bool $limited] )","inheritdoc":0,"modifier":[],"return":""},"apc_cas":{"params":{"$key":"","$old":"","$new":""},"docComment":"Updates an old value with a new value","signature":"apc_cas(string $key ,int $old ,int $new )","inheritdoc":0,"modifier":[],"return":""},"apc_clear_cache":{"params":{"$cache_type":""},"docComment":"\n   Clears the APC cache\n  ","signature":"apc_clear_cache(string $cache_type )","inheritdoc":0,"modifier":[],"return":""},"apc_compile_file":{"params":{"$filename":"","$atomic":""},"docComment":"\n   Stores a file in the bytecode cache, bypassing all filters.\n  ","signature":"apc_compile_file(string $filename ,[bool $atomic] )","inheritdoc":0,"modifier":[],"return":""},"apc_dec":{"params":{"$key":"","$step":"","&$success":""},"docComment":"Decrease a stored number","signature":"apc_dec(string $key ,[int $step] ,bool &$success )","inheritdoc":0,"modifier":[],"return":""},"apc_define_constants":{"params":{"$key":"","$constants":"","$case_sensitive":""},"docComment":"\n   Defines a set of constants for retrieval and mass-definition \n  ","signature":"apc_define_constants(string $key ,array $constants ,[bool $case_sensitive] )","inheritdoc":0,"modifier":[],"return":""},"apc_delete_file":{"params":{"$keys":""},"docComment":"Deletes files from the opcode cache","signature":"apc_delete_file(mixed $keys )","inheritdoc":0,"modifier":[],"return":""},"apc_delete":{"params":{"$key":""},"docComment":"\n   Removes a stored variable from the cache\n  ","signature":"apc_delete(string $key )","inheritdoc":0,"modifier":[],"return":""},"apc_exists":{"params":{"$keys":""},"docComment":"Checks if APC key exists","signature":"apc_exists(mixed $keys )","inheritdoc":0,"modifier":[],"return":""},"apc_fetch":{"params":{"$key":"","&$success":""},"docComment":"\n   Fetch a stored variable from the cache\n  ","signature":"apc_fetch(mixed $key ,bool &$success )","inheritdoc":0,"modifier":[],"return":""},"apc_inc":{"params":{"$key":"","$step":"","&$success":""},"docComment":"Increase a stored number","signature":"apc_inc(string $key ,[int $step] ,bool &$success )","inheritdoc":0,"modifier":[],"return":""},"apc_load_constants":{"params":{"$key":"","$case_sensitive":""},"docComment":"\n   Loads a set of constants from the cache\n  ","signature":"apc_load_constants(string $key ,[bool $case_sensitive] )","inheritdoc":0,"modifier":[],"return":""},"apc_sma_info":{"params":{"$limited":""},"docComment":"\n   Retrieves APC's Shared Memory Allocation information\n  ","signature":"apc_sma_info([bool $limited] )","inheritdoc":0,"modifier":[],"return":""},"apc_store":{"params":{"$key":"","$var":"","$ttl":"","$values":"","$unused":""},"docComment":"\n   Cache a variable in the data store\n  ","signature":"apc_store(array $values ,mixed $unused ,[int $ttl] )","inheritdoc":0,"modifier":[],"return":""},"apd_breakpoint":{"params":{"$debug_level":""},"docComment":"Stops the interpreter and waits on a CR from the socket","signature":"apd_breakpoint(int $debug_level )","inheritdoc":0,"modifier":[],"return":""},"apd_callstack":{"params":[],"docComment":"Returns the current call stack as an array","signature":"apd_callstack( )","inheritdoc":0,"modifier":[],"return":""},"apd_clunk":{"params":{"$warning":"","$delimiter":""},"docComment":"Throw a warning and a callstack","signature":"apd_clunk(string $warning ,string $delimiter )","inheritdoc":0,"modifier":[],"return":""},"apd_continue":{"params":{"$debug_level":""},"docComment":"Restarts the interpreter","signature":"apd_continue(int $debug_level )","inheritdoc":0,"modifier":[],"return":""},"apd_croak":{"params":{"$warning":"","$delimiter":""},"docComment":"Throw an error, a callstack and then exit","signature":"apd_croak(string $warning ,string $delimiter )","inheritdoc":0,"modifier":[],"return":""},"apd_dump_function_table":{"params":[],"docComment":"Outputs the current function table","signature":"apd_dump_function_table( )","inheritdoc":0,"modifier":[],"return":""},"apd_dump_persistent_resources":{"params":[],"docComment":"Return all persistent resources as an array","signature":"apd_dump_persistent_resources( )","inheritdoc":0,"modifier":[],"return":""},"apd_dump_regular_resources":{"params":[],"docComment":"Return all current regular resources as an array","signature":"apd_dump_regular_resources( )","inheritdoc":0,"modifier":[],"return":""},"apd_echo":{"params":{"$output":""},"docComment":"Echo to the debugging socket","signature":"apd_echo(string $output )","inheritdoc":0,"modifier":[],"return":""},"apd_get_active_symbols":{"params":[],"docComment":"Get an array of the current variables names in the local scope","signature":"apd_get_active_symbols( )","inheritdoc":0,"modifier":[],"return":""},"apd_set_pprof_trace":{"params":{"$dump_directory":"","$fragment":""},"docComment":"Starts the session debugging","signature":"apd_set_pprof_trace(string $dump_directory ,[string $fragment] )","inheritdoc":0,"modifier":[],"return":""},"apd_set_session_trace_socket":{"params":{"$tcp_server":"","$socket_type":"","$port":"","$debug_level":""},"docComment":"Starts the remote session debugging","signature":"apd_set_session_trace_socket(string $tcp_server ,int $socket_type ,int $port ,int $debug_level )","inheritdoc":0,"modifier":[],"return":""},"apd_set_session_trace":{"params":{"$debug_level":"","$dump_directory":""},"docComment":"Starts the session debugging","signature":"apd_set_session_trace(int $debug_level ,string $dump_directory )","inheritdoc":0,"modifier":[],"return":""},"apd_set_session":{"params":{"$debug_level":""},"docComment":"Changes or sets the current debugging level","signature":"apd_set_session(int $debug_level )","inheritdoc":0,"modifier":[],"return":""},"override_function":{"params":{"$function_name":"","$function_args":"","$function_code":""},"docComment":"Overrides built-in functions","signature":"override_function(string $function_name ,string $function_args ,string $function_code )","inheritdoc":0,"modifier":[],"return":""},"rename_function":{"params":{"$original_name":"","$new_name":""},"docComment":"Renames orig_name to new_name in the global function table","signature":"rename_function(string $original_name ,string $new_name )","inheritdoc":0,"modifier":[],"return":""},"bbcode_add_element":{"params":{"$bbcode_container":"","$tag_name":"","$tag_rules":""},"docComment":"Adds a bbcode element","signature":"bbcode_add_element(resource $bbcode_container ,string $tag_name ,array $tag_rules )","inheritdoc":0,"modifier":[],"return":""},"bbcode_add_smiley":{"params":{"$bbcode_container":"","$smiley":"","$replace_by":""},"docComment":"Adds a smiley to the parser","signature":"bbcode_add_smiley(resource $bbcode_container ,string $smiley ,string $replace_by )","inheritdoc":0,"modifier":[],"return":""},"bbcode_create":{"params":{"$bbcode_initial_tags":""},"docComment":"Create a BBCode Resource","signature":"bbcode_create(array $bbcode_initial_tags )","inheritdoc":0,"modifier":[],"return":""},"bbcode_destroy":{"params":{"$bbcode_container":""},"docComment":"Close BBCode_container resource","signature":"bbcode_destroy(resource $bbcode_container )","inheritdoc":0,"modifier":[],"return":""},"bbcode_parse":{"params":{"$bbcode_container":"","$to_parse":""},"docComment":"Parse a string following a given rule set","signature":"bbcode_parse(resource $bbcode_container ,string $to_parse )","inheritdoc":0,"modifier":[],"return":""},"bbcode_set_arg_parser":{"params":{"$bbcode_container":"","$bbcode_arg_parser":""},"docComment":"Attach another parser in order to use another rule set for argument parsing","signature":"bbcode_set_arg_parser(resource $bbcode_container ,resource $bbcode_arg_parser )","inheritdoc":0,"modifier":[],"return":""},"bbcode_set_flags":{"params":{"$bbcode_container":"","$flags":"","$mode":""},"docComment":"Set or alter parser options","signature":"bbcode_set_flags(resource $bbcode_container ,int $flags ,[int $mode] )","inheritdoc":0,"modifier":[],"return":""},"bcompiler_load_exe":{"params":{"$filename":""},"docComment":"Reads and creates classes from a bcompiler exe file","signature":"bcompiler_load_exe(string $filename )","inheritdoc":0,"modifier":[],"return":""},"bcompiler_load":{"params":{"$filename":""},"docComment":"Reads and creates classes from a bz compressed file","signature":"bcompiler_load(string $filename )","inheritdoc":0,"modifier":[],"return":""},"bcompiler_parse_class":{"params":{"$class":"","$callback":""},"docComment":"Reads the bytecodes of a class and calls back to a user function","signature":"bcompiler_parse_class(string $class ,string $callback )","inheritdoc":0,"modifier":[],"return":""},"bcompiler_read":{"params":{"$filehandle":""},"docComment":"Reads and creates classes from a filehandle","signature":"bcompiler_read(resource $filehandle )","inheritdoc":0,"modifier":[],"return":""},"bcompiler_write_class":{"params":{"$filehandle":"","$className":"","$extends":""},"docComment":"Writes a defined class as bytecodes","signature":"bcompiler_write_class(resource $filehandle ,string $className ,string $extends )","inheritdoc":0,"modifier":[],"return":""},"bcompiler_write_constant":{"params":{"$filehandle":"","$constantName":""},"docComment":"Writes a defined constant as bytecodes","signature":"bcompiler_write_constant(resource $filehandle ,string $constantName )","inheritdoc":0,"modifier":[],"return":""},"bcompiler_write_exe_footer":{"params":{"$filehandle":"","$startpos":""},"docComment":"Writes the start pos, and sig to the end of a exe type file","signature":"bcompiler_write_exe_footer(resource $filehandle ,int $startpos )","inheritdoc":0,"modifier":[],"return":""},"bcompiler_write_file":{"params":{"$filehandle":"","$filename":""},"docComment":"Writes a php source file as bytecodes","signature":"bcompiler_write_file(resource $filehandle ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"bcompiler_write_footer":{"params":{"$filehandle":""},"docComment":"Writes the single character \\x00 to indicate End of compiled data","signature":"bcompiler_write_footer(resource $filehandle )","inheritdoc":0,"modifier":[],"return":""},"bcompiler_write_function":{"params":{"$filehandle":"","$functionName":""},"docComment":"Writes a defined function as bytecodes","signature":"bcompiler_write_function(resource $filehandle ,string $functionName )","inheritdoc":0,"modifier":[],"return":""},"bcompiler_write_functions_from_file":{"params":{"$filehandle":"","$fileName":""},"docComment":"Writes all functions defined in a file as bytecodes","signature":"bcompiler_write_functions_from_file(resource $filehandle ,string $fileName )","inheritdoc":0,"modifier":[],"return":""},"bcompiler_write_header":{"params":{"$filehandle":"","$write_ver":""},"docComment":"Writes the bcompiler header","signature":"bcompiler_write_header(resource $filehandle ,string $write_ver )","inheritdoc":0,"modifier":[],"return":""},"bcompiler_write_included_filename":{"params":{"$filehandle":"","$filename":""},"docComment":"Writes an included file as bytecodes","signature":"bcompiler_write_included_filename(resource $filehandle ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"cairo_create":{"params":{"$surface":"CairoSurface"},"docComment":"Returns a new CairoContext object on the requested surface.","signature":"cairo_create(CairoSurface $surface )","inheritdoc":0,"modifier":[],"return":"CairoContext"},"cairo_font_face_get_type":{"params":{"$fontface":"CairoFontFace"},"docComment":"Description","signature":"cairo_font_face_get_type(CairoFontFace $fontface )","inheritdoc":0,"modifier":[],"return":""},"cairo_font_face_status":{"params":{"$fontface":"CairoFontFace"},"docComment":"Description","signature":"(CairoFontFace $fontface )","inheritdoc":0,"modifier":[],"return":""},"cairo_font_options_create":{"params":[],"docComment":"Description","signature":"cairo_font_options_create( )","inheritdoc":0,"modifier":[],"return":"CairoFontOptions"},"cairo_font_options_equal":{"params":{"$options":"CairoFontOptions","$other":"CairoFontOptions"},"docComment":"Description","signature":"cairo_font_options_equal(CairoFontOptions $options ,CairoFontOptions $other )","inheritdoc":0,"modifier":[],"return":""},"cairo_font_options_get_antialias":{"params":{"$options":"CairoFontOptions"},"docComment":"Description","signature":"cairo_font_options_get_antialias(CairoFontOptions $options )","inheritdoc":0,"modifier":[],"return":""},"cairo_font_options_get_hint_metrics":{"params":{"$options":"CairoFontOptions"},"docComment":"Description","signature":"cairo_font_options_get_hint_metrics(CairoFontOptions $options )","inheritdoc":0,"modifier":[],"return":""},"cairo_font_options_get_hint_style":{"params":{"$options":"CairoFontOptions"},"docComment":"Description","signature":"cairo_font_options_get_hint_style(CairoFontOptions $options )","inheritdoc":0,"modifier":[],"return":""},"cairo_font_options_get_subpixel_order":{"params":{"$options":"CairoFontOptions"},"docComment":"Description","signature":"cairo_font_options_get_subpixel_order(CairoFontOptions $options )","inheritdoc":0,"modifier":[],"return":""},"cairo_font_options_hash":{"params":{"$options":"CairoFontOptions"},"docComment":"Description","signature":"cairo_font_options_hash(CairoFontOptions $options )","inheritdoc":0,"modifier":[],"return":""},"cairo_font_options_merge":{"params":{"$options":"CairoFontOptions","$other":"CairoFontOptions"},"docComment":"Description","signature":"cairo_font_options_merge(CairoFontOptions $options ,CairoFontOptions $other )","inheritdoc":0,"modifier":[],"return":""},"cairo_font_options_set_antialias":{"params":{"$options":"CairoFontOptions","$antialias":""},"docComment":"Description","signature":"cairo_font_options_set_antialias(CairoFontOptions $options ,int $antialias )","inheritdoc":0,"modifier":[],"return":""},"cairo_font_options_set_hint_metrics":{"params":{"$options":"CairoFontOptions","$hint_metrics":""},"docComment":"Description","signature":"cairo_font_options_set_hint_metrics(CairoFontOptions $options ,int $hint_metrics )","inheritdoc":0,"modifier":[],"return":""},"cairo_font_options_set_hint_style":{"params":{"$options":"CairoFontOptions","$hint_style":""},"docComment":"Description","signature":"cairo_font_options_set_hint_style(CairoFontOptions $options ,int $hint_style )","inheritdoc":0,"modifier":[],"return":""},"cairo_font_options_set_subpixel_order":{"params":{"$options":"CairoFontOptions","$subpixel_order":""},"docComment":"Description","signature":"cairo_font_options_set_subpixel_order(CairoFontOptions $options ,int $subpixel_order )","inheritdoc":0,"modifier":[],"return":""},"cairo_font_options_status":{"params":{"$options":"CairoFontOptions"},"docComment":"Description","signature":"cairo_font_options_status(CairoFontOptions $options )","inheritdoc":0,"modifier":[],"return":""},"cairo_format_stride_for_width":{"params":{"$format":"","$width":""},"docComment":"Description","signature":"cairo_format_stride_for_width(int $format ,int $width )","inheritdoc":0,"modifier":[],"return":""},"cairo_image_surface_create_for_data":{"params":{"$data":"","$format":"","$width":"","$height":"","$stride":""},"docComment":"Description","signature":"cairo_image_surface_create_for_data(string $data ,int $format ,int $width ,int $height ,[int $stride] )","inheritdoc":0,"modifier":[],"return":"CairoImageSurface"},"cairo_image_surface_create_from_png":{"params":{"$file":""},"docComment":"Description","signature":"cairo_image_surface_create_from_png(string $file )","inheritdoc":0,"modifier":[],"return":"CairoImageSurface"},"cairo_image_surface_create":{"params":{"$format":"","$width":"","$height":""},"docComment":"Description","signature":"cairo_image_surface_create(int $format ,int $width ,int $height )","inheritdoc":0,"modifier":[],"return":"CairoImageSurface"},"cairo_image_surface_get_data":{"params":{"$surface":"CairoImageSurface"},"docComment":"Description","signature":"cairo_image_surface_get_data(CairoImageSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_image_surface_get_format":{"params":{"$surface":"CairoImageSurface"},"docComment":"Description","signature":"cairo_image_surface_get_format(CairoImageSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_image_surface_get_height":{"params":{"$surface":"CairoImageSurface"},"docComment":"Description","signature":"cairo_image_surface_get_height(CairoImageSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_image_surface_get_stride":{"params":{"$surface":"CairoImageSurface"},"docComment":"Description","signature":"cairo_image_surface_get_stride(CairoImageSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_image_surface_get_width":{"params":{"$surface":"CairoImageSurface"},"docComment":"Description","signature":"cairo_image_surface_get_width(CairoImageSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_matrix_create_scale":{"params":{"$sx":"","$sy":""},"docComment":"Creates a new scaling matrix","signature":"cairo_matrix_init_scale(float $sx ,float $sy )","inheritdoc":0,"modifier":["public","static"],"return":""},"cairo_matrix_create_translate":{"params":{"$tx":"","$ty":""},"docComment":"Creates a new translation matrix","signature":"cairo_matrix_init_translate(float $tx ,float $ty )","inheritdoc":0,"modifier":["public","static"],"return":""},"cairo_matrix_invert":{"params":{"$matrix":"CairoMatrix"},"docComment":"Description","signature":"cairo_matrix_invert(CairoMatrix $matrix )","inheritdoc":0,"modifier":[],"return":""},"cairo_matrix_multiply":{"params":{"$matrix1":"CairoMatrix","$matrix2":"CairoMatrix"},"docComment":"Description","signature":"cairo_matrix_multiply(CairoMatrix $matrix1 ,CairoMatrix $matrix2 )","inheritdoc":0,"modifier":[],"return":"CairoMatrix"},"cairo_matrix_rotate":{"params":{"$matrix":"CairoMatrix","$radians":""},"docComment":"Description","signature":"cairo_matrix_rotate(CairoMatrix $matrix ,float $radians )","inheritdoc":0,"modifier":[],"return":""},"cairo_matrix_transform_distance":{"params":{"$matrix":"CairoMatrix","$dx":"","$dy":""},"docComment":"Description","signature":"cairo_matrix_transform_distance(CairoMatrix $matrix ,float $dx ,float $dy )","inheritdoc":0,"modifier":[],"return":""},"cairo_matrix_transform_point":{"params":{"$matrix":"CairoMatrix","$dx":"","$dy":""},"docComment":"Description","signature":"cairo_matrix_transform_point(CairoMatrix $matrix ,float $dx ,float $dy )","inheritdoc":0,"modifier":[],"return":""},"cairo_matrix_translate":{"params":{"$matrix":"CairoMatrix","$tx":"","$ty":""},"docComment":"Description","signature":"cairo_matrix_translate(CairoMatrix $matrix ,float $tx ,float $ty )","inheritdoc":0,"modifier":[],"return":""},"cairo_pattern_add_color_stop_rgb":{"params":{"$pattern":"CairoGradientPattern","$offset":"","$red":"","$green":"","$blue":""},"docComment":"Description","signature":"cairo_pattern_add_color_stop_rgb(CairoGradientPattern $pattern ,float $offset ,float $red ,float $green ,float $blue )","inheritdoc":0,"modifier":[],"return":""},"cairo_pattern_add_color_stop_rgba":{"params":{"$pattern":"CairoGradientPattern","$offset":"","$red":"","$green":"","$blue":"","$alpha":""},"docComment":"Description","signature":"cairo_pattern_add_color_stop_rgba(CairoGradientPattern $pattern ,float $offset ,float $red ,float $green ,float $blue ,float $alpha )","inheritdoc":0,"modifier":[],"return":""},"cairo_pattern_create_for_surface":{"params":{"$surface":"CairoSurface"},"docComment":"Description","signature":"cairo_pattern_create_for_surface(CairoSurface $surface )","inheritdoc":0,"modifier":[],"return":"CairoPattern"},"cairo_pattern_create_linear":{"params":{"$x0":"","$y0":"","$x1":"","$y1":""},"docComment":"Description","signature":"cairo_pattern_create_linear(float $x0 ,float $y0 ,float $x1 ,float $y1 )","inheritdoc":0,"modifier":[],"return":"CairoPattern"},"cairo_pattern_create_radial":{"params":{"$x0":"","$y0":"","$r0":"","$x1":"","$y1":"","$r1":""},"docComment":"Description","signature":"cairo_pattern_create_radial(float $x0 ,float $y0 ,float $r0 ,float $x1 ,float $y1 ,float $r1 )","inheritdoc":0,"modifier":[],"return":"CairoPattern"},"cairo_pattern_create_rgb":{"params":{"$red":"","$green":"","$blue":""},"docComment":"Description","signature":"cairo_pattern_create_rgb(float $red ,float $green ,float $blue )","inheritdoc":0,"modifier":[],"return":"CairoPattern"},"cairo_pattern_create_rgba":{"params":{"$red":"","$green":"","$blue":"","$alpha":""},"docComment":"Description","signature":"cairo_pattern_create_rgba(float $red ,float $green ,float $blue ,float $alpha )","inheritdoc":0,"modifier":[],"return":"CairoPattern"},"cairo_pattern_get_color_stop_count":{"params":{"$pattern":"CairoGradientPattern"},"docComment":"Description","signature":"cairo_pattern_get_color_stop_count(CairoGradientPattern $pattern )","inheritdoc":0,"modifier":[],"return":""},"cairo_pattern_get_color_stop_rgba":{"params":{"$pattern":"CairoGradientPattern","$index":""},"docComment":"Description","signature":"cairo_pattern_get_color_stop_rgba(CairoGradientPattern $pattern ,int $index )","inheritdoc":0,"modifier":[],"return":""},"cairo_pattern_get_extend":{"params":{"$pattern":""},"docComment":"Description","signature":"cairo_pattern_get_extend(string $pattern )","inheritdoc":0,"modifier":[],"return":""},"cairo_pattern_get_filter":{"params":{"$pattern":"CairoSurfacePattern"},"docComment":"Description","signature":"cairo_pattern_get_filter(CairoSurfacePattern $pattern )","inheritdoc":0,"modifier":[],"return":""},"cairo_pattern_get_linear_points":{"params":{"$pattern":"CairoLinearGradient"},"docComment":"Description","signature":"cairo_pattern_get_linear_points(CairoLinearGradient $pattern )","inheritdoc":0,"modifier":[],"return":""},"cairo_pattern_get_matrix":{"params":{"$pattern":"CairoPattern"},"docComment":"Description","signature":"cairo_pattern_get_matrix(CairoPattern $pattern )","inheritdoc":0,"modifier":[],"return":"CairoMatrix"},"cairo_pattern_get_radial_circles":{"params":{"$pattern":"CairoRadialGradient"},"docComment":"Description","signature":"cairo_pattern_get_radial_circles(CairoRadialGradient $pattern )","inheritdoc":0,"modifier":[],"return":""},"cairo_pattern_get_rgba":{"params":{"$pattern":"CairoSolidPattern"},"docComment":"Description","signature":"cairo_pattern_get_rgba(CairoSolidPattern $pattern )","inheritdoc":0,"modifier":[],"return":""},"cairo_pattern_get_surface":{"params":{"$pattern":"CairoSurfacePattern"},"docComment":"Description","signature":"cairo_pattern_get_surface(CairoSurfacePattern $pattern )","inheritdoc":0,"modifier":[],"return":"CairoSurface"},"cairo_pattern_get_type":{"params":{"$pattern":"CairoPattern"},"docComment":"Description","signature":"cairo_pattern_get_type(CairoPattern $pattern )","inheritdoc":0,"modifier":[],"return":""},"cairo_pattern_set_extend":{"params":{"$pattern":"","$extend":""},"docComment":"Description","signature":"cairo_pattern_set_extend(string $pattern ,string $extend )","inheritdoc":0,"modifier":[],"return":""},"cairo_pattern_set_filter":{"params":{"$pattern":"CairoSurfacePattern","$filter":""},"docComment":"Description","signature":"cairo_pattern_set_filter(CairoSurfacePattern $pattern ,int $filter )","inheritdoc":0,"modifier":[],"return":""},"cairo_pattern_set_matrix":{"params":{"$pattern":"CairoPattern","$matrix":"CairoMatrix"},"docComment":"Description","signature":"cairo_pattern_set_matrix(CairoPattern $pattern ,CairoMatrix $matrix )","inheritdoc":0,"modifier":[],"return":""},"cairo_pattern_status":{"params":{"$pattern":"CairoPattern"},"docComment":"Description","signature":"cairo_pattern_status(CairoPattern $pattern )","inheritdoc":0,"modifier":[],"return":""},"cairo_pdf_surface_create":{"params":{"$file":"","$width":"","$height":""},"docComment":"Description","signature":"cairo_pdf_surface_create(string $file ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":"CairoPdfSurface"},"cairo_pdf_surface_set_size":{"params":{"$surface":"CairoPdfSurface","$width":"","$height":""},"docComment":"Description","signature":"cairo_pdf_surface_set_size(CairoPdfSurface $surface ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":""},"cairo_ps_get_levels":{"params":[],"docComment":"Description","signature":"cairo_ps_get_levels( )","inheritdoc":0,"modifier":[],"return":""},"cairo_ps_level_to_string":{"params":{"$level":""},"docComment":"Description","signature":"cairo_ps_level_to_string(int $level )","inheritdoc":0,"modifier":[],"return":""},"cairo_ps_surface_create":{"params":{"$file":"","$width":"","$height":""},"docComment":"Description","signature":"cairo_ps_surface_create(string $file ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":"CairoPsSurface"},"cairo_ps_surface_dsc_begin_page_setup":{"params":{"$surface":"CairoPsSurface"},"docComment":"Description","signature":"cairo_ps_surface_dsc_begin_page_setup(CairoPsSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_ps_surface_dsc_begin_setup":{"params":{"$surface":"CairoPsSurface"},"docComment":"Description","signature":"cairo_ps_surface_dsc_begin_setup(CairoPsSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_ps_surface_dsc_comment":{"params":{"$surface":"CairoPsSurface","$comment":""},"docComment":"Description","signature":"cairo_ps_surface_dsc_comment(CairoPsSurface $surface ,string $comment )","inheritdoc":0,"modifier":[],"return":""},"cairo_ps_surface_get_eps":{"params":{"$surface":"CairoPsSurface"},"docComment":"Description","signature":"cairo_ps_surface_get_eps(CairoPsSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_ps_surface_restrict_to_level":{"params":{"$surface":"CairoPsSurface","$level":""},"docComment":"Description","signature":"cairo_ps_surface_restrict_to_level(CairoPsSurface $surface ,int $level )","inheritdoc":0,"modifier":[],"return":""},"cairo_ps_surface_set_eps":{"params":{"$surface":"CairoPsSurface","$level":""},"docComment":"Description","signature":"cairo_ps_surface_set_eps(CairoPsSurface $surface ,bool $level )","inheritdoc":0,"modifier":[],"return":""},"cairo_ps_surface_set_size":{"params":{"$surface":"CairoPsSurface","$width":"","$height":""},"docComment":"Description","signature":"cairo_ps_surface_set_size(CairoPsSurface $surface ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":""},"cairo_scaled_font_create":{"params":{"$fontface":"CairoFontFace","$matrix":"CairoMatrix","$ctm":"CairoMatrix","$fontoptions":"CairoFontOptions"},"docComment":"Description","signature":"cairo_scaled_font_create(CairoFontFace $fontface ,CairoMatrix $matrix ,CairoMatrix $ctm ,CairoFontOptions $fontoptions )","inheritdoc":0,"modifier":[],"return":"CairoScaledFont"},"cairo_scaled_font_extents":{"params":{"$scaledfont":"CairoScaledFont"},"docComment":"Description","signature":"cairo_scaled_font_extents(CairoScaledFont $scaledfont )","inheritdoc":0,"modifier":[],"return":""},"cairo_scaled_font_get_ctm":{"params":{"$scaledfont":"CairoScaledFont"},"docComment":"Description","signature":"cairo_scaled_font_get_ctm(CairoScaledFont $scaledfont )","inheritdoc":0,"modifier":[],"return":"CairoMatrix"},"cairo_scaled_font_get_font_face":{"params":{"$scaledfont":"CairoScaledFont"},"docComment":"Description","signature":"cairo_scaled_font_get_font_face(CairoScaledFont $scaledfont )","inheritdoc":0,"modifier":[],"return":"CairoFontFace"},"cairo_scaled_font_get_font_matrix":{"params":{"$scaledfont":"CairoScaledFont"},"docComment":"Description","signature":"cairo_scaled_font_get_font_matrix(CairoScaledFont $scaledfont )","inheritdoc":0,"modifier":[],"return":"CairoFontOptions"},"cairo_scaled_font_get_font_options":{"params":{"$scaledfont":"CairoScaledFont"},"docComment":"Description","signature":"cairo_scaled_font_get_font_options(CairoScaledFont $scaledfont )","inheritdoc":0,"modifier":[],"return":"CairoFontOptions"},"cairo_scaled_font_get_scale_matrix":{"params":{"$scaledfont":"CairoScaledFont"},"docComment":"Description","signature":"cairo_scaled_font_get_scale_matrix(CairoScaledFont $scaledfont )","inheritdoc":0,"modifier":[],"return":"CairoMatrix"},"cairo_scaled_font_get_type":{"params":{"$scaledfont":"CairoScaledFont"},"docComment":"Description","signature":"cairo_scaled_font_get_type(CairoScaledFont $scaledfont )","inheritdoc":0,"modifier":[],"return":""},"cairo_scaled_font_glyph_extents":{"params":{"$scaledfont":"CairoScaledFont","$glyphs":""},"docComment":"Description","signature":"cairo_scaled_font_glyph_extents(CairoScaledFont $scaledfont ,array $glyphs )","inheritdoc":0,"modifier":[],"return":""},"cairo_scaled_font_status":{"params":{"$scaledfont":"CairoScaledFont"},"docComment":"Description","signature":"cairo_scaled_font_status(CairoScaledFont $scaledfont )","inheritdoc":0,"modifier":[],"return":""},"cairo_scaled_font_text_extents":{"params":{"$scaledfont":"CairoScaledFont","$text":""},"docComment":"Description","signature":"cairo_scaled_font_text_extents(CairoScaledFont $scaledfont ,string $text )","inheritdoc":0,"modifier":[],"return":""},"cairo_surface_copy_page":{"params":{"$surface":"CairoSurface"},"docComment":"Description","signature":"cairo_surface_copy_page(CairoSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_surface_create_similar":{"params":{"$surface":"CairoSurface","$content":"","$width":"","$height":""},"docComment":"Description","signature":"cairo_surface_create_similar(CairoSurface $surface ,int $content ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":"CairoSurface"},"cairo_surface_finish":{"params":{"$surface":"CairoSurface"},"docComment":"Description","signature":"cairo_surface_finish(CairoSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_surface_flush":{"params":{"$surface":"CairoSurface"},"docComment":"Description","signature":"cairo_surface_flush(CairoSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_surface_get_content":{"params":{"$surface":"CairoSurface"},"docComment":"Description","signature":"cairo_surface_get_content(CairoSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_surface_get_device_offset":{"params":{"$surface":"CairoSurface"},"docComment":"Description","signature":"cairo_surface_get_device_offset(CairoSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_surface_get_font_options":{"params":{"$surface":"CairoSurface"},"docComment":"Description","signature":"cairo_surface_get_font_options(CairoSurface $surface )","inheritdoc":0,"modifier":[],"return":"CairoFontOptions"},"cairo_surface_get_type":{"params":{"$surface":"CairoSurface"},"docComment":"Description","signature":"cairo_surface_get_type(CairoSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_surface_mark_dirty_rectangle":{"params":{"$surface":"CairoSurface","$x":"","$y":"","$width":"","$height":""},"docComment":"Description","signature":"cairo_surface_mark_dirty_rectangle(CairoSurface $surface ,float $x ,float $y ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":""},"cairo_surface_mark_dirty":{"params":{"$surface":"CairoSurface"},"docComment":"Description","signature":"cairo_surface_mark_dirty(CairoSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_surface_set_device_offset":{"params":{"$surface":"CairoSurface","$x":"","$y":""},"docComment":"Description","signature":"cairo_surface_set_device_offset(CairoSurface $surface ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"cairo_surface_set_fallback_resolution":{"params":{"$surface":"CairoSurface","$x":"","$y":""},"docComment":"Description","signature":"cairo_surface_set_fallback_resolution(CairoSurface $surface ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"cairo_surface_show_page":{"params":{"$surface":"CairoSurface"},"docComment":"Description","signature":"cairo_surface_show_page(CairoSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_surface_status":{"params":{"$surface":"CairoSurface"},"docComment":"Description","signature":"cairo_surface_status(CairoSurface $surface )","inheritdoc":0,"modifier":[],"return":""},"cairo_surface_write_to_png":{"params":{"$surface":"CairoSurface","$stream":""},"docComment":"Description","signature":"cairo_surface_write_to_png(CairoSurface $surface ,resource $stream )","inheritdoc":0,"modifier":[],"return":""},"cairo_svg_surface_create":{"params":{"$file":"","$width":"","$height":""},"docComment":"Description","signature":"cairo_svg_surface_create(string $file ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":"CairoSvgSurface"},"cairo_svg_surface_restrict_to_version":{"params":{"$surface":"CairoSvgSurface","$version":""},"docComment":"Description","signature":"cairo_svg_surface_restrict_to_version(CairoSvgSurface $surface ,int $version )","inheritdoc":0,"modifier":[],"return":""},"cairo_svg_version_to_string":{"params":{"$version":""},"docComment":"Description","signature":"cairo_svg_version_to_string(int $version )","inheritdoc":0,"modifier":[],"return":""},"chdb_create":{"params":{"$pathname":"","$data":""},"docComment":"Creates a chdb file","signature":"chdb_create(string $pathname ,array $data )","inheritdoc":0,"modifier":[],"return":""},"classkit_import":{"params":{"$filename":""},"docComment":"Import new class method definitions from a file","signature":"classkit_import(string $filename )","inheritdoc":0,"modifier":[],"return":""},"classkit_method_add":{"params":{"$classname":"","$methodname":"","$args":"","$code":"","$flags":""},"docComment":"Dynamically adds a new method to a given class","signature":"classkit_method_add(string $classname ,string $methodname ,string $args ,string $code ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"classkit_method_copy":{"params":{"$dClass":"","$dMethod":"","$sClass":"","$sMethod":""},"docComment":"Copies a method from class to another","signature":"classkit_method_copy(string $dClass ,string $dMethod ,string $sClass ,string $sMethod )","inheritdoc":0,"modifier":[],"return":""},"classkit_method_redefine":{"params":{"$classname":"","$methodname":"","$args":"","$code":"","$flags":""},"docComment":"Dynamically changes the code of the given method","signature":"classkit_method_redefine(string $classname ,string $methodname ,string $args ,string $code ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"classkit_method_remove":{"params":{"$classname":"","$methodname":""},"docComment":"Dynamically removes the given method","signature":"classkit_method_remove(string $classname ,string $methodname )","inheritdoc":0,"modifier":[],"return":""},"classkit_method_rename":{"params":{"$classname":"","$methodname":"","$newname":""},"docComment":"Dynamically changes the name of the given method","signature":"classkit_method_rename(string $classname ,string $methodname ,string $newname )","inheritdoc":0,"modifier":[],"return":""},"crack_check":{"params":{"$dictionary":"","$password":""},"docComment":"Performs an obscure check with the given password","signature":"crack_check(string $password )","inheritdoc":0,"modifier":[],"return":""},"crack_closedict":{"params":{"$dictionary":""},"docComment":"Closes an open CrackLib dictionary ","signature":"crack_closedict(resource $dictionary )","inheritdoc":0,"modifier":[],"return":""},"crack_getlastmessage":{"params":[],"docComment":"Returns the message from the last obscure check","signature":"crack_getlastmessage( )","inheritdoc":0,"modifier":[],"return":""},"crack_opendict":{"params":{"$dictionary":""},"docComment":"Opens a new CrackLib dictionary","signature":"crack_opendict(string $dictionary )","inheritdoc":0,"modifier":[],"return":""},"cubrid_bind":{"params":{"$req_identifier":"","$bind_index":"","$bind_value":"","$bind_value_type":""},"docComment":"Bind variables to a prepared statement as parameters","signature":"cubrid_bind(resource $req_identifier ,int $bind_index ,mixed $bind_value ,string $bind_value_type )","inheritdoc":0,"modifier":[],"return":""},"cubrid_close_prepare":{"params":{"$req_identifier":""},"docComment":"Close the request handle ","signature":"cubrid_close_prepare(resource $req_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_close_request":{"params":{"$req_identifier":""},"docComment":"Close the request handle ","signature":"cubrid_close_request(resource $req_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_col_get":{"params":{"$conn_identifier":"","$oid":"","$attr_name":""},"docComment":"Get contents of collection type column using OID","signature":"cubrid_col_get(resource $conn_identifier ,string $oid ,string $attr_name )","inheritdoc":0,"modifier":[],"return":""},"cubrid_col_size":{"params":{"$conn_identifier":"","$oid":"","$attr_name":""},"docComment":"Get the number of elements in collection type column using OID","signature":"cubrid_col_size(resource $conn_identifier ,string $oid ,string $attr_name )","inheritdoc":0,"modifier":[],"return":""},"cubrid_column_names":{"params":{"$req_identifier":""},"docComment":"Get the column names in result","signature":"cubrid_column_names(resource $req_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_column_types":{"params":{"$req_identifier":""},"docComment":"Get column types in result","signature":"cubrid_column_types(resource $req_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_commit":{"params":{"$conn_identifier":""},"docComment":"Commit a transaction","signature":"cubrid_commit(resource $conn_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_connect_with_url":{"params":{"$conn_url":"","$userid":"","$passwd":"","$new_link":""},"docComment":"Establish the environment for connecting to CUBRID server","signature":"cubrid_connect_with_url(string $conn_url ,string $userid ,string $passwd ,[bool $new_link] )","inheritdoc":0,"modifier":[],"return":""},"cubrid_connect":{"params":{"$host":"","$port":"","$dbname":"","$userid":"","$passwd":"","$new_link":""},"docComment":"Open a connection to a CUBRID Server","signature":"cubrid_connect(string $host ,int $port ,string $dbname ,string $userid ,string $passwd ,[bool $new_link] )","inheritdoc":0,"modifier":[],"return":""},"cubrid_current_oid":{"params":{"$req_identifier":""},"docComment":"Get OID of the current cursor location","signature":"cubrid_current_oid(resource $req_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_disconnect":{"params":{"$conn_identifier":""},"docComment":"Close a database connection","signature":"cubrid_disconnect(resource $conn_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_drop":{"params":{"$conn_identifier":"","$oid":""},"docComment":"Delete an instance using OID","signature":"cubrid_drop(resource $conn_identifier ,string $oid )","inheritdoc":0,"modifier":[],"return":""},"cubrid_error_code_facility":{"params":[],"docComment":"Get the facility code of error","signature":"cubrid_error_code_facility( )","inheritdoc":0,"modifier":[],"return":""},"cubrid_error_code":{"params":[],"docComment":"Get error code for the most recent function call","signature":"cubrid_error_code( )","inheritdoc":0,"modifier":[],"return":""},"cubrid_error_msg":{"params":[],"docComment":"Get last error message for the most recent function call","signature":"cubrid_error_msg( )","inheritdoc":0,"modifier":[],"return":""},"cubrid_execute":{"params":{"$conn_identifier":"","$sql":"","$option":"","$request_identifier":""},"docComment":"Execute a prepared SQL statement","signature":"cubrid_execute(resource $request_identifier ,int $option )","inheritdoc":0,"modifier":[],"return":""},"cubrid_fetch":{"params":{"$result":"","$type":""},"docComment":"Fetch the next row from a result set","signature":"cubrid_fetch(resource $result ,[int $type] )","inheritdoc":0,"modifier":[],"return":""},"cubrid_free_result":{"params":{"$req_identifier":""},"docComment":"Free the memory occupied by the result data","signature":"cubrid_free_result(resource $req_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_get_autocommit":{"params":{"$conn_identifier":""},"docComment":"Get auto-commit mode of the connection","signature":"cubrid_get_autocommit(resource $conn_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_get_charset":{"params":{"$conn_identifier":""},"docComment":"Return the current CUBRID connection charset","signature":"cubrid_get_charset(resource $conn_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_get_class_name":{"params":{"$conn_identifier":"","$oid":""},"docComment":"Get the class name using OID","signature":"cubrid_get_class_name(resource $conn_identifier ,string $oid )","inheritdoc":0,"modifier":[],"return":""},"cubrid_get_client_info":{"params":[],"docComment":"Return the client library version","signature":"cubrid_get_client_info( )","inheritdoc":0,"modifier":[],"return":""},"cubrid_get_db_parameter":{"params":{"$conn_identifier":""},"docComment":"Returns the CUBRID database parameters","signature":"cubrid_get_db_parameter(resource $conn_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_get_query_timeout":{"params":{"$req_identifier":""},"docComment":"Get the query timeout value of the request","signature":"cubrid_get_query_timeout(resource $req_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_get_server_info":{"params":{"$conn_identifier":""},"docComment":"Return the CUBRID server version","signature":"cubrid_get_server_info(resource $conn_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_get":{"params":{"$conn_identifier":"","$oid":"","$attr":""},"docComment":"Get a column using OID","signature":"cubrid_get(resource $conn_identifier ,string $oid ,mixed $attr )","inheritdoc":0,"modifier":[],"return":""},"cubrid_insert_id":{"params":{"$conn_identifier":""},"docComment":"Return the ID generated for the last updated  column","signature":"cubrid_insert_id(resource $conn_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_is_instance":{"params":{"$conn_identifier":"","$oid":""},"docComment":"Check whether the instance pointed by OID exists","signature":"cubrid_is_instance(resource $conn_identifier ,string $oid )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob_close":{"params":{"$lob_identifier_array":""},"docComment":"Close BLOB\/CLOB data","signature":"cubrid_lob_close(array $lob_identifier_array )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob_export":{"params":{"$conn_identifier":"","$lob_identifier":"","$path_name":""},"docComment":"Export BLOB\/CLOB data to file","signature":"cubrid_lob_export(resource $conn_identifier ,resource $lob_identifier ,string $path_name )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob_get":{"params":{"$conn_identifier":"","$sql":""},"docComment":"Get BLOB\/CLOB data","signature":"cubrid_lob_get(resource $conn_identifier ,string $sql )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob_send":{"params":{"$conn_identifier":"","$lob_identifier":""},"docComment":"Read BLOB\/CLOB data and send straight to browser","signature":"cubrid_lob_send(resource $conn_identifier ,resource $lob_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob_size":{"params":{"$lob_identifier":""},"docComment":"Get BLOB\/CLOB data size","signature":"cubrid_lob_size(resource $lob_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob2_bind":{"params":{"$req_identifier":"","$bind_index":"","$bind_value":"","$bind_value_type":""},"docComment":"Bind a lob object or a string as a lob object to a prepared statement as parameters.","signature":"cubrid_lob2_bind(resource $req_identifier ,int $bind_index ,mixed $bind_value ,string $bind_value_type )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob2_close":{"params":{"$lob_identifier":""},"docComment":"Close LOB object.","signature":"cubrid_lob2_close(resource $lob_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob2_export":{"params":{"$lob_identifier":"","$file_name":""},"docComment":"Export the lob object to a file.","signature":"cubrid_lob2_export(resource $lob_identifier ,string $file_name )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob2_import":{"params":{"$lob_identifier":"","$file_name":""},"docComment":"Import BLOB\/CLOB data from a file.","signature":"cubrid_lob2_import(resource $lob_identifier ,string $file_name )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob2_new":{"params":{"$conn_identifier":"","$type":""},"docComment":"Create a lob object.","signature":"cubrid_lob2_new(resource $conn_identifier ,[string $type] )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob2_read":{"params":{"$lob_identifier":"","$len":""},"docComment":"Read from BLOB\/CLOB data.","signature":"cubrid_lob2_read(resource $lob_identifier ,int $len )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob2_seek64":{"params":{"$lob_identifier":"","$offset":"","$origin":""},"docComment":"Move the cursor of a lob object.","signature":"cubrid_lob2_seek64(resource $lob_identifier ,string $offset ,[int $origin] )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob2_seek":{"params":{"$lob_identifier":"","$offset":"","$origin":""},"docComment":"Move the cursor of a lob object.","signature":"cubrid_lob2_seek(resource $lob_identifier ,int $offset ,[int $origin] )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob2_size64":{"params":{"$lob_identifier":""},"docComment":"Get a lob object's size.","signature":"cubrid_lob2_size64(resource $lob_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob2_size":{"params":{"$lob_identifier":""},"docComment":"Get a lob object's size.","signature":"cubrid_lob2_size(resource $lob_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob2_tell64":{"params":{"$lob_identifier":""},"docComment":"Tell the cursor position of the LOB object.","signature":"cubrid_lob2_tell64(resource $lob_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob2_tell":{"params":{"$lob_identifier":""},"docComment":"Tell the cursor position of the LOB object.","signature":"cubrid_lob2_tell(resource $lob_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lob2_write":{"params":{"$lob_identifier":"","$buf":""},"docComment":"Write to a lob object.","signature":"cubrid_lob2_write(resource $lob_identifier ,string $buf )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lock_read":{"params":{"$conn_identifier":"","$oid":""},"docComment":"Set a read lock on the given OID","signature":"cubrid_lock_read(resource $conn_identifier ,string $oid )","inheritdoc":0,"modifier":[],"return":""},"cubrid_lock_write":{"params":{"$conn_identifier":"","$oid":""},"docComment":"Set a write lock on the given OID","signature":"cubrid_lock_write(resource $conn_identifier ,string $oid )","inheritdoc":0,"modifier":[],"return":""},"cubrid_move_cursor":{"params":{"$req_identifier":"","$offset":"","$origin":""},"docComment":"Move the cursor in the result","signature":"cubrid_move_cursor(resource $req_identifier ,int $offset ,[int $origin] )","inheritdoc":0,"modifier":[],"return":""},"cubrid_next_result":{"params":{"$result":""},"docComment":"Get result of next query when executing multiple SQL statements","signature":"cubrid_next_result(resource $result )","inheritdoc":0,"modifier":[],"return":""},"cubrid_num_cols":{"params":{"$result":""},"docComment":"Return the number of columns in the result set","signature":"cubrid_num_cols(resource $result )","inheritdoc":0,"modifier":[],"return":""},"cubrid_num_rows":{"params":{"$result":""},"docComment":"Get the number of rows in the result set","signature":"cubrid_num_rows(resource $result )","inheritdoc":0,"modifier":[],"return":""},"cubrid_pconnect_with_url":{"params":{"$conn_url":"","$userid":"","$passwd":""},"docComment":"Open a persistent connection to CUBRID server","signature":"cubrid_pconnect_with_url(string $conn_url ,string $userid ,string $passwd )","inheritdoc":0,"modifier":[],"return":""},"cubrid_pconnect":{"params":{"$host":"","$port":"","$dbname":"","$userid":"","$passwd":""},"docComment":"Open a persistent connection to a CUBRID server","signature":"cubrid_pconnect(string $host ,int $port ,string $dbname ,string $userid ,string $passwd )","inheritdoc":0,"modifier":[],"return":""},"cubrid_prepare":{"params":{"$conn_identifier":"","$prepare_stmt":"","$option":""},"docComment":"Prepare a SQL statement for execution","signature":"cubrid_prepare(resource $conn_identifier ,string $prepare_stmt ,[int $option] )","inheritdoc":0,"modifier":[],"return":""},"cubrid_put":{"params":{"$conn_identifier":"","$oid":"","$attr":"","$value":""},"docComment":"Update a column using OID","signature":"cubrid_put(resource $conn_identifier ,string $oid ,string $attr ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"cubrid_rollback":{"params":{"$conn_identifier":""},"docComment":"Roll back a transaction","signature":"cubrid_rollback(resource $conn_identifier )","inheritdoc":0,"modifier":[],"return":""},"cubrid_schema":{"params":{"$conn_identifier":"","$schema_type":"","$class_name":"","$attr_name":""},"docComment":"Get the requested schema information","signature":"cubrid_schema(resource $conn_identifier ,int $schema_type ,string $class_name ,string $attr_name )","inheritdoc":0,"modifier":[],"return":""},"cubrid_seq_drop":{"params":{"$conn_identifier":"","$oid":"","$attr_name":"","$index":""},"docComment":"Delete an element from sequence type column using OID","signature":"cubrid_seq_drop(resource $conn_identifier ,string $oid ,string $attr_name ,int $index )","inheritdoc":0,"modifier":[],"return":""},"cubrid_seq_insert":{"params":{"$conn_identifier":"","$oid":"","$attr_name":"","$index":"","$seq_element":""},"docComment":"Insert an element to a sequence type column using OID","signature":"cubrid_seq_insert(resource $conn_identifier ,string $oid ,string $attr_name ,int $index ,string $seq_element )","inheritdoc":0,"modifier":[],"return":""},"cubrid_seq_put":{"params":{"$conn_identifier":"","$oid":"","$attr_name":"","$index":"","$seq_element":""},"docComment":"Update the element value of sequence type column using OID","signature":"cubrid_seq_put(resource $conn_identifier ,string $oid ,string $attr_name ,int $index ,string $seq_element )","inheritdoc":0,"modifier":[],"return":""},"cubrid_set_add":{"params":{"$conn_identifier":"","$oid":"","$attr_name":"","$set_element":""},"docComment":"Insert a single element to set type column using OID","signature":"cubrid_set_add(resource $conn_identifier ,string $oid ,string $attr_name ,string $set_element )","inheritdoc":0,"modifier":[],"return":""},"cubrid_set_autocommit":{"params":{"$conn_identifier":"","$mode":""},"docComment":"Set autocommit mode of the connection","signature":"cubrid_set_autocommit(resource $conn_identifier ,bool $mode )","inheritdoc":0,"modifier":[],"return":""},"cubrid_set_db_parameter":{"params":{"$conn_identifier":"","$param_type":"","$param_value":""},"docComment":"Sets the CUBRID database parameters","signature":"cubrid_set_db_parameter(resource $conn_identifier ,int $param_type ,int $param_value )","inheritdoc":0,"modifier":[],"return":""},"cubrid_set_drop":{"params":{"$conn_identifier":"","$oid":"","$attr_name":"","$set_element":""},"docComment":"Delete an element from set type column using OID","signature":"cubrid_set_drop(resource $conn_identifier ,string $oid ,string $attr_name ,string $set_element )","inheritdoc":0,"modifier":[],"return":""},"cubrid_set_query_timeout":{"params":{"$req_identifier":"","$timeout":""},"docComment":"Set the timeout time of query execution","signature":"cubrid_set_query_timeout(resource $req_identifier ,int $timeout )","inheritdoc":0,"modifier":[],"return":""},"cubrid_version":{"params":[],"docComment":"Get the CUBRID PHP module's version","signature":"cubrid_version( )","inheritdoc":0,"modifier":[],"return":""},"cyrus_authenticate":{"params":{"$connection":"","$mechlist":"","$service":"","$user":"","$minssf":"","$maxssf":"","$authname":"","$password":""},"docComment":"Authenticate against a Cyrus IMAP server","signature":"cyrus_authenticate(resource $connection ,string $mechlist ,string $service ,string $user ,int $minssf ,int $maxssf ,string $authname ,string $password )","inheritdoc":0,"modifier":[],"return":""},"cyrus_bind":{"params":{"$connection":"","$callbacks":""},"docComment":"Bind callbacks to a Cyrus IMAP connection","signature":"cyrus_bind(resource $connection ,array $callbacks )","inheritdoc":0,"modifier":[],"return":""},"cyrus_close":{"params":{"$connection":""},"docComment":"Close connection to a Cyrus IMAP server","signature":"cyrus_close(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"cyrus_connect":{"params":{"$host":"","$port":"","$flags":""},"docComment":"Connect to a Cyrus IMAP server","signature":"cyrus_connect(string $host ,string $port ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"cyrus_query":{"params":{"$connection":"","$query":""},"docComment":"Send a query to a Cyrus IMAP server","signature":"cyrus_query(resource $connection ,string $query )","inheritdoc":0,"modifier":[],"return":""},"cyrus_unbind":{"params":{"$connection":"","$trigger_name":""},"docComment":"Unbind ...","signature":"cyrus_unbind(resource $connection ,string $trigger_name )","inheritdoc":0,"modifier":[],"return":""},"dbplus_add":{"params":{"$relation":"","$tuple":""},"docComment":"Add a tuple to a relation","signature":"dbplus_add(resource $relation ,array $tuple )","inheritdoc":0,"modifier":[],"return":""},"dbplus_aql":{"params":{"$query":"","$server":"","$dbpath":""},"docComment":"Perform AQL query","signature":"dbplus_aql(string $query ,string $server ,string $dbpath )","inheritdoc":0,"modifier":[],"return":""},"dbplus_chdir":{"params":{"$newdir":""},"docComment":"Get\/Set database virtual current directory","signature":"dbplus_chdir(string $newdir )","inheritdoc":0,"modifier":[],"return":""},"dbplus_close":{"params":{"$relation":""},"docComment":"Close a relation","signature":"dbplus_close(resource $relation )","inheritdoc":0,"modifier":[],"return":""},"dbplus_curr":{"params":{"$relation":"","&$tuple":""},"docComment":"Get current tuple from relation","signature":"dbplus_curr(resource $relation ,array &$tuple )","inheritdoc":0,"modifier":[],"return":""},"dbplus_errcode":{"params":{"$errno":""},"docComment":"Get error string for given errorcode or last error","signature":"dbplus_errcode(int $errno )","inheritdoc":0,"modifier":[],"return":""},"dbplus_errno":{"params":[],"docComment":"Get error code for last operation","signature":"dbplus_errno( )","inheritdoc":0,"modifier":[],"return":""},"dbplus_find":{"params":{"$relation":"","$constraints":"","$tuple":""},"docComment":"Set a constraint on a relation","signature":"dbplus_find(resource $relation ,array $constraints ,mixed $tuple )","inheritdoc":0,"modifier":[],"return":""},"dbplus_first":{"params":{"$relation":"","&$tuple":""},"docComment":"Get first tuple from relation","signature":"dbplus_first(resource $relation ,array &$tuple )","inheritdoc":0,"modifier":[],"return":""},"dbplus_flush":{"params":{"$relation":""},"docComment":"Flush all changes made on a relation","signature":"dbplus_flush(resource $relation )","inheritdoc":0,"modifier":[],"return":""},"dbplus_freealllocks":{"params":[],"docComment":"Free all locks held by this client","signature":"dbplus_freealllocks( )","inheritdoc":0,"modifier":[],"return":""},"dbplus_freelock":{"params":{"$relation":"","$tuple":""},"docComment":"Release write lock on tuple","signature":"dbplus_freelock(resource $relation ,string $tuple )","inheritdoc":0,"modifier":[],"return":""},"dbplus_freerlocks":{"params":{"$relation":""},"docComment":"Free all tuple locks on given relation","signature":"dbplus_freerlocks(resource $relation )","inheritdoc":0,"modifier":[],"return":""},"dbplus_getlock":{"params":{"$relation":"","$tuple":""},"docComment":"Get a write lock on a tuple","signature":"dbplus_getlock(resource $relation ,string $tuple )","inheritdoc":0,"modifier":[],"return":""},"dbplus_getunique":{"params":{"$relation":"","$uniqueid":""},"docComment":"Get an id number unique to a relation","signature":"dbplus_getunique(resource $relation ,int $uniqueid )","inheritdoc":0,"modifier":[],"return":""},"dbplus_info":{"params":{"$relation":"","$key":"","&$result":""},"docComment":"Get information about a relation","signature":"dbplus_info(resource $relation ,string $key ,array &$result )","inheritdoc":0,"modifier":[],"return":""},"dbplus_last":{"params":{"$relation":"","&$tuple":""},"docComment":"Get last tuple from relation","signature":"dbplus_last(resource $relation ,array &$tuple )","inheritdoc":0,"modifier":[],"return":""},"dbplus_lockrel":{"params":{"$relation":""},"docComment":"Request write lock on relation","signature":"dbplus_lockrel(resource $relation )","inheritdoc":0,"modifier":[],"return":""},"dbplus_next":{"params":{"$relation":"","&$tuple":""},"docComment":"Get next tuple from relation","signature":"dbplus_next(resource $relation ,array &$tuple )","inheritdoc":0,"modifier":[],"return":""},"dbplus_open":{"params":{"$name":""},"docComment":"Open relation file","signature":"dbplus_open(string $name )","inheritdoc":0,"modifier":[],"return":""},"dbplus_prev":{"params":{"$relation":"","&$tuple":""},"docComment":"Get previous tuple from relation","signature":"dbplus_prev(resource $relation ,array &$tuple )","inheritdoc":0,"modifier":[],"return":""},"dbplus_rchperm":{"params":{"$relation":"","$mask":"","$user":"","$group":""},"docComment":"Change relation permissions","signature":"dbplus_rchperm(resource $relation ,int $mask ,string $user ,string $group )","inheritdoc":0,"modifier":[],"return":""},"dbplus_rcreate":{"params":{"$name":"","$domlist":"","$overwrite":""},"docComment":"Creates a new DB++ relation","signature":"dbplus_rcreate(string $name ,mixed $domlist ,bool $overwrite )","inheritdoc":0,"modifier":[],"return":""},"dbplus_rcrtexact":{"params":{"$name":"","$relation":"","$overwrite":""},"docComment":"Creates an exact but empty copy of a relation including indices","signature":"dbplus_rcrtexact(string $name ,resource $relation ,bool $overwrite )","inheritdoc":0,"modifier":[],"return":""},"dbplus_rcrtlike":{"params":{"$name":"","$relation":"","$overwrite":""},"docComment":"Creates an empty copy of a relation with default indices","signature":"dbplus_rcrtlike(string $name ,resource $relation ,int $overwrite )","inheritdoc":0,"modifier":[],"return":""},"dbplus_resolve":{"params":{"$relation_name":""},"docComment":"Resolve host information for relation","signature":"dbplus_resolve(string $relation_name )","inheritdoc":0,"modifier":[],"return":""},"dbplus_restorepos":{"params":{"$relation":"","$tuple":""},"docComment":"Restore position","signature":"dbplus_restorepos(resource $relation ,array $tuple )","inheritdoc":0,"modifier":[],"return":""},"dbplus_rkeys":{"params":{"$relation":"","$domlist":""},"docComment":"Specify new primary key for a relation","signature":"dbplus_rkeys(resource $relation ,mixed $domlist )","inheritdoc":0,"modifier":[],"return":""},"dbplus_ropen":{"params":{"$name":""},"docComment":"Open relation file local","signature":"dbplus_ropen(string $name )","inheritdoc":0,"modifier":[],"return":""},"dbplus_rquery":{"params":{"$query":"","$dbpath":""},"docComment":"Perform local (raw) AQL query","signature":"dbplus_rquery(string $query ,string $dbpath )","inheritdoc":0,"modifier":[],"return":""},"dbplus_rrename":{"params":{"$relation":"","$name":""},"docComment":"Rename a relation","signature":"dbplus_rrename(resource $relation ,string $name )","inheritdoc":0,"modifier":[],"return":""},"dbplus_rsecindex":{"params":{"$relation":"","$domlist":"","$type":""},"docComment":"Create a new secondary index for a relation","signature":"dbplus_rsecindex(resource $relation ,mixed $domlist ,int $type )","inheritdoc":0,"modifier":[],"return":""},"dbplus_runlink":{"params":{"$relation":""},"docComment":"Remove relation from filesystem","signature":"dbplus_runlink(resource $relation )","inheritdoc":0,"modifier":[],"return":""},"dbplus_rzap":{"params":{"$relation":""},"docComment":"Remove all tuples from relation","signature":"dbplus_rzap(resource $relation )","inheritdoc":0,"modifier":[],"return":""},"dbplus_savepos":{"params":{"$relation":""},"docComment":"Save position","signature":"dbplus_savepos(resource $relation )","inheritdoc":0,"modifier":[],"return":""},"dbplus_setindex":{"params":{"$relation":"","$idx_name":""},"docComment":"Set index","signature":"dbplus_setindex(resource $relation ,string $idx_name )","inheritdoc":0,"modifier":[],"return":""},"dbplus_setindexbynumber":{"params":{"$relation":"","$idx_number":""},"docComment":"Set index by number","signature":"dbplus_setindexbynumber(resource $relation ,int $idx_number )","inheritdoc":0,"modifier":[],"return":""},"dbplus_sql":{"params":{"$query":"","$server":"","$dbpath":""},"docComment":"Perform SQL query","signature":"dbplus_sql(string $query ,string $server ,string $dbpath )","inheritdoc":0,"modifier":[],"return":""},"dbplus_tcl":{"params":{"$sid":"","$script":""},"docComment":"Execute TCL code on server side","signature":"dbplus_tcl(int $sid ,string $script )","inheritdoc":0,"modifier":[],"return":""},"dbplus_tremove":{"params":{"$relation":"","$tuple":"","&$current":""},"docComment":"Remove tuple and return new current tuple","signature":"dbplus_tremove(resource $relation ,array $tuple ,array &$current )","inheritdoc":0,"modifier":[],"return":""},"dbplus_undo":{"params":{"$relation":""},"docComment":"Undo","signature":"dbplus_undo(resource $relation )","inheritdoc":0,"modifier":[],"return":""},"dbplus_undoprepare":{"params":{"$relation":""},"docComment":"Prepare undo","signature":"dbplus_undoprepare(resource $relation )","inheritdoc":0,"modifier":[],"return":""},"dbplus_unlockrel":{"params":{"$relation":""},"docComment":"Give up write lock on relation","signature":"dbplus_unlockrel(resource $relation )","inheritdoc":0,"modifier":[],"return":""},"dbplus_unselect":{"params":{"$relation":""},"docComment":"Remove a constraint from relation","signature":"dbplus_unselect(resource $relation )","inheritdoc":0,"modifier":[],"return":""},"dbplus_update":{"params":{"$relation":"","$old":"","$new":""},"docComment":"Update specified tuple in relation","signature":"dbplus_update(resource $relation ,array $old ,array $new )","inheritdoc":0,"modifier":[],"return":""},"dbplus_xlockrel":{"params":{"$relation":""},"docComment":"Request exclusive lock on relation","signature":"dbplus_xlockrel(resource $relation )","inheritdoc":0,"modifier":[],"return":""},"dbplus_xunlockrel":{"params":{"$relation":""},"docComment":"Free exclusive lock on relation","signature":"dbplus_xunlockrel(resource $relation )","inheritdoc":0,"modifier":[],"return":""},"dbx_close":{"params":{"$link_identifier":""},"docComment":"Close an open connection\/database","signature":"dbx_close(object $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"dbx_compare":{"params":{"$row_a":"","$row_b":"","$column_key":"","$flags":""},"docComment":"Compare two rows for sorting purposes","signature":"dbx_compare(array $row_a ,array $row_b ,string $column_key ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"dbx_connect":{"params":{"$module":"","$host":"","$database":"","$username":"","$password":"","$persistent":""},"docComment":"Open a connection\/database","signature":"dbx_connect(mixed $module ,string $host ,string $database ,string $username ,string $password ,int $persistent )","inheritdoc":0,"modifier":[],"return":""},"dbx_error":{"params":{"$link_identifier":""},"docComment":"\n   Report the error message of the latest function call in the module\n  ","signature":"dbx_error(object $link_identifier )","inheritdoc":0,"modifier":[],"return":""},"dbx_escape_string":{"params":{"$link_identifier":"","$text":""},"docComment":"\n   Escape a string so it can safely be used in an sql-statement\n  ","signature":"dbx_escape_string(object $link_identifier ,string $text )","inheritdoc":0,"modifier":[],"return":""},"dbx_fetch_row":{"params":{"$result_identifier":""},"docComment":"Fetches rows from a query-result that had the \n   flag set","signature":"dbx_fetch_row(object $result_identifier )","inheritdoc":0,"modifier":[],"return":""},"dbx_query":{"params":{"$link_identifier":"","$sql_statement":"","$flags":""},"docComment":"Send a query and fetch all results (if any)","signature":"dbx_query(object $link_identifier ,string $sql_statement ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"dbx_sort":{"params":{"$result":"","$user_compare_function":""},"docComment":"\n   Sort a result from a dbx_query by a custom sort function\n  ","signature":"dbx_sort(object $result ,string $user_compare_function )","inheritdoc":0,"modifier":[],"return":""},"dio_close":{"params":{"$fd":""},"docComment":"Closes the file descriptor given by fd","signature":"dio_close(resource $fd )","inheritdoc":0,"modifier":[],"return":""},"dio_fcntl":{"params":{"$fd":"","$cmd":"","$args":""},"docComment":"Performs a c library fcntl on fd","signature":"dio_fcntl(resource $fd ,int $cmd ,mixed $args )","inheritdoc":0,"modifier":[],"return":""},"dio_open":{"params":{"$filename":"","$flags":"","$mode":""},"docComment":"\n   Opens a file (creating it if necessary) at a lower level than the\n   C library input\/ouput stream functions allow.\n  ","signature":"dio_open(string $filename ,int $flags ,[int $mode] )","inheritdoc":0,"modifier":[],"return":""},"dio_read":{"params":{"$fd":"","$len":""},"docComment":"Reads bytes from a file descriptor","signature":"dio_read(resource $fd ,[int $len] )","inheritdoc":0,"modifier":[],"return":""},"dio_seek":{"params":{"$fd":"","$pos":"","$whence":""},"docComment":"Seeks to pos on fd from whence","signature":"dio_seek(resource $fd ,int $pos ,[int $whence] )","inheritdoc":0,"modifier":[],"return":""},"dio_stat":{"params":{"$fd":""},"docComment":"\n   Gets stat information about the file descriptor fd\n  ","signature":"dio_stat(resource $fd )","inheritdoc":0,"modifier":[],"return":""},"dio_tcsetattr":{"params":{"$fd":"","$options":""},"docComment":"\n   Sets terminal attributes and baud rate for a serial port\n  ","signature":"dio_tcsetattr(resource $fd ,array $options )","inheritdoc":0,"modifier":[],"return":""},"dio_truncate":{"params":{"$fd":"","$offset":""},"docComment":"\n   Truncates file descriptor fd to offset bytes \n  ","signature":"dio_truncate(resource $fd ,int $offset )","inheritdoc":0,"modifier":[],"return":""},"dio_write":{"params":{"$fd":"","$data":"","$len":""},"docComment":"\n   Writes data to fd with optional truncation at length \n  ","signature":"dio_write(resource $fd ,string $data ,[int $len] )","inheritdoc":0,"modifier":[],"return":""},"eio_busy":{"params":{"$delay":"","$pri":"","$callback":"","$data":""},"docComment":"Artificially increase load. Could be useful in tests,\n  benchmarking.","signature":"eio_busy(int $delay ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_cancel":{"params":{"$req":""},"docComment":"Cancels a request","signature":"eio_cancel(resource $req )","inheritdoc":0,"modifier":[],"return":""},"eio_chmod":{"params":{"$path":"","$mode":"","$pri":"","$callback":"","$data":""},"docComment":"Change file\/direcrory permissions.","signature":"eio_chmod(string $path ,int $mode ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_chown":{"params":{"$path":"","$uid":"","$gid":"","$pri":"","$callback":"","$data":""},"docComment":"Change file\/direcrory permissions.","signature":"eio_chown(string $path ,int $uid ,[int $gid] ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_close":{"params":{"$fd":"","$pri":"","$callback":"","$data":""},"docComment":"Close file","signature":"eio_close(mixed $fd ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_custom":{"params":{"$execute":"","$pri":"","$callback":"","$data":""},"docComment":"Execute custom request like any other  call.","signature":"eio_custom(callable $execute ,int $pri ,callable $callback ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_dup2":{"params":{"$fd":"","$fd2":"","$pri":"","$callback":"","$data":""},"docComment":"Duplicate a file descriptor","signature":"eio_dup2(mixed $fd ,mixed $fd2 ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_event_loop":{"params":[],"docComment":"Polls libeio until all requests proceeded","signature":"eio_event_loop( )","inheritdoc":0,"modifier":[],"return":""},"eio_fallocate":{"params":{"$fd":"","$mode":"","$offset":"","$length":"","$pri":"","$callback":"","$data":""},"docComment":"Allows the caller to directly manipulate the allocated disk\n  space for a file","signature":"eio_fallocate(mixed $fd ,int $mode ,int $offset ,int $length ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_fchmod":{"params":{"$fd":"","$mode":"","$pri":"","$callback":"","$data":""},"docComment":"Change file permissions.","signature":"eio_fchmod(mixed $fd ,int $mode ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_fchown":{"params":{"$fd":"","$uid":"","$gid":"","$pri":"","$callback":"","$data":""},"docComment":"Change file ownership","signature":"eio_fchown(mixed $fd ,int $uid ,[int $gid] ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_fdatasync":{"params":{"$fd":"","$pri":"","$callback":"","$data":""},"docComment":"Synchronize a file's in-core state with storage device.","signature":"eio_fdatasync(mixed $fd ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_fstat":{"params":{"$fd":"","$pri":"","$callback":"","$data":""},"docComment":"Get file status","signature":"eio_fstat(mixed $fd ,int $pri ,callable $callback ,mixed $data )","inheritdoc":0,"modifier":[],"return":""},"eio_fstatvfs":{"params":{"$fd":"","$pri":"","$callback":"","$data":""},"docComment":"Get file system statistics","signature":"eio_fstatvfs(mixed $fd ,int $pri ,callable $callback ,mixed $data )","inheritdoc":0,"modifier":[],"return":""},"eio_fsync":{"params":{"$fd":"","$pri":"","$callback":"","$data":""},"docComment":"Synchronize a file's in-core state with storage device","signature":"eio_fsync(mixed $fd ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_ftruncate":{"params":{"$fd":"","$offset":"","$pri":"","$callback":"","$data":""},"docComment":"Truncate a file","signature":"eio_ftruncate(mixed $fd ,[int $offset] ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_futime":{"params":{"$fd":"","$atime":"","$mtime":"","$pri":"","$callback":"","$data":""},"docComment":"Change file last access and modification times","signature":"eio_futime(mixed $fd ,float $atime ,float $mtime ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_get_event_stream":{"params":[],"docComment":"Get stream representing a variable used in internal communications with libeio.","signature":"eio_get_event_stream( )","inheritdoc":0,"modifier":[],"return":""},"eio_get_last_error":{"params":{"$req":""},"docComment":"Returns string describing the last error associated with a request resource","signature":"eio_get_last_error(resource $req )","inheritdoc":0,"modifier":[],"return":""},"eio_grp_add":{"params":{"$grp":"","$req":""},"docComment":"Adds a request to the request group.","signature":"eio_grp_add(resource $grp ,resource $req )","inheritdoc":0,"modifier":[],"return":""},"eio_grp_cancel":{"params":{"$grp":""},"docComment":"Cancels a request group","signature":"eio_grp_cancel(resource $grp )","inheritdoc":0,"modifier":[],"return":""},"eio_grp_limit":{"params":{"$grp":"","$limit":""},"docComment":"Set group limit","signature":"eio_grp_limit(resource $grp ,int $limit )","inheritdoc":0,"modifier":[],"return":""},"eio_grp":{"params":{"$callback":"","$data":""},"docComment":"Createsa request group.","signature":"eio_grp(callable $callback ,[string $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_init":{"params":[],"docComment":"(Re-)initialize Eio","signature":"eio_init( )","inheritdoc":0,"modifier":[],"return":""},"eio_link":{"params":{"$path":"","$new_path":"","$pri":"","$callback":"","$data":""},"docComment":"Create a hardlink for file","signature":"eio_link(string $path ,string $new_path ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_lstat":{"params":{"$path":"","$pri":"","$callback":"","$data":""},"docComment":"Get file status","signature":"eio_lstat(string $path ,int $pri ,callable $callback ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_mkdir":{"params":{"$path":"","$mode":"","$pri":"","$callback":"","$data":""},"docComment":"Create directory","signature":"eio_mkdir(string $path ,int $mode ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_mknod":{"params":{"$path":"","$mode":"","$dev":"","$pri":"","$callback":"","$data":""},"docComment":"Create a special or ordinary file.","signature":"eio_mknod(string $path ,int $mode ,int $dev ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_nop":{"params":{"$pri":"","$callback":"","$data":""},"docComment":"Does nothing, except go through the whole request cycle.","signature":"eio_nop([int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_npending":{"params":[],"docComment":"Returns number of finished, but unhandled requests","signature":"eio_npending( )","inheritdoc":0,"modifier":[],"return":""},"eio_nready":{"params":[],"docComment":"Returns number of not-yet handled requests","signature":"eio_nready( )","inheritdoc":0,"modifier":[],"return":""},"eio_nreqs":{"params":[],"docComment":"Returns number of requests to be processed","signature":"eio_nreqs( )","inheritdoc":0,"modifier":[],"return":""},"eio_nthreads":{"params":[],"docComment":"Returns number of threads currently in use","signature":"eio_nthreads( )","inheritdoc":0,"modifier":[],"return":""},"eio_open":{"params":{"$path":"","$flags":"","$mode":"","$pri":"","$callback":"","$data":""},"docComment":"Opens a file","signature":"eio_open(string $path ,int $flags ,int $mode ,int $pri ,callable $callback ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_poll":{"params":[],"docComment":"Can be to be called whenever there are pending requests that need finishing.","signature":"eio_poll( )","inheritdoc":0,"modifier":[],"return":""},"eio_read":{"params":{"$fd":"","$length":"","$offset":"","$pri":"","$callback":"","$data":""},"docComment":"Read from a file descriptor at given offset.","signature":"eio_read(mixed $fd ,int $length ,int $offset ,int $pri ,callable $callback ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_readahead":{"params":{"$fd":"","$offset":"","$length":"","$pri":"","$callback":"","$data":""},"docComment":"Perform file readahead into page cache","signature":"eio_readahead(mixed $fd ,int $offset ,int $length ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_readdir":{"params":{"$path":"","$flags":"","$pri":"","$callback":"","$data":""},"docComment":"Reads through a whole directory","signature":"eio_readdir(string $path ,int $flags ,int $pri ,callable $callback ,[string $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_readlink":{"params":{"$path":"","$pri":"","$callback":"","$data":""},"docComment":"Read value of a symbolic link.","signature":"eio_readlink(string $path ,int $pri ,callable $callback ,[string $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_realpath":{"params":{"$path":"","$pri":"","$callback":"","$data":""},"docComment":"Get the canonicalized absolute pathname.","signature":"eio_realpath(string $path ,int $pri ,callable $callback ,[string $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_rename":{"params":{"$path":"","$new_path":"","$pri":"","$callback":"","$data":""},"docComment":"Change the name or location of a file.","signature":"eio_rename(string $path ,string $new_path ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_rmdir":{"params":{"$path":"","$pri":"","$callback":"","$data":""},"docComment":"Remove a directory","signature":"eio_rmdir(string $path ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_seek":{"params":{"$fd":"","$offset":"","$whence":"","$pri":"","$callback":"","$data":""},"docComment":"Repositions the offset of the open file associated with the  argument to the argument  according to the directive ","signature":"eio_seek(mixed $fd ,int $offset ,int $whence ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_sendfile":{"params":{"$out_fd":"","$in_fd":"","$offset":"","$length":"","$pri":"","$callback":"","$data":""},"docComment":"Transfer data between file descriptors","signature":"eio_sendfile(mixed $out_fd ,mixed $in_fd ,int $offset ,int $length ,int $pri ,callable $callback ,string $data )","inheritdoc":0,"modifier":[],"return":""},"eio_set_max_idle":{"params":{"$nthreads":""},"docComment":"Set maximum number of idle threads.","signature":"eio_set_max_idle(int $nthreads )","inheritdoc":0,"modifier":[],"return":""},"eio_set_max_parallel":{"params":{"$nthreads":""},"docComment":"Set maximum parallel threads","signature":"eio_set_max_parallel(int $nthreads )","inheritdoc":0,"modifier":[],"return":""},"eio_set_max_poll_reqs":{"params":{"$nreqs":""},"docComment":"Set maximum number of requests processed in a poll.","signature":"eio_set_max_poll_reqs(int $nreqs )","inheritdoc":0,"modifier":[],"return":""},"eio_set_max_poll_time":{"params":{"$nseconds":""},"docComment":"Set maximum poll time","signature":"eio_set_max_poll_time(float $nseconds )","inheritdoc":0,"modifier":[],"return":""},"eio_set_min_parallel":{"params":{"$nthreads":""},"docComment":"Set minimum parallel thread number","signature":"eio_set_min_parallel(string $nthreads )","inheritdoc":0,"modifier":[],"return":""},"eio_stat":{"params":{"$path":"","$pri":"","$callback":"","$data":""},"docComment":"Get file status","signature":"eio_stat(string $path ,int $pri ,callable $callback ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_statvfs":{"params":{"$path":"","$pri":"","$callback":"","$data":""},"docComment":"Get file system statistics","signature":"eio_statvfs(string $path ,int $pri ,callable $callback ,mixed $data )","inheritdoc":0,"modifier":[],"return":""},"eio_symlink":{"params":{"$path":"","$new_path":"","$pri":"","$callback":"","$data":""},"docComment":"Create a symbolic link","signature":"eio_symlink(string $path ,string $new_path ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_sync_file_range":{"params":{"$fd":"","$offset":"","$nbytes":"","$flags":"","$pri":"","$callback":"","$data":""},"docComment":"Sync a file segment with disk","signature":"eio_sync_file_range(mixed $fd ,int $offset ,int $nbytes ,int $flags ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_sync":{"params":{"$pri":"","$callback":"","$data":""},"docComment":"Commit buffer cache to disk","signature":"eio_sync([int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_syncfs":{"params":{"$fd":"","$pri":"","$callback":"","$data":""},"docComment":"Calls Linux' syncfs syscall, if available","signature":"eio_syncfs(mixed $fd ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_truncate":{"params":{"$path":"","$offset":"","$pri":"","$callback":"","$data":""},"docComment":"Truncate a file","signature":"eio_truncate(string $path ,[int $offset] ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_unlink":{"params":{"$path":"","$pri":"","$callback":"","$data":""},"docComment":"Delete a name and possibly the file it refers to","signature":"eio_unlink(string $path ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_utime":{"params":{"$path":"","$atime":"","$mtime":"","$pri":"","$callback":"","$data":""},"docComment":"Change file last access and modification times.","signature":"eio_utime(string $path ,float $atime ,float $mtime ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"eio_write":{"params":{"$fd":"","$str":"","$length":"","$offset":"","$pri":"","$callback":"","$data":""},"docComment":"Write to file","signature":"eio_write(mixed $fd ,string $str ,[int $length] ,[int $offset] ,[int $pri] ,[callable $callback] ,[mixed $data] )","inheritdoc":0,"modifier":[],"return":""},"expect_expectl":{"params":{"$expect":"","$cases":"","&$match":""},"docComment":"Waits until the output from a process matches one\n  of the patterns, a specified time period has passed, or an  is seen\n  ","signature":"expect_expectl(resource $expect ,array $cases ,array &$match )","inheritdoc":0,"modifier":[],"return":""},"expect_popen":{"params":{"$command":""},"docComment":"Execute command via Bourne shell, and open the PTY stream to\n  the process","signature":"expect_popen(string $command )","inheritdoc":0,"modifier":[],"return":""},"fam_cancel_monitor":{"params":{"$fam":"","$fam_monitor":""},"docComment":"Terminate monitoring","signature":"fam_cancel_monitor(resource $fam ,resource $fam_monitor )","inheritdoc":0,"modifier":[],"return":""},"fam_close":{"params":{"$fam":""},"docComment":"Close FAM connection","signature":"fam_close(resource $fam )","inheritdoc":0,"modifier":[],"return":""},"fam_monitor_collection":{"params":{"$fam":"","$dirname":"","$depth":"","$mask":""},"docComment":"Monitor a collection of files in a directory for changes","signature":"fam_monitor_collection(resource $fam ,string $dirname ,int $depth ,string $mask )","inheritdoc":0,"modifier":[],"return":""},"fam_monitor_directory":{"params":{"$fam":"","$dirname":""},"docComment":"Monitor a directory for changes","signature":"fam_monitor_directory(resource $fam ,string $dirname )","inheritdoc":0,"modifier":[],"return":""},"fam_monitor_file":{"params":{"$fam":"","$filename":""},"docComment":"Monitor a regular file for changes","signature":"fam_monitor_file(resource $fam ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"fam_next_event":{"params":{"$fam":""},"docComment":"Get next pending FAM event","signature":"fam_next_event(resource $fam )","inheritdoc":0,"modifier":[],"return":""},"fam_open":{"params":{"$appname":""},"docComment":"Open connection to FAM daemon","signature":"fam_open(string $appname )","inheritdoc":0,"modifier":[],"return":""},"fam_pending":{"params":{"$fam":""},"docComment":"Check for pending FAM events","signature":"fam_pending(resource $fam )","inheritdoc":0,"modifier":[],"return":""},"fam_resume_monitor":{"params":{"$fam":"","$fam_monitor":""},"docComment":"Resume suspended monitoring","signature":"fam_resume_monitor(resource $fam ,resource $fam_monitor )","inheritdoc":0,"modifier":[],"return":""},"fam_suspend_monitor":{"params":{"$fam":"","$fam_monitor":""},"docComment":"Temporarily suspend monitoring","signature":"fam_suspend_monitor(resource $fam ,resource $fam_monitor )","inheritdoc":0,"modifier":[],"return":""},"fdf_add_doc_javascript":{"params":{"$fdf_document":"","$script_name":"","$script_code":""},"docComment":"Adds javascript code to the FDF document","signature":"fdf_add_doc_javascript(resource $fdf_document ,string $script_name ,string $script_code )","inheritdoc":0,"modifier":[],"return":""},"fdf_add_template":{"params":{"$fdf_document":"","$newpage":"","$filename":"","$template":"","$rename":""},"docComment":"Adds a template into the FDF document","signature":"fdf_add_template(resource $fdf_document ,int $newpage ,string $filename ,string $template ,int $rename )","inheritdoc":0,"modifier":[],"return":""},"fdf_close":{"params":{"$fdf_document":""},"docComment":"Close an FDF document","signature":"fdf_close(resource $fdf_document )","inheritdoc":0,"modifier":[],"return":""},"fdf_create":{"params":[],"docComment":"Create a new FDF document","signature":"fdf_create( )","inheritdoc":0,"modifier":[],"return":""},"fdf_enum_values":{"params":{"$fdf_document":"","$function":"","$userdata":""},"docComment":"Call a user defined function for each document value ","signature":"fdf_enum_values(resource $fdf_document ,callable $function ,mixed $userdata )","inheritdoc":0,"modifier":[],"return":""},"fdf_errno":{"params":[],"docComment":"Return error code for last fdf operation","signature":"fdf_errno( )","inheritdoc":0,"modifier":[],"return":""},"fdf_error":{"params":{"$error_code":""},"docComment":"Return error description for FDF error code","signature":"fdf_error([int $error_code] )","inheritdoc":0,"modifier":[],"return":""},"fdf_get_ap":{"params":{"$fdf_document":"","$field":"","$face":"","$filename":""},"docComment":"Get the appearance of a field","signature":"fdf_get_ap(resource $fdf_document ,string $field ,int $face ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"fdf_get_attachment":{"params":{"$fdf_document":"","$fieldname":"","$savepath":""},"docComment":"Extracts uploaded file embedded in the FDF","signature":"fdf_get_attachment(resource $fdf_document ,string $fieldname ,string $savepath )","inheritdoc":0,"modifier":[],"return":""},"fdf_get_encoding":{"params":{"$fdf_document":""},"docComment":"Get the value of the \/Encoding key","signature":"fdf_get_encoding(resource $fdf_document )","inheritdoc":0,"modifier":[],"return":""},"fdf_get_file":{"params":{"$fdf_document":""},"docComment":"Get the value of the \/F key","signature":"fdf_get_file(resource $fdf_document )","inheritdoc":0,"modifier":[],"return":""},"fdf_get_flags":{"params":{"$fdf_document":"","$fieldname":"","$whichflags":""},"docComment":"Gets the flags of a field","signature":"fdf_get_flags(resource $fdf_document ,string $fieldname ,int $whichflags )","inheritdoc":0,"modifier":[],"return":""},"fdf_get_opt":{"params":{"$fdf_document":"","$fieldname":"","$element":""},"docComment":"Gets a value from the opt array of a field","signature":"fdf_get_opt(resource $fdf_document ,string $fieldname ,[int $element] )","inheritdoc":0,"modifier":[],"return":""},"fdf_get_status":{"params":{"$fdf_document":""},"docComment":"Get the value of the \/STATUS key","signature":"fdf_get_status(resource $fdf_document )","inheritdoc":0,"modifier":[],"return":""},"fdf_get_value":{"params":{"$fdf_document":"","$fieldname":"","$which":""},"docComment":"Get the value of a field","signature":"fdf_get_value(resource $fdf_document ,string $fieldname ,[int $which] )","inheritdoc":0,"modifier":[],"return":""},"fdf_get_version":{"params":{"$fdf_document":""},"docComment":"Gets version number for FDF API or file ","signature":"fdf_get_version(resource $fdf_document )","inheritdoc":0,"modifier":[],"return":""},"fdf_header":{"params":[],"docComment":"Sets FDF-specific output headers","signature":"fdf_header( )","inheritdoc":0,"modifier":[],"return":""},"fdf_next_field_name":{"params":{"$fdf_document":"","$fieldname":""},"docComment":"Get the next field name","signature":"fdf_next_field_name(resource $fdf_document ,string $fieldname )","inheritdoc":0,"modifier":[],"return":""},"fdf_open_string":{"params":{"$fdf_data":""},"docComment":"Read a FDF document from a string","signature":"fdf_open_string(string $fdf_data )","inheritdoc":0,"modifier":[],"return":""},"fdf_open":{"params":{"$filename":""},"docComment":"Open a FDF document","signature":"fdf_open(string $filename )","inheritdoc":0,"modifier":[],"return":""},"fdf_remove_item":{"params":{"$fdf_document":"","$fieldname":"","$item":""},"docComment":"Sets target frame for form","signature":"fdf_remove_item(resource $fdf_document ,string $fieldname ,int $item )","inheritdoc":0,"modifier":[],"return":""},"fdf_save_string":{"params":{"$fdf_document":""},"docComment":"Returns the FDF document as a string","signature":"fdf_save_string(resource $fdf_document )","inheritdoc":0,"modifier":[],"return":""},"fdf_save":{"params":{"$fdf_document":"","$filename":""},"docComment":"Save a FDF document","signature":"fdf_save(resource $fdf_document ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"fdf_set_ap":{"params":{"$fdf_document":"","$field_name":"","$face":"","$filename":"","$page_number":""},"docComment":"Set the appearance of a field","signature":"fdf_set_ap(resource $fdf_document ,string $field_name ,int $face ,string $filename ,int $page_number )","inheritdoc":0,"modifier":[],"return":""},"fdf_set_encoding":{"params":{"$fdf_document":"","$encoding":""},"docComment":"Sets FDF character encoding","signature":"fdf_set_encoding(resource $fdf_document ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"fdf_set_file":{"params":{"$fdf_document":"","$url":"","$target_frame":""},"docComment":"Set PDF document to display FDF data in","signature":"fdf_set_file(resource $fdf_document ,string $url ,string $target_frame )","inheritdoc":0,"modifier":[],"return":""},"fdf_set_flags":{"params":{"$fdf_document":"","$fieldname":"","$whichFlags":"","$newFlags":""},"docComment":"Sets a flag of a field","signature":"fdf_set_flags(resource $fdf_document ,string $fieldname ,int $whichFlags ,int $newFlags )","inheritdoc":0,"modifier":[],"return":""},"fdf_set_javascript_action":{"params":{"$fdf_document":"","$fieldname":"","$trigger":"","$script":""},"docComment":"Sets an javascript action of a field","signature":"fdf_set_javascript_action(resource $fdf_document ,string $fieldname ,int $trigger ,string $script )","inheritdoc":0,"modifier":[],"return":""},"fdf_set_on_import_javascript":{"params":{"$fdf_document":"","$script":"","$before_data_import":""},"docComment":"Adds javascript code to be executed when Acrobat opens the FDF","signature":"fdf_set_on_import_javascript(resource $fdf_document ,string $script ,bool $before_data_import )","inheritdoc":0,"modifier":[],"return":""},"fdf_set_opt":{"params":{"$fdf_document":"","$fieldname":"","$element":"","$str1":"","$str2":""},"docComment":"Sets an option of a field","signature":"fdf_set_opt(resource $fdf_document ,string $fieldname ,int $element ,string $str1 ,string $str2 )","inheritdoc":0,"modifier":[],"return":""},"fdf_set_status":{"params":{"$fdf_document":"","$status":""},"docComment":"Set the value of the \/STATUS key","signature":"fdf_set_status(resource $fdf_document ,string $status )","inheritdoc":0,"modifier":[],"return":""},"fdf_set_submit_form_action":{"params":{"$fdf_document":"","$fieldname":"","$trigger":"","$script":"","$flags":""},"docComment":"Sets a submit form action of a field","signature":"fdf_set_submit_form_action(resource $fdf_document ,string $fieldname ,int $trigger ,string $script ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"fdf_set_target_frame":{"params":{"$fdf_document":"","$frame_name":""},"docComment":"Set target frame for form display","signature":"fdf_set_target_frame(resource $fdf_document ,string $frame_name )","inheritdoc":0,"modifier":[],"return":""},"fdf_set_value":{"params":{"$fdf_document":"","$fieldname":"","$value":"","$isName":""},"docComment":"Set the value of a field","signature":"fdf_set_value(resource $fdf_document ,string $fieldname ,mixed $value ,int $isName )","inheritdoc":0,"modifier":[],"return":""},"fdf_set_version":{"params":{"$fdf_document":"","$version":""},"docComment":"Sets version number for a FDF file ","signature":"fdf_set_version(resource $fdf_document ,string $version )","inheritdoc":0,"modifier":[],"return":""},"filepro_fieldcount":{"params":[],"docComment":"Find out how many fields are in a filePro database","signature":"filepro_fieldcount( )","inheritdoc":0,"modifier":[],"return":""},"filepro_fieldname":{"params":{"$field_number":""},"docComment":"Gets the name of a field","signature":"filepro_fieldname(int $field_number )","inheritdoc":0,"modifier":[],"return":""},"filepro_fieldtype":{"params":{"$field_number":""},"docComment":"Gets the type of a field","signature":"filepro_fieldtype(int $field_number )","inheritdoc":0,"modifier":[],"return":""},"filepro_fieldwidth":{"params":{"$field_number":""},"docComment":"Gets the width of a field","signature":"filepro_fieldwidth(int $field_number )","inheritdoc":0,"modifier":[],"return":""},"filepro_retrieve":{"params":{"$row_number":"","$field_number":""},"docComment":"Retrieves data from a filePro database","signature":"filepro_retrieve(int $row_number ,int $field_number )","inheritdoc":0,"modifier":[],"return":""},"filepro_rowcount":{"params":[],"docComment":"Find out how many rows are in a filePro database","signature":"filepro_rowcount( )","inheritdoc":0,"modifier":[],"return":""},"filepro":{"params":{"$directory":""},"docComment":"Read and verify the map file","signature":"filepro(string $directory )","inheritdoc":0,"modifier":[],"return":""},"fribidi_log2vis":{"params":{"$str":"","$direction":"","$charset":""},"docComment":"Convert a logical string to a visual one","signature":"fribidi_log2vis(string $str ,string $direction ,int $charset )","inheritdoc":0,"modifier":[],"return":""},"geoip_continent_code_by_name":{"params":{"$hostname":""},"docComment":"Get the two letter continent code","signature":"geoip_continent_code_by_name(string $hostname )","inheritdoc":0,"modifier":[],"return":""},"geoip_country_code_by_name":{"params":{"$hostname":""},"docComment":"Get the two letter country code","signature":"geoip_country_code_by_name(string $hostname )","inheritdoc":0,"modifier":[],"return":""},"geoip_country_code3_by_name":{"params":{"$hostname":""},"docComment":"Get the three letter country code","signature":"geoip_country_code3_by_name(string $hostname )","inheritdoc":0,"modifier":[],"return":""},"geoip_country_name_by_name":{"params":{"$hostname":""},"docComment":"Get the full country name","signature":"geoip_country_name_by_name(string $hostname )","inheritdoc":0,"modifier":[],"return":""},"geoip_database_info":{"params":{"$database":""},"docComment":"Get GeoIP Database information","signature":"geoip_database_info([int $database] )","inheritdoc":0,"modifier":[],"return":""},"geoip_db_avail":{"params":{"$database":""},"docComment":"Determine if GeoIP Database is available","signature":"geoip_db_avail(int $database )","inheritdoc":0,"modifier":[],"return":""},"geoip_db_filename":{"params":{"$database":""},"docComment":"Returns the filename of the corresponding GeoIP Database","signature":"geoip_db_filename(int $database )","inheritdoc":0,"modifier":[],"return":""},"geoip_db_get_all_info":{"params":[],"docComment":"Returns detailed information about all GeoIP database types","signature":"geoip_db_get_all_info( )","inheritdoc":0,"modifier":[],"return":""},"geoip_id_by_name":{"params":{"$hostname":""},"docComment":"Get the Internet connection type","signature":"geoip_id_by_name(string $hostname )","inheritdoc":0,"modifier":[],"return":""},"geoip_isp_by_name":{"params":{"$hostname":""},"docComment":"Get the Internet Service Provider (ISP) name","signature":"geoip_isp_by_name(string $hostname )","inheritdoc":0,"modifier":[],"return":""},"geoip_org_by_name":{"params":{"$hostname":""},"docComment":"Get the organization name","signature":"geoip_org_by_name(string $hostname )","inheritdoc":0,"modifier":[],"return":""},"geoip_record_by_name":{"params":{"$hostname":""},"docComment":"Returns the detailed City information found in the GeoIP Database","signature":"geoip_record_by_name(string $hostname )","inheritdoc":0,"modifier":[],"return":""},"geoip_region_by_name":{"params":{"$hostname":""},"docComment":"Get the country code and region","signature":"geoip_region_by_name(string $hostname )","inheritdoc":0,"modifier":[],"return":""},"geoip_region_name_by_code":{"params":{"$country_code":"","$region_code":""},"docComment":"Returns the region name for some country and region code combo","signature":"geoip_region_name_by_code(string $country_code ,string $region_code )","inheritdoc":0,"modifier":[],"return":""},"geoip_time_zone_by_country_and_region":{"params":{"$country_code":"","$region_code":""},"docComment":"Returns the time zone for some country and region code combo","signature":"geoip_time_zone_by_country_and_region(string $country_code ,string $region_code )","inheritdoc":0,"modifier":[],"return":""},"gnupg_adddecryptkey":{"params":{"$identifier":"","$fingerprint":"","$passphrase":""},"docComment":"Add a key for decryption","signature":"gnupg_adddecryptkey(resource $identifier ,string $fingerprint ,string $passphrase )","inheritdoc":0,"modifier":[],"return":""},"gnupg_addencryptkey":{"params":{"$identifier":"","$fingerprint":""},"docComment":"Add a key for encryption","signature":"gnupg_addencryptkey(resource $identifier ,string $fingerprint )","inheritdoc":0,"modifier":[],"return":""},"gnupg_addsignkey":{"params":{"$identifier":"","$fingerprint":"","$passphrase":""},"docComment":"Add a key for signing","signature":"gnupg_addsignkey(resource $identifier ,string $fingerprint ,string $passphrase )","inheritdoc":0,"modifier":[],"return":""},"gnupg_cleardecryptkeys":{"params":{"$identifier":""},"docComment":"Removes all keys which were set for decryption before","signature":"gnupg_cleardecryptkeys(resource $identifier )","inheritdoc":0,"modifier":[],"return":""},"gnupg_clearencryptkeys":{"params":{"$identifier":""},"docComment":"Removes all keys which were set for encryption before","signature":"gnupg_clearencryptkeys(resource $identifier )","inheritdoc":0,"modifier":[],"return":""},"gnupg_clearsignkeys":{"params":{"$identifier":""},"docComment":"Removes all keys which were set for signing before","signature":"gnupg_clearsignkeys(resource $identifier )","inheritdoc":0,"modifier":[],"return":""},"gnupg_decrypt":{"params":{"$identifier":"","$text":""},"docComment":"Decrypts a given text","signature":"gnupg_decrypt(resource $identifier ,string $text )","inheritdoc":0,"modifier":[],"return":""},"gnupg_decryptverify":{"params":{"$identifier":"","$text":"","&$plaintext":""},"docComment":"Decrypts and verifies a given text","signature":"gnupg_decryptverify(resource $identifier ,string $text ,string &$plaintext )","inheritdoc":0,"modifier":[],"return":""},"gnupg_encrypt":{"params":{"$identifier":"","$plaintext":""},"docComment":"Encrypts a given text","signature":"gnupg_encrypt(resource $identifier ,string $plaintext )","inheritdoc":0,"modifier":[],"return":""},"gnupg_encryptsign":{"params":{"$identifier":"","$plaintext":""},"docComment":"Encrypts and signs a given text","signature":"gnupg_encryptsign(resource $identifier ,string $plaintext )","inheritdoc":0,"modifier":[],"return":""},"gnupg_export":{"params":{"$identifier":"","$fingerprint":""},"docComment":"Exports a key","signature":"gnupg_export(resource $identifier ,string $fingerprint )","inheritdoc":0,"modifier":[],"return":""},"gnupg_geterror":{"params":{"$identifier":""},"docComment":"Returns the errortext, if a function fails","signature":"gnupg_geterror(resource $identifier )","inheritdoc":0,"modifier":[],"return":""},"gnupg_getprotocol":{"params":{"$identifier":""},"docComment":"Returns the currently active protocol for all operations","signature":"gnupg_getprotocol(resource $identifier )","inheritdoc":0,"modifier":[],"return":""},"gnupg_import":{"params":{"$identifier":"","$keydata":""},"docComment":"Imports a key","signature":"gnupg_import(resource $identifier ,string $keydata )","inheritdoc":0,"modifier":[],"return":""},"gnupg_init":{"params":[],"docComment":"Initialize a connection","signature":"gnupg_init( )","inheritdoc":0,"modifier":[],"return":""},"gnupg_keyinfo":{"params":{"$identifier":"","$pattern":""},"docComment":"Returns an array with information about all keys that matches the given pattern","signature":"gnupg_keyinfo(resource $identifier ,string $pattern )","inheritdoc":0,"modifier":[],"return":""},"gnupg_setarmor":{"params":{"$identifier":"","$armor":""},"docComment":"Toggle armored output","signature":"gnupg_setarmor(resource $identifier ,int $armor )","inheritdoc":0,"modifier":[],"return":""},"gnupg_seterrormode":{"params":{"$identifier":"","$errormode":""},"docComment":"Sets the mode for error_reporting","signature":"gnupg_seterrormode(resource $identifier ,int $errormode )","inheritdoc":0,"modifier":[],"return":""},"gnupg_setsignmode":{"params":{"$identifier":"","$signmode":""},"docComment":"Sets the mode for signing","signature":"gnupg_setsignmode(resource $identifier ,int $signmode )","inheritdoc":0,"modifier":[],"return":""},"gnupg_sign":{"params":{"$identifier":"","$plaintext":""},"docComment":"Signs a given text","signature":"gnupg_sign(resource $identifier ,string $plaintext )","inheritdoc":0,"modifier":[],"return":""},"gnupg_verify":{"params":{"$identifier":"","$signed_text":"","$signature":"","&$plaintext":""},"docComment":"Verifies a signed text","signature":"gnupg_verify(resource $identifier ,string $signed_text ,string $signature ,string &$plaintext )","inheritdoc":0,"modifier":[],"return":""},"gupnp_context_get_host_ip":{"params":{"$context":""},"docComment":"Get the IP address","signature":"gupnp_context_get_host_ip(resource $context )","inheritdoc":0,"modifier":[],"return":""},"gupnp_context_get_port":{"params":{"$context":""},"docComment":"Get the port","signature":"gupnp_context_get_port(resource $context )","inheritdoc":0,"modifier":[],"return":""},"gupnp_context_get_subscription_timeout":{"params":{"$context":""},"docComment":"Get the event subscription timeout","signature":"gupnp_context_get_subscription_timeout(resource $context )","inheritdoc":0,"modifier":[],"return":""},"gupnp_context_host_path":{"params":{"$context":"","$local_path":"","$server_path":""},"docComment":"Start hosting","signature":"gupnp_context_host_path(resource $context ,string $local_path ,string $server_path )","inheritdoc":0,"modifier":[],"return":""},"gupnp_context_new":{"params":{"$host_ip":"","$port":""},"docComment":"Create a new context","signature":"gupnp_context_new(string $host_ip ,[int $port] )","inheritdoc":0,"modifier":[],"return":""},"gupnp_context_set_subscription_timeout":{"params":{"$context":"","$timeout":""},"docComment":"Sets the event subscription timeout","signature":"gupnp_context_set_subscription_timeout(resource $context ,int $timeout )","inheritdoc":0,"modifier":[],"return":""},"gupnp_context_timeout_add":{"params":{"$context":"","$timeout":"","$callback":"","$arg":""},"docComment":"Sets a function to be called at regular intervals","signature":"gupnp_context_timeout_add(resource $context ,int $timeout ,mixed $callback ,mixed $arg )","inheritdoc":0,"modifier":[],"return":""},"gupnp_context_unhost_path":{"params":{"$context":"","$server_path":""},"docComment":"Stop hosting","signature":"gupnp_context_unhost_path(resource $context ,string $server_path )","inheritdoc":0,"modifier":[],"return":""},"gupnp_control_point_browse_start":{"params":{"$cpoint":""},"docComment":"Start browsing","signature":"gupnp_control_point_browse_start(resource $cpoint )","inheritdoc":0,"modifier":[],"return":""},"gupnp_control_point_browse_stop":{"params":{"$cpoint":""},"docComment":"Stop browsing","signature":"gupnp_control_point_browse_stop(resource $cpoint )","inheritdoc":0,"modifier":[],"return":""},"gupnp_control_point_callback_set":{"params":{"$cpoint":"","$signal":"","$callback":"","$arg":""},"docComment":"Set control point callback","signature":"gupnp_control_point_callback_set(resource $cpoint ,int $signal ,mixed $callback ,mixed $arg )","inheritdoc":0,"modifier":[],"return":""},"gupnp_control_point_new":{"params":{"$context":"","$target":""},"docComment":"Create a new control point","signature":"gupnp_control_point_new(resource $context ,string $target )","inheritdoc":0,"modifier":[],"return":""},"gupnp_device_action_callback_set":{"params":{"$root_device":"","$signal":"","$action_name":"","$callback":"","$arg":""},"docComment":"Set device callback function","signature":"gupnp_device_action_callback_set(resource $root_device ,int $signal ,string $action_name ,mixed $callback ,mixed $arg )","inheritdoc":0,"modifier":[],"return":""},"gupnp_device_info_get_service":{"params":{"$root_device":"","$type":""},"docComment":"Get the service with type","signature":"gupnp_device_info_get_service(resource $root_device ,string $type )","inheritdoc":0,"modifier":[],"return":""},"gupnp_device_info_get":{"params":{"$root_device":""},"docComment":"Get info of root device","signature":"gupnp_device_info_get(resource $root_device )","inheritdoc":0,"modifier":[],"return":""},"gupnp_root_device_get_available":{"params":{"$root_device":""},"docComment":"Check whether root device is available","signature":"gupnp_root_device_get_available(resource $root_device )","inheritdoc":0,"modifier":[],"return":""},"gupnp_root_device_get_relative_location":{"params":{"$root_device":""},"docComment":"Get the relative location of root device.","signature":"gupnp_root_device_get_relative_location(resource $root_device )","inheritdoc":0,"modifier":[],"return":""},"gupnp_root_device_new":{"params":{"$context":"","$location":"","$description_dir":""},"docComment":"Create a new root device","signature":"gupnp_root_device_new(resource $context ,string $location ,string $description_dir )","inheritdoc":0,"modifier":[],"return":""},"gupnp_root_device_set_available":{"params":{"$root_device":"","$available":""},"docComment":"Set whether or not root_device is available","signature":"gupnp_root_device_set_available(resource $root_device ,bool $available )","inheritdoc":0,"modifier":[],"return":""},"gupnp_root_device_start":{"params":{"$root_device":""},"docComment":" Start main loop","signature":"gupnp_root_device_start(resource $root_device )","inheritdoc":0,"modifier":[],"return":""},"gupnp_root_device_stop":{"params":{"$root_device":""},"docComment":"Stop main loop","signature":"gupnp_root_device_stop(resource $root_device )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_action_get":{"params":{"$action":"","$name":"","$type":""},"docComment":"Retrieves the specified action arguments","signature":"gupnp_service_action_get(resource $action ,string $name ,int $type )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_action_return_error":{"params":{"$action":"","$error_code":"","$error_description":""},"docComment":"Return error code","signature":"gupnp_service_action_return_error(resource $action ,int $error_code ,string $error_description )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_action_return":{"params":{"$action":""},"docComment":"Return successfully","signature":"gupnp_service_action_return(resource $action )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_action_set":{"params":{"$action":"","$name":"","$type":"","$value":""},"docComment":"Sets the specified action return values","signature":"gupnp_service_action_set(resource $action ,string $name ,int $type ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_freeze_notify":{"params":{"$service":""},"docComment":"Freeze new notifications","signature":"gupnp_service_freeze_notify(resource $service )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_info_get_introspection":{"params":{"$proxy":"","$callback":"","$arg":""},"docComment":"Get resource introspection of service","signature":"gupnp_service_info_get_introspection(resource $proxy ,mixed $callback ,mixed $arg )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_info_get":{"params":{"$proxy":""},"docComment":"Get full info of service","signature":"gupnp_service_info_get(resource $proxy )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_introspection_get_state_variable":{"params":{"$introspection":"","$variable_name":""},"docComment":"Returns the state variable data","signature":"gupnp_service_introspection_get_state_variable(resource $introspection ,string $variable_name )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_notify":{"params":{"$service":"","$name":"","$type":"","$value":""},"docComment":"Notifies listening clients","signature":"gupnp_service_notify(resource $service ,string $name ,int $type ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_proxy_action_get":{"params":{"$proxy":"","$action":"","$name":"","$type":""},"docComment":"Send action to the service and get value","signature":"gupnp_service_proxy_action_get(resource $proxy ,string $action ,string $name ,int $type )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_proxy_action_set":{"params":{"$proxy":"","$action":"","$name":"","$value":"","$type":""},"docComment":"Send action to the service and set value","signature":"gupnp_service_proxy_action_set(resource $proxy ,string $action ,string $name ,mixed $value ,int $type )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_proxy_add_notify":{"params":{"$proxy":"","$value":"","$type":"","$callback":"","$arg":""},"docComment":"Sets up callback for variable change notification","signature":"gupnp_service_proxy_add_notify(resource $proxy ,string $value ,int $type ,mixed $callback ,mixed $arg )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_proxy_callback_set":{"params":{"$proxy":"","$signal":"","$callback":"","$arg":""},"docComment":"Set service proxy callback for signal","signature":"gupnp_service_proxy_callback_set(resource $proxy ,int $signal ,mixed $callback ,mixed $arg )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_proxy_get_subscribed":{"params":{"$proxy":""},"docComment":"Check whether subscription is valid to the service","signature":"gupnp_service_proxy_get_subscribed(resource $proxy )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_proxy_remove_notify":{"params":{"$proxy":"","$value":""},"docComment":"Cancels the variable change notification","signature":"gupnp_service_proxy_remove_notify(resource $proxy ,string $value )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_proxy_send_action":{"params":{"$proxy":"","$action":"","$in_params":"","$out_params":""},"docComment":"Send action with multiple parameters synchronously","signature":"gupnp_service_proxy_send_action(resource $proxy ,string $action ,array $in_params ,array $out_params )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_proxy_set_subscribed":{"params":{"$proxy":"","$subscribed":""},"docComment":"(Un)subscribes to the service.","signature":"gupnp_service_proxy_set_subscribed(resource $proxy ,bool $subscribed )","inheritdoc":0,"modifier":[],"return":""},"gupnp_service_thaw_notify":{"params":{"$service":""},"docComment":"Sends out any pending notifications and stops queuing of new ones.","signature":"gupnp_service_thaw_notify(resource $service )","inheritdoc":0,"modifier":[],"return":""},"http_cache_etag":{"params":{"$etag":""},"docComment":"Caching by ETag","signature":"http_cache_etag(string $etag )","inheritdoc":0,"modifier":[],"return":""},"http_cache_last_modified":{"params":{"$timestamp_or_expires":""},"docComment":"Caching by last modification","signature":"http_cache_last_modified(int $timestamp_or_expires )","inheritdoc":0,"modifier":[],"return":""},"http_chunked_decode":{"params":{"$encoded":""},"docComment":"Decode chunked-encoded data","signature":"http_chunked_decode(string $encoded )","inheritdoc":0,"modifier":[],"return":""},"http_deflate":{"params":{"$data":"","$flags":""},"docComment":"Deflate data","signature":"http_deflate(string $data ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"http_inflate":{"params":{"$data":""},"docComment":"Inflate data","signature":"http_inflate(string $data )","inheritdoc":0,"modifier":[],"return":""},"http_build_cookie":{"params":{"$cookie":""},"docComment":"Build cookie string","signature":"http_build_cookie(array $cookie )","inheritdoc":0,"modifier":[],"return":""},"http_date":{"params":{"$timestamp":""},"docComment":"Compose HTTP RFC compliant date","signature":"http_date(int $timestamp )","inheritdoc":0,"modifier":[],"return":""},"http_get_request_body_stream":{"params":[],"docComment":"Get request body as stream","signature":"http_get_request_body_stream( )","inheritdoc":0,"modifier":[],"return":""},"http_get_request_body":{"params":[],"docComment":"Get request body as string","signature":"http_get_request_body( )","inheritdoc":0,"modifier":[],"return":""},"http_get_request_headers":{"params":[],"docComment":"Get request headers as array","signature":"http_get_request_headers( )","inheritdoc":0,"modifier":[],"return":""},"http_match_etag":{"params":{"$etag":"","$for_range":""},"docComment":"Match ETag","signature":"http_match_etag(string $etag ,[bool $for_range] )","inheritdoc":0,"modifier":[],"return":""},"http_match_modified":{"params":{"$timestamp":"","$for_range":""},"docComment":"Match last modification","signature":"http_match_modified([int $timestamp] ,[bool $for_range] )","inheritdoc":0,"modifier":[],"return":""},"http_match_request_header":{"params":{"$header":"","$value":"","$match_case":""},"docComment":"Match any header","signature":"http_match_request_header(string $header ,string $value ,[bool $match_case] )","inheritdoc":0,"modifier":[],"return":""},"http_support":{"params":{"$feature":""},"docComment":"Check built-in HTTP support","signature":"http_support([int $feature] )","inheritdoc":0,"modifier":[],"return":""},"http_negotiate_charset":{"params":{"$supported":"","&$result":""},"docComment":"Negotiate client's preferred character set","signature":"http_negotiate_charset(array $supported ,array &$result )","inheritdoc":0,"modifier":[],"return":""},"http_negotiate_content_type":{"params":{"$supported":"","&$result":""},"docComment":"Negotiate client's preferred content type","signature":"http_negotiate_content_type(array $supported ,array &$result )","inheritdoc":0,"modifier":[],"return":""},"http_negotiate_language":{"params":{"$supported":"","&$result":""},"docComment":"Negotiate client's preferred language","signature":"http_negotiate_language(array $supported ,array &$result )","inheritdoc":0,"modifier":[],"return":""},"ob_deflatehandler":{"params":{"$data":"","$mode":""},"docComment":"Deflate output handler","signature":"ob_deflatehandler(string $data ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"ob_etaghandler":{"params":{"$data":"","$mode":""},"docComment":"ETag output handler","signature":"ob_etaghandler(string $data ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"ob_inflatehandler":{"params":{"$data":"","$mode":""},"docComment":"Inflate output handler","signature":"ob_inflatehandler(string $data ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"http_parse_cookie":{"params":{"$cookie":"","$flags":"","$allowed_extras":""},"docComment":"Parse HTTP cookie","signature":"http_parse_cookie(string $cookie ,int $flags ,array $allowed_extras )","inheritdoc":0,"modifier":[],"return":""},"http_parse_headers":{"params":{"$header":""},"docComment":"Parse HTTP headers","signature":"http_parse_headers(string $header )","inheritdoc":0,"modifier":[],"return":""},"http_parse_message":{"params":{"$message":""},"docComment":"Parse HTTP messages","signature":"http_parse_message(string $message )","inheritdoc":0,"modifier":[],"return":""},"http_parse_params":{"params":{"$param":"","$flags":""},"docComment":"Parse parameter list","signature":"http_parse_params(string $param ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"http_persistent_handles_clean":{"params":{"$ident":""},"docComment":"Clean up persistent handles","signature":"http_persistent_handles_clean(string $ident )","inheritdoc":0,"modifier":[],"return":""},"http_persistent_handles_count":{"params":[],"docComment":"Stat persistent handles","signature":"http_persistent_handles_count( )","inheritdoc":0,"modifier":[],"return":""},"http_persistent_handles_ident":{"params":{"$ident":""},"docComment":"Get\/set ident of persistent handles","signature":"http_persistent_handles_ident(string $ident )","inheritdoc":0,"modifier":[],"return":""},"http_get":{"params":{"$url":"","$options":"","&$info":""},"docComment":"Perform GET request","signature":"http_get(string $url ,array $options ,array &$info )","inheritdoc":0,"modifier":[],"return":""},"http_head":{"params":{"$url":"","$options":"","&$info":""},"docComment":"Perform HEAD request","signature":"http_head(string $url ,array $options ,array &$info )","inheritdoc":0,"modifier":[],"return":""},"http_post_data":{"params":{"$url":"","$data":"","$options":"","&$info":""},"docComment":"Perform POST request with pre-encoded data","signature":"http_post_data(string $url ,string $data ,array $options ,array &$info )","inheritdoc":0,"modifier":[],"return":""},"http_post_fields":{"params":{"$url":"","$data":"","$files":"","$options":"","&$info":""},"docComment":"Perform POST request with data to be encoded","signature":"http_post_fields(string $url ,array $data ,array $files ,array $options ,array &$info )","inheritdoc":0,"modifier":[],"return":""},"http_put_data":{"params":{"$url":"","$data":"","$options":"","&$info":""},"docComment":"Perform PUT request with data","signature":"http_put_data(string $url ,string $data ,array $options ,array &$info )","inheritdoc":0,"modifier":[],"return":""},"http_put_file":{"params":{"$url":"","$file":"","$options":"","&$info":""},"docComment":"Perform PUT request with file","signature":"http_put_file(string $url ,string $file ,array $options ,array &$info )","inheritdoc":0,"modifier":[],"return":""},"http_put_stream":{"params":{"$url":"","$stream":"","$options":"","&$info":""},"docComment":"Perform PUT request with stream","signature":"http_put_stream(string $url ,resource $stream ,array $options ,array &$info )","inheritdoc":0,"modifier":[],"return":""},"http_request_body_encode":{"params":{"$fields":"","$files":""},"docComment":"Encode request body","signature":"http_request_body_encode(array $fields ,array $files )","inheritdoc":0,"modifier":[],"return":""},"http_request_method_exists":{"params":{"$method":""},"docComment":"Check whether request method exists","signature":"http_request_method_exists(mixed $method )","inheritdoc":0,"modifier":[],"return":""},"http_request_method_name":{"params":{"$method":""},"docComment":"Get request method name","signature":"http_request_method_name(int $method )","inheritdoc":0,"modifier":[],"return":""},"http_request_method_register":{"params":{"$method":""},"docComment":"Register request method","signature":"http_request_method_register(string $method )","inheritdoc":0,"modifier":[],"return":""},"http_request_method_unregister":{"params":{"$method":""},"docComment":"Unregister request method","signature":"http_request_method_unregister(mixed $method )","inheritdoc":0,"modifier":[],"return":""},"http_request":{"params":{"$method":"","$url":"","$body":"","$options":"","&$info":""},"docComment":"Perform custom request","signature":"http_request(int $method ,string $url ,string $body ,array $options ,array &$info )","inheritdoc":0,"modifier":[],"return":""},"http_redirect":{"params":{"$url":"","$params":"","$session":"","$status":""},"docComment":"Issue HTTP redirect","signature":"http_redirect(string $url ,array $params ,[bool $session] ,[int $status] )","inheritdoc":0,"modifier":[],"return":""},"http_send_content_disposition":{"params":{"$filename":"","$inline":""},"docComment":"Send Content-Disposition","signature":"http_send_content_disposition(string $filename ,[bool $inline] )","inheritdoc":0,"modifier":[],"return":""},"http_send_content_type":{"params":{"$content_type":""},"docComment":"Send Content-Type","signature":"http_send_content_type([string $content_type] )","inheritdoc":0,"modifier":[],"return":""},"http_send_data":{"params":{"$data":""},"docComment":"Send arbitrary data","signature":"http_send_data(string $data )","inheritdoc":0,"modifier":[],"return":""},"http_send_file":{"params":{"$file":""},"docComment":"Send file","signature":"http_send_file(string $file )","inheritdoc":0,"modifier":[],"return":""},"http_send_last_modified":{"params":{"$timestamp":""},"docComment":"Send Last-Modified","signature":"http_send_last_modified([int $timestamp] )","inheritdoc":0,"modifier":[],"return":""},"http_send_status":{"params":{"$status":""},"docComment":"Send HTTP response status","signature":"http_send_status(int $status )","inheritdoc":0,"modifier":[],"return":""},"http_send_stream":{"params":{"$stream":""},"docComment":"Send stream","signature":"http_send_stream(resource $stream )","inheritdoc":0,"modifier":[],"return":""},"http_throttle":{"params":{"$sec":"","$bytes":""},"docComment":"HTTP throttling","signature":"http_throttle(float $sec ,[int $bytes] )","inheritdoc":0,"modifier":[],"return":""},"http_build_str":{"params":{"$query":"","$prefix":"","$arg_separator":""},"docComment":"Build query string","signature":"http_build_str(array $query ,string $prefix ,[string $arg_separator] )","inheritdoc":0,"modifier":[],"return":""},"http_build_url":{"params":{"$url":"","$parts":"","$flags":"","&$new_url":""},"docComment":"Build a URL","signature":"http_build_url(mixed $url ,mixed $parts ,[int $flags] ,array &$new_url )","inheritdoc":0,"modifier":[],"return":""},"hw_Array2Objrec":{"params":{"$object_array":""},"docComment":"Convert attributes from object array to object record","signature":"hw_array2objrec(array $object_array )","inheritdoc":0,"modifier":[],"return":""},"hw_changeobject":{"params":{"$link":"","$objid":"","$attributes":""},"docComment":"Changes attributes of an object (obsolete)","signature":"hw_changeobject(int $link ,int $objid ,array $attributes )","inheritdoc":0,"modifier":[],"return":""},"hw_Children":{"params":{"$connection":"","$objectID":""},"docComment":"Object ids of children","signature":"hw_children(int $connection ,int $objectID )","inheritdoc":0,"modifier":[],"return":""},"hw_ChildrenObj":{"params":{"$connection":"","$objectID":""},"docComment":"Object records of children","signature":"hw_childrenobj(int $connection ,int $objectID )","inheritdoc":0,"modifier":[],"return":""},"hw_Close":{"params":{"$connection":""},"docComment":"Closes the Hyperwave connection","signature":"hw_close(int $connection )","inheritdoc":0,"modifier":[],"return":""},"hw_Connect":{"params":{"$host":"","$port":"","$username":"","$password":""},"docComment":"Opens a connection","signature":"hw_connect(string $host ,int $port ,string $username ,string $password )","inheritdoc":0,"modifier":[],"return":""},"hw_connection_info":{"params":{"$link":""},"docComment":"Prints information about the connection to Hyperwave server","signature":"hw_connection_info(int $link )","inheritdoc":0,"modifier":[],"return":""},"hw_cp":{"params":{"$connection":"","$object_id_array":"","$destination_id":""},"docComment":"Copies objects","signature":"hw_cp(int $connection ,array $object_id_array ,int $destination_id )","inheritdoc":0,"modifier":[],"return":""},"hw_Deleteobject":{"params":{"$connection":"","$object_to_delete":""},"docComment":"Deletes object","signature":"hw_deleteobject(int $connection ,int $object_to_delete )","inheritdoc":0,"modifier":[],"return":""},"hw_DocByAnchor":{"params":{"$connection":"","$anchorID":""},"docComment":"Object id object belonging to anchor","signature":"hw_docbyanchor(int $connection ,int $anchorID )","inheritdoc":0,"modifier":[],"return":""},"hw_DocByAnchorObj":{"params":{"$connection":"","$anchorID":""},"docComment":"Object record object belonging to anchor","signature":"hw_docbyanchorobj(int $connection ,int $anchorID )","inheritdoc":0,"modifier":[],"return":""},"hw_Document_Attributes":{"params":{"$hw_document":""},"docComment":"Object record of hw_document","signature":"hw_document_attributes(int $hw_document )","inheritdoc":0,"modifier":[],"return":""},"hw_Document_BodyTag":{"params":{"$hw_document":"","$prefix":""},"docComment":"Body tag of hw_document","signature":"hw_document_bodytag(int $hw_document ,string $prefix )","inheritdoc":0,"modifier":[],"return":""},"hw_Document_Content":{"params":{"$hw_document":""},"docComment":"Returns content of hw_document","signature":"hw_document_content(int $hw_document )","inheritdoc":0,"modifier":[],"return":""},"hw_Document_SetContent":{"params":{"$hw_document":"","$content":""},"docComment":"Sets\/replaces content of hw_document","signature":"hw_document_setcontent(int $hw_document ,string $content )","inheritdoc":0,"modifier":[],"return":""},"hw_Document_Size":{"params":{"$hw_document":""},"docComment":"Size of hw_document","signature":"hw_document_size(int $hw_document )","inheritdoc":0,"modifier":[],"return":""},"hw_dummy":{"params":{"$link":"","$id":"","$msgid":""},"docComment":"Hyperwave dummy function","signature":"hw_dummy(int $link ,int $id ,int $msgid )","inheritdoc":0,"modifier":[],"return":""},"hw_EditText":{"params":{"$connection":"","$hw_document":""},"docComment":"Retrieve text document","signature":"hw_edittext(int $connection ,int $hw_document )","inheritdoc":0,"modifier":[],"return":""},"hw_Error":{"params":{"$connection":""},"docComment":"Error number","signature":"hw_error(int $connection )","inheritdoc":0,"modifier":[],"return":""},"hw_ErrorMsg":{"params":{"$connection":""},"docComment":"Returns error message","signature":"hw_errormsg(int $connection )","inheritdoc":0,"modifier":[],"return":""},"hw_Free_Document":{"params":{"$hw_document":""},"docComment":"Frees hw_document","signature":"hw_free_document(int $hw_document )","inheritdoc":0,"modifier":[],"return":""},"hw_GetAnchors":{"params":{"$connection":"","$objectID":""},"docComment":"Object ids of anchors of document","signature":"hw_getanchors(int $connection ,int $objectID )","inheritdoc":0,"modifier":[],"return":""},"hw_GetAnchorsObj":{"params":{"$connection":"","$objectID":""},"docComment":"Object records of anchors of document","signature":"hw_getanchorsobj(int $connection ,int $objectID )","inheritdoc":0,"modifier":[],"return":""},"hw_GetAndLock":{"params":{"$connection":"","$objectID":""},"docComment":"Return object record and lock object","signature":"hw_getandlock(int $connection ,int $objectID )","inheritdoc":0,"modifier":[],"return":""},"hw_GetChildColl":{"params":{"$connection":"","$objectID":""},"docComment":"Object ids of child collections","signature":"hw_getchildcoll(int $connection ,int $objectID )","inheritdoc":0,"modifier":[],"return":""},"hw_GetChildCollObj":{"params":{"$connection":"","$objectID":""},"docComment":"Object records of child collections","signature":"hw_getchildcollobj(int $connection ,int $objectID )","inheritdoc":0,"modifier":[],"return":""},"hw_GetChildDocColl":{"params":{"$connection":"","$objectID":""},"docComment":"Object ids of child documents of collection","signature":"hw_getchilddoccoll(int $connection ,int $objectID )","inheritdoc":0,"modifier":[],"return":""},"hw_GetChildDocCollObj":{"params":{"$connection":"","$objectID":""},"docComment":"Object records of child documents of collection","signature":"hw_getchilddoccollobj(int $connection ,int $objectID )","inheritdoc":0,"modifier":[],"return":""},"hw_GetObject":{"params":{"$connection":"","$objectID":"","$query":""},"docComment":"Object record","signature":"hw_getobject(int $connection ,mixed $objectID ,string $query )","inheritdoc":0,"modifier":[],"return":""},"hw_GetObjectByQuery":{"params":{"$connection":"","$query":"","$max_hits":""},"docComment":"Search object","signature":"hw_getobjectbyquery(int $connection ,string $query ,int $max_hits )","inheritdoc":0,"modifier":[],"return":""},"hw_GetObjectByQueryColl":{"params":{"$connection":"","$objectID":"","$query":"","$max_hits":""},"docComment":"Search object in collection","signature":"hw_getobjectbyquerycoll(int $connection ,int $objectID ,string $query ,int $max_hits )","inheritdoc":0,"modifier":[],"return":""},"hw_GetObjectByQueryCollObj":{"params":{"$connection":"","$objectID":"","$query":"","$max_hits":""},"docComment":"Search object in collection","signature":"hw_getobjectbyquerycollobj(int $connection ,int $objectID ,string $query ,int $max_hits )","inheritdoc":0,"modifier":[],"return":""},"hw_GetObjectByQueryObj":{"params":{"$connection":"","$query":"","$max_hits":""},"docComment":"Search object","signature":"hw_getobjectbyqueryobj(int $connection ,string $query ,int $max_hits )","inheritdoc":0,"modifier":[],"return":""},"hw_GetParents":{"params":{"$connection":"","$objectID":""},"docComment":"Object ids of parents","signature":"hw_getparents(int $connection ,int $objectID )","inheritdoc":0,"modifier":[],"return":""},"hw_GetParentsObj":{"params":{"$connection":"","$objectID":""},"docComment":"Object records of parents","signature":"hw_getparentsobj(int $connection ,int $objectID )","inheritdoc":0,"modifier":[],"return":""},"hw_getrellink":{"params":{"$link":"","$rootid":"","$sourceid":"","$destid":""},"docComment":"Get link from source to dest relative to rootid","signature":"hw_getrellink(int $link ,int $rootid ,int $sourceid ,int $destid )","inheritdoc":0,"modifier":[],"return":""},"hw_GetRemote":{"params":{"$connection":"","$objectID":""},"docComment":"Gets a remote document","signature":"hw_getremote(int $connection ,int $objectID )","inheritdoc":0,"modifier":[],"return":""},"hw_getremotechildren":{"params":{"$connection":"","$object_record":""},"docComment":"Gets children of remote document","signature":"hw_getremotechildren(int $connection ,string $object_record )","inheritdoc":0,"modifier":[],"return":""},"hw_GetSrcByDestObj":{"params":{"$connection":"","$objectID":""},"docComment":"Returns anchors pointing at object","signature":"hw_getsrcbydestobj(int $connection ,int $objectID )","inheritdoc":0,"modifier":[],"return":""},"hw_GetText":{"params":{"$connection":"","$objectID":"","$rootID\/prefix":""},"docComment":"Retrieve text document","signature":"hw_gettext(int $connection ,int $objectID ,mixed $rootID\/prefix )","inheritdoc":0,"modifier":[],"return":""},"hw_getusername":{"params":{"$connection":""},"docComment":"Name of currently logged in user","signature":"hw_getusername(int $connection )","inheritdoc":0,"modifier":[],"return":""},"hw_Identify":{"params":{"$link":"","$username":"","$password":""},"docComment":"Identifies as user","signature":"hw_identify(int $link ,string $username ,string $password )","inheritdoc":0,"modifier":[],"return":""},"hw_InCollections":{"params":{"$connection":"","$object_id_array":"","$collection_id_array":"","$return_collections":""},"docComment":"Check if object ids in collections","signature":"hw_incollections(int $connection ,array $object_id_array ,array $collection_id_array ,int $return_collections )","inheritdoc":0,"modifier":[],"return":""},"hw_Info":{"params":{"$connection":""},"docComment":"Info about connection","signature":"hw_info(int $connection )","inheritdoc":0,"modifier":[],"return":""},"hw_InsColl":{"params":{"$connection":"","$objectID":"","$object_array":""},"docComment":"Insert collection","signature":"hw_inscoll(int $connection ,int $objectID ,array $object_array )","inheritdoc":0,"modifier":[],"return":""},"hw_InsDoc":{"params":{"$connection":"","$parentID":"","$object_record":"","$text":""},"docComment":"Insert document","signature":"hw_insdoc(resource $connection ,int $parentID ,string $object_record ,string $text )","inheritdoc":0,"modifier":[],"return":""},"hw_insertanchors":{"params":{"$hwdoc":"","$anchorecs":"","$dest":"","$urlprefixes":""},"docComment":"Inserts only anchors into text","signature":"hw_insertanchors(int $hwdoc ,array $anchorecs ,array $dest ,array $urlprefixes )","inheritdoc":0,"modifier":[],"return":""},"hw_InsertDocument":{"params":{"$connection":"","$parent_id":"","$hw_document":""},"docComment":"Upload any document","signature":"hw_insertdocument(int $connection ,int $parent_id ,int $hw_document )","inheritdoc":0,"modifier":[],"return":""},"hw_InsertObject":{"params":{"$connection":"","$object_rec":"","$parameter":""},"docComment":"Inserts an object record","signature":"hw_insertobject(int $connection ,string $object_rec ,string $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_mapid":{"params":{"$connection":"","$server_id":"","$object_id":""},"docComment":"Maps global id on virtual local id","signature":"hw_mapid(int $connection ,int $server_id ,int $object_id )","inheritdoc":0,"modifier":[],"return":""},"hw_Modifyobject":{"params":{"$connection":"","$object_to_change":"","$remove":"","$add":"","$mode":""},"docComment":"Modifies object record","signature":"hw_modifyobject(int $connection ,int $object_to_change ,array $remove ,array $add ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"hw_mv":{"params":{"$connection":"","$object_id_array":"","$source_id":"","$destination_id":""},"docComment":"Moves objects","signature":"hw_mv(int $connection ,array $object_id_array ,int $source_id ,int $destination_id )","inheritdoc":0,"modifier":[],"return":""},"hw_New_Document":{"params":{"$object_record":"","$document_data":"","$document_size":""},"docComment":"Create new document","signature":"hw_new_document(string $object_record ,string $document_data ,int $document_size )","inheritdoc":0,"modifier":[],"return":""},"hw_objrec2array":{"params":{"$object_record":"","$format":""},"docComment":"Convert attributes from object record to object array","signature":"hw_objrec2array(string $object_record ,array $format )","inheritdoc":0,"modifier":[],"return":""},"hw_Output_Document":{"params":{"$hw_document":""},"docComment":"Prints hw_document","signature":"hw_output_document(int $hw_document )","inheritdoc":0,"modifier":[],"return":""},"hw_pConnect":{"params":{"$host":"","$port":"","$username":"","$password":""},"docComment":"Make a persistent database connection","signature":"hw_pconnect(string $host ,int $port ,string $username ,string $password )","inheritdoc":0,"modifier":[],"return":""},"hw_PipeDocument":{"params":{"$connection":"","$objectID":"","$url_prefixes":""},"docComment":"Retrieve any document","signature":"hw_pipedocument(int $connection ,int $objectID ,array $url_prefixes )","inheritdoc":0,"modifier":[],"return":""},"hw_Root":{"params":[],"docComment":"Root object id","signature":"hw_root( )","inheritdoc":0,"modifier":[],"return":""},"hw_setlinkroot":{"params":{"$link":"","$rootid":""},"docComment":"Set the id to which links are calculated","signature":"hw_setlinkroot(int $link ,int $rootid )","inheritdoc":0,"modifier":[],"return":""},"hw_stat":{"params":{"$link":""},"docComment":"Returns status string","signature":"hw_stat(int $link )","inheritdoc":0,"modifier":[],"return":""},"hw_Unlock":{"params":{"$connection":"","$objectID":""},"docComment":"Unlock object","signature":"hw_unlock(int $connection ,int $objectID )","inheritdoc":0,"modifier":[],"return":""},"hw_Who":{"params":{"$connection":""},"docComment":"List of currently logged in users","signature":"hw_who(int $connection )","inheritdoc":0,"modifier":[],"return":""},"hw_api::checkin":{"params":{"$parameter":""},"docComment":"Checks in an object","signature":"hw_api::checkin(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::checkout":{"params":{"$parameter":""},"docComment":"Checks out an object","signature":"hw_api::checkout(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::children":{"params":{"$parameter":""},"docComment":"Returns children of an object","signature":"hw_api::children(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::content":{"params":{"$parameter":""},"docComment":"Returns content of an object","signature":"hw_api::content(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::copy":{"params":{"$parameter":""},"docComment":"Copies physically","signature":"hw_api::copy(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::dbstat":{"params":{"$parameter":""},"docComment":"Returns statistics about database server","signature":"hw_api::dbstat(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::dcstat":{"params":{"$parameter":""},"docComment":"Returns statistics about document cache server","signature":"hw_api::dcstat(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::dstanchors":{"params":{"$parameter":""},"docComment":"Returns a list of all destination anchors","signature":"hw_api::dstanchors(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::dstofsrcanchor":{"params":{"$parameter":""},"docComment":"Returns destination of a source anchor","signature":"hw_api::dstofsrcanchor(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::find":{"params":{"$parameter":""},"docComment":"Search for objects","signature":"hw_api::find(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::ftstat":{"params":{"$parameter":""},"docComment":"Returns statistics about fulltext server","signature":"hw_api::ftstat(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::hwstat":{"params":{"$parameter":""},"docComment":"Returns statistics about Hyperwave server","signature":"hw_api::hwstat(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::identify":{"params":{"$parameter":""},"docComment":"Log into Hyperwave Server","signature":"hw_api::identify(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::info":{"params":{"$parameter":""},"docComment":"Returns information about server configuration","signature":"hw_api::info(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::insert":{"params":{"$parameter":""},"docComment":"Inserts a new object","signature":"hw_api::insert(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::insertanchor":{"params":{"$parameter":""},"docComment":"Inserts a new object of type anchor","signature":"hw_api::insertanchor(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::insertcollection":{"params":{"$parameter":""},"docComment":"Inserts a new object of type collection","signature":"hw_api::insertcollection(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::insertdocument":{"params":{"$parameter":""},"docComment":"Inserts a new object of type document","signature":"hw_api::insertdocument(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::link":{"params":{"$parameter":""},"docComment":"Creates a link to an object","signature":"hw_api::link(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::lock":{"params":{"$parameter":""},"docComment":"Locks an object","signature":"hw_api::lock(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::move":{"params":{"$parameter":""},"docComment":"Moves object between collections","signature":"hw_api::move(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::object":{"params":{"$parameter":""},"docComment":"Retrieve attribute information","signature":"hw_api::object(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::objectbyanchor":{"params":{"$parameter":""},"docComment":"Returns the object an anchor belongs to","signature":"hw_api::objectbyanchor(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::parents":{"params":{"$parameter":""},"docComment":"Returns parents of an object","signature":"hw_api::parents(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::remove":{"params":{"$parameter":""},"docComment":"Delete an object","signature":"hw_api::remove(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::replace":{"params":{"$parameter":""},"docComment":"Replaces an object","signature":"hw_api::replace(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::setcommittedversion":{"params":{"$parameter":""},"docComment":"Commits version other than last version","signature":"hw_api::setcommittedversion(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::srcanchors":{"params":{"$parameter":""},"docComment":"Returns a list of all source anchors","signature":"hw_api::srcanchors(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::srcsofdst":{"params":{"$parameter":""},"docComment":"Returns source of a destination object","signature":"hw_api::srcsofdst(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::unlock":{"params":{"$parameter":""},"docComment":"Unlocks a locked object","signature":"hw_api::unlock(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::user":{"params":{"$parameter":""},"docComment":"Returns the own user object","signature":"hw_api::user(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api::userlist":{"params":{"$parameter":""},"docComment":"Returns a list of all logged in users","signature":"hw_api::userlist(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api_attribute::key":{"params":[],"docComment":"Returns key of the attribute","signature":"hw_api_attribute::key( )","inheritdoc":0,"modifier":[],"return":""},"hw_api_attribute::langdepvalue":{"params":{"$language":""},"docComment":"Returns value for a given language","signature":"hw_api_attribute::langdepvalue(string $language )","inheritdoc":0,"modifier":[],"return":""},"hw_api_attribute::value":{"params":[],"docComment":"Returns value of the attribute","signature":"hw_api_attribute::value( )","inheritdoc":0,"modifier":[],"return":""},"hw_api_attribute::values":{"params":[],"docComment":"Returns all values of the attribute","signature":"hw_api_attribute::values( )","inheritdoc":0,"modifier":[],"return":""},"hw_api_content::mimetype":{"params":[],"docComment":"Returns mimetype","signature":"hw_api_content::mimetype( )","inheritdoc":0,"modifier":[],"return":""},"hw_api_content::read":{"params":{"$buffer":"","$len":""},"docComment":"Read content","signature":"hw_api_content::read(string $buffer ,int $len )","inheritdoc":0,"modifier":[],"return":""},"hw_api_error::count":{"params":[],"docComment":"Returns number of reasons","signature":"hw_api_error::count( )","inheritdoc":0,"modifier":[],"return":""},"hw_api_error::reason":{"params":[],"docComment":"Returns reason of error","signature":"hw_api_error::reason( )","inheritdoc":0,"modifier":[],"return":""},"hw_api_object::assign":{"params":{"$parameter":""},"docComment":"Clones object","signature":"hw_api_object::assign(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api_object::attreditable":{"params":{"$parameter":""},"docComment":"Checks whether an attribute is editable","signature":"hw_api_object::attreditable(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api_object::count":{"params":{"$parameter":""},"docComment":"Returns number of attributes","signature":"hw_api_object::count(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api_object::insert":{"params":{"$attribute":""},"docComment":"Inserts new attribute","signature":"hw_api_object::insert( $attribute )","inheritdoc":0,"modifier":[],"return":""},"hw_api_object::remove":{"params":{"$name":""},"docComment":"Removes attribute","signature":"hw_api_object::remove(string $name )","inheritdoc":0,"modifier":[],"return":""},"hw_api_object::title":{"params":{"$parameter":""},"docComment":"Returns the title attribute","signature":"hw_api_object::title(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"hw_api_object::value":{"params":{"$name":""},"docComment":"Returns value of attribute","signature":"hw_api_object::value(string $name )","inheritdoc":0,"modifier":[],"return":""},"hw_api_reason::description":{"params":[],"docComment":"Returns description of reason","signature":"hw_api_reason::description( )","inheritdoc":0,"modifier":[],"return":""},"hw_api_reason::type":{"params":[],"docComment":"Returns type of reason","signature":"hw_api_reason::type( )","inheritdoc":0,"modifier":[],"return":""},"hwapi_attribute_new":{"params":{"$name":"","$value":""},"docComment":"Creates instance of class hw_api_attribute","signature":"hwapi_attribute_new(string $name ,string $value )","inheritdoc":0,"modifier":[],"return":""},"hwapi_content_new":{"params":{"$content":"","$mimetype":""},"docComment":"Create new instance of class hw_api_content","signature":"hwapi_content_new(string $content ,string $mimetype )","inheritdoc":0,"modifier":[],"return":""},"hwapi_hgcsp":{"params":{"$hostname":"","$port":""},"docComment":"Returns object of class hw_api","signature":"hwapi_hgcsp(string $hostname ,int $port )","inheritdoc":0,"modifier":[],"return":""},"hwapi_object_new":{"params":{"$parameter":""},"docComment":"Creates a new instance of class hwapi_object_new","signature":"hwapi_object_new(array $parameter )","inheritdoc":0,"modifier":[],"return":""},"db2_autocommit":{"params":{"$connection":"","$value":""},"docComment":"\n   Returns or sets the AUTOCOMMIT state for a database connection\n  ","signature":"db2_autocommit(resource $connection ,bool $value )","inheritdoc":0,"modifier":[],"return":""},"db2_bind_param":{"params":{"$stmt":"","$parameter-number":"","$variable-name":"","$parameter-type":"","$data-type":"","$precision":"","$scale":""},"docComment":"\n   Binds a PHP variable to an SQL statement parameter\n  ","signature":"db2_bind_param(resource $stmt ,int $parameter-number ,string $variable-name ,int $parameter-type ,[int $data-type] ,[int $precision] ,[int $scale] )","inheritdoc":0,"modifier":[],"return":""},"db2_client_info":{"params":{"$connection":""},"docComment":"Returns an object with properties that describe the DB2 database client","signature":"db2_client_info(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"db2_close":{"params":{"$connection":""},"docComment":"\n   Closes a database connection\n  ","signature":"db2_close(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"db2_column_privileges":{"params":{"$connection":"","$qualifier":"","$schema":"","$table-name":"","$column-name":""},"docComment":"\n   Returns a result set listing the columns and associated privileges for a table\n  ","signature":"db2_column_privileges(resource $connection ,string $qualifier ,string $schema ,string $table-name ,string $column-name )","inheritdoc":0,"modifier":[],"return":""},"db2_columns":{"params":{"$connection":"","$qualifier":"","$schema":"","$table-name":"","$column-name":""},"docComment":"\n   Returns a result set listing the columns and associated metadata for a table\n  ","signature":"db2_columns(resource $connection ,string $qualifier ,string $schema ,string $table-name ,string $column-name )","inheritdoc":0,"modifier":[],"return":""},"db2_commit":{"params":{"$connection":""},"docComment":"\n   Commits a transaction\n  ","signature":"db2_commit(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"db2_conn_error":{"params":{"$connection":""},"docComment":"\n   Returns a string containing the SQLSTATE returned by the last connection attempt\n  ","signature":"db2_conn_error(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"db2_conn_errormsg":{"params":{"$connection":""},"docComment":"\n   Returns the last connection error message and SQLCODE value\n  ","signature":"db2_conn_errormsg(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"db2_connect":{"params":{"$database":"","$username":"","$password":"","$options":""},"docComment":"\n   Returns a connection to a database\n  ","signature":"db2_connect(string $database ,string $username ,string $password ,array $options )","inheritdoc":0,"modifier":[],"return":""},"db2_cursor_type":{"params":{"$stmt":""},"docComment":"\n   Returns the cursor type used by a statement resource\n  ","signature":"db2_cursor_type(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"db2_escape_string":{"params":{"$string_literal":""},"docComment":"\n   Used to escape certain characters\n  ","signature":"db2_escape_string(string $string_literal )","inheritdoc":0,"modifier":[],"return":""},"db2_exec":{"params":{"$connection":"","$statement":"","$options":""},"docComment":"\n   Executes an SQL statement directly\n  ","signature":"db2_exec(resource $connection ,string $statement ,array $options )","inheritdoc":0,"modifier":[],"return":""},"db2_execute":{"params":{"$stmt":"","$parameters":""},"docComment":"\n   Executes a prepared SQL statement\n  ","signature":"db2_execute(resource $stmt ,array $parameters )","inheritdoc":0,"modifier":[],"return":""},"db2_fetch_array":{"params":{"$stmt":"","$row_number":""},"docComment":"\n   Returns an array, indexed by column position, representing a row in a result set\n  ","signature":"db2_fetch_array(resource $stmt ,[int $row_number] )","inheritdoc":0,"modifier":[],"return":""},"db2_fetch_assoc":{"params":{"$stmt":"","$row_number":""},"docComment":"\n   Returns an array, indexed by column name, representing a row in a result set\n  ","signature":"db2_fetch_assoc(resource $stmt ,[int $row_number] )","inheritdoc":0,"modifier":[],"return":""},"db2_fetch_both":{"params":{"$stmt":"","$row_number":""},"docComment":"\n   Returns an array, indexed by both column name and position, representing a row in a result set\n  ","signature":"db2_fetch_both(resource $stmt ,[int $row_number] )","inheritdoc":0,"modifier":[],"return":""},"db2_fetch_object":{"params":{"$stmt":"","$row_number":""},"docComment":"\n   Returns an object with properties representing columns in the fetched row\n  ","signature":"db2_fetch_object(resource $stmt ,[int $row_number] )","inheritdoc":0,"modifier":[],"return":""},"db2_fetch_row":{"params":{"$stmt":"","$row_number":""},"docComment":"\n   Sets the result set pointer to the next row or requested row\n  ","signature":"db2_fetch_row(resource $stmt ,int $row_number )","inheritdoc":0,"modifier":[],"return":""},"db2_field_display_size":{"params":{"$stmt":"","$column":""},"docComment":"\n   Returns the maximum number of bytes required to display a column\n  ","signature":"db2_field_display_size(resource $stmt ,mixed $column )","inheritdoc":0,"modifier":[],"return":""},"db2_field_name":{"params":{"$stmt":"","$column":""},"docComment":"\n   Returns the name of the column in the result set\n  ","signature":"db2_field_name(resource $stmt ,mixed $column )","inheritdoc":0,"modifier":[],"return":""},"db2_field_num":{"params":{"$stmt":"","$column":""},"docComment":"\n   Returns the position of the named column in a result set\n  ","signature":"db2_field_num(resource $stmt ,mixed $column )","inheritdoc":0,"modifier":[],"return":""},"db2_field_precision":{"params":{"$stmt":"","$column":""},"docComment":"\n   Returns the precision of the indicated column in a result set\n  ","signature":"db2_field_precision(resource $stmt ,mixed $column )","inheritdoc":0,"modifier":[],"return":""},"db2_field_scale":{"params":{"$stmt":"","$column":""},"docComment":"\n   Returns the scale of the indicated column in a result set\n  ","signature":"db2_field_scale(resource $stmt ,mixed $column )","inheritdoc":0,"modifier":[],"return":""},"db2_field_type":{"params":{"$stmt":"","$column":""},"docComment":"\n   Returns the data type of the indicated column in a result set\n  ","signature":"db2_field_type(resource $stmt ,mixed $column )","inheritdoc":0,"modifier":[],"return":""},"db2_field_width":{"params":{"$stmt":"","$column":""},"docComment":"\n   Returns the width of the current value of the indicated column in a result set\n  ","signature":"db2_field_width(resource $stmt ,mixed $column )","inheritdoc":0,"modifier":[],"return":""},"db2_foreign_keys":{"params":{"$connection":"","$qualifier":"","$schema":"","$table-name":""},"docComment":"\n   Returns a result set listing the foreign keys for a table\n  ","signature":"db2_foreign_keys(resource $connection ,string $qualifier ,string $schema ,string $table-name )","inheritdoc":0,"modifier":[],"return":""},"db2_free_result":{"params":{"$stmt":""},"docComment":"\n   Frees resources associated with a result set\n  ","signature":"db2_free_result(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"db2_free_stmt":{"params":{"$stmt":""},"docComment":"\n   Frees resources associated with the indicated statement resource\n  ","signature":"db2_free_stmt(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"db2_get_option":{"params":{"$resource":"","$option":""},"docComment":"Retrieves an option value for a statement resource or a connection resource","signature":"db2_get_option(resource $resource ,string $option )","inheritdoc":0,"modifier":[],"return":""},"db2_last_insert_id":{"params":{"$resource":""},"docComment":"Returns the auto generated ID of the last insert query that successfully \n  executed on this connection","signature":"db2_last_insert_id(resource $resource )","inheritdoc":0,"modifier":[],"return":""},"db2_lob_read":{"params":{"$stmt":"","$colnum":"","$length":""},"docComment":"\n   Gets a user defined size of LOB files with each invocation\n  ","signature":"db2_lob_read(resource $stmt ,int $colnum ,int $length )","inheritdoc":0,"modifier":[],"return":""},"db2_next_result":{"params":{"$stmt":""},"docComment":"\n   Requests the next result set from a stored procedure\n  ","signature":"db2_next_result(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"db2_num_fields":{"params":{"$stmt":""},"docComment":"\n   Returns the number of fields contained in a result set\n  ","signature":"db2_num_fields(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"db2_num_rows":{"params":{"$stmt":""},"docComment":"\n   Returns the number of rows affected by an SQL statement\n  ","signature":"db2_num_rows(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"db2_pclose":{"params":{"$resource":""},"docComment":"Closes a persistent database connection","signature":"db2_pclose(resource $resource )","inheritdoc":0,"modifier":[],"return":""},"db2_pconnect":{"params":{"$database":"","$username":"","$password":"","$options":""},"docComment":"\n   Returns a persistent connection to a database\n  ","signature":"db2_pconnect(string $database ,string $username ,string $password ,array $options )","inheritdoc":0,"modifier":[],"return":""},"db2_prepare":{"params":{"$connection":"","$statement":"","$options":""},"docComment":"\n   Prepares an SQL statement to be executed\n  ","signature":"db2_prepare(resource $connection ,string $statement ,array $options )","inheritdoc":0,"modifier":[],"return":""},"db2_primary_keys":{"params":{"$connection":"","$qualifier":"","$schema":"","$table-name":""},"docComment":"\n   Returns a result set listing primary keys for a table\n  ","signature":"db2_primary_keys(resource $connection ,string $qualifier ,string $schema ,string $table-name )","inheritdoc":0,"modifier":[],"return":""},"db2_procedure_columns":{"params":{"$connection":"","$qualifier":"","$schema":"","$procedure":"","$parameter":""},"docComment":"\n   Returns a result set listing stored procedure parameters\n  ","signature":"db2_procedure_columns(resource $connection ,string $qualifier ,string $schema ,string $procedure ,string $parameter )","inheritdoc":0,"modifier":[],"return":""},"db2_procedures":{"params":{"$connection":"","$qualifier":"","$schema":"","$procedure":""},"docComment":"\n   Returns a result set listing the stored procedures registered in a database\n  ","signature":"db2_procedures(resource $connection ,string $qualifier ,string $schema ,string $procedure )","inheritdoc":0,"modifier":[],"return":""},"db2_result":{"params":{"$stmt":"","$column":""},"docComment":"\n   Returns a single column from a row in the result set\n  ","signature":"db2_result(resource $stmt ,mixed $column )","inheritdoc":0,"modifier":[],"return":""},"db2_rollback":{"params":{"$connection":""},"docComment":"\n   Rolls back a transaction\n  ","signature":"db2_rollback(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"db2_server_info":{"params":{"$connection":""},"docComment":"Returns an object with properties that describe the DB2 database server","signature":"db2_server_info(resource $connection )","inheritdoc":0,"modifier":[],"return":""},"db2_set_option":{"params":{"$resource":"","$options":"","$type":""},"docComment":"Set options for connection or statement resources","signature":"db2_set_option(resource $resource ,array $options ,int $type )","inheritdoc":0,"modifier":[],"return":""},"db2_special_columns":{"params":{"$connection":"","$qualifier":"","$schema":"","$table_name":"","$scope":""},"docComment":"\n   Returns a result set listing the unique row identifier columns for a table\n  ","signature":"db2_special_columns(resource $connection ,string $qualifier ,string $schema ,string $table_name ,int $scope )","inheritdoc":0,"modifier":[],"return":""},"db2_statistics":{"params":{"$connection":"","$qualifier":"","$schema":"","$table-name":"","$unique":""},"docComment":"\n   Returns a result set listing the index and statistics for a table\n  ","signature":"db2_statistics(resource $connection ,string $qualifier ,string $schema ,string $table-name ,bool $unique )","inheritdoc":0,"modifier":[],"return":""},"db2_stmt_error":{"params":{"$stmt":""},"docComment":"\n   Returns a string containing the SQLSTATE returned by an SQL statement\n  ","signature":"db2_stmt_error(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"db2_stmt_errormsg":{"params":{"$stmt":""},"docComment":"\n   Returns a string containing the last SQL statement error message\n  ","signature":"db2_stmt_errormsg(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"db2_table_privileges":{"params":{"$connection":"","$qualifier":"","$schema":"","$table_name":""},"docComment":"\n   Returns a result set listing the tables and associated privileges in a database\n  ","signature":"db2_table_privileges(resource $connection ,string $qualifier ,string $schema ,string $table_name )","inheritdoc":0,"modifier":[],"return":""},"db2_tables":{"params":{"$connection":"","$qualifier":"","$schema":"","$table-name":"","$table-type":""},"docComment":"\n   Returns a result set listing the tables and associated metadata in a database\n  ","signature":"db2_tables(resource $connection ,string $qualifier ,string $schema ,string $table-name ,string $table-type )","inheritdoc":0,"modifier":[],"return":""},"id3_get_frame_long_name":{"params":{"$frameId":""},"docComment":"Get the long name of an ID3v2 frame","signature":"id3_get_frame_long_name(string $frameId )","inheritdoc":0,"modifier":[],"return":""},"id3_get_frame_short_name":{"params":{"$frameId":""},"docComment":"Get the short name of an ID3v2 frame","signature":"id3_get_frame_short_name(string $frameId )","inheritdoc":0,"modifier":[],"return":""},"id3_get_genre_id":{"params":{"$genre":""},"docComment":"Get the id for a genre","signature":"id3_get_genre_id(string $genre )","inheritdoc":0,"modifier":[],"return":""},"id3_get_genre_list":{"params":[],"docComment":"Get all possible genre values","signature":"id3_get_genre_list( )","inheritdoc":0,"modifier":[],"return":""},"id3_get_genre_name":{"params":{"$genre_id":""},"docComment":"Get the name for a genre id","signature":"id3_get_genre_name(int $genre_id )","inheritdoc":0,"modifier":[],"return":""},"id3_get_tag":{"params":{"$filename":"","$version":""},"docComment":"Get all information stored in an ID3 tag","signature":"id3_get_tag(string $filename ,[int $version] )","inheritdoc":0,"modifier":[],"return":""},"id3_get_version":{"params":{"$filename":""},"docComment":"Get version of an ID3 tag","signature":"id3_get_version(string $filename )","inheritdoc":0,"modifier":[],"return":""},"id3_remove_tag":{"params":{"$filename":"","$version":""},"docComment":"Remove an existing ID3 tag","signature":"id3_remove_tag(string $filename ,[int $version] )","inheritdoc":0,"modifier":[],"return":""},"id3_set_tag":{"params":{"$filename":"","$tag":"","$version":""},"docComment":"Update information stored in an ID3 tag","signature":"id3_set_tag(string $filename ,array $tag ,[int $version] )","inheritdoc":0,"modifier":[],"return":""},"iis_add_server":{"params":{"$path":"","$comment":"","$server_ip":"","$port":"","$host_name":"","$rights":"","$start_server":""},"docComment":"Creates a new virtual web server","signature":"iis_add_server(string $path ,string $comment ,string $server_ip ,int $port ,string $host_name ,int $rights ,int $start_server )","inheritdoc":0,"modifier":[],"return":""},"iis_get_dir_security":{"params":{"$server_instance":"","$virtual_path":""},"docComment":"Gets Directory Security","signature":"iis_get_dir_security(int $server_instance ,string $virtual_path )","inheritdoc":0,"modifier":[],"return":""},"iis_get_script_map":{"params":{"$server_instance":"","$virtual_path":"","$script_extension":""},"docComment":"Gets script mapping on a virtual directory for a specific extension","signature":"iis_get_script_map(int $server_instance ,string $virtual_path ,string $script_extension )","inheritdoc":0,"modifier":[],"return":""},"iis_get_server_by_comment":{"params":{"$comment":""},"docComment":"Return the instance number associated with the Comment","signature":"iis_get_server_by_comment(string $comment )","inheritdoc":0,"modifier":[],"return":""},"iis_get_server_by_path":{"params":{"$path":""},"docComment":"Return the instance number associated with the Path","signature":"iis_get_server_by_path(string $path )","inheritdoc":0,"modifier":[],"return":""},"iis_get_server_rights":{"params":{"$server_instance":"","$virtual_path":""},"docComment":"Gets server rights","signature":"iis_get_server_rights(int $server_instance ,string $virtual_path )","inheritdoc":0,"modifier":[],"return":""},"iis_get_service_state":{"params":{"$service_id":""},"docComment":"Returns the state for the service defined by ServiceId","signature":"iis_get_service_state(string $service_id )","inheritdoc":0,"modifier":[],"return":""},"iis_remove_server":{"params":{"$server_instance":""},"docComment":"Removes the virtual web server indicated by ServerInstance","signature":"iis_remove_server(int $server_instance )","inheritdoc":0,"modifier":[],"return":""},"iis_set_app_settings":{"params":{"$server_instance":"","$virtual_path":"","$application_scope":""},"docComment":"Creates application scope for a virtual directory","signature":"iis_set_app_settings(int $server_instance ,string $virtual_path ,string $application_scope )","inheritdoc":0,"modifier":[],"return":""},"iis_set_dir_security":{"params":{"$server_instance":"","$virtual_path":"","$directory_flags":""},"docComment":"Sets Directory Security","signature":"iis_set_dir_security(int $server_instance ,string $virtual_path ,int $directory_flags )","inheritdoc":0,"modifier":[],"return":""},"iis_set_script_map":{"params":{"$server_instance":"","$virtual_path":"","$script_extension":"","$engine_path":"","$allow_scripting":""},"docComment":"Sets script mapping on a virtual directory","signature":"iis_set_script_map(int $server_instance ,string $virtual_path ,string $script_extension ,string $engine_path ,int $allow_scripting )","inheritdoc":0,"modifier":[],"return":""},"iis_set_server_rights":{"params":{"$server_instance":"","$virtual_path":"","$directory_flags":""},"docComment":"Sets server rights","signature":"iis_set_server_rights(int $server_instance ,string $virtual_path ,int $directory_flags )","inheritdoc":0,"modifier":[],"return":""},"iis_start_server":{"params":{"$server_instance":""},"docComment":"Starts the virtual web server","signature":"iis_start_server(int $server_instance )","inheritdoc":0,"modifier":[],"return":""},"iis_start_service":{"params":{"$service_id":""},"docComment":"Starts the service defined by ServiceId","signature":"iis_start_service(string $service_id )","inheritdoc":0,"modifier":[],"return":""},"iis_stop_server":{"params":{"$server_instance":""},"docComment":"Stops the virtual web server","signature":"iis_stop_server(int $server_instance )","inheritdoc":0,"modifier":[],"return":""},"iis_stop_service":{"params":{"$service_id":""},"docComment":"Stops the service defined by ServiceId","signature":"iis_stop_service(string $service_id )","inheritdoc":0,"modifier":[],"return":""},"inclued_get_data":{"params":[],"docComment":"Get the inclued data","signature":"inclued_get_data( )","inheritdoc":0,"modifier":[],"return":""},"ingres_autocommit_state":{"params":{"$link":""},"docComment":"Test if the connection is using autocommit","signature":"ingres_autocommit_state(resource $link )","inheritdoc":0,"modifier":[],"return":""},"ingres_autocommit":{"params":{"$link":""},"docComment":"Switch autocommit on or off","signature":"ingres_autocommit(resource $link )","inheritdoc":0,"modifier":[],"return":""},"ingres_charset":{"params":{"$link":""},"docComment":"Returns the installation character set","signature":"ingres_charset(resource $link )","inheritdoc":0,"modifier":[],"return":""},"ingres_close":{"params":{"$link":""},"docComment":"Close an Ingres database connection","signature":"ingres_close(resource $link )","inheritdoc":0,"modifier":[],"return":""},"ingres_commit":{"params":{"$link":""},"docComment":"Commit a transaction","signature":"ingres_commit(resource $link )","inheritdoc":0,"modifier":[],"return":""},"ingres_connect":{"params":{"$database":"","$username":"","$password":"","$options":""},"docComment":"Open a connection to an Ingres database","signature":"ingres_connect(string $database ,string $username ,string $password ,array $options )","inheritdoc":0,"modifier":[],"return":""},"ingres_cursor":{"params":{"$result":""},"docComment":"Get a cursor name for a given result resource","signature":"ingres_cursor(resource $result )","inheritdoc":0,"modifier":[],"return":""},"ingres_errno":{"params":{"$link":""},"docComment":"Get the last Ingres error number generated","signature":"ingres_errno(resource $link )","inheritdoc":0,"modifier":[],"return":""},"ingres_error":{"params":{"$link":""},"docComment":"Get a meaningful error message for the last error generated","signature":"ingres_error(resource $link )","inheritdoc":0,"modifier":[],"return":""},"ingres_errsqlstate":{"params":{"$link":""},"docComment":"Get the last SQLSTATE error code generated","signature":"ingres_errsqlstate(resource $link )","inheritdoc":0,"modifier":[],"return":""},"ingres_escape_string":{"params":{"$link":"","$source_string":""},"docComment":"Escape special characters for use in a query","signature":"ingres_escape_string(resource $link ,string $source_string )","inheritdoc":0,"modifier":[],"return":""},"ingres_execute":{"params":{"$result":"","$params":"","$types":""},"docComment":"Execute a prepared query","signature":"ingres_execute(resource $result ,array $params ,string $types )","inheritdoc":0,"modifier":[],"return":""},"ingres_fetch_array":{"params":{"$result":"","$result_type":""},"docComment":"Fetch a row of result into an array","signature":"ingres_fetch_array(resource $result ,int $result_type )","inheritdoc":0,"modifier":[],"return":""},"ingres_fetch_assoc":{"params":{"$result":""},"docComment":"Fetch a row of result into an associative array","signature":"ingres_fetch_assoc(resource $result )","inheritdoc":0,"modifier":[],"return":""},"ingres_fetch_object":{"params":{"$result":"","$result_type":""},"docComment":"Fetch a row of result into an object","signature":"ingres_fetch_object(resource $result ,int $result_type )","inheritdoc":0,"modifier":[],"return":""},"ingres_fetch_proc_return":{"params":{"$result":""},"docComment":"Get the return value from a procedure call","signature":"ingres_fetch_proc_return(resource $result )","inheritdoc":0,"modifier":[],"return":""},"ingres_fetch_row":{"params":{"$result":""},"docComment":"Fetch a row of result into an enumerated array","signature":"ingres_fetch_row(resource $result )","inheritdoc":0,"modifier":[],"return":""},"ingres_field_length":{"params":{"$result":"","$index":""},"docComment":"Get the length of a field","signature":"ingres_field_length(resource $result ,int $index )","inheritdoc":0,"modifier":[],"return":""},"ingres_field_name":{"params":{"$result":"","$index":""},"docComment":"Get the name of a field in a query result","signature":"ingres_field_name(resource $result ,int $index )","inheritdoc":0,"modifier":[],"return":""},"ingres_field_nullable":{"params":{"$result":"","$index":""},"docComment":"Test if a field is nullable","signature":"ingres_field_nullable(resource $result ,int $index )","inheritdoc":0,"modifier":[],"return":""},"ingres_field_precision":{"params":{"$result":"","$index":""},"docComment":"Get the precision of a field","signature":"ingres_field_precision(resource $result ,int $index )","inheritdoc":0,"modifier":[],"return":""},"ingres_field_scale":{"params":{"$result":"","$index":""},"docComment":"Get the scale of a field","signature":"ingres_field_scale(resource $result ,int $index )","inheritdoc":0,"modifier":[],"return":""},"ingres_field_type":{"params":{"$result":"","$index":""},"docComment":"Get the type of a field in a query result","signature":"ingres_field_type(resource $result ,int $index )","inheritdoc":0,"modifier":[],"return":""},"ingres_free_result":{"params":{"$result":""},"docComment":"Free the resources associated with a result identifier","signature":"ingres_free_result(resource $result )","inheritdoc":0,"modifier":[],"return":""},"ingres_next_error":{"params":{"$link":""},"docComment":"Get the next Ingres error","signature":"ingres_next_error(resource $link )","inheritdoc":0,"modifier":[],"return":""},"ingres_num_fields":{"params":{"$result":""},"docComment":"Get the number of fields returned by the last query","signature":"ingres_num_fields(resource $result )","inheritdoc":0,"modifier":[],"return":""},"ingres_num_rows":{"params":{"$result":""},"docComment":"Get the number of rows affected or returned by a query","signature":"ingres_num_rows(resource $result )","inheritdoc":0,"modifier":[],"return":""},"ingres_pconnect":{"params":{"$database":"","$username":"","$password":"","$options":""},"docComment":"Open a persistent connection to an Ingres database","signature":"ingres_pconnect(string $database ,string $username ,string $password ,array $options )","inheritdoc":0,"modifier":[],"return":""},"ingres_prepare":{"params":{"$link":"","$query":""},"docComment":"Prepare a query for later execution","signature":"ingres_prepare(resource $link ,string $query )","inheritdoc":0,"modifier":[],"return":""},"ingres_query":{"params":{"$link":"","$query":"","$params":"","$types":""},"docComment":"Send an SQL query to Ingres","signature":"ingres_query(resource $link ,string $query ,array $params ,string $types )","inheritdoc":0,"modifier":[],"return":""},"ingres_result_seek":{"params":{"$result":"","$position":""},"docComment":"Set the row position before fetching data","signature":"ingres_result_seek(resource $result ,int $position )","inheritdoc":0,"modifier":[],"return":""},"ingres_rollback":{"params":{"$link":""},"docComment":"Roll back a transaction","signature":"ingres_rollback(resource $link )","inheritdoc":0,"modifier":[],"return":""},"ingres_set_environment":{"params":{"$link":"","$options":""},"docComment":"Set environment features controlling output options","signature":"ingres_set_environment(resource $link ,array $options )","inheritdoc":0,"modifier":[],"return":""},"ingres_unbuffered_query":{"params":{"$link":"","$query":"","$params":"","$types":""},"docComment":"Send an unbuffered  SQL query to Ingres","signature":"ingres_unbuffered_query(resource $link ,string $query ,array $params ,string $types )","inheritdoc":0,"modifier":[],"return":""},"inotify_add_watch":{"params":{"$inotify_instance":"","$pathname":"","$mask":""},"docComment":"Add a watch to an initialized inotify instance","signature":"inotify_add_watch(resource $inotify_instance ,string $pathname ,int $mask )","inheritdoc":0,"modifier":[],"return":""},"inotify_init":{"params":[],"docComment":"Initialize an inotify instance","signature":"inotify_init( )","inheritdoc":0,"modifier":[],"return":""},"inotify_queue_len":{"params":{"$inotify_instance":""},"docComment":"Return a number upper than zero if there are pending events","signature":"inotify_queue_len(resource $inotify_instance )","inheritdoc":0,"modifier":[],"return":""},"inotify_read":{"params":{"$inotify_instance":""},"docComment":"Read events from an inotify instance","signature":"inotify_read(resource $inotify_instance )","inheritdoc":0,"modifier":[],"return":""},"inotify_rm_watch":{"params":{"$inotify_instance":"","$watch_descriptor":""},"docComment":"Remove an existing watch from an inotify instance","signature":"inotify_rm_watch(resource $inotify_instance ,int $watch_descriptor )","inheritdoc":0,"modifier":[],"return":""},"java_last_exception_clear":{"params":[],"docComment":"Clear last Java exception","signature":"java_last_exception_clear( )","inheritdoc":0,"modifier":[],"return":""},"java_last_exception_get":{"params":[],"docComment":"Get last Java exception","signature":"java_last_exception_get( )","inheritdoc":0,"modifier":[],"return":""},"judy_type":{"params":{"$array":"Judy"},"docComment":"Return the type of a  array","signature":"judy_type(Judy $array )","inheritdoc":0,"modifier":[],"return":""},"judy_version":{"params":[],"docComment":"Return or print the current PHP Judy version","signature":"judy_version( )","inheritdoc":0,"modifier":[],"return":""},"kadm5_chpass_principal":{"params":{"$handle":"","$principal":"","$password":""},"docComment":"Changes the principal's password","signature":"kadm5_chpass_principal(resource $handle ,string $principal ,string $password )","inheritdoc":0,"modifier":[],"return":""},"kadm5_create_principal":{"params":{"$handle":"","$principal":"","$password":"","$options":""},"docComment":"Creates a kerberos principal with the given parameters","signature":"kadm5_create_principal(resource $handle ,string $principal ,string $password ,array $options )","inheritdoc":0,"modifier":[],"return":""},"kadm5_delete_principal":{"params":{"$handle":"","$principal":""},"docComment":"Deletes a kerberos principal","signature":"kadm5_delete_principal(resource $handle ,string $principal )","inheritdoc":0,"modifier":[],"return":""},"kadm5_destroy":{"params":{"$handle":""},"docComment":"Closes the connection to the admin server and releases all related resources","signature":"kadm5_destroy(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"kadm5_flush":{"params":{"$handle":""},"docComment":"Flush all changes to the Kerberos database","signature":"kadm5_flush(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"kadm5_get_policies":{"params":{"$handle":""},"docComment":"Gets all policies from the Kerberos database","signature":"kadm5_get_policies(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"kadm5_get_principal":{"params":{"$handle":"","$principal":""},"docComment":"Gets the principal's entries from the Kerberos database","signature":"kadm5_get_principal(resource $handle ,string $principal )","inheritdoc":0,"modifier":[],"return":""},"kadm5_get_principals":{"params":{"$handle":""},"docComment":"Gets all principals from the Kerberos database","signature":"kadm5_get_principals(resource $handle )","inheritdoc":0,"modifier":[],"return":""},"kadm5_init_with_password":{"params":{"$admin_server":"","$realm":"","$principal":"","$password":""},"docComment":"Opens a connection to the KADM5 library","signature":"kadm5_init_with_password(string $admin_server ,string $realm ,string $principal ,string $password )","inheritdoc":0,"modifier":[],"return":""},"kadm5_modify_principal":{"params":{"$handle":"","$principal":"","$options":""},"docComment":"Modifies a kerberos principal with the given parameters","signature":"kadm5_modify_principal(resource $handle ,string $principal ,array $options )","inheritdoc":0,"modifier":[],"return":""},"event_add":{"params":{"$event":"","$timeout":""},"docComment":"Add an event to the set of monitored events","signature":"(resource $event ,[int $timeout] )","inheritdoc":0,"modifier":[],"return":""},"event_base_free":{"params":{"$event_base":""},"docComment":"Destroy event base","signature":"event_base_free(resource $event_base )","inheritdoc":0,"modifier":[],"return":""},"event_base_loop":{"params":{"$event_base":"","$flags":""},"docComment":"Handle events","signature":"event_base_loop(resource $event_base ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"event_base_loopbreak":{"params":{"$event_base":""},"docComment":"Abort event loop","signature":"event_base_loopbreak(resource $event_base )","inheritdoc":0,"modifier":[],"return":""},"event_base_loopexit":{"params":{"$event_base":"","$timeout":""},"docComment":"Exit loop after a time","signature":"event_base_loopexit(resource $event_base ,[int $timeout] )","inheritdoc":0,"modifier":[],"return":""},"event_base_new":{"params":[],"docComment":"Create and initialize new event base","signature":"event_base_new( )","inheritdoc":0,"modifier":[],"return":""},"event_base_priority_init":{"params":{"$event_base":"","$npriorities":""},"docComment":"Set the number of event priority levels","signature":"event_base_priority_init(resource $event_base ,int $npriorities )","inheritdoc":0,"modifier":[],"return":""},"event_base_set":{"params":{"$event":"","$event_base":""},"docComment":"Associate event base with an event","signature":"event_base_set(resource $event ,resource $event_base )","inheritdoc":0,"modifier":[],"return":""},"event_buffer_base_set":{"params":{"$bevent":"","$event_base":""},"docComment":"Associate buffered event with an event base","signature":"event_buffer_base_set(resource $bevent ,resource $event_base )","inheritdoc":0,"modifier":[],"return":""},"event_buffer_disable":{"params":{"$bevent":"","$events":""},"docComment":"Disable a buffered event","signature":"event_buffer_disable(resource $bevent ,int $events )","inheritdoc":0,"modifier":[],"return":""},"event_buffer_enable":{"params":{"$bevent":"","$events":""},"docComment":"Enable a buffered event","signature":"event_buffer_enable(resource $bevent ,int $events )","inheritdoc":0,"modifier":[],"return":""},"event_buffer_fd_set":{"params":{"$bevent":"","$fd":""},"docComment":"Change a buffered event file descriptor","signature":"event_buffer_fd_set(resource $bevent ,resource $fd )","inheritdoc":0,"modifier":[],"return":""},"event_buffer_free":{"params":{"$bevent":""},"docComment":"Destroy buffered event","signature":"event_buffer_free(resource $bevent )","inheritdoc":0,"modifier":[],"return":""},"event_buffer_new":{"params":{"$stream":"","$readcb":"","$writecb":"","$errorcb":"","$arg":""},"docComment":"Create new buffered event","signature":"event_buffer_new(resource $stream ,mixed $readcb ,mixed $writecb ,mixed $errorcb ,mixed $arg )","inheritdoc":0,"modifier":[],"return":""},"event_buffer_priority_set":{"params":{"$bevent":"","$priority":""},"docComment":"Assign a priority to a buffered event","signature":"event_buffer_priority_set(resource $bevent ,int $priority )","inheritdoc":0,"modifier":[],"return":""},"event_buffer_read":{"params":{"$bevent":"","$data_size":""},"docComment":"Read data from a buffered event","signature":"event_buffer_read(resource $bevent ,int $data_size )","inheritdoc":0,"modifier":[],"return":""},"event_buffer_set_callback":{"params":{"$event":"","$readcb":"","$writecb":"","$errorcb":"","$arg":""},"docComment":"Set or reset callbacks for a buffered event","signature":"event_buffer_set_callback(resource $event ,mixed $readcb ,mixed $writecb ,mixed $errorcb ,mixed $arg )","inheritdoc":0,"modifier":[],"return":""},"event_buffer_timeout_set":{"params":{"$bevent":"","$read_timeout":"","$write_timeout":""},"docComment":"Set read and write timeouts for a buffered event","signature":"event_buffer_timeout_set(resource $bevent ,int $read_timeout ,int $write_timeout )","inheritdoc":0,"modifier":[],"return":""},"event_buffer_watermark_set":{"params":{"$bevent":"","$events":"","$lowmark":"","$highmark":""},"docComment":"Set the watermarks for read and write events","signature":"event_buffer_watermark_set(resource $bevent ,int $events ,int $lowmark ,int $highmark )","inheritdoc":0,"modifier":[],"return":""},"event_buffer_write":{"params":{"$bevent":"","$data":"","$data_size":""},"docComment":"Write data to a buffered event","signature":"event_buffer_write(resource $bevent ,string $data ,[int $data_size] )","inheritdoc":0,"modifier":[],"return":""},"event_del":{"params":{"$event":""},"docComment":"Remove an event from the set of monitored events","signature":"(resource $event )","inheritdoc":0,"modifier":[],"return":""},"event_free":{"params":{"$event":""},"docComment":"Free event resource","signature":"(resource $event )","inheritdoc":0,"modifier":[],"return":""},"event_new":{"params":[],"docComment":"Create new event","signature":"event_new( )","inheritdoc":0,"modifier":[],"return":""},"event_set":{"params":{"$event":"","$fd":"","$events":"","$callback":"","$arg":""},"docComment":"Prepare an event","signature":"(resource $event ,mixed $fd ,int $events ,mixed $callback ,mixed $arg )","inheritdoc":0,"modifier":[],"return":""},"lzf_compress":{"params":{"$data":""},"docComment":"\n   LZF compression\n  ","signature":"lzf_compress(string $data )","inheritdoc":0,"modifier":[],"return":""},"lzf_decompress":{"params":{"$data":""},"docComment":"\n   LZF decompression\n  ","signature":"lzf_decompress(string $data )","inheritdoc":0,"modifier":[],"return":""},"lzf_optimized_for":{"params":[],"docComment":"\n   Determines what LZF extension was optimized for\n  ","signature":"lzf_optimized_for( )","inheritdoc":0,"modifier":[],"return":""},"mailparse_determine_best_xfer_encoding":{"params":{"$fp":""},"docComment":"Gets the best way of encoding","signature":"mailparse_determine_best_xfer_encoding(resource $fp )","inheritdoc":0,"modifier":[],"return":""},"mailparse_msg_create":{"params":[],"docComment":"Create a mime mail resource","signature":"mailparse_msg_create( )","inheritdoc":0,"modifier":[],"return":""},"mailparse_msg_extract_part_file":{"params":{"$mimemail":"","$filename":"","$callbackfunc":""},"docComment":"Extracts\/decodes a message section","signature":"mailparse_msg_extract_part_file(resource $mimemail ,mixed $filename ,callable $callbackfunc )","inheritdoc":0,"modifier":[],"return":""},"mailparse_msg_extract_part":{"params":{"$mimemail":"","$msgbody":"","$callbackfunc":""},"docComment":"\n   Extracts\/decodes a message section\n  ","signature":"mailparse_msg_extract_part(resource $mimemail ,string $msgbody ,callable $callbackfunc )","inheritdoc":0,"modifier":[],"return":""},"mailparse_msg_extract_whole_part_file":{"params":{"$mimemail":"","$filename":"","$callbackfunc":""},"docComment":"Extracts a message section including headers without decoding the transfer encoding","signature":"mailparse_msg_extract_whole_part_file(resource $mimemail ,string $filename ,callable $callbackfunc )","inheritdoc":0,"modifier":[],"return":""},"mailparse_msg_free":{"params":{"$mimemail":""},"docComment":"Frees a MIME resource","signature":"mailparse_msg_free(resource $mimemail )","inheritdoc":0,"modifier":[],"return":""},"mailparse_msg_get_part_data":{"params":{"$mimemail":""},"docComment":"Returns an associative array of info about the message","signature":"mailparse_msg_get_part_data(resource $mimemail )","inheritdoc":0,"modifier":[],"return":""},"mailparse_msg_get_part":{"params":{"$mimemail":"","$mimesection":""},"docComment":"Returns a handle on a given section in a mimemessage","signature":"mailparse_msg_get_part(resource $mimemail ,string $mimesection )","inheritdoc":0,"modifier":[],"return":""},"mailparse_msg_get_structure":{"params":{"$mimemail":""},"docComment":"Returns an array of mime section names in the supplied message","signature":"mailparse_msg_get_structure(resource $mimemail )","inheritdoc":0,"modifier":[],"return":""},"mailparse_msg_parse_file":{"params":{"$filename":""},"docComment":"Parses a file","signature":"mailparse_msg_parse_file(string $filename )","inheritdoc":0,"modifier":[],"return":""},"mailparse_msg_parse":{"params":{"$mimemail":"","$data":""},"docComment":"Incrementally parse data into buffer","signature":"mailparse_msg_parse(resource $mimemail ,string $data )","inheritdoc":0,"modifier":[],"return":""},"mailparse_rfc822_parse_addresses":{"params":{"$addresses":""},"docComment":"Parse RFC 822 compliant addresses","signature":"mailparse_rfc822_parse_addresses(string $addresses )","inheritdoc":0,"modifier":[],"return":""},"mailparse_stream_encode":{"params":{"$sourcefp":"","$destfp":"","$encoding":""},"docComment":"\n   Streams data from source file pointer, apply encoding and write to destfp \n  ","signature":"mailparse_stream_encode(resource $sourcefp ,resource $destfp ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"mailparse_uudecode_all":{"params":{"$fp":""},"docComment":"\n   Scans the data from fp and extract each embedded uuencoded file\n  ","signature":"mailparse_uudecode_all(resource $fp )","inheritdoc":0,"modifier":[],"return":""},"maxdb_affected_rows":{"params":{"$link":""},"docComment":"Gets the number of affected rows in a previous MaxDB operation","signature":"maxdb_affected_rows(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_autocommit":{"params":{"$link":"","$mode":""},"docComment":"Turns on or off auto-commiting database modifications","signature":"maxdb::auto_commit(bool $mode )","inheritdoc":0,"modifier":[],"return":""},"maxdb_bind_param":{"params":{"$stmt":"","$types":"","&$var1":"","&$...":"","&$var":""},"docComment":"Binds variables to a prepared statement as parameters","signature":"maxdb_stmt::bind_param(string $types ,array &$var )","inheritdoc":0,"modifier":[],"return":""},"maxdb_bind_result":{"params":{"$stmt":"","&$var1":"","&$...":""},"docComment":"Binds variables to a prepared statement for result storage","signature":"maxdb_stmt::bind_result(mixed &$var1 ,mixed &$... )","inheritdoc":0,"modifier":[],"return":""},"maxdb_change_user":{"params":{"$link":"","$user":"","$password":"","$database":""},"docComment":"Changes the user of the specified database connection","signature":"maxdb::change_user(string $user ,string $password ,string $database )","inheritdoc":0,"modifier":[],"return":""},"maxdb_character_set_name":{"params":{"$link":""},"docComment":"Returns the default character set for the database connection","signature":"maxdb::character_set_name( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_client_encoding":{"params":{"$link":""},"docComment":"Returns the default character set for the database connection","signature":"maxdb::character_set_name( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_close_long_data":{"params":{"$stmt":"","$param_nr":""},"docComment":"Ends a sequence of  ","signature":"maxdb_stmt::close_long_data( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_close":{"params":{"$link":""},"docComment":"Closes a previously opened database connection","signature":"maxdb::close( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_commit":{"params":{"$link":""},"docComment":"Commits the current transaction","signature":"maxdb::commit( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_connect_errno":{"params":[],"docComment":"Returns the error code from last connect call","signature":"maxdb_connect_errno( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_connect_error":{"params":[],"docComment":"Returns a string description of the last connect error","signature":"maxdb_connect_error( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_connect":{"params":{"$host":"","$username":"","$passwd":"","$dbname":"","$port":"","$socket":""},"docComment":"Open a new connection to the MaxDB server","signature":"maxdb_connect(string $host ,string $username ,string $passwd ,string $dbname ,[int $port] ,string $socket )","inheritdoc":0,"modifier":[],"return":""},"maxdb_data_seek":{"params":{"$result":"","$offset":""},"docComment":"Adjusts the result pointer to an arbitary row in the result","signature":"maxdb_result::data_seek(int $offset )","inheritdoc":0,"modifier":[],"return":""},"maxdb_debug":{"params":{"$debug":""},"docComment":"Performs debugging operations","signature":"maxdb_debug(string $debug )","inheritdoc":0,"modifier":[],"return":""},"maxdb_disable_reads_from_master":{"params":{"$link":""},"docComment":"Disable reads from master","signature":"maxdb::disable_reads_from_master( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_disable_rpl_parse":{"params":{"$link":""},"docComment":"Disable RPL parse","signature":"maxdb_disable_rpl_parse(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_dump_debug_info":{"params":{"$link":""},"docComment":"Dump debugging information into the log","signature":"maxdb_dump_debug_info(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_embedded_connect":{"params":{"$dbname":""},"docComment":"Open a connection to an embedded MaxDB server","signature":"maxdb_embedded_connect(string $dbname )","inheritdoc":0,"modifier":[],"return":""},"maxdb_enable_reads_from_master":{"params":{"$link":""},"docComment":"Enable reads from master","signature":"maxdb_enable_reads_from_master(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_enable_rpl_parse":{"params":{"$link":""},"docComment":"Enable RPL parse","signature":"maxdb_enable_rpl_parse(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_errno":{"params":{"$link":""},"docComment":"Returns the error code for the most recent function call","signature":"maxdb_errno(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_error":{"params":{"$link":""},"docComment":"Returns a string description of the last error","signature":"maxdb_error(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_escape_string":{"params":{"$link":"","$escapestr":""},"docComment":"Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection","signature":"maxdb::real_escape_string(string $escapestr )","inheritdoc":0,"modifier":[],"return":""},"maxdb_execute":{"params":{"$stmt":""},"docComment":"Executes a prepared Query","signature":"maxdb_stmt::execute( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_fetch_array":{"params":{"$result":"","$resulttype":""},"docComment":"Fetch a result row as an associative, a numeric array, or both","signature":"maxdb_result::fetch_array(int $resulttype )","inheritdoc":0,"modifier":[],"return":""},"maxdb_fetch_assoc":{"params":{"$result":""},"docComment":"Fetch a result row as an associative array","signature":"maxdb_result::fetch_assoc( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_fetch_field_direct":{"params":{"$result":"","$fieldnr":""},"docComment":"Fetch meta-data for a single field","signature":"maxdb_result::fetch_field_direct(int $fieldnr )","inheritdoc":0,"modifier":[],"return":""},"maxdb_fetch_field":{"params":{"$result":""},"docComment":"Returns the next field in the result set","signature":"maxdb_result::fetch_field( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_fetch_fields":{"params":{"$result":""},"docComment":"Returns an array of resources representing the fields in a result set","signature":"maxdb_result::fetch_fields( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_fetch_lengths":{"params":{"$result":""},"docComment":"Returns the lengths of the columns of the current row in the result set","signature":"maxdb_fetch_lengths(resource $result )","inheritdoc":0,"modifier":[],"return":""},"maxdb_fetch_object":{"params":{"$result":""},"docComment":"Returns the current row of a result set as an object","signature":"maxdb_result::fetch_object( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_fetch_row":{"params":{"$result":""},"docComment":"Get a result row as an enumerated array","signature":"maxdb_result::fetch_row( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_fetch":{"params":{"$stmt":""},"docComment":"Fetch results from a prepared statement into the bound variables","signature":"maxdb_stmt::fetch( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_field_count":{"params":{"$link":""},"docComment":"Returns the number of columns for the most recent query","signature":"maxdb::field_count( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_field_seek":{"params":{"$result":"","$fieldnr":""},"docComment":"Set result pointer to a specified field offset","signature":"maxdb_result::field_seek(int $fieldnr )","inheritdoc":0,"modifier":[],"return":""},"maxdb_field_tell":{"params":{"$result":""},"docComment":"Get current field offset of a result pointer","signature":"maxdb_field_tell(resource $result )","inheritdoc":0,"modifier":[],"return":""},"maxdb_free_result":{"params":{"$result":""},"docComment":"Frees the memory associated with a result","signature":"maxdb_result::free( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_get_client_info":{"params":[],"docComment":"Returns the MaxDB client version as a string","signature":"maxdb_get_client_info( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_get_client_version":{"params":[],"docComment":"Get MaxDB client info","signature":"maxdb_get_client_version( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_get_host_info":{"params":{"$link":""},"docComment":"Returns a string representing the type of connection used","signature":"maxdb_get_host_info(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_get_metadata":{"params":{"$stmt":""},"docComment":"Returns result set metadata from a prepared statement","signature":"maxdb_stmt::result_metadata( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_get_proto_info":{"params":{"$link":""},"docComment":"Returns the version of the MaxDB protocol used","signature":"maxdb_get_proto_info(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_get_server_info":{"params":{"$link":""},"docComment":"Returns the version of the MaxDB server","signature":"maxdb_get_server_info(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_get_server_version":{"params":{"$link":""},"docComment":"Returns the version of the MaxDB server as an integer","signature":"maxdb_get_server_version(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_info":{"params":{"$link":""},"docComment":"Retrieves information about the most recently executed query","signature":"maxdb_info(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_init":{"params":[],"docComment":"Initializes MaxDB and returns an resource for use with maxdb_real_connect","signature":"maxdb_init( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_insert_id":{"params":{"$link":""},"docComment":"Returns the auto generated id used in the last query","signature":"maxdb_insert_id(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_kill":{"params":{"$link":"","$processid":""},"docComment":"Disconnects from a MaxDB server","signature":"maxdb::kill(int $processid )","inheritdoc":0,"modifier":[],"return":""},"maxdb_master_query":{"params":{"$link":"","$query":""},"docComment":"Enforce execution of a query on the master in a master\/slave setup","signature":"maxdb_master_query(resource $link ,string $query )","inheritdoc":0,"modifier":[],"return":""},"maxdb_more_results":{"params":{"$link":""},"docComment":"Check if there any more query results from a multi query","signature":"maxdb_more_results(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_multi_query":{"params":{"$link":"","$query":""},"docComment":"Performs a query on the database","signature":"maxdb::multi_query(string $query )","inheritdoc":0,"modifier":[],"return":""},"maxdb_next_result":{"params":{"$link":""},"docComment":"Prepare next result from multi_query","signature":"maxdb_next_result(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_num_fields":{"params":{"$result":""},"docComment":"Get the number of fields in a result","signature":"maxdb_num_fields(resource $result )","inheritdoc":0,"modifier":[],"return":""},"maxdb_num_rows":{"params":{"$result":""},"docComment":"Gets the number of rows in a result","signature":"maxdb_num_rows(resource $result )","inheritdoc":0,"modifier":[],"return":""},"maxdb_options":{"params":{"$link":"","$option":"","$value":""},"docComment":"Set options","signature":"maxdb::options(int $option ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"maxdb_param_count":{"params":{"$stmt":""},"docComment":"Returns the number of parameter for the given statement","signature":"maxdb_stmt_param_count(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"maxdb_ping":{"params":{"$link":""},"docComment":"Pings a server connection, or tries to reconnect if the connection has gone down","signature":"maxdb::ping( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_prepare":{"params":{"$link":"","$query":""},"docComment":"Prepare an SQL statement for execution","signature":"maxdb::prepare(string $query )","inheritdoc":0,"modifier":[],"return":""},"maxdb_query":{"params":{"$link":"","$query":"","$resultmode":""},"docComment":"Performs a query on the database","signature":"maxdb::query(string $query )","inheritdoc":0,"modifier":[],"return":""},"maxdb_real_connect":{"params":{"$link":"","$hostname":"","$username":"","$passwd":"","$dbname":"","$port":"","$socket":""},"docComment":"Opens a connection to a MaxDB server","signature":"maxdb::real_connect(string $hostname ,string $username ,string $passwd ,string $dbname ,[int $port] ,string $socket )","inheritdoc":0,"modifier":[],"return":""},"maxdb_real_escape_string":{"params":{"$link":"","$escapestr":""},"docComment":"Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection","signature":"maxdb::real_escape_string(string $escapestr )","inheritdoc":0,"modifier":[],"return":""},"maxdb_real_query":{"params":{"$link":"","$query":""},"docComment":"Execute an SQL query","signature":"maxdb::real_query(string $query )","inheritdoc":0,"modifier":[],"return":""},"maxdb_report":{"params":{"$flags":""},"docComment":"Enables or disables internal report functions","signature":"maxdb_report(int $flags )","inheritdoc":0,"modifier":[],"return":""},"maxdb_rollback":{"params":{"$link":""},"docComment":"Rolls back current transaction","signature":"maxdb::rollback( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_rpl_parse_enabled":{"params":{"$link":""},"docComment":"Check if RPL parse is enabled","signature":"maxdb_rpl_parse_enabled(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_rpl_probe":{"params":{"$link":""},"docComment":"RPL probe","signature":"maxdb_rpl_probe(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_rpl_query_type":{"params":{"$link":""},"docComment":"Returns RPL query type","signature":"maxdb::rpl_query_type( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_select_db":{"params":{"$link":"","$dbname":""},"docComment":"Selects the default database for database queries","signature":"maxdb_select_db(resource $link ,string $dbname )","inheritdoc":0,"modifier":[],"return":""},"maxdb_send_long_data":{"params":{"$stmt":"","$param_nr":"","$data":""},"docComment":"Send data in blocks","signature":"maxdb_stmt::stmt_send_long_data(int $param_nr ,string $data )","inheritdoc":0,"modifier":[],"return":""},"maxdb_send_query":{"params":{"$link":"","$query":""},"docComment":"Send the query and return","signature":"maxdb::send_query(string $query )","inheritdoc":0,"modifier":[],"return":""},"maxdb_server_end":{"params":[],"docComment":"Shut down the embedded server","signature":"maxdb_server_end( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_server_init":{"params":{"$server":"","$groups":""},"docComment":"Initialize embedded server","signature":"maxdb_server_init(array $server ,array $groups )","inheritdoc":0,"modifier":[],"return":""},"maxdb_set_opt":{"params":{"$link":"","$option":"","$value":""},"docComment":"Set options","signature":"maxdb::options(int $option ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"maxdb_sqlstate":{"params":{"$link":""},"docComment":"Returns the SQLSTATE error from previous MaxDB operation","signature":"maxdb_sqlstate(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_ssl_set":{"params":{"$link":"","$key":"","$cert":"","$ca":"","$capath":"","$cipher":""},"docComment":"Used for establishing secure connections using SSL","signature":"maxdb::ssl_set(string $key ,string $cert ,string $ca ,string $capath ,string $cipher )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stat":{"params":{"$link":""},"docComment":"Gets the current system status","signature":"maxdb::stat( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_affected_rows":{"params":{"$stmt":""},"docComment":"Returns the total number of rows changed, deleted, or\n  inserted by the last executed statement\n  ","signature":"maxdb_stmt_affected_rows(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_bind_param":{"params":{"$stmt":"","$types":"","&$var1":"","&$...":"","&$var":""},"docComment":"Binds variables to a prepared statement as parameters","signature":"maxdb_stmt::bind_param(string $types ,array &$var )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_bind_result":{"params":{"$stmt":"","&$var1":"","&$...":""},"docComment":"Binds variables to a prepared statement for result storage","signature":"maxdb_stmt::bind_result(mixed &$var1 ,mixed &$... )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_close_long_data":{"params":{"$stmt":"","$param_nr":""},"docComment":"Ends a sequence of  ","signature":"maxdb_stmt::close_long_data( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_close":{"params":{"$stmt":""},"docComment":"Closes a prepared statement","signature":"maxdb_stmt::close( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_data_seek":{"params":{"$statement":"","$offset":""},"docComment":"Seeks to an arbitray row in statement result set","signature":"maxdb_stmt::data_seek(int $offset )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_errno":{"params":{"$stmt":""},"docComment":"Returns the error code for the most recent statement call","signature":"maxdb_stmt_errno(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_error":{"params":{"$stmt":""},"docComment":"Returns a string description for last statement error","signature":"maxdb_stmt_error(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_execute":{"params":{"$stmt":""},"docComment":"Executes a prepared Query","signature":"maxdb_stmt::execute( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_fetch":{"params":{"$stmt":""},"docComment":"Fetch results from a prepared statement into the bound variables","signature":"maxdb_stmt::fetch( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_free_result":{"params":{"$stmt":""},"docComment":"Frees stored result memory for the given statement handle","signature":"maxdb_stmt::free_result( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_init":{"params":{"$link":""},"docComment":"Initializes a statement and returns an resource for use with maxdb_stmt_prepare","signature":"maxdb::stmt_init( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_num_rows":{"params":{"$stmt":""},"docComment":"Return the number of rows in statements result set","signature":"maxdb_stmt_num_rows(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_param_count":{"params":{"$stmt":""},"docComment":"Returns the number of parameter for the given statement","signature":"maxdb_stmt_param_count(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_prepare":{"params":{"$stmt":"","$query":""},"docComment":"Prepare an SQL statement for execution","signature":"maxdb_stmt::prepare(string $query )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_reset":{"params":{"$stmt":""},"docComment":"Resets a prepared statement","signature":"maxdb_stmt::reset( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_result_metadata":{"params":{"$stmt":""},"docComment":"Returns result set metadata from a prepared statement","signature":"maxdb_stmt::result_metadata( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_send_long_data":{"params":{"$stmt":"","$param_nr":"","$data":""},"docComment":"Send data in blocks","signature":"maxdb_stmt::stmt_send_long_data(int $param_nr ,string $data )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_sqlstate":{"params":{"$stmt":""},"docComment":"Returns SQLSTATE error from previous statement operation","signature":"maxdb_stmt_sqlstate(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"maxdb_stmt_store_result":{"params":{"$stmt":""},"docComment":"Transfers a result set from a prepared statement","signature":"maxdb_stmt::store_result( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_store_result":{"params":{"$link":""},"docComment":"Transfers a result set from the last query","signature":"maxdb::store_result( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_thread_id":{"params":{"$link":""},"docComment":"Returns the thread ID for the current connection","signature":"maxdb_thread_id(resource $link )","inheritdoc":0,"modifier":[],"return":""},"maxdb_thread_safe":{"params":[],"docComment":"Returns whether thread safety is given or not","signature":"maxdb_thread_safe( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_use_result":{"params":{"$link":""},"docComment":"Initiate a result set retrieval","signature":"maxdb::use_result( )","inheritdoc":0,"modifier":[],"return":""},"maxdb_warning_count":{"params":{"$link":""},"docComment":"Returns the number of warnings from the last query for the given link","signature":"maxdb_warning_count(resource $link )","inheritdoc":0,"modifier":[],"return":""},"m_checkstatus":{"params":{"$conn":"","$identifier":""},"docComment":"Check to see if a transaction has completed","signature":"m_checkstatus(resource $conn ,int $identifier )","inheritdoc":0,"modifier":[],"return":""},"m_completeauthorizations":{"params":{"$conn":"","&$array":""},"docComment":"Number of complete authorizations in queue, returning an array of their identifiers","signature":"m_completeauthorizations(resource $conn ,int &$array )","inheritdoc":0,"modifier":[],"return":""},"m_connect":{"params":{"$conn":""},"docComment":"Establish the connection to MCVE","signature":"m_connect(resource $conn )","inheritdoc":0,"modifier":[],"return":""},"m_connectionerror":{"params":{"$conn":""},"docComment":"Get a textual representation of why a connection failed","signature":"m_connectionerror(resource $conn )","inheritdoc":0,"modifier":[],"return":""},"m_deletetrans":{"params":{"$conn":"","$identifier":""},"docComment":"Delete specified transaction from MCVE_CONN structure","signature":"m_deletetrans(resource $conn ,int $identifier )","inheritdoc":0,"modifier":[],"return":""},"m_destroyconn":{"params":{"$conn":""},"docComment":"Destroy the connection and MCVE_CONN structure","signature":"m_destroyconn(resource $conn )","inheritdoc":0,"modifier":[],"return":""},"m_destroyengine":{"params":[],"docComment":"Free memory associated with IP\/SSL connectivity","signature":"m_destroyengine( )","inheritdoc":0,"modifier":[],"return":""},"m_getcell":{"params":{"$conn":"","$identifier":"","$column":"","$row":""},"docComment":"Get a specific cell from a comma delimited response by column name","signature":"m_getcell(resource $conn ,int $identifier ,string $column ,int $row )","inheritdoc":0,"modifier":[],"return":""},"m_getcellbynum":{"params":{"$conn":"","$identifier":"","$column":"","$row":""},"docComment":"Get a specific cell from a comma delimited response by column number","signature":"m_getcellbynum(resource $conn ,int $identifier ,int $column ,int $row )","inheritdoc":0,"modifier":[],"return":""},"m_getcommadelimited":{"params":{"$conn":"","$identifier":""},"docComment":"Get the RAW comma delimited data returned from MCVE","signature":"m_getcommadelimited(resource $conn ,int $identifier )","inheritdoc":0,"modifier":[],"return":""},"m_getheader":{"params":{"$conn":"","$identifier":"","$column_num":""},"docComment":"Get the name of the column in a comma-delimited response","signature":"m_getheader(resource $conn ,int $identifier ,int $column_num )","inheritdoc":0,"modifier":[],"return":""},"m_initconn":{"params":[],"docComment":"Create and initialize an MCVE_CONN structure","signature":"m_initconn( )","inheritdoc":0,"modifier":[],"return":""},"m_initengine":{"params":{"$location":""},"docComment":"Ready the client for IP\/SSL Communication","signature":"m_initengine(string $location )","inheritdoc":0,"modifier":[],"return":""},"m_iscommadelimited":{"params":{"$conn":"","$identifier":""},"docComment":"Checks to see if response is comma delimited","signature":"m_iscommadelimited(resource $conn ,int $identifier )","inheritdoc":0,"modifier":[],"return":""},"m_maxconntimeout":{"params":{"$conn":"","$secs":""},"docComment":"The maximum amount of time the API will attempt a connection to MCVE","signature":"m_maxconntimeout(resource $conn ,int $secs )","inheritdoc":0,"modifier":[],"return":""},"m_monitor":{"params":{"$conn":""},"docComment":"Perform communication with MCVE (send\/receive data) Non-blocking","signature":"m_monitor(resource $conn )","inheritdoc":0,"modifier":[],"return":""},"m_numcolumns":{"params":{"$conn":"","$identifier":""},"docComment":"Number of columns returned in a comma delimited response","signature":"m_numcolumns(resource $conn ,int $identifier )","inheritdoc":0,"modifier":[],"return":""},"m_numrows":{"params":{"$conn":"","$identifier":""},"docComment":"Number of rows returned in a comma delimited response","signature":"m_numrows(resource $conn ,int $identifier )","inheritdoc":0,"modifier":[],"return":""},"m_parsecommadelimited":{"params":{"$conn":"","$identifier":""},"docComment":"Parse the comma delimited response so m_getcell, etc will work","signature":"m_parsecommadelimited(resource $conn ,int $identifier )","inheritdoc":0,"modifier":[],"return":""},"m_responsekeys":{"params":{"$conn":"","$identifier":""},"docComment":"Returns array of strings which represents the keys that can be used\n for response parameters on this transaction","signature":"m_responsekeys(resource $conn ,int $identifier )","inheritdoc":0,"modifier":[],"return":""},"m_responseparam":{"params":{"$conn":"","$identifier":"","$key":""},"docComment":"Get a custom response parameter","signature":"m_responseparam(resource $conn ,int $identifier ,string $key )","inheritdoc":0,"modifier":[],"return":""},"m_returnstatus":{"params":{"$conn":"","$identifier":""},"docComment":"Check to see if the transaction was successful","signature":"m_returnstatus(resource $conn ,int $identifier )","inheritdoc":0,"modifier":[],"return":""},"m_setblocking":{"params":{"$conn":"","$tf":""},"docComment":"Set blocking\/non-blocking mode for connection","signature":"m_setblocking(resource $conn ,int $tf )","inheritdoc":0,"modifier":[],"return":""},"m_setdropfile":{"params":{"$conn":"","$directory":""},"docComment":"Set the connection method to Drop-File","signature":"m_setdropfile(resource $conn ,string $directory )","inheritdoc":0,"modifier":[],"return":""},"m_setip":{"params":{"$conn":"","$host":"","$port":""},"docComment":"Set the connection method to IP","signature":"m_setip(resource $conn ,string $host ,int $port )","inheritdoc":0,"modifier":[],"return":""},"m_setssl_cafile":{"params":{"$conn":"","$cafile":""},"docComment":"Set SSL CA (Certificate Authority) file for verification of server\n certificate","signature":"m_setssl_cafile(resource $conn ,string $cafile )","inheritdoc":0,"modifier":[],"return":""},"m_setssl_files":{"params":{"$conn":"","$sslkeyfile":"","$sslcertfile":""},"docComment":"Set certificate key files and certificates if server requires client certificate\n verification","signature":"m_setssl_files(resource $conn ,string $sslkeyfile ,string $sslcertfile )","inheritdoc":0,"modifier":[],"return":""},"m_setssl":{"params":{"$conn":"","$host":"","$port":""},"docComment":"Set the connection method to SSL","signature":"m_setssl(resource $conn ,string $host ,int $port )","inheritdoc":0,"modifier":[],"return":""},"m_settimeout":{"params":{"$conn":"","$seconds":""},"docComment":"Set maximum transaction time (per trans)","signature":"m_settimeout(resource $conn ,int $seconds )","inheritdoc":0,"modifier":[],"return":""},"m_sslcert_gen_hash":{"params":{"$filename":""},"docComment":"Generate hash for SSL client certificate verification","signature":"m_sslcert_gen_hash(string $filename )","inheritdoc":0,"modifier":[],"return":""},"m_transactionssent":{"params":{"$conn":""},"docComment":"Check to see if outgoing buffer is clear","signature":"m_transactionssent(resource $conn )","inheritdoc":0,"modifier":[],"return":""},"m_transinqueue":{"params":{"$conn":""},"docComment":"Number of transactions in client-queue","signature":"m_transinqueue(resource $conn )","inheritdoc":0,"modifier":[],"return":""},"m_transkeyval":{"params":{"$conn":"","$identifier":"","$key":"","$value":""},"docComment":"Add key\/value pair to a transaction. Replaces deprecated transparam()","signature":"m_transkeyval(resource $conn ,int $identifier ,string $key ,string $value )","inheritdoc":0,"modifier":[],"return":""},"m_transnew":{"params":{"$conn":""},"docComment":"Start a new transaction","signature":"m_transnew(resource $conn )","inheritdoc":0,"modifier":[],"return":""},"m_transsend":{"params":{"$conn":"","$identifier":""},"docComment":"Finalize and send the transaction","signature":"m_transsend(resource $conn ,int $identifier )","inheritdoc":0,"modifier":[],"return":""},"m_uwait":{"params":{"$microsecs":""},"docComment":"Wait x microsecs","signature":"m_uwait(int $microsecs )","inheritdoc":0,"modifier":[],"return":""},"m_validateidentifier":{"params":{"$conn":"","$tf":""},"docComment":"Whether or not to validate the passed identifier on any transaction it is passed to","signature":"m_validateidentifier(resource $conn ,int $tf )","inheritdoc":0,"modifier":[],"return":""},"m_verifyconnection":{"params":{"$conn":"","$tf":""},"docComment":"Set whether or not to PING upon connect to verify connection","signature":"m_verifyconnection(resource $conn ,int $tf )","inheritdoc":0,"modifier":[],"return":""},"m_verifysslcert":{"params":{"$conn":"","$tf":""},"docComment":"Set whether or not to verify the server ssl certificate","signature":"m_verifysslcert(resource $conn ,int $tf )","inheritdoc":0,"modifier":[],"return":""},"memcache_debug":{"params":{"$on_off":""},"docComment":"Turn debug output on\/off","signature":"memcache_debug(bool $on_off )","inheritdoc":0,"modifier":[],"return":""},"ming_keypress":{"params":{"$char":""},"docComment":"Returns the action flag for keyPress(char)","signature":"ming_keypress(string $char )","inheritdoc":0,"modifier":[],"return":""},"ming_setcubicthreshold":{"params":{"$threshold":""},"docComment":"\n   Set cubic threshold\n  ","signature":"ming_setcubicthreshold(int $threshold )","inheritdoc":0,"modifier":[],"return":""},"ming_setscale":{"params":{"$scale":""},"docComment":"\n   Set the global scaling factor.\n  ","signature":"ming_setscale(float $scale )","inheritdoc":0,"modifier":[],"return":""},"ming_setswfcompression":{"params":{"$level":""},"docComment":"Sets the SWF output compression","signature":"ming_setswfcompression(int $level )","inheritdoc":0,"modifier":[],"return":""},"ming_useconstants":{"params":{"$use":""},"docComment":"Use constant pool","signature":"ming_useconstants(int $use )","inheritdoc":0,"modifier":[],"return":""},"ming_useswfversion":{"params":{"$version":""},"docComment":"Sets the SWF version","signature":"ming_useswfversion(int $version )","inheritdoc":0,"modifier":[],"return":""},"udm_add_search_limit":{"params":{"$agent":"","$var":"","$val":""},"docComment":"Add various search limits","signature":"udm_add_search_limit(resource $agent ,int $var ,string $val )","inheritdoc":0,"modifier":[],"return":""},"udm_alloc_agent_array":{"params":{"$databases":""},"docComment":"Allocate mnoGoSearch session","signature":"udm_alloc_agent_array(array $databases )","inheritdoc":0,"modifier":[],"return":""},"udm_alloc_agent":{"params":{"$dbaddr":"","$dbmode":""},"docComment":"Allocate mnoGoSearch session","signature":"udm_alloc_agent(string $dbaddr ,string $dbmode )","inheritdoc":0,"modifier":[],"return":""},"udm_api_version":{"params":[],"docComment":"Get mnoGoSearch API version","signature":"udm_api_version( )","inheritdoc":0,"modifier":[],"return":""},"udm_cat_list":{"params":{"$agent":"","$category":""},"docComment":"Get all the categories on the same level with the current one","signature":"udm_cat_list(resource $agent ,string $category )","inheritdoc":0,"modifier":[],"return":""},"udm_cat_path":{"params":{"$agent":"","$category":""},"docComment":"Get the path to the current category","signature":"udm_cat_path(resource $agent ,string $category )","inheritdoc":0,"modifier":[],"return":""},"udm_check_charset":{"params":{"$agent":"","$charset":""},"docComment":"Check if the given charset is known to mnogosearch","signature":"udm_check_charset(resource $agent ,string $charset )","inheritdoc":0,"modifier":[],"return":""},"udm_check_stored":{"params":{"$agent":"","$link":"","$doc_id":""},"docComment":"Check connection to stored","signature":"udm_check_stored(resource $agent ,int $link ,string $doc_id )","inheritdoc":0,"modifier":[],"return":""},"udm_clear_search_limits":{"params":{"$agent":""},"docComment":"Clear all mnoGoSearch search restrictions","signature":"udm_clear_search_limits(resource $agent )","inheritdoc":0,"modifier":[],"return":""},"udm_close_stored":{"params":{"$agent":"","$link":""},"docComment":"Close connection to stored","signature":"udm_close_stored(resource $agent ,int $link )","inheritdoc":0,"modifier":[],"return":""},"udm_crc32":{"params":{"$agent":"","$str":""},"docComment":"Return CRC32 checksum of given string","signature":"udm_crc32(resource $agent ,string $str )","inheritdoc":0,"modifier":[],"return":""},"udm_errno":{"params":{"$agent":""},"docComment":"Get mnoGoSearch error number","signature":"udm_errno(resource $agent )","inheritdoc":0,"modifier":[],"return":""},"udm_error":{"params":{"$agent":""},"docComment":"Get mnoGoSearch error message","signature":"udm_error(resource $agent )","inheritdoc":0,"modifier":[],"return":""},"udm_find":{"params":{"$agent":"","$query":""},"docComment":"Perform search","signature":"udm_find(resource $agent ,string $query )","inheritdoc":0,"modifier":[],"return":""},"udm_free_agent":{"params":{"$agent":""},"docComment":"Free mnoGoSearch session","signature":"udm_free_agent(resource $agent )","inheritdoc":0,"modifier":[],"return":""},"udm_free_ispell_data":{"params":{"$agent":""},"docComment":"Free memory allocated for ispell data","signature":"udm_free_ispell_data(int $agent )","inheritdoc":0,"modifier":[],"return":""},"udm_free_res":{"params":{"$res":""},"docComment":"Free mnoGoSearch result","signature":"udm_free_res(resource $res )","inheritdoc":0,"modifier":[],"return":""},"udm_get_doc_count":{"params":{"$agent":""},"docComment":"Get total number of documents in database","signature":"udm_get_doc_count(resource $agent )","inheritdoc":0,"modifier":[],"return":""},"udm_get_res_field":{"params":{"$res":"","$row":"","$field":""},"docComment":"Fetch a result field","signature":"udm_get_res_field(resource $res ,int $row ,int $field )","inheritdoc":0,"modifier":[],"return":""},"udm_get_res_param":{"params":{"$res":"","$param":""},"docComment":"Get mnoGoSearch result parameters","signature":"udm_get_res_param(resource $res ,int $param )","inheritdoc":0,"modifier":[],"return":""},"udm_hash32":{"params":{"$agent":"","$str":""},"docComment":"Return Hash32 checksum of gived string","signature":"udm_hash32(resource $agent ,string $str )","inheritdoc":0,"modifier":[],"return":""},"udm_load_ispell_data":{"params":{"$agent":"","$var":"","$val1":"","$val2":"","$flag":""},"docComment":"Load ispell data","signature":"udm_load_ispell_data(resource $agent ,int $var ,string $val1 ,string $val2 ,int $flag )","inheritdoc":0,"modifier":[],"return":""},"udm_open_stored":{"params":{"$agent":"","$storedaddr":""},"docComment":"Open connection to stored","signature":"udm_open_stored(resource $agent ,string $storedaddr )","inheritdoc":0,"modifier":[],"return":""},"udm_set_agent_param":{"params":{"$agent":"","$var":"","$val":""},"docComment":"Set mnoGoSearch agent session parameters","signature":"udm_set_agent_param(resource $agent ,int $var ,string $val )","inheritdoc":0,"modifier":[],"return":""},"bson_decode":{"params":{"$bson":""},"docComment":"Deserializes a BSON object into a PHP array","signature":"bson_decode(string $bson )","inheritdoc":0,"modifier":[],"return":""},"bson_encode":{"params":{"$anything":""},"docComment":"Serializes a PHP variable into a BSON string","signature":"bson_encode(mixed $anything )","inheritdoc":0,"modifier":[],"return":""},"mqseries_back":{"params":{"$hconn":"","&$compCode":"","&$reason":""},"docComment":"MQSeries MQBACK","signature":"mqseries_back(resource $hconn ,resource &$compCode ,resource &$reason )","inheritdoc":0,"modifier":[],"return":""},"mqseries_begin":{"params":{"$hconn":"","$beginOptions":"","&$compCode":"","&$reason":""},"docComment":"MQseries MQBEGIN","signature":"mqseries_begin(resource $hconn ,array $beginOptions ,resource &$compCode ,resource &$reason )","inheritdoc":0,"modifier":[],"return":""},"mqseries_close":{"params":{"$hconn":"","$hobj":"","$options":"","&$compCode":"","&$reason":""},"docComment":"MQSeries MQCLOSE","signature":"mqseries_close(resource $hconn ,resource $hobj ,int $options ,resource &$compCode ,resource &$reason )","inheritdoc":0,"modifier":[],"return":""},"mqseries_cmit":{"params":{"$hconn":"","&$compCode":"","&$reason":""},"docComment":"MQSeries MQCMIT","signature":"mqseries_cmit(resource $hconn ,resource &$compCode ,resource &$reason )","inheritdoc":0,"modifier":[],"return":""},"mqseries_conn":{"params":{"$qManagerName":"","&$hconn":"","&$compCode":"","&$reason":""},"docComment":"MQSeries MQCONN","signature":"mqseries_conn(string $qManagerName ,resource &$hconn ,resource &$compCode ,resource &$reason )","inheritdoc":0,"modifier":[],"return":""},"mqseries_connx":{"params":{"$qManagerName":"","&$connOptions":"","&$hconn":"","&$compCode":"","&$reason":""},"docComment":"MQSeries MQCONNX","signature":"mqseries_connx(string $qManagerName ,array &$connOptions ,resource &$hconn ,resource &$compCode ,resource &$reason )","inheritdoc":0,"modifier":[],"return":""},"mqseries_disc":{"params":{"$hconn":"","&$compCode":"","&$reason":""},"docComment":"MQSeries MQDISC","signature":"mqseries_disc(resource $hconn ,resource &$compCode ,resource &$reason )","inheritdoc":0,"modifier":[],"return":""},"mqseries_get":{"params":{"$hConn":"","$hObj":"","&$md":"","&$gmo":"","&$bufferLength":"","&$msg":"","&$data_length":"","&$compCode":"","&$reason":""},"docComment":"MQSeries MQGET","signature":"mqseries_get(resource $hConn ,resource $hObj ,array &$md ,array &$gmo ,int &$bufferLength ,string &$msg ,int &$data_length ,resource &$compCode ,resource &$reason )","inheritdoc":0,"modifier":[],"return":""},"mqseries_inq":{"params":{"$hconn":"","$hobj":"","$selectorCount":"","$selectors":"","$intAttrCount":"","&$intAttr":"","$charAttrLength":"","&$charAttr":"","&$compCode":"","&$reason":""},"docComment":"MQSeries MQINQ","signature":"mqseries_inq(resource $hconn ,resource $hobj ,int $selectorCount ,array $selectors ,int $intAttrCount ,resource &$intAttr ,int $charAttrLength ,resource &$charAttr ,resource &$compCode ,resource &$reason )","inheritdoc":0,"modifier":[],"return":""},"mqseries_open":{"params":{"$hconn":"","&$objDesc":"","$option":"","&$hobj":"","&$compCode":"","&$reason":""},"docComment":"MQSeries MQOPEN","signature":"mqseries_open(resource $hconn ,array &$objDesc ,int $option ,resource &$hobj ,resource &$compCode ,resource &$reason )","inheritdoc":0,"modifier":[],"return":""},"mqseries_put1":{"params":{"$hconn":"","&$objDesc":"","&$msgDesc":"","&$pmo":"","$buffer":"","&$compCode":"","&$reason":""},"docComment":"MQSeries MQPUT1","signature":"mqseries_put1(resource $hconn ,resource &$objDesc ,resource &$msgDesc ,resource &$pmo ,string $buffer ,resource &$compCode ,resource &$reason )","inheritdoc":0,"modifier":[],"return":""},"mqseries_put":{"params":{"$hConn":"","$hObj":"","&$md":"","&$pmo":"","$message":"","&$compCode":"","&$reason":""},"docComment":"MQSeries MQPUT","signature":"mqseries_put(resource $hConn ,resource $hObj ,array &$md ,array &$pmo ,string $message ,resource &$compCode ,resource &$reason )","inheritdoc":0,"modifier":[],"return":""},"mqseries_set":{"params":{"$hconn":"","$hobj":"","$selectorcount":"","$selectors":"","$intattrcount":"","$intattrs":"","$charattrlength":"","$charattrs":"","&$compCode":"","&$reason":""},"docComment":"MQSeries MQSET","signature":"mqseries_set(resource $hconn ,resource $hobj ,int $selectorcount ,array $selectors ,int $intattrcount ,array $intattrs ,int $charattrlength ,array $charattrs ,resource &$compCode ,resource &$reason )","inheritdoc":0,"modifier":[],"return":""},"mqseries_strerror":{"params":{"$reason":""},"docComment":"Returns the error message corresponding to a result code (MQRC).","signature":"mqseries_strerror(int $reason )","inheritdoc":0,"modifier":[],"return":""},"msession_connect":{"params":{"$host":"","$port":""},"docComment":"Connect to msession server","signature":"msession_connect(string $host ,string $port )","inheritdoc":0,"modifier":[],"return":""},"msession_count":{"params":[],"docComment":"Get session count","signature":"msession_count( )","inheritdoc":0,"modifier":[],"return":""},"msession_create":{"params":{"$session":"","$classname":"","$data":""},"docComment":"Create a session","signature":"msession_create(string $session ,string $classname ,string $data )","inheritdoc":0,"modifier":[],"return":""},"msession_destroy":{"params":{"$name":""},"docComment":"Destroy a session","signature":"msession_destroy(string $name )","inheritdoc":0,"modifier":[],"return":""},"msession_disconnect":{"params":[],"docComment":"Close connection to msession server","signature":"msession_disconnect( )","inheritdoc":0,"modifier":[],"return":""},"msession_find":{"params":{"$name":"","$value":""},"docComment":"Find all sessions with name and value","signature":"msession_find(string $name ,string $value )","inheritdoc":0,"modifier":[],"return":""},"msession_get_array":{"params":{"$session":""},"docComment":"Get array of msession variables","signature":"msession_get_array(string $session )","inheritdoc":0,"modifier":[],"return":""},"msession_get_data":{"params":{"$session":""},"docComment":"Get data session unstructured data","signature":"msession_get_data(string $session )","inheritdoc":0,"modifier":[],"return":""},"msession_get":{"params":{"$session":"","$name":"","$value":""},"docComment":"Get value from session","signature":"msession_get(string $session ,string $name ,string $value )","inheritdoc":0,"modifier":[],"return":""},"msession_inc":{"params":{"$session":"","$name":""},"docComment":"Increment value in session","signature":"msession_inc(string $session ,string $name )","inheritdoc":0,"modifier":[],"return":""},"msession_list":{"params":[],"docComment":"List all sessions","signature":"msession_list( )","inheritdoc":0,"modifier":[],"return":""},"msession_listvar":{"params":{"$name":""},"docComment":"List sessions with variable","signature":"msession_listvar(string $name )","inheritdoc":0,"modifier":[],"return":""},"msession_lock":{"params":{"$name":""},"docComment":"Lock a session","signature":"msession_lock(string $name )","inheritdoc":0,"modifier":[],"return":""},"msession_plugin":{"params":{"$session":"","$val":"","$param":""},"docComment":"Call an escape function within the msession personality plugin","signature":"msession_plugin(string $session ,string $val ,string $param )","inheritdoc":0,"modifier":[],"return":""},"msession_randstr":{"params":{"$param":""},"docComment":"Get random string","signature":"msession_randstr(int $param )","inheritdoc":0,"modifier":[],"return":""},"msession_set_array":{"params":{"$session":"","$tuples":""},"docComment":"Set msession variables from an array","signature":"msession_set_array(string $session ,array $tuples )","inheritdoc":0,"modifier":[],"return":""},"msession_set_data":{"params":{"$session":"","$value":""},"docComment":"Set data session unstructured data","signature":"msession_set_data(string $session ,string $value )","inheritdoc":0,"modifier":[],"return":""},"msession_set":{"params":{"$session":"","$name":"","$value":""},"docComment":"Set value in session","signature":"msession_set(string $session ,string $name ,string $value )","inheritdoc":0,"modifier":[],"return":""},"msession_timeout":{"params":{"$session":"","$param":""},"docComment":"Set\/get session timeout","signature":"msession_timeout(string $session ,int $param )","inheritdoc":0,"modifier":[],"return":""},"msession_uniq":{"params":{"$param":"","$classname":"","$data":""},"docComment":"Get unique id","signature":"msession_uniq(int $param ,string $classname ,string $data )","inheritdoc":0,"modifier":[],"return":""},"msession_unlock":{"params":{"$session":"","$key":""},"docComment":"Unlock a session","signature":"msession_unlock(string $session ,int $key )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_memcache_get_config":{"params":{"$connection":""},"docComment":"Returns information about the plugin configuration","signature":"mysqlnd_memcache_get_config(mixed $connection )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_memcache_set":{"params":{"$mysql_connection":"","$memcache_connection":"Memcached","$pattern":"","$callback":""},"docComment":"Associate a MySQL connection with a Memcache connection","signature":"mysqlnd_memcache_set(mixed $mysql_connection ,Memcached $memcache_connection ,string $pattern ,callback $callback )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_ms_get_last_gtid":{"params":{"$connection":""},"docComment":"Returns the latest global transaction ID","signature":"mysqlnd_ms_get_last_gtid(mixed $connection )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_ms_get_last_used_connection":{"params":{"$connection":""},"docComment":"Returns an array which describes the last used connection","signature":"mysqlnd_ms_get_last_used_connection(mixed $connection )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_ms_get_stats":{"params":[],"docComment":"Returns query distribution and connection statistics","signature":"mysqlnd_ms_get_stats( )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_ms_match_wild":{"params":{"$table_name":"","$wildcard":""},"docComment":"Finds whether a table name matches a wildcard pattern or not","signature":"mysqlnd_ms_match_wild(string $table_name ,string $wildcard )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_ms_query_is_select":{"params":{"$query":""},"docComment":"Find whether to send the query to the master, the slave or the last used MySQL server","signature":"mysqlnd_ms_query_is_select(string $query )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_ms_set_qos":{"params":{"$connection":"","$service_level":"","$service_level_option":"","$option_value":""},"docComment":"Sets the quality of service needed from the cluster","signature":"mysqlnd_ms_set_qos(mixed $connection ,int $service_level ,int $service_level_option ,mixed $option_value )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_ms_set_user_pick_server":{"params":{"$function":""},"docComment":"Sets a callback for user-defined read\/write splitting","signature":"mysqlnd_ms_set_user_pick_server(string $function )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_qc_clear_cache":{"params":[],"docComment":"Flush all cache contents","signature":"mysqlnd_qc_clear_cache( )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_qc_get_available_handlers":{"params":[],"docComment":"Returns a list of available storage handler","signature":"mysqlnd_qc_get_available_handlers( )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_qc_get_cache_info":{"params":[],"docComment":"Returns information on the current handler, the number of cache entries and cache entries, if available","signature":"mysqlnd_qc_get_cache_info( )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_qc_get_core_stats":{"params":[],"docComment":"Statistics collected by the core of the query cache","signature":"mysqlnd_qc_get_core_stats( )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_qc_get_normalized_query_trace_log":{"params":[],"docComment":"Returns a normalized query trace log for each query inspected by the query cache","signature":"mysqlnd_qc_get_normalized_query_trace_log( )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_qc_get_query_trace_log":{"params":[],"docComment":"Returns a backtrace for each query inspected by the query cache","signature":"mysqlnd_qc_get_query_trace_log( )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_qc_set_cache_condition":{"params":{"$condition_type":"","$condition":"","$condition_option":""},"docComment":"Set conditions for automatic caching","signature":"mysqlnd_qc_set_cache_condition(int $condition_type ,mixed $condition ,mixed $condition_option )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_qc_set_is_select":{"params":{"$callback":""},"docComment":"Installs a callback which decides whether a statement is cached","signature":"mysqlnd_qc_set_is_select(string $callback )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_qc_set_storage_handler":{"params":{"$handler":""},"docComment":"Change current storage handler","signature":"mysqlnd_qc_set_storage_handler(string $handler )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_qc_set_user_handlers":{"params":{"$get_hash":"","$find_query_in_cache":"","$return_to_cache":"","$add_query_to_cache_if_not_exists":"","$query_is_select":"","$update_query_run_time_stats":"","$get_stats":"","$clear_cache":""},"docComment":"Sets the callback functions for a user-defined procedural storage handler","signature":"mysqlnd_qc_set_user_handlers(string $get_hash ,string $find_query_in_cache ,string $return_to_cache ,string $add_query_to_cache_if_not_exists ,string $query_is_select ,string $update_query_run_time_stats ,string $get_stats ,string $clear_cache )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_uh_convert_to_mysqlnd":{"params":{"&$mysql_connection":"mysqli"},"docComment":"Converts a MySQL connection handle into a mysqlnd connection handle","signature":"mysqlnd_uh_convert_to_mysqlnd(mysqli &$mysql_connection )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_uh_set_connection_proxy":{"params":{"&$connection_proxy":"MysqlndUhConnection","&$mysqli_connection":"mysqli"},"docComment":"Installs a proxy for mysqlnd connections","signature":"mysqlnd_uh_set_connection_proxy(MysqlndUhConnection &$connection_proxy ,mysqli &$mysqli_connection )","inheritdoc":0,"modifier":[],"return":""},"mysqlnd_uh_set_statement_proxy":{"params":{"&$statement_proxy":""},"docComment":"Installs a proxy for mysqlnd statements","signature":"mysqlnd_uh_set_statement_proxy( &$statement_proxy )","inheritdoc":0,"modifier":[],"return":""},"ncurses_addch":{"params":{"$ch":""},"docComment":"Add character at current position and advance cursor ","signature":"ncurses_addch(int $ch )","inheritdoc":0,"modifier":[],"return":""},"ncurses_addchnstr":{"params":{"$s":"","$n":""},"docComment":"Add attributed string with specified length at current position ","signature":"ncurses_addchnstr(string $s ,int $n )","inheritdoc":0,"modifier":[],"return":""},"ncurses_addchstr":{"params":{"$s":""},"docComment":"Add attributed string at current position ","signature":"ncurses_addchstr(string $s )","inheritdoc":0,"modifier":[],"return":""},"ncurses_addnstr":{"params":{"$s":"","$n":""},"docComment":"Add string with specified length at current position ","signature":"ncurses_addnstr(string $s ,int $n )","inheritdoc":0,"modifier":[],"return":""},"ncurses_addstr":{"params":{"$text":""},"docComment":"Output text at current position ","signature":"ncurses_addstr(string $text )","inheritdoc":0,"modifier":[],"return":""},"ncurses_assume_default_colors":{"params":{"$fg":"","$bg":""},"docComment":"Define default colors for color 0 ","signature":"ncurses_assume_default_colors(int $fg ,int $bg )","inheritdoc":0,"modifier":[],"return":""},"ncurses_attroff":{"params":{"$attributes":""},"docComment":"Turn off the given attributes","signature":"ncurses_attroff(int $attributes )","inheritdoc":0,"modifier":[],"return":""},"ncurses_attron":{"params":{"$attributes":""},"docComment":"Turn on the given attributes","signature":"ncurses_attron(int $attributes )","inheritdoc":0,"modifier":[],"return":""},"ncurses_attrset":{"params":{"$attributes":""},"docComment":"Set given attributes","signature":"ncurses_attrset(int $attributes )","inheritdoc":0,"modifier":[],"return":""},"ncurses_baudrate":{"params":[],"docComment":"Returns baudrate of terminal ","signature":"ncurses_baudrate( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_beep":{"params":[],"docComment":"Let the terminal beep ","signature":"ncurses_beep( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_bkgd":{"params":{"$attrchar":""},"docComment":"Set background property for terminal screen ","signature":"ncurses_bkgd(int $attrchar )","inheritdoc":0,"modifier":[],"return":""},"ncurses_bkgdset":{"params":{"$attrchar":""},"docComment":"Control screen background ","signature":"ncurses_bkgdset(int $attrchar )","inheritdoc":0,"modifier":[],"return":""},"ncurses_border":{"params":{"$left":"","$right":"","$top":"","$bottom":"","$tl_corner":"","$tr_corner":"","$bl_corner":"","$br_corner":""},"docComment":"Draw a border around the screen using attributed characters","signature":"ncurses_border(int $left ,int $right ,int $top ,int $bottom ,int $tl_corner ,int $tr_corner ,int $bl_corner ,int $br_corner )","inheritdoc":0,"modifier":[],"return":""},"ncurses_bottom_panel":{"params":{"$panel":""},"docComment":"Moves a visible panel to the bottom of the stack","signature":"ncurses_bottom_panel(resource $panel )","inheritdoc":0,"modifier":[],"return":""},"ncurses_can_change_color":{"params":[],"docComment":"Checks if terminal color definitions can be changed","signature":"ncurses_can_change_color( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_cbreak":{"params":[],"docComment":"Switch of input buffering ","signature":"ncurses_cbreak( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_clear":{"params":[],"docComment":"Clear screen ","signature":"ncurses_clear( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_clrtobot":{"params":[],"docComment":"Clear screen from current position to bottom ","signature":"ncurses_clrtobot( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_clrtoeol":{"params":[],"docComment":"Clear screen from current position to end of line ","signature":"ncurses_clrtoeol( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_color_content":{"params":{"$color":"","&$r":"","&$g":"","&$b":""},"docComment":"Retrieves RGB components of a color","signature":"ncurses_color_content(int $color ,int &$r ,int &$g ,int &$b )","inheritdoc":0,"modifier":[],"return":""},"ncurses_color_set":{"params":{"$pair":""},"docComment":"Set active foreground and background colors","signature":"ncurses_color_set(int $pair )","inheritdoc":0,"modifier":[],"return":""},"ncurses_curs_set":{"params":{"$visibility":""},"docComment":"Set cursor state ","signature":"ncurses_curs_set(int $visibility )","inheritdoc":0,"modifier":[],"return":""},"ncurses_def_prog_mode":{"params":[],"docComment":"Saves terminals (program) mode","signature":"ncurses_def_prog_mode( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_def_shell_mode":{"params":[],"docComment":"Saves terminals (shell) mode","signature":"ncurses_def_shell_mode( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_define_key":{"params":{"$definition":"","$keycode":""},"docComment":"Define a keycode ","signature":"ncurses_define_key(string $definition ,int $keycode )","inheritdoc":0,"modifier":[],"return":""},"ncurses_del_panel":{"params":{"$panel":""},"docComment":"Remove panel from the stack and delete it (but not the associated window)","signature":"ncurses_del_panel(resource $panel )","inheritdoc":0,"modifier":[],"return":""},"ncurses_delay_output":{"params":{"$milliseconds":""},"docComment":"Delay output on terminal using padding characters ","signature":"ncurses_delay_output(int $milliseconds )","inheritdoc":0,"modifier":[],"return":""},"ncurses_delch":{"params":[],"docComment":"Delete character at current position, move rest of line left ","signature":"ncurses_delch( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_deleteln":{"params":[],"docComment":"Delete line at current position, move rest of screen up ","signature":"ncurses_deleteln( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_delwin":{"params":{"$window":""},"docComment":"Delete a ncurses window ","signature":"ncurses_delwin(resource $window )","inheritdoc":0,"modifier":[],"return":""},"ncurses_doupdate":{"params":[],"docComment":"Write all prepared refreshes to terminal ","signature":"ncurses_doupdate( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_echo":{"params":[],"docComment":"Activate keyboard input echo ","signature":"ncurses_echo( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_echochar":{"params":{"$character":""},"docComment":"Single character output including refresh ","signature":"ncurses_echochar(int $character )","inheritdoc":0,"modifier":[],"return":""},"ncurses_end":{"params":[],"docComment":"Stop using ncurses, clean up the screen ","signature":"ncurses_end( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_erase":{"params":[],"docComment":"Erase terminal screen ","signature":"ncurses_erase( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_erasechar":{"params":[],"docComment":"Returns current erase character ","signature":"ncurses_erasechar( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_filter":{"params":[],"docComment":"Set LINES for iniscr() and newterm() to 1","signature":"ncurses_filter( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_flash":{"params":[],"docComment":"Flash terminal screen (visual bell) ","signature":"ncurses_flash( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_flushinp":{"params":[],"docComment":"Flush keyboard input buffer ","signature":"ncurses_flushinp( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_getch":{"params":[],"docComment":"Read a character from keyboard ","signature":"ncurses_getch( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_getmaxyx":{"params":{"$window":"","&$y":"","&$x":""},"docComment":"Returns the size of a window","signature":"ncurses_getmaxyx(resource $window ,int &$y ,int &$x )","inheritdoc":0,"modifier":[],"return":""},"ncurses_getmouse":{"params":{"&$mevent":""},"docComment":"Reads mouse event","signature":"ncurses_getmouse(array &$mevent )","inheritdoc":0,"modifier":[],"return":""},"ncurses_getyx":{"params":{"$window":"","&$y":"","&$x":""},"docComment":"Returns the current cursor position for a window","signature":"ncurses_getyx(resource $window ,int &$y ,int &$x )","inheritdoc":0,"modifier":[],"return":""},"ncurses_halfdelay":{"params":{"$tenth":""},"docComment":"Put terminal into halfdelay mode ","signature":"ncurses_halfdelay(int $tenth )","inheritdoc":0,"modifier":[],"return":""},"ncurses_has_colors":{"params":[],"docComment":"Checks if terminal has color capabilities","signature":"ncurses_has_colors( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_has_ic":{"params":[],"docComment":"Check for insert- and delete-capabilities ","signature":"ncurses_has_ic( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_has_il":{"params":[],"docComment":"Check for line insert- and delete-capabilities ","signature":"ncurses_has_il( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_has_key":{"params":{"$keycode":""},"docComment":"Check for presence of a function key on terminal keyboard ","signature":"ncurses_has_key(int $keycode )","inheritdoc":0,"modifier":[],"return":""},"ncurses_hide_panel":{"params":{"$panel":""},"docComment":"Remove panel from the stack, making it invisible","signature":"ncurses_hide_panel(resource $panel )","inheritdoc":0,"modifier":[],"return":""},"ncurses_hline":{"params":{"$charattr":"","$n":""},"docComment":"Draw a horizontal line at current position using an attributed character and max. n characters long ","signature":"ncurses_hline(int $charattr ,int $n )","inheritdoc":0,"modifier":[],"return":""},"ncurses_inch":{"params":[],"docComment":"Get character and attribute at current position ","signature":"ncurses_inch( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_init_color":{"params":{"$color":"","$r":"","$g":"","$b":""},"docComment":"Define a terminal color","signature":"ncurses_init_color(int $color ,int $r ,int $g ,int $b )","inheritdoc":0,"modifier":[],"return":""},"ncurses_init_pair":{"params":{"$pair":"","$fg":"","$bg":""},"docComment":"Define a color pair","signature":"ncurses_init_pair(int $pair ,int $fg ,int $bg )","inheritdoc":0,"modifier":[],"return":""},"ncurses_init":{"params":[],"docComment":"Initialize ncurses","signature":"ncurses_init( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_insch":{"params":{"$character":""},"docComment":"Insert character moving rest of line including character at current position ","signature":"ncurses_insch(int $character )","inheritdoc":0,"modifier":[],"return":""},"ncurses_insdelln":{"params":{"$count":""},"docComment":"Insert lines before current line scrolling down (negative numbers delete and scroll up) ","signature":"ncurses_insdelln(int $count )","inheritdoc":0,"modifier":[],"return":""},"ncurses_insertln":{"params":[],"docComment":"Insert a line, move rest of screen down ","signature":"ncurses_insertln( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_insstr":{"params":{"$text":""},"docComment":"Insert string at current position, moving rest of line right ","signature":"ncurses_insstr(string $text )","inheritdoc":0,"modifier":[],"return":""},"ncurses_instr":{"params":{"&$buffer":""},"docComment":"Reads string from terminal screen","signature":"ncurses_instr(string &$buffer )","inheritdoc":0,"modifier":[],"return":""},"ncurses_isendwin":{"params":[],"docComment":"Ncurses is in endwin mode, normal screen output may be performed","signature":"ncurses_isendwin( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_keyok":{"params":{"$keycode":"","$enable":""},"docComment":"Enable or disable a keycode ","signature":"ncurses_keyok(int $keycode ,bool $enable )","inheritdoc":0,"modifier":[],"return":""},"ncurses_keypad":{"params":{"$window":"","$bf":""},"docComment":"Turns keypad on or off","signature":"ncurses_keypad(resource $window ,bool $bf )","inheritdoc":0,"modifier":[],"return":""},"ncurses_killchar":{"params":[],"docComment":"Returns current line kill character ","signature":"ncurses_killchar( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_longname":{"params":[],"docComment":"Returns terminals description","signature":"ncurses_longname( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_meta":{"params":{"$window":"","$8bit":""},"docComment":"Enables\/Disable 8-bit meta key information","signature":"ncurses_meta(resource $window ,bool $8bit )","inheritdoc":0,"modifier":[],"return":""},"ncurses_mouse_trafo":{"params":{"&$y":"","&$x":"","$toscreen":""},"docComment":"Transforms coordinates","signature":"ncurses_mouse_trafo(int &$y ,int &$x ,bool $toscreen )","inheritdoc":0,"modifier":[],"return":""},"ncurses_mouseinterval":{"params":{"$milliseconds":""},"docComment":"Set timeout for mouse button clicks ","signature":"ncurses_mouseinterval(int $milliseconds )","inheritdoc":0,"modifier":[],"return":""},"ncurses_mousemask":{"params":{"$newmask":"","&$oldmask":""},"docComment":"Sets mouse options","signature":"ncurses_mousemask(int $newmask ,int &$oldmask )","inheritdoc":0,"modifier":[],"return":""},"ncurses_move_panel":{"params":{"$panel":"","$startx":"","$starty":""},"docComment":"Moves a panel so that its upper-left corner is at [startx, starty]","signature":"ncurses_move_panel(resource $panel ,int $startx ,int $starty )","inheritdoc":0,"modifier":[],"return":""},"ncurses_move":{"params":{"$y":"","$x":""},"docComment":"Move output position ","signature":"ncurses_move(int $y ,int $x )","inheritdoc":0,"modifier":[],"return":""},"ncurses_mvaddch":{"params":{"$y":"","$x":"","$c":""},"docComment":"Move current position and add character ","signature":"ncurses_mvaddch(int $y ,int $x ,int $c )","inheritdoc":0,"modifier":[],"return":""},"ncurses_mvaddchnstr":{"params":{"$y":"","$x":"","$s":"","$n":""},"docComment":"Move position and add attributed string with specified length ","signature":"ncurses_mvaddchnstr(int $y ,int $x ,string $s ,int $n )","inheritdoc":0,"modifier":[],"return":""},"ncurses_mvaddchstr":{"params":{"$y":"","$x":"","$s":""},"docComment":"Move position and add attributed string ","signature":"ncurses_mvaddchstr(int $y ,int $x ,string $s )","inheritdoc":0,"modifier":[],"return":""},"ncurses_mvaddnstr":{"params":{"$y":"","$x":"","$s":"","$n":""},"docComment":"Move position and add string with specified length ","signature":"ncurses_mvaddnstr(int $y ,int $x ,string $s ,int $n )","inheritdoc":0,"modifier":[],"return":""},"ncurses_mvaddstr":{"params":{"$y":"","$x":"","$s":""},"docComment":"Move position and add string ","signature":"ncurses_mvaddstr(int $y ,int $x ,string $s )","inheritdoc":0,"modifier":[],"return":""},"ncurses_mvcur":{"params":{"$old_y":"","$old_x":"","$new_y":"","$new_x":""},"docComment":"Move cursor immediately ","signature":"ncurses_mvcur(int $old_y ,int $old_x ,int $new_y ,int $new_x )","inheritdoc":0,"modifier":[],"return":""},"ncurses_mvdelch":{"params":{"$y":"","$x":""},"docComment":"Move position and delete character, shift rest of line left ","signature":"ncurses_mvdelch(int $y ,int $x )","inheritdoc":0,"modifier":[],"return":""},"ncurses_mvgetch":{"params":{"$y":"","$x":""},"docComment":"Move position and get character at new position ","signature":"ncurses_mvgetch(int $y ,int $x )","inheritdoc":0,"modifier":[],"return":""},"ncurses_mvhline":{"params":{"$y":"","$x":"","$attrchar":"","$n":""},"docComment":"Set new position and draw a horizontal line using an attributed character and max. n characters long ","signature":"ncurses_mvhline(int $y ,int $x ,int $attrchar ,int $n )","inheritdoc":0,"modifier":[],"return":""},"ncurses_mvinch":{"params":{"$y":"","$x":""},"docComment":"Move position and get attributed character at new position ","signature":"ncurses_mvinch(int $y ,int $x )","inheritdoc":0,"modifier":[],"return":""},"ncurses_mvvline":{"params":{"$y":"","$x":"","$attrchar":"","$n":""},"docComment":"Set new position and draw a vertical line using an attributed character and max. n characters long ","signature":"ncurses_mvvline(int $y ,int $x ,int $attrchar ,int $n )","inheritdoc":0,"modifier":[],"return":""},"ncurses_mvwaddstr":{"params":{"$window":"","$y":"","$x":"","$text":""},"docComment":"Add string at new position in window ","signature":"ncurses_mvwaddstr(resource $window ,int $y ,int $x ,string $text )","inheritdoc":0,"modifier":[],"return":""},"ncurses_napms":{"params":{"$milliseconds":""},"docComment":"Sleep","signature":"ncurses_napms(int $milliseconds )","inheritdoc":0,"modifier":[],"return":""},"ncurses_new_panel":{"params":{"$window":""},"docComment":"Create a new panel and associate it with window","signature":"ncurses_new_panel(resource $window )","inheritdoc":0,"modifier":[],"return":""},"ncurses_newpad":{"params":{"$rows":"","$cols":""},"docComment":"Creates a new pad (window)","signature":"ncurses_newpad(int $rows ,int $cols )","inheritdoc":0,"modifier":[],"return":""},"ncurses_newwin":{"params":{"$rows":"","$cols":"","$y":"","$x":""},"docComment":"Create a new window","signature":"ncurses_newwin(int $rows ,int $cols ,int $y ,int $x )","inheritdoc":0,"modifier":[],"return":""},"ncurses_nl":{"params":[],"docComment":"Translate newline and carriage return \/ line feed ","signature":"ncurses_nl( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_nocbreak":{"params":[],"docComment":"Switch terminal to cooked mode ","signature":"ncurses_nocbreak( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_noecho":{"params":[],"docComment":"Switch off keyboard input echo ","signature":"ncurses_noecho( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_nonl":{"params":[],"docComment":"Do not translate newline and carriage return \/ line feed ","signature":"ncurses_nonl( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_noqiflush":{"params":[],"docComment":"Do not flush on signal characters","signature":"ncurses_noqiflush( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_noraw":{"params":[],"docComment":"Switch terminal out of raw mode ","signature":"ncurses_noraw( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_pair_content":{"params":{"$pair":"","&$f":"","&$b":""},"docComment":"Retrieves foreground and background colors of a color pair","signature":"ncurses_pair_content(int $pair ,int &$f ,int &$b )","inheritdoc":0,"modifier":[],"return":""},"ncurses_panel_above":{"params":{"$panel":""},"docComment":"Returns the panel above panel","signature":"ncurses_panel_above(resource $panel )","inheritdoc":0,"modifier":[],"return":""},"ncurses_panel_below":{"params":{"$panel":""},"docComment":"Returns the panel below panel","signature":"ncurses_panel_below(resource $panel )","inheritdoc":0,"modifier":[],"return":""},"ncurses_panel_window":{"params":{"$panel":""},"docComment":"Returns the window associated with panel","signature":"ncurses_panel_window(resource $panel )","inheritdoc":0,"modifier":[],"return":""},"ncurses_pnoutrefresh":{"params":{"$pad":"","$pminrow":"","$pmincol":"","$sminrow":"","$smincol":"","$smaxrow":"","$smaxcol":""},"docComment":"Copies a region from a pad into the virtual screen","signature":"ncurses_pnoutrefresh(resource $pad ,int $pminrow ,int $pmincol ,int $sminrow ,int $smincol ,int $smaxrow ,int $smaxcol )","inheritdoc":0,"modifier":[],"return":""},"ncurses_prefresh":{"params":{"$pad":"","$pminrow":"","$pmincol":"","$sminrow":"","$smincol":"","$smaxrow":"","$smaxcol":""},"docComment":"Copies a region from a pad into the virtual screen","signature":"ncurses_prefresh(resource $pad ,int $pminrow ,int $pmincol ,int $sminrow ,int $smincol ,int $smaxrow ,int $smaxcol )","inheritdoc":0,"modifier":[],"return":""},"ncurses_putp":{"params":{"$text":""},"docComment":"Apply padding information to the string and output it","signature":"ncurses_putp(string $text )","inheritdoc":0,"modifier":[],"return":""},"ncurses_qiflush":{"params":[],"docComment":"Flush on signal characters ","signature":"ncurses_qiflush( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_raw":{"params":[],"docComment":"Switch terminal into raw mode ","signature":"ncurses_raw( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_refresh":{"params":{"$ch":""},"docComment":"Refresh screen ","signature":"ncurses_refresh(int $ch )","inheritdoc":0,"modifier":[],"return":""},"ncurses_replace_panel":{"params":{"$panel":"","$window":""},"docComment":"Replaces the window associated with panel","signature":"ncurses_replace_panel(resource $panel ,resource $window )","inheritdoc":0,"modifier":[],"return":""},"ncurses_reset_prog_mode":{"params":[],"docComment":"Resets the prog mode saved by def_prog_mode","signature":"ncurses_reset_prog_mode( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_reset_shell_mode":{"params":[],"docComment":"Resets the shell mode saved by def_shell_mode","signature":"ncurses_reset_shell_mode( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_resetty":{"params":[],"docComment":"Restores saved terminal state ","signature":"ncurses_resetty( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_savetty":{"params":[],"docComment":"Saves terminal state ","signature":"ncurses_savetty( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_scr_dump":{"params":{"$filename":""},"docComment":"Dump screen content to file ","signature":"ncurses_scr_dump(string $filename )","inheritdoc":0,"modifier":[],"return":""},"ncurses_scr_init":{"params":{"$filename":""},"docComment":"Initialize screen from file dump ","signature":"ncurses_scr_init(string $filename )","inheritdoc":0,"modifier":[],"return":""},"ncurses_scr_restore":{"params":{"$filename":""},"docComment":"Restore screen from file dump ","signature":"ncurses_scr_restore(string $filename )","inheritdoc":0,"modifier":[],"return":""},"ncurses_scr_set":{"params":{"$filename":""},"docComment":"Inherit screen from file dump ","signature":"ncurses_scr_set(string $filename )","inheritdoc":0,"modifier":[],"return":""},"ncurses_scrl":{"params":{"$count":""},"docComment":"Scroll window content up or down without changing current position ","signature":"ncurses_scrl(int $count )","inheritdoc":0,"modifier":[],"return":""},"ncurses_show_panel":{"params":{"$panel":""},"docComment":"Places an invisible panel on top of the stack, making it visible","signature":"ncurses_show_panel(resource $panel )","inheritdoc":0,"modifier":[],"return":""},"ncurses_slk_attr":{"params":[],"docComment":"Returns current soft label key attribute","signature":"ncurses_slk_attr( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_slk_attroff":{"params":{"$intarg":""},"docComment":"Turn off the given attributes for soft function-key labels","signature":"ncurses_slk_attroff(int $intarg )","inheritdoc":0,"modifier":[],"return":""},"ncurses_slk_attron":{"params":{"$intarg":""},"docComment":"Turn on the given attributes for soft function-key labels","signature":"ncurses_slk_attron(int $intarg )","inheritdoc":0,"modifier":[],"return":""},"ncurses_slk_attrset":{"params":{"$intarg":""},"docComment":"Set given attributes for soft function-key labels","signature":"ncurses_slk_attrset(int $intarg )","inheritdoc":0,"modifier":[],"return":""},"ncurses_slk_clear":{"params":[],"docComment":"Clears soft labels from screen","signature":"ncurses_slk_clear( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_slk_color":{"params":{"$intarg":""},"docComment":"Sets color for soft label keys","signature":"ncurses_slk_color(int $intarg )","inheritdoc":0,"modifier":[],"return":""},"ncurses_slk_init":{"params":{"$format":""},"docComment":"Initializes soft label key functions","signature":"ncurses_slk_init(int $format )","inheritdoc":0,"modifier":[],"return":""},"ncurses_slk_noutrefresh":{"params":[],"docComment":"Copies soft label keys to virtual screen","signature":"ncurses_slk_noutrefresh( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_slk_refresh":{"params":[],"docComment":"Copies soft label keys to screen","signature":"ncurses_slk_refresh( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_slk_restore":{"params":[],"docComment":"Restores soft label keys","signature":"ncurses_slk_restore( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_slk_set":{"params":{"$labelnr":"","$label":"","$format":""},"docComment":"Sets function key labels","signature":"ncurses_slk_set(int $labelnr ,string $label ,int $format )","inheritdoc":0,"modifier":[],"return":""},"ncurses_slk_touch":{"params":[],"docComment":"Forces output when ncurses_slk_noutrefresh is performed","signature":"ncurses_slk_touch( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_standend":{"params":[],"docComment":"Stop using 'standout' attribute ","signature":"ncurses_standend( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_standout":{"params":[],"docComment":"Start using 'standout' attribute ","signature":"ncurses_standout( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_start_color":{"params":[],"docComment":"Initializes color functionality","signature":"ncurses_start_color( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_termattrs":{"params":[],"docComment":"Returns a logical OR of all attribute flags supported by terminal ","signature":"ncurses_termattrs( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_termname":{"params":[],"docComment":"Returns terminals (short)-name","signature":"ncurses_termname( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_timeout":{"params":{"$millisec":""},"docComment":"Set timeout for special key sequences ","signature":"ncurses_timeout(int $millisec )","inheritdoc":0,"modifier":[],"return":""},"ncurses_top_panel":{"params":{"$panel":""},"docComment":"Moves a visible panel to the top of the stack","signature":"ncurses_top_panel(resource $panel )","inheritdoc":0,"modifier":[],"return":""},"ncurses_typeahead":{"params":{"$fd":""},"docComment":"Specify different filedescriptor for typeahead checking ","signature":"ncurses_typeahead(int $fd )","inheritdoc":0,"modifier":[],"return":""},"ncurses_ungetch":{"params":{"$keycode":""},"docComment":"Put a character back into the input stream ","signature":"ncurses_ungetch(int $keycode )","inheritdoc":0,"modifier":[],"return":""},"ncurses_ungetmouse":{"params":{"$mevent":""},"docComment":"Pushes mouse event to queue","signature":"ncurses_ungetmouse(array $mevent )","inheritdoc":0,"modifier":[],"return":""},"ncurses_update_panels":{"params":[],"docComment":"Refreshes the virtual screen to reflect the relations between panels in the stack","signature":"ncurses_update_panels( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_use_default_colors":{"params":[],"docComment":"Assign terminal default colors to color id -1 ","signature":"ncurses_use_default_colors( )","inheritdoc":0,"modifier":[],"return":""},"ncurses_use_env":{"params":{"$flag":""},"docComment":"Control use of environment information about terminal size ","signature":"ncurses_use_env(bool $flag )","inheritdoc":0,"modifier":[],"return":""},"ncurses_use_extended_names":{"params":{"$flag":""},"docComment":"Control use of extended names in terminfo descriptions ","signature":"ncurses_use_extended_names(bool $flag )","inheritdoc":0,"modifier":[],"return":""},"ncurses_vidattr":{"params":{"$intarg":""},"docComment":"Display the string on the terminal in the video attribute mode","signature":"ncurses_vidattr(int $intarg )","inheritdoc":0,"modifier":[],"return":""},"ncurses_vline":{"params":{"$charattr":"","$n":""},"docComment":"Draw a vertical line at current position using an attributed character and max. n characters long ","signature":"ncurses_vline(int $charattr ,int $n )","inheritdoc":0,"modifier":[],"return":""},"ncurses_waddch":{"params":{"$window":"","$ch":""},"docComment":"Adds character at current position in a window and advance cursor","signature":"ncurses_waddch(resource $window ,int $ch )","inheritdoc":0,"modifier":[],"return":""},"ncurses_waddstr":{"params":{"$window":"","$str":"","$n":""},"docComment":"Outputs text at current postion in window","signature":"ncurses_waddstr(resource $window ,string $str ,int $n )","inheritdoc":0,"modifier":[],"return":""},"ncurses_wattroff":{"params":{"$window":"","$attrs":""},"docComment":"Turns off attributes for a window","signature":"ncurses_wattroff(resource $window ,int $attrs )","inheritdoc":0,"modifier":[],"return":""},"ncurses_wattron":{"params":{"$window":"","$attrs":""},"docComment":"Turns on attributes for a window","signature":"ncurses_wattron(resource $window ,int $attrs )","inheritdoc":0,"modifier":[],"return":""},"ncurses_wattrset":{"params":{"$window":"","$attrs":""},"docComment":"Set the attributes for a window","signature":"ncurses_wattrset(resource $window ,int $attrs )","inheritdoc":0,"modifier":[],"return":""},"ncurses_wborder":{"params":{"$window":"","$left":"","$right":"","$top":"","$bottom":"","$tl_corner":"","$tr_corner":"","$bl_corner":"","$br_corner":""},"docComment":"Draws a border around the window using attributed characters","signature":"ncurses_wborder(resource $window ,int $left ,int $right ,int $top ,int $bottom ,int $tl_corner ,int $tr_corner ,int $bl_corner ,int $br_corner )","inheritdoc":0,"modifier":[],"return":""},"ncurses_wclear":{"params":{"$window":""},"docComment":"Clears window","signature":"ncurses_wclear(resource $window )","inheritdoc":0,"modifier":[],"return":""},"ncurses_wcolor_set":{"params":{"$window":"","$color_pair":""},"docComment":"Sets windows color pairings","signature":"ncurses_wcolor_set(resource $window ,int $color_pair )","inheritdoc":0,"modifier":[],"return":""},"ncurses_werase":{"params":{"$window":""},"docComment":"Erase window contents","signature":"ncurses_werase(resource $window )","inheritdoc":0,"modifier":[],"return":""},"ncurses_wgetch":{"params":{"$window":""},"docComment":"Reads a character from keyboard (window)","signature":"ncurses_wgetch(resource $window )","inheritdoc":0,"modifier":[],"return":""},"ncurses_whline":{"params":{"$window":"","$charattr":"","$n":""},"docComment":"Draws a horizontal line in a window at current position using an attributed character and max. n characters long","signature":"ncurses_whline(resource $window ,int $charattr ,int $n )","inheritdoc":0,"modifier":[],"return":""},"ncurses_wmouse_trafo":{"params":{"$window":"","&$y":"","&$x":"","$toscreen":""},"docComment":"Transforms window\/stdscr coordinates","signature":"ncurses_wmouse_trafo(resource $window ,int &$y ,int &$x ,bool $toscreen )","inheritdoc":0,"modifier":[],"return":""},"ncurses_wmove":{"params":{"$window":"","$y":"","$x":""},"docComment":"Moves windows output position","signature":"ncurses_wmove(resource $window ,int $y ,int $x )","inheritdoc":0,"modifier":[],"return":""},"ncurses_wnoutrefresh":{"params":{"$window":""},"docComment":"Copies window to virtual screen","signature":"ncurses_wnoutrefresh(resource $window )","inheritdoc":0,"modifier":[],"return":""},"ncurses_wrefresh":{"params":{"$window":""},"docComment":"Refresh window on terminal screen ","signature":"ncurses_wrefresh(resource $window )","inheritdoc":0,"modifier":[],"return":""},"ncurses_wstandend":{"params":{"$window":""},"docComment":"End standout mode for a window","signature":"ncurses_wstandend(resource $window )","inheritdoc":0,"modifier":[],"return":""},"ncurses_wstandout":{"params":{"$window":""},"docComment":"Enter standout mode for a window","signature":"ncurses_wstandout(resource $window )","inheritdoc":0,"modifier":[],"return":""},"ncurses_wvline":{"params":{"$window":"","$charattr":"","$n":""},"docComment":"Draws a vertical line in a window at current position using an attributed character and max. n characters long","signature":"ncurses_wvline(resource $window ,int $charattr ,int $n )","inheritdoc":0,"modifier":[],"return":""},"gopher_parsedir":{"params":{"$dirent":""},"docComment":"Translate a gopher formatted directory entry into an associative array.","signature":"gopher_parsedir(string $dirent )","inheritdoc":0,"modifier":[],"return":""},"newt_bell":{"params":[],"docComment":"Send a beep to the terminal","signature":"newt_bell( )","inheritdoc":0,"modifier":[],"return":""},"newt_button_bar":{"params":{"&$buttons":""},"docComment":"This function returns a grid containing the buttons created.","signature":"newt_button_bar(array &$buttons )","inheritdoc":0,"modifier":[],"return":""},"newt_button":{"params":{"$left":"","$top":"","$text":""},"docComment":"Create a new button","signature":"newt_button(int $left ,int $top ,string $text )","inheritdoc":0,"modifier":[],"return":""},"newt_centered_window":{"params":{"$width":"","$height":"","$title":""},"docComment":"Open a centered window of the specified size","signature":"newt_centered_window(int $width ,int $height ,string $title )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox_get_value":{"params":{"$checkbox":""},"docComment":"Retreives value of checkox resource","signature":"newt_checkbox_get_value(resource $checkbox )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox_set_flags":{"params":{"$checkbox":"","$flags":"","$sense":""},"docComment":"Configures checkbox resource","signature":"newt_checkbox_set_flags(resource $checkbox ,int $flags ,int $sense )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox_set_value":{"params":{"$checkbox":"","$value":""},"docComment":"Sets the value of the checkbox","signature":"newt_checkbox_set_value(resource $checkbox ,string $value )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox_tree_add_item":{"params":{"$checkboxtree":"","$text":"","$data":"","$flags":"","$index":"","$...":""},"docComment":"Adds new item to the checkbox tree","signature":"newt_checkbox_tree_add_item(resource $checkboxtree ,string $text ,mixed $data ,int $flags ,int $index ,int $... )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox_tree_find_item":{"params":{"$checkboxtree":"","$data":""},"docComment":"Finds an item in the checkbox tree","signature":"newt_checkbox_tree_find_item(resource $checkboxtree ,mixed $data )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox_tree_get_current":{"params":{"$checkboxtree":""},"docComment":"Returns checkbox tree selected item","signature":"newt_checkbox_tree_get_current(resource $checkboxtree )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox_tree_get_entry_value":{"params":{"$checkboxtree":"","$data":""},"docComment":"\n ","signature":"newt_checkbox_tree_get_entry_value(resource $checkboxtree ,mixed $data )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox_tree_get_multi_selection":{"params":{"$checkboxtree":"","$seqnum":""},"docComment":"\n ","signature":"newt_checkbox_tree_get_multi_selection(resource $checkboxtree ,string $seqnum )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox_tree_get_selection":{"params":{"$checkboxtree":""},"docComment":"\n ","signature":"newt_checkbox_tree_get_selection(resource $checkboxtree )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox_tree_multi":{"params":{"$left":"","$top":"","$height":"","$seq":"","$flags":""},"docComment":"\n ","signature":"newt_checkbox_tree_multi(int $left ,int $top ,int $height ,string $seq ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox_tree_set_current":{"params":{"$checkboxtree":"","$data":""},"docComment":"\n ","signature":"newt_checkbox_tree_set_current(resource $checkboxtree ,mixed $data )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox_tree_set_entry_value":{"params":{"$checkboxtree":"","$data":"","$value":""},"docComment":"\n ","signature":"newt_checkbox_tree_set_entry_value(resource $checkboxtree ,mixed $data ,string $value )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox_tree_set_entry":{"params":{"$checkboxtree":"","$data":"","$text":""},"docComment":"\n ","signature":"newt_checkbox_tree_set_entry(resource $checkboxtree ,mixed $data ,string $text )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox_tree_set_width":{"params":{"$checkbox_tree":"","$width":""},"docComment":"\n ","signature":"newt_checkbox_tree_set_width(resource $checkbox_tree ,int $width )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox_tree":{"params":{"$left":"","$top":"","$height":"","$flags":""},"docComment":"\n ","signature":"newt_checkbox_tree(int $left ,int $top ,int $height ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"newt_checkbox":{"params":{"$left":"","$top":"","$text":"","$def_value":"","$seq":""},"docComment":"\n ","signature":"newt_checkbox(int $left ,int $top ,string $text ,string $def_value ,string $seq )","inheritdoc":0,"modifier":[],"return":""},"newt_clear_key_buffer":{"params":[],"docComment":"Discards the contents of the terminal's input buffer without\n  waiting for additional input","signature":"newt_clear_key_buffer( )","inheritdoc":0,"modifier":[],"return":""},"newt_cls":{"params":[],"docComment":"\n ","signature":"newt_cls( )","inheritdoc":0,"modifier":[],"return":""},"newt_compact_button":{"params":{"$left":"","$top":"","$text":""},"docComment":"\n ","signature":"newt_compact_button(int $left ,int $top ,string $text )","inheritdoc":0,"modifier":[],"return":""},"newt_component_add_callback":{"params":{"$component":"","$func_name":"","$data":""},"docComment":"\n ","signature":"newt_component_add_callback(resource $component ,mixed $func_name ,mixed $data )","inheritdoc":0,"modifier":[],"return":""},"newt_component_takes_focus":{"params":{"$component":"","$takes_focus":""},"docComment":"\n ","signature":"newt_component_takes_focus(resource $component ,bool $takes_focus )","inheritdoc":0,"modifier":[],"return":""},"newt_create_grid":{"params":{"$cols":"","$rows":""},"docComment":"\n ","signature":"newt_create_grid(int $cols ,int $rows )","inheritdoc":0,"modifier":[],"return":""},"newt_cursor_off":{"params":[],"docComment":"\n ","signature":"newt_cursor_off( )","inheritdoc":0,"modifier":[],"return":""},"newt_cursor_on":{"params":[],"docComment":"\n ","signature":"newt_cursor_on( )","inheritdoc":0,"modifier":[],"return":""},"newt_delay":{"params":{"$microseconds":""},"docComment":"\n ","signature":"newt_delay(int $microseconds )","inheritdoc":0,"modifier":[],"return":""},"newt_draw_form":{"params":{"$form":""},"docComment":"\n ","signature":"newt_draw_form(resource $form )","inheritdoc":0,"modifier":[],"return":""},"newt_draw_root_text":{"params":{"$left":"","$top":"","$text":""},"docComment":"Displays the string text at the position indicated","signature":"newt_draw_root_text(int $left ,int $top ,string $text )","inheritdoc":0,"modifier":[],"return":""},"newt_entry_get_value":{"params":{"$entry":""},"docComment":"\n ","signature":"newt_entry_get_value(resource $entry )","inheritdoc":0,"modifier":[],"return":""},"newt_entry_set_filter":{"params":{"$entry":"","$filter":"","$data":""},"docComment":"\n ","signature":"newt_entry_set_filter(resource $entry ,callable $filter ,mixed $data )","inheritdoc":0,"modifier":[],"return":""},"newt_entry_set_flags":{"params":{"$entry":"","$flags":"","$sense":""},"docComment":"\n ","signature":"newt_entry_set_flags(resource $entry ,int $flags ,int $sense )","inheritdoc":0,"modifier":[],"return":""},"newt_entry_set":{"params":{"$entry":"","$value":"","$cursor_at_end":""},"docComment":"\n ","signature":"newt_entry_set(resource $entry ,string $value ,bool $cursor_at_end )","inheritdoc":0,"modifier":[],"return":""},"newt_entry":{"params":{"$left":"","$top":"","$width":"","$init_value":"","$flags":""},"docComment":"\n ","signature":"newt_entry(int $left ,int $top ,int $width ,string $init_value ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"newt_finished":{"params":[],"docComment":"Uninitializes newt interface","signature":"newt_finished( )","inheritdoc":0,"modifier":[],"return":""},"newt_form_add_component":{"params":{"$form":"","$component":""},"docComment":"Adds a single component to the form","signature":"newt_form_add_component(resource $form ,resource $component )","inheritdoc":0,"modifier":[],"return":""},"newt_form_add_components":{"params":{"$form":"","$components":""},"docComment":"Add several components to the form","signature":"newt_form_add_components(resource $form ,array $components )","inheritdoc":0,"modifier":[],"return":""},"newt_form_add_hot_key":{"params":{"$form":"","$key":""},"docComment":"\n ","signature":"newt_form_add_hot_key(resource $form ,int $key )","inheritdoc":0,"modifier":[],"return":""},"newt_form_destroy":{"params":{"$form":""},"docComment":"Destroys a form","signature":"newt_form_destroy(resource $form )","inheritdoc":0,"modifier":[],"return":""},"newt_form_get_current":{"params":{"$form":""},"docComment":"\n ","signature":"newt_form_get_current(resource $form )","inheritdoc":0,"modifier":[],"return":""},"newt_form_run":{"params":{"$form":"","&$exit_struct":""},"docComment":"Runs a form","signature":"newt_form_run(resource $form ,array &$exit_struct )","inheritdoc":0,"modifier":[],"return":""},"newt_form_set_background":{"params":{"$from":"","$background":""},"docComment":"\n ","signature":"newt_form_set_background(resource $from ,int $background )","inheritdoc":0,"modifier":[],"return":""},"newt_form_set_height":{"params":{"$form":"","$height":""},"docComment":"\n ","signature":"newt_form_set_height(resource $form ,int $height )","inheritdoc":0,"modifier":[],"return":""},"newt_form_set_size":{"params":{"$form":""},"docComment":"\n ","signature":"newt_form_set_size(resource $form )","inheritdoc":0,"modifier":[],"return":""},"newt_form_set_timer":{"params":{"$form":"","$milliseconds":""},"docComment":"\n ","signature":"newt_form_set_timer(resource $form ,int $milliseconds )","inheritdoc":0,"modifier":[],"return":""},"newt_form_set_width":{"params":{"$form":"","$width":""},"docComment":"\n ","signature":"newt_form_set_width(resource $form ,int $width )","inheritdoc":0,"modifier":[],"return":""},"newt_form_watch_fd":{"params":{"$form":"","$stream":"","$flags":""},"docComment":"\n ","signature":"newt_form_watch_fd(resource $form ,resource $stream ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"newt_form":{"params":{"$vert_bar":"","$help":"","$flags":""},"docComment":"Create a form","signature":"newt_form(resource $vert_bar ,string $help ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"newt_get_screen_size":{"params":{"&$cols":"","&$rows":""},"docComment":"Fills in the passed references with the current size of the\n  terminal","signature":"newt_get_screen_size(int &$cols ,int &$rows )","inheritdoc":0,"modifier":[],"return":""},"newt_grid_add_components_to_form":{"params":{"$grid":"","$form":"","$recurse":""},"docComment":"\n ","signature":"newt_grid_add_components_to_form(resource $grid ,resource $form ,bool $recurse )","inheritdoc":0,"modifier":[],"return":""},"newt_grid_basic_window":{"params":{"$text":"","$middle":"","$buttons":""},"docComment":"\n ","signature":"newt_grid_basic_window(resource $text ,resource $middle ,resource $buttons )","inheritdoc":0,"modifier":[],"return":""},"newt_grid_free":{"params":{"$grid":"","$recurse":""},"docComment":"\n ","signature":"newt_grid_free(resource $grid ,bool $recurse )","inheritdoc":0,"modifier":[],"return":""},"newt_grid_get_size":{"params":{"$grid":"","&$width":"","&$height":""},"docComment":"\n ","signature":"newt_grid_get_size( $grid ,int &$width ,int &$height )","inheritdoc":0,"modifier":[],"return":""},"newt_grid_h_close_stacked":{"params":{"$element1_type":"","$element1":"","$...":""},"docComment":"\n ","signature":"newt_grid_h_close_stacked(int $element1_type ,resource $element1 ,int $... ,resource $... )","inheritdoc":0,"modifier":[],"return":""},"newt_grid_h_stacked":{"params":{"$element1_type":"","$element1":"","$...":""},"docComment":"\n ","signature":"newt_grid_h_stacked(int $element1_type ,resource $element1 ,int $... ,resource $... )","inheritdoc":0,"modifier":[],"return":""},"newt_grid_place":{"params":{"$grid":"","$left":"","$top":""},"docComment":"\n ","signature":"newt_grid_place(resource $grid ,int $left ,int $top )","inheritdoc":0,"modifier":[],"return":""},"newt_grid_set_field":{"params":{"$grid":"","$col":"","$row":"","$type":"","$val":"","$pad_left":"","$pad_top":"","$pad_right":"","$pad_bottom":"","$anchor":"","$flags":""},"docComment":"\n ","signature":"newt_grid_set_field(resource $grid ,int $col ,int $row ,int $type ,resource $val ,int $pad_left ,int $pad_top ,int $pad_right ,int $pad_bottom ,int $anchor ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"newt_grid_simple_window":{"params":{"$text":"","$middle":"","$buttons":""},"docComment":"\n ","signature":"newt_grid_simple_window(resource $text ,resource $middle ,resource $buttons )","inheritdoc":0,"modifier":[],"return":""},"newt_grid_v_close_stacked":{"params":{"$element1_type":"","$element1":"","$...":""},"docComment":"\n ","signature":"newt_grid_v_close_stacked(int $element1_type ,resource $element1 ,int $... ,resource $... )","inheritdoc":0,"modifier":[],"return":""},"newt_grid_v_stacked":{"params":{"$element1_type":"","$element1":"","$...":""},"docComment":"\n ","signature":"newt_grid_v_stacked(int $element1_type ,resource $element1 ,int $... ,resource $... )","inheritdoc":0,"modifier":[],"return":""},"newt_grid_wrapped_window_at":{"params":{"$grid":"","$title":"","$left":"","$top":""},"docComment":"\n ","signature":"newt_grid_wrapped_window_at(resource $grid ,string $title ,int $left ,int $top )","inheritdoc":0,"modifier":[],"return":""},"newt_grid_wrapped_window":{"params":{"$grid":"","$title":""},"docComment":"\n ","signature":"newt_grid_wrapped_window(resource $grid ,string $title )","inheritdoc":0,"modifier":[],"return":""},"newt_init":{"params":[],"docComment":"Initialize newt","signature":"newt_init( )","inheritdoc":0,"modifier":[],"return":""},"newt_label_set_text":{"params":{"$label":"","$text":""},"docComment":"\n ","signature":"newt_label_set_text(resource $label ,string $text )","inheritdoc":0,"modifier":[],"return":""},"newt_label":{"params":{"$left":"","$top":"","$text":""},"docComment":"\n ","signature":"newt_label(int $left ,int $top ,string $text )","inheritdoc":0,"modifier":[],"return":""},"newt_listbox_append_entry":{"params":{"$listbox":"","$text":"","$data":""},"docComment":"\n ","signature":"newt_listbox_append_entry(resource $listbox ,string $text ,mixed $data )","inheritdoc":0,"modifier":[],"return":""},"newt_listbox_clear_selection":{"params":{"$listbox":""},"docComment":"\n ","signature":"newt_listbox_clear_selection(resource $listbox )","inheritdoc":0,"modifier":[],"return":""},"newt_listbox_clear":{"params":{"$listobx":""},"docComment":"\n ","signature":"newt_listbox_clear(resource $listobx )","inheritdoc":0,"modifier":[],"return":""},"newt_listbox_delete_entry":{"params":{"$listbox":"","$key":""},"docComment":"\n ","signature":"newt_listbox_delete_entry(resource $listbox ,mixed $key )","inheritdoc":0,"modifier":[],"return":""},"newt_listbox_get_current":{"params":{"$listbox":""},"docComment":"\n ","signature":"newt_listbox_get_current(resource $listbox )","inheritdoc":0,"modifier":[],"return":""},"newt_listbox_get_selection":{"params":{"$listbox":""},"docComment":"\n ","signature":"newt_listbox_get_selection(resource $listbox )","inheritdoc":0,"modifier":[],"return":""},"newt_listbox_insert_entry":{"params":{"$listbox":"","$text":"","$data":"","$key":""},"docComment":"\n ","signature":"newt_listbox_insert_entry(resource $listbox ,string $text ,mixed $data ,mixed $key )","inheritdoc":0,"modifier":[],"return":""},"newt_listbox_item_count":{"params":{"$listbox":""},"docComment":"\n ","signature":"newt_listbox_item_count(resource $listbox )","inheritdoc":0,"modifier":[],"return":""},"newt_listbox_select_item":{"params":{"$listbox":"","$key":"","$sense":""},"docComment":"\n ","signature":"newt_listbox_select_item(resource $listbox ,mixed $key ,int $sense )","inheritdoc":0,"modifier":[],"return":""},"newt_listbox_set_current_by_key":{"params":{"$listbox":"","$key":""},"docComment":"\n ","signature":"newt_listbox_set_current_by_key(resource $listbox ,mixed $key )","inheritdoc":0,"modifier":[],"return":""},"newt_listbox_set_current":{"params":{"$listbox":"","$num":""},"docComment":"\n ","signature":"newt_listbox_set_current(resource $listbox ,int $num )","inheritdoc":0,"modifier":[],"return":""},"newt_listbox_set_data":{"params":{"$listbox":"","$num":"","$data":""},"docComment":"\n ","signature":"newt_listbox_set_data(resource $listbox ,int $num ,mixed $data )","inheritdoc":0,"modifier":[],"return":""},"newt_listbox_set_entry":{"params":{"$listbox":"","$num":"","$text":""},"docComment":"\n ","signature":"newt_listbox_set_entry(resource $listbox ,int $num ,string $text )","inheritdoc":0,"modifier":[],"return":""},"newt_listbox_set_width":{"params":{"$listbox":"","$width":""},"docComment":"\n ","signature":"newt_listbox_set_width(resource $listbox ,int $width )","inheritdoc":0,"modifier":[],"return":""},"newt_listbox":{"params":{"$left":"","$top":"","$height":"","$flags":""},"docComment":"\n ","signature":"newt_listbox(int $left ,int $top ,int $height ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"newt_listitem_get_data":{"params":{"$item":""},"docComment":"\n ","signature":"newt_listitem_get_data(resource $item )","inheritdoc":0,"modifier":[],"return":""},"newt_listitem_set":{"params":{"$item":"","$text":""},"docComment":"\n ","signature":"newt_listitem_set(resource $item ,string $text )","inheritdoc":0,"modifier":[],"return":""},"newt_listitem":{"params":{"$left":"","$top":"","$text":"","$is_default":"","$prev_item":"","$data":"","$flags":""},"docComment":"\n ","signature":"newt_listitem(int $left ,int $top ,string $text ,bool $is_default , $prev_item ,mixed $data ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"newt_open_window":{"params":{"$left":"","$top":"","$width":"","$height":"","$title":""},"docComment":"Open a window of the specified size and position","signature":"newt_open_window(int $left ,int $top ,int $width ,int $height ,string $title )","inheritdoc":0,"modifier":[],"return":""},"newt_pop_help_line":{"params":[],"docComment":"Replaces the current help line with the one from the stack","signature":"newt_pop_help_line( )","inheritdoc":0,"modifier":[],"return":""},"newt_pop_window":{"params":[],"docComment":"Removes the top window from the display","signature":"newt_pop_window( )","inheritdoc":0,"modifier":[],"return":""},"newt_push_help_line":{"params":{"$text":""},"docComment":"Saves the current help line on a stack, and displays the new line","signature":"newt_push_help_line(string $text )","inheritdoc":0,"modifier":[],"return":""},"newt_radio_get_current":{"params":{"$set_member":""},"docComment":"\n ","signature":"newt_radio_get_current(resource $set_member )","inheritdoc":0,"modifier":[],"return":""},"newt_radiobutton":{"params":{"$left":"","$top":"","$text":"","$is_default":"","$prev_button":""},"docComment":"\n ","signature":"newt_radiobutton(int $left ,int $top ,string $text ,bool $is_default ,resource $prev_button )","inheritdoc":0,"modifier":[],"return":""},"newt_redraw_help_line":{"params":[],"docComment":"\n ","signature":"newt_redraw_help_line( )","inheritdoc":0,"modifier":[],"return":""},"newt_reflow_text":{"params":{"$text":"","$width":"","$flex_down":"","$flex_up":"","&$actual_width":"","&$actual_height":""},"docComment":"\n ","signature":"newt_reflow_text(string $text ,int $width ,int $flex_down ,int $flex_up ,int &$actual_width ,int &$actual_height )","inheritdoc":0,"modifier":[],"return":""},"newt_refresh":{"params":[],"docComment":"Updates modified portions of the screen","signature":"newt_refresh( )","inheritdoc":0,"modifier":[],"return":""},"newt_resize_screen":{"params":{"$redraw":""},"docComment":"\n ","signature":"newt_resize_screen(bool $redraw )","inheritdoc":0,"modifier":[],"return":""},"newt_resume":{"params":[],"docComment":"Resume using the newt interface after calling\n   ","signature":"newt_resume( )","inheritdoc":0,"modifier":[],"return":""},"newt_run_form":{"params":{"$form":""},"docComment":"Runs a form","signature":"newt_run_form(resource $form )","inheritdoc":0,"modifier":[],"return":""},"newt_scale_set":{"params":{"$scale":"","$amount":""},"docComment":"\n ","signature":"newt_scale_set(resource $scale ,int $amount )","inheritdoc":0,"modifier":[],"return":""},"newt_scale":{"params":{"$left":"","$top":"","$width":"","$full_value":""},"docComment":"\n ","signature":"newt_scale(int $left ,int $top ,int $width ,int $full_value )","inheritdoc":0,"modifier":[],"return":""},"newt_scrollbar_set":{"params":{"$scrollbar":"","$where":"","$total":""},"docComment":"\n ","signature":"newt_scrollbar_set(resource $scrollbar ,int $where ,int $total )","inheritdoc":0,"modifier":[],"return":""},"newt_set_help_callback":{"params":{"$function":""},"docComment":"\n ","signature":"newt_set_help_callback(mixed $function )","inheritdoc":0,"modifier":[],"return":""},"newt_set_suspend_callback":{"params":{"$function":"","$data":""},"docComment":"Set a callback function which gets invoked when user\n  presses the suspend key","signature":"newt_set_suspend_callback(callable $function ,mixed $data )","inheritdoc":0,"modifier":[],"return":""},"newt_suspend":{"params":[],"docComment":"Tells newt to return the terminal to its initial state","signature":"newt_suspend( )","inheritdoc":0,"modifier":[],"return":""},"newt_textbox_get_num_lines":{"params":{"$textbox":""},"docComment":"\n ","signature":"newt_textbox_get_num_lines(resource $textbox )","inheritdoc":0,"modifier":[],"return":""},"newt_textbox_reflowed":{"params":{"$left":"","$top":"","$*text":"","$width":"","$flex_down":"","$flex_up":"","$flags":""},"docComment":"\n ","signature":"newt_textbox_reflowed(int $left ,int $top , $*text ,int $width ,int $flex_down ,int $flex_up ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"newt_textbox_set_height":{"params":{"$textbox":"","$height":""},"docComment":"\n ","signature":"newt_textbox_set_height(resource $textbox ,int $height )","inheritdoc":0,"modifier":[],"return":""},"newt_textbox_set_text":{"params":{"$textbox":"","$text":""},"docComment":"\n ","signature":"newt_textbox_set_text(resource $textbox ,string $text )","inheritdoc":0,"modifier":[],"return":""},"newt_textbox":{"params":{"$left":"","$top":"","$width":"","$height":"","$flags":""},"docComment":"\n ","signature":"newt_textbox(int $left ,int $top ,int $width ,int $height ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"newt_vertical_scrollbar":{"params":{"$left":"","$top":"","$height":"","$normal_colorset":"","$thumb_colorset":""},"docComment":"\n ","signature":"newt_vertical_scrollbar(int $left ,int $top ,int $height ,int $normal_colorset ,int $thumb_colorset )","inheritdoc":0,"modifier":[],"return":""},"newt_wait_for_key":{"params":[],"docComment":"Doesn't return until a key has been pressed","signature":"newt_wait_for_key( )","inheritdoc":0,"modifier":[],"return":""},"newt_win_choice":{"params":{"$title":"","$button1_text":"","$button2_text":"","$format":"","$args":"","$...":""},"docComment":"\n ","signature":"newt_win_choice(string $title ,string $button1_text ,string $button2_text ,string $format ,mixed $args ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"newt_win_entries":{"params":{"$title":"","$text":"","$suggested_width":"","$flex_down":"","$flex_up":"","$data_width":"","&$items":"","$button1":"","$...":""},"docComment":"\n ","signature":"newt_win_entries(string $title ,string $text ,int $suggested_width ,int $flex_down ,int $flex_up ,int $data_width ,array &$items ,string $button1 ,string $... )","inheritdoc":0,"modifier":[],"return":""},"newt_win_menu":{"params":{"$title":"","$text":"","$suggestedWidth":"","$flexDown":"","$flexUp":"","$maxListHeight":"","$items":"","&$listItem":"","$button1":"","$...":""},"docComment":"\n ","signature":"newt_win_menu(string $title ,string $text ,int $suggestedWidth ,int $flexDown ,int $flexUp ,int $maxListHeight ,array $items ,int &$listItem ,string $button1 ,string $... )","inheritdoc":0,"modifier":[],"return":""},"newt_win_message":{"params":{"$title":"","$button_text":"","$format":"","$args":"","$...":""},"docComment":"\n ","signature":"newt_win_message(string $title ,string $button_text ,string $format ,mixed $args ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"newt_win_messagev":{"params":{"$title":"","$button_text":"","$format":"","$args":""},"docComment":"\n ","signature":"newt_win_messagev(string $title ,string $button_text ,string $format ,array $args )","inheritdoc":0,"modifier":[],"return":""},"newt_win_ternary":{"params":{"$title":"","$button1_text":"","$button2_text":"","$button3_text":"","$format":"","$args":"","$...":""},"docComment":"\n ","signature":"newt_win_ternary(string $title ,string $button1_text ,string $button2_text ,string $button3_text ,string $format ,mixed $args ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"yp_all":{"params":{"$domain":"","$map":"","$callback":""},"docComment":"Traverse the map and call a function on each entry","signature":"yp_all(string $domain ,string $map ,string $callback )","inheritdoc":0,"modifier":[],"return":""},"yp_cat":{"params":{"$domain":"","$map":""},"docComment":"Return an array containing the entire map","signature":"yp_cat(string $domain ,string $map )","inheritdoc":0,"modifier":[],"return":""},"yp_err_string":{"params":{"$errorcode":""},"docComment":"Returns the error string associated with the given error code","signature":"yp_err_string(int $errorcode )","inheritdoc":0,"modifier":[],"return":""},"yp_errno":{"params":[],"docComment":"Returns the error code of the previous operation","signature":"yp_errno( )","inheritdoc":0,"modifier":[],"return":""},"yp_first":{"params":{"$domain":"","$map":""},"docComment":"Returns the first key-value pair from the named map","signature":"yp_first(string $domain ,string $map )","inheritdoc":0,"modifier":[],"return":""},"yp_get_default_domain":{"params":[],"docComment":"Fetches the machine's default NIS domain","signature":"yp_get_default_domain( )","inheritdoc":0,"modifier":[],"return":""},"yp_master":{"params":{"$domain":"","$map":""},"docComment":"Returns the machine name of the master NIS server for a map","signature":"yp_master(string $domain ,string $map )","inheritdoc":0,"modifier":[],"return":""},"yp_match":{"params":{"$domain":"","$map":"","$key":""},"docComment":"Returns the matched line","signature":"yp_match(string $domain ,string $map ,string $key )","inheritdoc":0,"modifier":[],"return":""},"yp_next":{"params":{"$domain":"","$map":"","$key":""},"docComment":"Returns the next key-value pair in the named map","signature":"yp_next(string $domain ,string $map ,string $key )","inheritdoc":0,"modifier":[],"return":""},"yp_order":{"params":{"$domain":"","$map":""},"docComment":"Returns the order number for a map","signature":"yp_order(string $domain ,string $map )","inheritdoc":0,"modifier":[],"return":""},"notes_body":{"params":{"$server":"","$mailbox":"","$msg_number":""},"docComment":"Open the message msg_number in the specified mailbox on the specified server (leave serv","signature":"notes_body(string $server ,string $mailbox ,int $msg_number )","inheritdoc":0,"modifier":[],"return":""},"notes_copy_db":{"params":{"$from_database_name":"","$to_database_name":""},"docComment":"Copy a Lotus Notes database","signature":"notes_copy_db(string $from_database_name ,string $to_database_name )","inheritdoc":0,"modifier":[],"return":""},"notes_create_db":{"params":{"$database_name":""},"docComment":"Create a Lotus Notes database","signature":"notes_create_db(string $database_name )","inheritdoc":0,"modifier":[],"return":""},"notes_create_note":{"params":{"$database_name":"","$form_name":""},"docComment":"Create a note using form form_name","signature":"notes_create_note(string $database_name ,string $form_name )","inheritdoc":0,"modifier":[],"return":""},"notes_drop_db":{"params":{"$database_name":""},"docComment":"Drop a Lotus Notes database","signature":"notes_drop_db(string $database_name )","inheritdoc":0,"modifier":[],"return":""},"notes_find_note":{"params":{"$database_name":"","$name":"","$type":""},"docComment":"Returns a note id found in database_name","signature":"notes_find_note(string $database_name ,string $name ,string $type )","inheritdoc":0,"modifier":[],"return":""},"notes_header_info":{"params":{"$server":"","$mailbox":"","$msg_number":""},"docComment":"Open the message msg_number in the specified mailbox on the specified server (leave serv","signature":"notes_header_info(string $server ,string $mailbox ,int $msg_number )","inheritdoc":0,"modifier":[],"return":""},"notes_list_msgs":{"params":{"$db":""},"docComment":"Returns the notes from a selected database_name","signature":"notes_list_msgs(string $db )","inheritdoc":0,"modifier":[],"return":""},"notes_mark_read":{"params":{"$database_name":"","$user_name":"","$note_id":""},"docComment":"Mark a note_id as read for the User user_name","signature":"notes_mark_read(string $database_name ,string $user_name ,string $note_id )","inheritdoc":0,"modifier":[],"return":""},"notes_mark_unread":{"params":{"$database_name":"","$user_name":"","$note_id":""},"docComment":"Mark a note_id as unread for the User user_name","signature":"notes_mark_unread(string $database_name ,string $user_name ,string $note_id )","inheritdoc":0,"modifier":[],"return":""},"notes_nav_create":{"params":{"$database_name":"","$name":""},"docComment":"Create a navigator name, in database_name","signature":"notes_nav_create(string $database_name ,string $name )","inheritdoc":0,"modifier":[],"return":""},"notes_search":{"params":{"$database_name":"","$keywords":""},"docComment":"Find notes that match keywords in database_name","signature":"notes_search(string $database_name ,string $keywords )","inheritdoc":0,"modifier":[],"return":""},"notes_unread":{"params":{"$database_name":"","$user_name":""},"docComment":"Returns the unread note id's for the current User user_name","signature":"notes_unread(string $database_name ,string $user_name )","inheritdoc":0,"modifier":[],"return":""},"notes_version":{"params":{"$database_name":""},"docComment":"Get the version Lotus Notes","signature":"notes_version(string $database_name )","inheritdoc":0,"modifier":[],"return":""},"oauth_get_sbs":{"params":{"$http_method":"","$uri":"","$request_parameters":""},"docComment":"Generate a Signature Base String","signature":"oauth_get_sbs(string $http_method ,string $uri ,array $request_parameters )","inheritdoc":0,"modifier":[],"return":""},"oauth_urlencode":{"params":{"$uri":""},"docComment":"Encode a URI to RFC 3986","signature":"oauth_urlencode(string $uri )","inheritdoc":0,"modifier":[],"return":""},"openal_buffer_create":{"params":[],"docComment":"\n   Generate OpenAL buffer\n  ","signature":"openal_buffer_create( )","inheritdoc":0,"modifier":[],"return":""},"openal_buffer_data":{"params":{"$buffer":"","$format":"","$data":"","$freq":""},"docComment":"\n   Load a buffer with data\n  ","signature":"openal_buffer_data(resource $buffer ,int $format ,string $data ,int $freq )","inheritdoc":0,"modifier":[],"return":""},"openal_buffer_destroy":{"params":{"$buffer":""},"docComment":"\n   Destroys an OpenAL buffer\n  ","signature":"openal_buffer_destroy(resource $buffer )","inheritdoc":0,"modifier":[],"return":""},"openal_buffer_get":{"params":{"$buffer":"","$property":""},"docComment":"\n   Retrieve an OpenAL buffer property\n  ","signature":"openal_buffer_get(resource $buffer ,int $property )","inheritdoc":0,"modifier":[],"return":""},"openal_buffer_loadwav":{"params":{"$buffer":"","$wavfile":""},"docComment":"\n   Load a .wav file into a buffer\n  ","signature":"openal_buffer_loadwav(resource $buffer ,string $wavfile )","inheritdoc":0,"modifier":[],"return":""},"openal_context_create":{"params":{"$device":""},"docComment":"\n   Create an audio processing context \n  ","signature":"openal_context_create(resource $device )","inheritdoc":0,"modifier":[],"return":""},"openal_context_current":{"params":{"$context":""},"docComment":"\n   Make the specified context current\n  ","signature":"openal_context_current(resource $context )","inheritdoc":0,"modifier":[],"return":""},"openal_context_destroy":{"params":{"$context":""},"docComment":"\n   Destroys a context\n  ","signature":"openal_context_destroy(resource $context )","inheritdoc":0,"modifier":[],"return":""},"openal_context_process":{"params":{"$context":""},"docComment":"\n   Process the specified context\n  ","signature":"openal_context_process(resource $context )","inheritdoc":0,"modifier":[],"return":""},"openal_context_suspend":{"params":{"$context":""},"docComment":"\n   Suspend the specified context\n  ","signature":"openal_context_suspend(resource $context )","inheritdoc":0,"modifier":[],"return":""},"openal_device_close":{"params":{"$device":""},"docComment":"\n   Close an OpenAL device\n  ","signature":"openal_device_close(resource $device )","inheritdoc":0,"modifier":[],"return":""},"openal_device_open":{"params":{"$device_desc":""},"docComment":"\n   Initialize the OpenAL audio layer\n  ","signature":"openal_device_open(string $device_desc )","inheritdoc":0,"modifier":[],"return":""},"openal_listener_get":{"params":{"$property":""},"docComment":"\n   Retrieve a listener property\n  ","signature":"openal_listener_get(int $property )","inheritdoc":0,"modifier":[],"return":""},"openal_listener_set":{"params":{"$property":"","$setting":""},"docComment":"\n   Set a listener property\n  ","signature":"openal_listener_set(int $property ,mixed $setting )","inheritdoc":0,"modifier":[],"return":""},"openal_source_create":{"params":[],"docComment":"\n   Generate a source resource\n  ","signature":"openal_source_create( )","inheritdoc":0,"modifier":[],"return":""},"openal_source_destroy":{"params":{"$source":""},"docComment":"\n   Destroy a source resource\n  ","signature":"openal_source_destroy(resource $source )","inheritdoc":0,"modifier":[],"return":""},"openal_source_get":{"params":{"$source":"","$property":""},"docComment":"\n   Retrieve an OpenAL source property\n  ","signature":"openal_source_get(resource $source ,int $property )","inheritdoc":0,"modifier":[],"return":""},"openal_source_pause":{"params":{"$source":""},"docComment":"\n   Pause the source\n  ","signature":"openal_source_pause(resource $source )","inheritdoc":0,"modifier":[],"return":""},"openal_source_play":{"params":{"$source":""},"docComment":"\n   Start playing the source\n  ","signature":"openal_source_play(resource $source )","inheritdoc":0,"modifier":[],"return":""},"openal_source_rewind":{"params":{"$source":""},"docComment":"\n   Rewind the source\n  ","signature":"openal_source_rewind(resource $source )","inheritdoc":0,"modifier":[],"return":""},"openal_source_set":{"params":{"$source":"","$property":"","$setting":""},"docComment":"\n   Set source property\n  ","signature":"openal_source_set(resource $source ,int $property ,mixed $setting )","inheritdoc":0,"modifier":[],"return":""},"openal_source_stop":{"params":{"$source":""},"docComment":"\n   Stop playing the source\n  ","signature":"openal_source_stop(resource $source )","inheritdoc":0,"modifier":[],"return":""},"openal_stream":{"params":{"$source":"","$format":"","$rate":""},"docComment":"\n   Begin streaming on a source\n  ","signature":"openal_stream(resource $source ,int $format ,int $rate )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_close":{"params":{"$connection":""},"docComment":"Closes the connection to ovrimos","signature":"ovrimos_close(int $connection )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_commit":{"params":{"$connection_id":""},"docComment":"Commits the transaction","signature":"ovrimos_commit(int $connection_id )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_connect":{"params":{"$host":"","$dborport":"","$user":"","$password":""},"docComment":"Connect to the specified database","signature":"ovrimos_connect(string $host ,string $dborport ,string $user ,string $password )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_cursor":{"params":{"$result_id":""},"docComment":"Returns the name of the cursor","signature":"ovrimos_cursor(int $result_id )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_exec":{"params":{"$connection_id":"","$query":""},"docComment":"Executes an SQL statement","signature":"ovrimos_exec(int $connection_id ,string $query )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_execute":{"params":{"$result_id":"","$parameters_array":""},"docComment":"Executes a prepared SQL statement","signature":"ovrimos_execute(int $result_id ,array $parameters_array )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_fetch_into":{"params":{"$result_id":"","&$result_array":"","$how":"","$rownumber":""},"docComment":"Fetches a row from the result set","signature":"ovrimos_fetch_into(int $result_id ,array &$result_array ,string $how ,int $rownumber )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_fetch_row":{"params":{"$result_id":"","$how":"","$row_number":""},"docComment":"Fetches a row from the result set","signature":"ovrimos_fetch_row(int $result_id ,int $how ,int $row_number )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_field_len":{"params":{"$result_id":"","$field_number":""},"docComment":"Returns the length of the output column","signature":"ovrimos_field_len(int $result_id ,int $field_number )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_field_name":{"params":{"$result_id":"","$field_number":""},"docComment":"Returns the output column name","signature":"ovrimos_field_name(int $result_id ,int $field_number )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_field_num":{"params":{"$result_id":"","$field_name":""},"docComment":"Returns the (1-based) index of the output column","signature":"ovrimos_field_num(int $result_id ,string $field_name )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_field_type":{"params":{"$result_id":"","$field_number":""},"docComment":"Returns the type of the output column","signature":"ovrimos_field_type(int $result_id ,int $field_number )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_free_result":{"params":{"$result_id":""},"docComment":"Frees the specified result_id","signature":"ovrimos_free_result(int $result_id )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_longreadlen":{"params":{"$result_id":"","$length":""},"docComment":"Specifies how many bytes are to be retrieved from long datatypes","signature":"ovrimos_longreadlen(int $result_id ,int $length )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_num_fields":{"params":{"$result_id":""},"docComment":"Returns the number of columns","signature":"ovrimos_num_fields(int $result_id )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_num_rows":{"params":{"$result_id":""},"docComment":"Returns the number of rows affected by update operations","signature":"ovrimos_num_rows(int $result_id )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_prepare":{"params":{"$connection_id":"","$query":""},"docComment":"Prepares an SQL statement","signature":"ovrimos_prepare(int $connection_id ,string $query )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_result_all":{"params":{"$result_id":"","$format":""},"docComment":"Prints the whole result set as an HTML table","signature":"ovrimos_result_all(int $result_id ,string $format )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_result":{"params":{"$result_id":"","$field":""},"docComment":"Retrieves the output column","signature":"ovrimos_result(int $result_id ,mixed $field )","inheritdoc":0,"modifier":[],"return":""},"ovrimos_rollback":{"params":{"$connection_id":""},"docComment":"Rolls back the transaction","signature":"ovrimos_rollback(int $connection_id )","inheritdoc":0,"modifier":[],"return":""},"px_close":{"params":{"$pxdoc":""},"docComment":"Closes a paradox database","signature":"px_close(resource $pxdoc )","inheritdoc":0,"modifier":[],"return":""},"px_create_fp":{"params":{"$pxdoc":"","$file":"","$fielddesc":""},"docComment":"Create a new paradox database","signature":"px_create_fp(resource $pxdoc ,resource $file ,array $fielddesc )","inheritdoc":0,"modifier":[],"return":""},"px_date2string":{"params":{"$pxdoc":"","$value":"","$format":""},"docComment":"\n   Converts a date into a string.\n  ","signature":"px_date2string(resource $pxdoc ,int $value ,string $format )","inheritdoc":0,"modifier":[],"return":""},"px_delete_record":{"params":{"$pxdoc":"","$num":""},"docComment":"Deletes record from paradox database","signature":"px_delete_record(resource $pxdoc ,int $num )","inheritdoc":0,"modifier":[],"return":""},"px_delete":{"params":{"$pxdoc":""},"docComment":"Deletes resource of paradox database","signature":"px_delete(resource $pxdoc )","inheritdoc":0,"modifier":[],"return":""},"px_get_field":{"params":{"$pxdoc":"","$fieldno":""},"docComment":"Returns the specification of a single field","signature":"px_get_field(resource $pxdoc ,int $fieldno )","inheritdoc":0,"modifier":[],"return":""},"px_get_info":{"params":{"$pxdoc":""},"docComment":"Return lots of information about a paradox file","signature":"px_get_info(resource $pxdoc )","inheritdoc":0,"modifier":[],"return":""},"px_get_parameter":{"params":{"$pxdoc":"","$name":""},"docComment":"Gets a parameter","signature":"px_get_parameter(resource $pxdoc ,string $name )","inheritdoc":0,"modifier":[],"return":""},"px_get_record":{"params":{"$pxdoc":"","$num":"","$mode":""},"docComment":"Returns record of paradox database","signature":"px_get_record(resource $pxdoc ,int $num ,[int $mode] )","inheritdoc":0,"modifier":[],"return":""},"px_get_schema":{"params":{"$pxdoc":"","$mode":""},"docComment":"Returns the database schema","signature":"px_get_schema(resource $pxdoc ,[int $mode] )","inheritdoc":0,"modifier":[],"return":""},"px_get_value":{"params":{"$pxdoc":"","$name":""},"docComment":"Gets a value","signature":"px_get_value(resource $pxdoc ,string $name )","inheritdoc":0,"modifier":[],"return":""},"px_insert_record":{"params":{"$pxdoc":"","$data":""},"docComment":"Inserts record into paradox database","signature":"px_insert_record(resource $pxdoc ,array $data )","inheritdoc":0,"modifier":[],"return":""},"px_new":{"params":[],"docComment":"Create a new paradox object","signature":"px_new( )","inheritdoc":0,"modifier":[],"return":""},"px_numfields":{"params":{"$pxdoc":""},"docComment":"Returns number of fields in a database","signature":"px_numfields(resource $pxdoc )","inheritdoc":0,"modifier":[],"return":""},"px_numrecords":{"params":{"$pxdoc":""},"docComment":"Returns number of records in a database","signature":"px_numrecords(resource $pxdoc )","inheritdoc":0,"modifier":[],"return":""},"px_open_fp":{"params":{"$pxdoc":"","$file":""},"docComment":"Open paradox database","signature":"px_open_fp(resource $pxdoc ,resource $file )","inheritdoc":0,"modifier":[],"return":""},"px_put_record":{"params":{"$pxdoc":"","$record":"","$recpos":""},"docComment":"Stores record into paradox database","signature":"px_put_record(resource $pxdoc ,array $record ,[int $recpos] )","inheritdoc":0,"modifier":[],"return":""},"px_retrieve_record":{"params":{"$pxdoc":"","$num":"","$mode":""},"docComment":"Returns record of paradox database","signature":"px_retrieve_record(resource $pxdoc ,int $num ,[int $mode] )","inheritdoc":0,"modifier":[],"return":""},"px_set_blob_file":{"params":{"$pxdoc":"","$filename":""},"docComment":"Sets the file where blobs are read from","signature":"px_set_blob_file(resource $pxdoc ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"px_set_parameter":{"params":{"$pxdoc":"","$name":"","$value":""},"docComment":"Sets a parameter","signature":"px_set_parameter(resource $pxdoc ,string $name ,string $value )","inheritdoc":0,"modifier":[],"return":""},"px_set_tablename":{"params":{"$pxdoc":"","$name":""},"docComment":"Sets the name of a table (deprecated)","signature":"px_set_tablename(resource $pxdoc ,string $name )","inheritdoc":0,"modifier":[],"return":""},"px_set_targetencoding":{"params":{"$pxdoc":"","$encoding":""},"docComment":"Sets the encoding for character fields (deprecated)","signature":"px_set_targetencoding(resource $pxdoc ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"px_set_value":{"params":{"$pxdoc":"","$name":"","$value":""},"docComment":"Sets a value","signature":"px_set_value(resource $pxdoc ,string $name ,float $value )","inheritdoc":0,"modifier":[],"return":""},"px_timestamp2string":{"params":{"$pxdoc":"","$value":"","$format":""},"docComment":"\n   Converts the timestamp into a string.\n  ","signature":"px_timestamp2string(resource $pxdoc ,float $value ,string $format )","inheritdoc":0,"modifier":[],"return":""},"px_update_record":{"params":{"$pxdoc":"","$data":"","$num":""},"docComment":"Updates record in paradox database","signature":"px_update_record(resource $pxdoc ,array $data ,int $num )","inheritdoc":0,"modifier":[],"return":""},"parsekit_compile_file":{"params":{"$filename":"","&$errors":"","$options":""},"docComment":"Compile a string of PHP code and return the resulting op array","signature":"parsekit_compile_file(string $filename ,array &$errors ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"parsekit_compile_string":{"params":{"$phpcode":"","&$errors":"","$options":""},"docComment":"Compile a string of PHP code and return the resulting op array","signature":"parsekit_compile_string(string $phpcode ,array &$errors ,[int $options] )","inheritdoc":0,"modifier":[],"return":""},"parsekit_func_arginfo":{"params":{"$function":""},"docComment":"Return information regarding function argument(s)","signature":"parsekit_func_arginfo(mixed $function )","inheritdoc":0,"modifier":[],"return":""},"PDF_activate_item":{"params":{"$pdfdoc":"","$id":""},"docComment":"Activate structure element or other content item","signature":"PDF_activate_item(resource $pdfdoc ,int $id )","inheritdoc":0,"modifier":[],"return":""},"PDF_add_annotation":{"params":[],"docComment":"Add annotation [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_add_bookmark":{"params":[],"docComment":"Add bookmark for current page [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_add_launchlink":{"params":{"$pdfdoc":"","$llx":"","$lly":"","$urx":"","$ury":"","$filename":""},"docComment":"Add launch annotation for current page [deprecated]","signature":"PDF_add_launchlink(resource $pdfdoc ,float $llx ,float $lly ,float $urx ,float $ury ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"PDF_add_locallink":{"params":{"$pdfdoc":"","$lowerleftx":"","$lowerlefty":"","$upperrightx":"","$upperrighty":"","$page":"","$dest":""},"docComment":"Add link annotation for current page [deprecated]","signature":"PDF_add_locallink(resource $pdfdoc ,float $lowerleftx ,float $lowerlefty ,float $upperrightx ,float $upperrighty ,int $page ,string $dest )","inheritdoc":0,"modifier":[],"return":""},"PDF_add_nameddest":{"params":{"$pdfdoc":"","$name":"","$optlist":""},"docComment":"Create named destination","signature":"PDF_add_nameddest(resource $pdfdoc ,string $name ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_add_note":{"params":{"$pdfdoc":"","$llx":"","$lly":"","$urx":"","$ury":"","$contents":"","$title":"","$icon":"","$open":""},"docComment":"Set annotation for current page [deprecated]","signature":"PDF_add_note(resource $pdfdoc ,float $llx ,float $lly ,float $urx ,float $ury ,string $contents ,string $title ,string $icon ,int $open )","inheritdoc":0,"modifier":[],"return":""},"PDF_add_outline":{"params":[],"docComment":"Add bookmark for current page [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_add_pdflink":{"params":{"$pdfdoc":"","$bottom_left_x":"","$bottom_left_y":"","$up_right_x":"","$up_right_y":"","$filename":"","$page":"","$dest":""},"docComment":"Add file link annotation for current page [deprecated]","signature":"PDF_add_pdflink(resource $pdfdoc ,float $bottom_left_x ,float $bottom_left_y ,float $up_right_x ,float $up_right_y ,string $filename ,int $page ,string $dest )","inheritdoc":0,"modifier":[],"return":""},"PDF_add_table_cell":{"params":{"$pdfdoc":"","$table":"","$column":"","$row":"","$text":"","$optlist":""},"docComment":"Add a cell to a new or existing table","signature":"PDF_add_table_cell(resource $pdfdoc ,int $table ,int $column ,int $row ,string $text ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_add_textflow":{"params":{"$pdfdoc":"","$textflow":"","$text":"","$optlist":""},"docComment":"Create Textflow or add text to existing Textflow","signature":"PDF_add_textflow(resource $pdfdoc ,int $textflow ,string $text ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_add_thumbnail":{"params":{"$pdfdoc":"","$image":""},"docComment":"Add thumbnail for current page","signature":"PDF_add_thumbnail(resource $pdfdoc ,int $image )","inheritdoc":0,"modifier":[],"return":""},"PDF_add_weblink":{"params":{"$pdfdoc":"","$lowerleftx":"","$lowerlefty":"","$upperrightx":"","$upperrighty":"","$url":""},"docComment":"Add weblink for current page [deprecated]","signature":"PDF_add_weblink(resource $pdfdoc ,float $lowerleftx ,float $lowerlefty ,float $upperrightx ,float $upperrighty ,string $url )","inheritdoc":0,"modifier":[],"return":""},"PDF_arc":{"params":{"$p":"","$x":"","$y":"","$r":"","$alpha":"","$beta":""},"docComment":"Draw a counterclockwise circular arc segment","signature":"PDF_arc(resource $p ,float $x ,float $y ,float $r ,float $alpha ,float $beta )","inheritdoc":0,"modifier":[],"return":""},"PDF_arcn":{"params":{"$p":"","$x":"","$y":"","$r":"","$alpha":"","$beta":""},"docComment":"Draw a clockwise circular arc segment","signature":"PDF_arcn(resource $p ,float $x ,float $y ,float $r ,float $alpha ,float $beta )","inheritdoc":0,"modifier":[],"return":""},"PDF_attach_file":{"params":{"$pdfdoc":"","$llx":"","$lly":"","$urx":"","$ury":"","$filename":"","$description":"","$author":"","$mimetype":"","$icon":""},"docComment":"Add file attachment for current page [deprecated]","signature":"PDF_attach_file(resource $pdfdoc ,float $llx ,float $lly ,float $urx ,float $ury ,string $filename ,string $description ,string $author ,string $mimetype ,string $icon )","inheritdoc":0,"modifier":[],"return":""},"PDF_begin_document":{"params":{"$pdfdoc":"","$filename":"","$optlist":""},"docComment":"Create new PDF file","signature":"PDF_begin_document(resource $pdfdoc ,string $filename ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_begin_font":{"params":{"$pdfdoc":"","$filename":"","$a":"","$b":"","$c":"","$d":"","$e":"","$f":"","$optlist":""},"docComment":"Start a Type 3 font definition","signature":"PDF_begin_font(resource $pdfdoc ,string $filename ,float $a ,float $b ,float $c ,float $d ,float $e ,float $f ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_begin_glyph":{"params":{"$pdfdoc":"","$glyphname":"","$wx":"","$llx":"","$lly":"","$urx":"","$ury":""},"docComment":"Start glyph definition for Type 3 font","signature":"PDF_begin_glyph(resource $pdfdoc ,string $glyphname ,float $wx ,float $llx ,float $lly ,float $urx ,float $ury )","inheritdoc":0,"modifier":[],"return":""},"PDF_begin_item":{"params":{"$pdfdoc":"","$tag":"","$optlist":""},"docComment":"Open structure element or other content item","signature":"PDF_begin_item(resource $pdfdoc ,string $tag ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_begin_layer":{"params":{"$pdfdoc":"","$layer":""},"docComment":"Start layer","signature":"PDF_begin_layer(resource $pdfdoc ,int $layer )","inheritdoc":0,"modifier":[],"return":""},"PDF_begin_page_ext":{"params":{"$pdfdoc":"","$width":"","$height":"","$optlist":""},"docComment":"Start new page","signature":"PDF_begin_page_ext(resource $pdfdoc ,float $width ,float $height ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_begin_page":{"params":{"$pdfdoc":"","$width":"","$height":""},"docComment":"Start new page [deprecated]","signature":"PDF_begin_page(resource $pdfdoc ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":""},"PDF_begin_pattern":{"params":{"$pdfdoc":"","$width":"","$height":"","$xstep":"","$ystep":"","$painttype":""},"docComment":"Start pattern definition","signature":"PDF_begin_pattern(resource $pdfdoc ,float $width ,float $height ,float $xstep ,float $ystep ,int $painttype )","inheritdoc":0,"modifier":[],"return":""},"PDF_begin_template_ext":{"params":{"$pdfdoc":"","$width":"","$height":"","$optlist":""},"docComment":"Start template definition","signature":"PDF_begin_template_ext(resource $pdfdoc ,float $width ,float $height ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_begin_template":{"params":{"$pdfdoc":"","$width":"","$height":""},"docComment":"Start template definition [deprecated]","signature":"PDF_begin_template(resource $pdfdoc ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":""},"PDF_circle":{"params":{"$pdfdoc":"","$x":"","$y":"","$r":""},"docComment":"Draw a circle","signature":"PDF_circle(resource $pdfdoc ,float $x ,float $y ,float $r )","inheritdoc":0,"modifier":[],"return":""},"PDF_clip":{"params":{"$p":""},"docComment":"Clip to current path","signature":"PDF_clip(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_close_image":{"params":{"$p":"","$image":""},"docComment":"Close image","signature":"PDF_close_image(resource $p ,int $image )","inheritdoc":0,"modifier":[],"return":""},"PDF_close_pdi_page":{"params":{"$p":"","$page":""},"docComment":"Close the page handle","signature":"PDF_close_pdi_page(resource $p ,int $page )","inheritdoc":0,"modifier":[],"return":""},"PDF_close_pdi":{"params":{"$p":"","$doc":""},"docComment":"Close the input PDF document [deprecated]","signature":"PDF_close_pdi(resource $p ,int $doc )","inheritdoc":0,"modifier":[],"return":""},"PDF_close":{"params":{"$p":""},"docComment":"Close pdf resource [deprecated]","signature":"PDF_close(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_closepath_fill_stroke":{"params":{"$p":""},"docComment":"Close, fill and stroke current path","signature":"PDF_closepath_fill_stroke(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_closepath_stroke":{"params":{"$p":""},"docComment":"Close and stroke path","signature":"PDF_closepath_stroke(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_closepath":{"params":{"$p":""},"docComment":"Close current path","signature":"PDF_closepath(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_concat":{"params":{"$p":"","$a":"","$b":"","$c":"","$d":"","$e":"","$f":""},"docComment":"Concatenate a matrix to the CTM","signature":"PDF_concat(resource $p ,float $a ,float $b ,float $c ,float $d ,float $e ,float $f )","inheritdoc":0,"modifier":[],"return":""},"PDF_continue_text":{"params":{"$p":"","$text":""},"docComment":"Output text in next line","signature":"PDF_continue_text(resource $p ,string $text )","inheritdoc":0,"modifier":[],"return":""},"PDF_create_3dview":{"params":{"$pdfdoc":"","$username":"","$optlist":""},"docComment":"Create 3D view","signature":"PDF_create_3dview(resource $pdfdoc ,string $username ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_create_action":{"params":{"$pdfdoc":"","$type":"","$optlist":""},"docComment":"Create action for objects or events","signature":"PDF_create_action(resource $pdfdoc ,string $type ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_create_annotation":{"params":{"$pdfdoc":"","$llx":"","$lly":"","$urx":"","$ury":"","$type":"","$optlist":""},"docComment":"Create rectangular annotation","signature":"PDF_create_annotation(resource $pdfdoc ,float $llx ,float $lly ,float $urx ,float $ury ,string $type ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_create_bookmark":{"params":{"$pdfdoc":"","$text":"","$optlist":""},"docComment":"Create bookmark","signature":"PDF_create_bookmark(resource $pdfdoc ,string $text ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_create_field":{"params":{"$pdfdoc":"","$llx":"","$lly":"","$urx":"","$ury":"","$name":"","$type":"","$optlist":""},"docComment":"Create form field","signature":"PDF_create_field(resource $pdfdoc ,float $llx ,float $lly ,float $urx ,float $ury ,string $name ,string $type ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_create_fieldgroup":{"params":{"$pdfdoc":"","$name":"","$optlist":""},"docComment":"Create form field group","signature":"PDF_create_fieldgroup(resource $pdfdoc ,string $name ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_create_gstate":{"params":{"$pdfdoc":"","$optlist":""},"docComment":"Create graphics state object","signature":"PDF_create_gstate(resource $pdfdoc ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_create_pvf":{"params":{"$pdfdoc":"","$filename":"","$data":"","$optlist":""},"docComment":"Create PDFlib virtual file","signature":"PDF_create_pvf(resource $pdfdoc ,string $filename ,string $data ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_create_textflow":{"params":{"$pdfdoc":"","$text":"","$optlist":""},"docComment":"Create textflow object","signature":"PDF_create_textflow(resource $pdfdoc ,string $text ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_curveto":{"params":{"$p":"","$x1":"","$y1":"","$x2":"","$y2":"","$x3":"","$y3":""},"docComment":"Draw Bezier curve","signature":"PDF_curveto(resource $p ,float $x1 ,float $y1 ,float $x2 ,float $y2 ,float $x3 ,float $y3 )","inheritdoc":0,"modifier":[],"return":""},"PDF_define_layer":{"params":{"$pdfdoc":"","$name":"","$optlist":""},"docComment":"Create layer definition","signature":"PDF_define_layer(resource $pdfdoc ,string $name ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_delete_pvf":{"params":{"$pdfdoc":"","$filename":""},"docComment":"Delete PDFlib virtual file","signature":"PDF_delete_pvf(resource $pdfdoc ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"PDF_delete_table":{"params":{"$pdfdoc":"","$table":"","$optlist":""},"docComment":"Delete table object","signature":"PDF_delete_table(resource $pdfdoc ,int $table ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_delete_textflow":{"params":{"$pdfdoc":"","$textflow":""},"docComment":"Delete textflow object","signature":"PDF_delete_textflow(resource $pdfdoc ,int $textflow )","inheritdoc":0,"modifier":[],"return":""},"PDF_delete":{"params":{"$pdfdoc":""},"docComment":"Delete PDFlib object","signature":"PDF_delete(resource $pdfdoc )","inheritdoc":0,"modifier":[],"return":""},"PDF_encoding_set_char":{"params":{"$pdfdoc":"","$encoding":"","$slot":"","$glyphname":"","$uv":""},"docComment":"Add glyph name and\/or Unicode value","signature":"PDF_encoding_set_char(resource $pdfdoc ,string $encoding ,int $slot ,string $glyphname ,int $uv )","inheritdoc":0,"modifier":[],"return":""},"PDF_end_document":{"params":{"$pdfdoc":"","$optlist":""},"docComment":"Close PDF file","signature":"PDF_end_document(resource $pdfdoc ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_end_font":{"params":{"$pdfdoc":""},"docComment":"Terminate Type 3 font definition","signature":"PDF_end_font(resource $pdfdoc )","inheritdoc":0,"modifier":[],"return":""},"PDF_end_glyph":{"params":{"$pdfdoc":""},"docComment":"Terminate glyph definition for Type 3 font","signature":"PDF_end_glyph(resource $pdfdoc )","inheritdoc":0,"modifier":[],"return":""},"PDF_end_item":{"params":{"$pdfdoc":"","$id":""},"docComment":"Close structure element or other content item","signature":"PDF_end_item(resource $pdfdoc ,int $id )","inheritdoc":0,"modifier":[],"return":""},"PDF_end_layer":{"params":{"$pdfdoc":""},"docComment":"Deactivate all active layers","signature":"PDF_end_layer(resource $pdfdoc )","inheritdoc":0,"modifier":[],"return":""},"PDF_end_page_ext":{"params":{"$pdfdoc":"","$optlist":""},"docComment":"Finish page","signature":"PDF_end_page_ext(resource $pdfdoc ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_end_page":{"params":{"$p":""},"docComment":"Finish page","signature":"PDF_end_page(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_end_pattern":{"params":{"$p":""},"docComment":"Finish pattern","signature":"PDF_end_pattern(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_end_template":{"params":{"$p":""},"docComment":"Finish template","signature":"PDF_end_template(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_endpath":{"params":{"$p":""},"docComment":"End current path","signature":"PDF_endpath(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_fill_imageblock":{"params":{"$pdfdoc":"","$page":"","$blockname":"","$image":"","$optlist":""},"docComment":"Fill image block with variable data","signature":"PDF_fill_imageblock(resource $pdfdoc ,int $page ,string $blockname ,int $image ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_fill_pdfblock":{"params":{"$pdfdoc":"","$page":"","$blockname":"","$contents":"","$optlist":""},"docComment":"Fill PDF block with variable data","signature":"PDF_fill_pdfblock(resource $pdfdoc ,int $page ,string $blockname ,int $contents ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_fill_stroke":{"params":{"$p":""},"docComment":"Fill and stroke path","signature":"PDF_fill_stroke(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_fill_textblock":{"params":{"$pdfdoc":"","$page":"","$blockname":"","$text":"","$optlist":""},"docComment":"Fill text block with variable data","signature":"PDF_fill_textblock(resource $pdfdoc ,int $page ,string $blockname ,string $text ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_fill":{"params":{"$p":""},"docComment":"Fill current path","signature":"PDF_fill(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_findfont":{"params":{"$p":"","$fontname":"","$encoding":"","$embed":""},"docComment":"Prepare font for later use [deprecated]","signature":"PDF_findfont(resource $p ,string $fontname ,string $encoding ,int $embed )","inheritdoc":0,"modifier":[],"return":""},"PDF_fit_image":{"params":{"$pdfdoc":"","$image":"","$x":"","$y":"","$optlist":""},"docComment":"Place image or template","signature":"PDF_fit_image(resource $pdfdoc ,int $image ,float $x ,float $y ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_fit_pdi_page":{"params":{"$pdfdoc":"","$page":"","$x":"","$y":"","$optlist":""},"docComment":"Place imported PDF page","signature":"PDF_fit_pdi_page(resource $pdfdoc ,int $page ,float $x ,float $y ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_fit_table":{"params":{"$pdfdoc":"","$table":"","$llx":"","$lly":"","$urx":"","$ury":"","$optlist":""},"docComment":"Place table on page","signature":"PDF_fit_table(resource $pdfdoc ,int $table ,float $llx ,float $lly ,float $urx ,float $ury ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_fit_textflow":{"params":{"$pdfdoc":"","$textflow":"","$llx":"","$lly":"","$urx":"","$ury":"","$optlist":""},"docComment":"Format textflow in rectangular area","signature":"PDF_fit_textflow(resource $pdfdoc ,int $textflow ,float $llx ,float $lly ,float $urx ,float $ury ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_fit_textline":{"params":{"$pdfdoc":"","$text":"","$x":"","$y":"","$optlist":""},"docComment":"Place single line of text","signature":"PDF_fit_textline(resource $pdfdoc ,string $text ,float $x ,float $y ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_get_apiname":{"params":{"$pdfdoc":""},"docComment":"Get name of unsuccessfull API function","signature":"PDF_get_apiname(resource $pdfdoc )","inheritdoc":0,"modifier":[],"return":""},"PDF_get_buffer":{"params":{"$p":""},"docComment":"Get PDF output buffer","signature":"PDF_get_buffer(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_get_errmsg":{"params":{"$pdfdoc":""},"docComment":"Get error text","signature":"PDF_get_errmsg(resource $pdfdoc )","inheritdoc":0,"modifier":[],"return":""},"PDF_get_errnum":{"params":{"$pdfdoc":""},"docComment":"Get error number","signature":"PDF_get_errnum(resource $pdfdoc )","inheritdoc":0,"modifier":[],"return":""},"PDF_get_font":{"params":[],"docComment":"Get font [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_get_fontname":{"params":[],"docComment":"Get font name [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_get_fontsize":{"params":[],"docComment":"Font handling [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_get_image_height":{"params":[],"docComment":"Get image height [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_get_image_width":{"params":[],"docComment":"Get image width [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_get_majorversion":{"params":[],"docComment":"Get major version number [deprecated]","signature":"PDF_get_majorversion( )","inheritdoc":0,"modifier":[],"return":""},"PDF_get_minorversion":{"params":[],"docComment":"Get minor version number [deprecated]","signature":"PDF_get_minorversion( )","inheritdoc":0,"modifier":[],"return":""},"PDF_get_parameter":{"params":{"$p":"","$key":"","$modifier":""},"docComment":"Get string parameter","signature":"PDF_get_parameter(resource $p ,string $key ,float $modifier )","inheritdoc":0,"modifier":[],"return":""},"PDF_get_pdi_parameter":{"params":{"$p":"","$key":"","$doc":"","$page":"","$reserved":""},"docComment":"Get PDI string parameter [deprecated]","signature":"PDF_get_pdi_parameter(resource $p ,string $key ,int $doc ,int $page ,int $reserved )","inheritdoc":0,"modifier":[],"return":""},"PDF_get_pdi_value":{"params":{"$p":"","$key":"","$doc":"","$page":"","$reserved":""},"docComment":"Get PDI numerical parameter [deprecated]","signature":"PDF_get_pdi_value(resource $p ,string $key ,int $doc ,int $page ,int $reserved )","inheritdoc":0,"modifier":[],"return":""},"PDF_get_value":{"params":{"$p":"","$key":"","$modifier":""},"docComment":"Get numerical parameter","signature":"PDF_get_value(resource $p ,string $key ,float $modifier )","inheritdoc":0,"modifier":[],"return":""},"PDF_info_font":{"params":{"$pdfdoc":"","$font":"","$keyword":"","$optlist":""},"docComment":"Query detailed information about a loaded font","signature":"PDF_info_font(resource $pdfdoc ,int $font ,string $keyword ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_info_matchbox":{"params":{"$pdfdoc":"","$boxname":"","$num":"","$keyword":""},"docComment":"Query matchbox information","signature":"PDF_info_matchbox(resource $pdfdoc ,string $boxname ,int $num ,string $keyword )","inheritdoc":0,"modifier":[],"return":""},"PDF_info_table":{"params":{"$pdfdoc":"","$table":"","$keyword":""},"docComment":"Retrieve table information","signature":"PDF_info_table(resource $pdfdoc ,int $table ,string $keyword )","inheritdoc":0,"modifier":[],"return":""},"PDF_info_textflow":{"params":{"$pdfdoc":"","$textflow":"","$keyword":""},"docComment":"Query textflow state","signature":"PDF_info_textflow(resource $pdfdoc ,int $textflow ,string $keyword )","inheritdoc":0,"modifier":[],"return":""},"PDF_info_textline":{"params":{"$pdfdoc":"","$text":"","$keyword":"","$optlist":""},"docComment":"Perform textline formatting and query metrics","signature":"PDF_info_textline(resource $pdfdoc ,string $text ,string $keyword ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_initgraphics":{"params":{"$p":""},"docComment":"Reset graphic state","signature":"PDF_initgraphics(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_lineto":{"params":{"$p":"","$x":"","$y":""},"docComment":"Draw a line","signature":"PDF_lineto(resource $p ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"PDF_load_3ddata":{"params":{"$pdfdoc":"","$filename":"","$optlist":""},"docComment":"Load 3D model","signature":"PDF_load_3ddata(resource $pdfdoc ,string $filename ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_load_font":{"params":{"$pdfdoc":"","$fontname":"","$encoding":"","$optlist":""},"docComment":"Search and prepare font","signature":"PDF_load_font(resource $pdfdoc ,string $fontname ,string $encoding ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_load_iccprofile":{"params":{"$pdfdoc":"","$profilename":"","$optlist":""},"docComment":"Search and prepare ICC profile","signature":"PDF_load_iccprofile(resource $pdfdoc ,string $profilename ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_load_image":{"params":{"$pdfdoc":"","$imagetype":"","$filename":"","$optlist":""},"docComment":"Open image file","signature":"PDF_load_image(resource $pdfdoc ,string $imagetype ,string $filename ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_makespotcolor":{"params":{"$p":"","$spotname":""},"docComment":"Make spot color","signature":"PDF_makespotcolor(resource $p ,string $spotname )","inheritdoc":0,"modifier":[],"return":""},"PDF_moveto":{"params":{"$p":"","$x":"","$y":""},"docComment":"Set current point","signature":"PDF_moveto(resource $p ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"PDF_new":{"params":[],"docComment":"Create PDFlib object","signature":"PDF_new( )","inheritdoc":0,"modifier":[],"return":""},"PDF_open_ccitt":{"params":{"$pdfdoc":"","$filename":"","$width":"","$height":"","$BitReverse":"","$k":"","$Blackls1":""},"docComment":"Open raw CCITT image [deprecated]","signature":"PDF_open_ccitt(resource $pdfdoc ,string $filename ,int $width ,int $height ,int $BitReverse ,int $k ,int $Blackls1 )","inheritdoc":0,"modifier":[],"return":""},"PDF_open_file":{"params":{"$p":"","$filename":""},"docComment":"Create PDF file [deprecated]","signature":"PDF_open_file(resource $p ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"PDF_open_gif":{"params":[],"docComment":"Open GIF image [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_open_image_file":{"params":{"$p":"","$imagetype":"","$filename":"","$stringparam":"","$intparam":""},"docComment":"Read image from file [deprecated]","signature":"PDF_open_image_file(resource $p ,string $imagetype ,string $filename ,string $stringparam ,int $intparam )","inheritdoc":0,"modifier":[],"return":""},"PDF_open_image":{"params":{"$p":"","$imagetype":"","$source":"","$data":"","$length":"","$width":"","$height":"","$components":"","$bpc":"","$params":""},"docComment":"Use image data [deprecated]","signature":"PDF_open_image(resource $p ,string $imagetype ,string $source ,string $data ,int $length ,int $width ,int $height ,int $components ,int $bpc ,string $params )","inheritdoc":0,"modifier":[],"return":""},"PDF_open_jpeg":{"params":[],"docComment":"Open JPEG image [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_open_memory_image":{"params":{"$p":"","$image":""},"docComment":"Open image created with PHP's image functions [not supported]","signature":"PDF_open_memory_image(resource $p ,resource $image )","inheritdoc":0,"modifier":[],"return":""},"PDF_open_pdi_document":{"params":{"$p":"","$filename":"","$optlist":""},"docComment":"Prepare a pdi document","signature":"PDF_open_pdi_document(resource $p ,string $filename ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_open_pdi_page":{"params":{"$p":"","$doc":"","$pagenumber":"","$optlist":""},"docComment":"Prepare a page","signature":"PDF_open_pdi_page(resource $p ,int $doc ,int $pagenumber ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_open_pdi":{"params":{"$pdfdoc":"","$filename":"","$optlist":"","$len":""},"docComment":"Open PDF file [deprecated]","signature":"PDF_open_pdi(resource $pdfdoc ,string $filename ,string $optlist ,int $len )","inheritdoc":0,"modifier":[],"return":""},"PDF_open_tiff":{"params":[],"docComment":"Open TIFF image [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_pcos_get_number":{"params":{"$p":"","$doc":"","$path":""},"docComment":"Get value of pCOS path with type number or boolean","signature":"PDF_pcos_get_number(resource $p ,int $doc ,string $path )","inheritdoc":0,"modifier":[],"return":""},"PDF_pcos_get_stream":{"params":{"$p":"","$doc":"","$optlist":"","$path":""},"docComment":"Get contents of pCOS path with type stream, fstream, or string","signature":"PDF_pcos_get_stream(resource $p ,int $doc ,string $optlist ,string $path )","inheritdoc":0,"modifier":[],"return":""},"PDF_pcos_get_string":{"params":{"$p":"","$doc":"","$path":""},"docComment":"Get value of pCOS path with type name, string, or boolean","signature":"PDF_pcos_get_string(resource $p ,int $doc ,string $path )","inheritdoc":0,"modifier":[],"return":""},"PDF_place_image":{"params":{"$pdfdoc":"","$image":"","$x":"","$y":"","$scale":""},"docComment":"Place image on the page [deprecated]","signature":"PDF_place_image(resource $pdfdoc ,int $image ,float $x ,float $y ,float $scale )","inheritdoc":0,"modifier":[],"return":""},"PDF_place_pdi_page":{"params":{"$pdfdoc":"","$page":"","$x":"","$y":"","$sx":"","$sy":""},"docComment":"Place PDF page [deprecated]","signature":"PDF_place_pdi_page(resource $pdfdoc ,int $page ,float $x ,float $y ,float $sx ,float $sy )","inheritdoc":0,"modifier":[],"return":""},"PDF_process_pdi":{"params":{"$pdfdoc":"","$doc":"","$page":"","$optlist":""},"docComment":"Process imported PDF document","signature":"PDF_process_pdi(resource $pdfdoc ,int $doc ,int $page ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_rect":{"params":{"$p":"","$x":"","$y":"","$width":"","$height":""},"docComment":"Draw rectangle","signature":"PDF_rect(resource $p ,float $x ,float $y ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":""},"PDF_restore":{"params":{"$p":""},"docComment":"Restore graphics state","signature":"PDF_restore(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_resume_page":{"params":{"$pdfdoc":"","$optlist":""},"docComment":"Resume page","signature":"PDF_resume_page(resource $pdfdoc ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_rotate":{"params":{"$p":"","$phi":""},"docComment":"Rotate coordinate system","signature":"PDF_rotate(resource $p ,float $phi )","inheritdoc":0,"modifier":[],"return":""},"PDF_save":{"params":{"$p":""},"docComment":"Save graphics state","signature":"PDF_save(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_scale":{"params":{"$p":"","$sx":"","$sy":""},"docComment":"Scale coordinate system","signature":"PDF_scale(resource $p ,float $sx ,float $sy )","inheritdoc":0,"modifier":[],"return":""},"PDF_set_border_color":{"params":{"$p":"","$red":"","$green":"","$blue":""},"docComment":"Set border color of annotations [deprecated]","signature":"PDF_set_border_color(resource $p ,float $red ,float $green ,float $blue )","inheritdoc":0,"modifier":[],"return":""},"PDF_set_border_dash":{"params":{"$pdfdoc":"","$black":"","$white":""},"docComment":"Set border dash style of annotations [deprecated]","signature":"PDF_set_border_dash(resource $pdfdoc ,float $black ,float $white )","inheritdoc":0,"modifier":[],"return":""},"PDF_set_border_style":{"params":{"$pdfdoc":"","$style":"","$width":""},"docComment":"Set border style of annotations [deprecated]","signature":"PDF_set_border_style(resource $pdfdoc ,string $style ,float $width )","inheritdoc":0,"modifier":[],"return":""},"PDF_set_char_spacing":{"params":[],"docComment":"Set character spacing [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_set_duration":{"params":[],"docComment":"Set duration between pages [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_set_gstate":{"params":{"$pdfdoc":"","$gstate":""},"docComment":"Activate graphics state object","signature":"PDF_set_gstate(resource $pdfdoc ,int $gstate )","inheritdoc":0,"modifier":[],"return":""},"PDF_set_horiz_scaling":{"params":[],"docComment":"Set horizontal text scaling [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_set_info_author":{"params":[],"docComment":"Fill the author document info field [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_set_info_creator":{"params":[],"docComment":"Fill the creator document info field [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_set_info_keywords":{"params":[],"docComment":"Fill the keywords document info field [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_set_info_subject":{"params":[],"docComment":"Fill the subject document info field [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_set_info_title":{"params":[],"docComment":"Fill the title document info field [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_set_info":{"params":{"$p":"","$key":"","$value":""},"docComment":"Fill document info field","signature":"PDF_set_info(resource $p ,string $key ,string $value )","inheritdoc":0,"modifier":[],"return":""},"PDF_set_layer_dependency":{"params":{"$pdfdoc":"","$type":"","$optlist":""},"docComment":"Define relationships among layers","signature":"PDF_set_layer_dependency(resource $pdfdoc ,string $type ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_set_leading":{"params":[],"docComment":"Set distance between text lines [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_set_parameter":{"params":{"$p":"","$key":"","$value":""},"docComment":"Set string parameter","signature":"PDF_set_parameter(resource $p ,string $key ,string $value )","inheritdoc":0,"modifier":[],"return":""},"PDF_set_text_matrix":{"params":[],"docComment":"Set text matrix [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_set_text_pos":{"params":{"$p":"","$x":"","$y":""},"docComment":"Set text position","signature":"PDF_set_text_pos(resource $p ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"PDF_set_text_rendering":{"params":[],"docComment":"Determine text rendering [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_set_text_rise":{"params":[],"docComment":"Set text rise [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_set_value":{"params":{"$p":"","$key":"","$value":""},"docComment":"Set numerical parameter","signature":"PDF_set_value(resource $p ,string $key ,float $value )","inheritdoc":0,"modifier":[],"return":""},"PDF_set_word_spacing":{"params":[],"docComment":"Set spacing between words [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_setcolor":{"params":{"$p":"","$fstype":"","$colorspace":"","$c1":"","$c2":"","$c3":"","$c4":""},"docComment":"Set fill and stroke color","signature":"PDF_setcolor(resource $p ,string $fstype ,string $colorspace ,float $c1 ,float $c2 ,float $c3 ,float $c4 )","inheritdoc":0,"modifier":[],"return":""},"PDF_setdash":{"params":{"$pdfdoc":"","$b":"","$w":""},"docComment":"Set simple dash pattern","signature":"PDF_setdash(resource $pdfdoc ,float $b ,float $w )","inheritdoc":0,"modifier":[],"return":""},"PDF_setdashpattern":{"params":{"$pdfdoc":"","$optlist":""},"docComment":"Set dash pattern","signature":"PDF_setdashpattern(resource $pdfdoc ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_setflat":{"params":{"$pdfdoc":"","$flatness":""},"docComment":"Set flatness","signature":"PDF_setflat(resource $pdfdoc ,float $flatness )","inheritdoc":0,"modifier":[],"return":""},"PDF_setfont":{"params":{"$pdfdoc":"","$font":"","$fontsize":""},"docComment":"Set font","signature":"PDF_setfont(resource $pdfdoc ,int $font ,float $fontsize )","inheritdoc":0,"modifier":[],"return":""},"PDF_setgray_fill":{"params":{"$p":"","$g":""},"docComment":"Set fill color to gray [deprecated]","signature":"PDF_setgray_fill(resource $p ,float $g )","inheritdoc":0,"modifier":[],"return":""},"PDF_setgray_stroke":{"params":{"$p":"","$g":""},"docComment":"Set stroke color to gray [deprecated]","signature":"PDF_setgray_stroke(resource $p ,float $g )","inheritdoc":0,"modifier":[],"return":""},"PDF_setgray":{"params":{"$p":"","$g":""},"docComment":"Set color to gray [deprecated]","signature":"PDF_setgray(resource $p ,float $g )","inheritdoc":0,"modifier":[],"return":""},"PDF_setlinecap":{"params":{"$p":"","$linecap":""},"docComment":"Set linecap parameter","signature":"PDF_setlinecap(resource $p ,int $linecap )","inheritdoc":0,"modifier":[],"return":""},"PDF_setlinejoin":{"params":{"$p":"","$value":""},"docComment":"Set linejoin parameter","signature":"PDF_setlinejoin(resource $p ,int $value )","inheritdoc":0,"modifier":[],"return":""},"PDF_setlinewidth":{"params":{"$p":"","$width":""},"docComment":"Set line width","signature":"PDF_setlinewidth(resource $p ,float $width )","inheritdoc":0,"modifier":[],"return":""},"PDF_setmatrix":{"params":{"$p":"","$a":"","$b":"","$c":"","$d":"","$e":"","$f":""},"docComment":"Set current transformation matrix","signature":"PDF_setmatrix(resource $p ,float $a ,float $b ,float $c ,float $d ,float $e ,float $f )","inheritdoc":0,"modifier":[],"return":""},"PDF_setmiterlimit":{"params":{"$pdfdoc":"","$miter":""},"docComment":"Set miter limit","signature":"PDF_setmiterlimit(resource $pdfdoc ,float $miter )","inheritdoc":0,"modifier":[],"return":""},"PDF_setpolydash":{"params":[],"docComment":"Set complicated dash pattern [deprecated]","signature":"","inheritdoc":0,"modifier":[],"return":""},"PDF_setrgbcolor_fill":{"params":{"$p":"","$red":"","$green":"","$blue":""},"docComment":"Set fill rgb color values [deprecated]","signature":"PDF_setrgbcolor_fill(resource $p ,float $red ,float $green ,float $blue )","inheritdoc":0,"modifier":[],"return":""},"PDF_setrgbcolor_stroke":{"params":{"$p":"","$red":"","$green":"","$blue":""},"docComment":"Set stroke rgb color values [deprecated]","signature":"PDF_setrgbcolor_stroke(resource $p ,float $red ,float $green ,float $blue )","inheritdoc":0,"modifier":[],"return":""},"PDF_setrgbcolor":{"params":{"$p":"","$red":"","$green":"","$blue":""},"docComment":"Set fill and stroke rgb color values [deprecated]","signature":"PDF_setrgbcolor(resource $p ,float $red ,float $green ,float $blue )","inheritdoc":0,"modifier":[],"return":""},"PDF_shading_pattern":{"params":{"$pdfdoc":"","$shading":"","$optlist":""},"docComment":"Define shading pattern","signature":"PDF_shading_pattern(resource $pdfdoc ,int $shading ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_shading":{"params":{"$pdfdoc":"","$shtype":"","$x0":"","$y0":"","$x1":"","$y1":"","$c1":"","$c2":"","$c3":"","$c4":"","$optlist":""},"docComment":"Define blend","signature":"PDF_shading(resource $pdfdoc ,string $shtype ,float $x0 ,float $y0 ,float $x1 ,float $y1 ,float $c1 ,float $c2 ,float $c3 ,float $c4 ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_shfill":{"params":{"$pdfdoc":"","$shading":""},"docComment":"Fill area with shading","signature":"PDF_shfill(resource $pdfdoc ,int $shading )","inheritdoc":0,"modifier":[],"return":""},"PDF_show_boxed":{"params":{"$p":"","$text":"","$left":"","$top":"","$width":"","$height":"","$mode":"","$feature":""},"docComment":"Output text in a box [deprecated]","signature":"PDF_show_boxed(resource $p ,string $text ,float $left ,float $top ,float $width ,float $height ,string $mode ,string $feature )","inheritdoc":0,"modifier":[],"return":""},"PDF_show_xy":{"params":{"$p":"","$text":"","$x":"","$y":""},"docComment":"Output text at given position","signature":"PDF_show_xy(resource $p ,string $text ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"PDF_show":{"params":{"$pdfdoc":"","$text":""},"docComment":"Output text at current position","signature":"PDF_show(resource $pdfdoc ,string $text )","inheritdoc":0,"modifier":[],"return":""},"PDF_skew":{"params":{"$p":"","$alpha":"","$beta":""},"docComment":"Skew the coordinate system","signature":"PDF_skew(resource $p ,float $alpha ,float $beta )","inheritdoc":0,"modifier":[],"return":""},"PDF_stringwidth":{"params":{"$p":"","$text":"","$font":"","$fontsize":""},"docComment":"Return width of text","signature":"PDF_stringwidth(resource $p ,string $text ,int $font ,float $fontsize )","inheritdoc":0,"modifier":[],"return":""},"PDF_stroke":{"params":{"$p":""},"docComment":"Stroke path","signature":"PDF_stroke(resource $p )","inheritdoc":0,"modifier":[],"return":""},"PDF_suspend_page":{"params":{"$pdfdoc":"","$optlist":""},"docComment":"Suspend page","signature":"PDF_suspend_page(resource $pdfdoc ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"PDF_translate":{"params":{"$p":"","$tx":"","$ty":""},"docComment":"Set origin of coordinate system","signature":"PDF_translate(resource $p ,float $tx ,float $ty )","inheritdoc":0,"modifier":[],"return":""},"PDF_utf16_to_utf8":{"params":{"$pdfdoc":"","$utf16string":""},"docComment":"Convert string from UTF-16 to UTF-8","signature":"PDF_utf16_to_utf8(resource $pdfdoc ,string $utf16string )","inheritdoc":0,"modifier":[],"return":""},"PDF_utf32_to_utf16":{"params":{"$pdfdoc":"","$utf32string":"","$ordering":""},"docComment":"Convert string from UTF-32 to UTF-16","signature":"PDF_utf32_to_utf16(resource $pdfdoc ,string $utf32string ,string $ordering )","inheritdoc":0,"modifier":[],"return":""},"PDF_utf8_to_utf16":{"params":{"$pdfdoc":"","$utf8string":"","$ordering":""},"docComment":"Convert string from UTF-8 to UTF-16","signature":"PDF_utf8_to_utf16(resource $pdfdoc ,string $utf8string ,string $ordering )","inheritdoc":0,"modifier":[],"return":""},"printer_abort":{"params":{"$printer_handle":""},"docComment":"Deletes the printer's spool file","signature":"printer_abort(resource $printer_handle )","inheritdoc":0,"modifier":[],"return":""},"printer_close":{"params":{"$printer_handle":""},"docComment":"Close an open printer connection","signature":"printer_close(resource $printer_handle )","inheritdoc":0,"modifier":[],"return":""},"printer_create_brush":{"params":{"$style":"","$color":""},"docComment":"Create a new brush","signature":"printer_create_brush(int $style ,string $color )","inheritdoc":0,"modifier":[],"return":""},"printer_create_dc":{"params":{"$printer_handle":""},"docComment":"Create a new device context","signature":"printer_create_dc(resource $printer_handle )","inheritdoc":0,"modifier":[],"return":""},"printer_create_font":{"params":{"$face":"","$height":"","$width":"","$font_weight":"","$italic":"","$underline":"","$strikeout":"","$orientation":""},"docComment":"Create a new font","signature":"printer_create_font(string $face ,int $height ,int $width ,int $font_weight ,bool $italic ,bool $underline ,bool $strikeout ,int $orientation )","inheritdoc":0,"modifier":[],"return":""},"printer_create_pen":{"params":{"$style":"","$width":"","$color":""},"docComment":"Create a new pen","signature":"printer_create_pen(int $style ,int $width ,string $color )","inheritdoc":0,"modifier":[],"return":""},"printer_delete_brush":{"params":{"$brush_handle":""},"docComment":"Delete a brush","signature":"printer_delete_brush(resource $brush_handle )","inheritdoc":0,"modifier":[],"return":""},"printer_delete_dc":{"params":{"$printer_handle":""},"docComment":"Delete a device context","signature":"printer_delete_dc(resource $printer_handle )","inheritdoc":0,"modifier":[],"return":""},"printer_delete_font":{"params":{"$font_handle":""},"docComment":"Delete a font","signature":"printer_delete_font(resource $font_handle )","inheritdoc":0,"modifier":[],"return":""},"printer_delete_pen":{"params":{"$pen_handle":""},"docComment":"Delete a pen","signature":"printer_delete_pen(resource $pen_handle )","inheritdoc":0,"modifier":[],"return":""},"printer_draw_bmp":{"params":{"$printer_handle":"","$filename":"","$x":"","$y":"","$width":"","$height":""},"docComment":"Draw a bmp","signature":"printer_draw_bmp(resource $printer_handle ,string $filename ,int $x ,int $y ,int $width ,int $height )","inheritdoc":0,"modifier":[],"return":""},"printer_draw_chord":{"params":{"$printer_handle":"","$rec_x":"","$rec_y":"","$rec_x1":"","$rec_y1":"","$rad_x":"","$rad_y":"","$rad_x1":"","$rad_y1":""},"docComment":"Draw a chord","signature":"printer_draw_chord(resource $printer_handle ,int $rec_x ,int $rec_y ,int $rec_x1 ,int $rec_y1 ,int $rad_x ,int $rad_y ,int $rad_x1 ,int $rad_y1 )","inheritdoc":0,"modifier":[],"return":""},"printer_draw_elipse":{"params":{"$printer_handle":"","$ul_x":"","$ul_y":"","$lr_x":"","$lr_y":""},"docComment":"Draw an ellipse","signature":"printer_draw_elipse(resource $printer_handle ,int $ul_x ,int $ul_y ,int $lr_x ,int $lr_y )","inheritdoc":0,"modifier":[],"return":""},"printer_draw_line":{"params":{"$printer_handle":"","$from_x":"","$from_y":"","$to_x":"","$to_y":""},"docComment":"Draw a line","signature":"printer_draw_line(resource $printer_handle ,int $from_x ,int $from_y ,int $to_x ,int $to_y )","inheritdoc":0,"modifier":[],"return":""},"printer_draw_pie":{"params":{"$printer_handle":"","$rec_x":"","$rec_y":"","$rec_x1":"","$rec_y1":"","$rad1_x":"","$rad1_y":"","$rad2_x":"","$rad2_y":""},"docComment":"Draw a pie","signature":"printer_draw_pie(resource $printer_handle ,int $rec_x ,int $rec_y ,int $rec_x1 ,int $rec_y1 ,int $rad1_x ,int $rad1_y ,int $rad2_x ,int $rad2_y )","inheritdoc":0,"modifier":[],"return":""},"printer_draw_rectangle":{"params":{"$printer_handle":"","$ul_x":"","$ul_y":"","$lr_x":"","$lr_y":""},"docComment":"Draw a rectangle","signature":"printer_draw_rectangle(resource $printer_handle ,int $ul_x ,int $ul_y ,int $lr_x ,int $lr_y )","inheritdoc":0,"modifier":[],"return":""},"printer_draw_roundrect":{"params":{"$printer_handle":"","$ul_x":"","$ul_y":"","$lr_x":"","$lr_y":"","$width":"","$height":""},"docComment":"Draw a rectangle with rounded corners","signature":"printer_draw_roundrect(resource $printer_handle ,int $ul_x ,int $ul_y ,int $lr_x ,int $lr_y ,int $width ,int $height )","inheritdoc":0,"modifier":[],"return":""},"printer_draw_text":{"params":{"$printer_handle":"","$text":"","$x":"","$y":""},"docComment":"Draw text","signature":"printer_draw_text(resource $printer_handle ,string $text ,int $x ,int $y )","inheritdoc":0,"modifier":[],"return":""},"printer_end_doc":{"params":{"$printer_handle":""},"docComment":"Close document","signature":"printer_end_doc(resource $printer_handle )","inheritdoc":0,"modifier":[],"return":""},"printer_end_page":{"params":{"$printer_handle":""},"docComment":"Close active page","signature":"printer_end_page(resource $printer_handle )","inheritdoc":0,"modifier":[],"return":""},"printer_get_option":{"params":{"$printer_handle":"","$option":""},"docComment":"Retrieve printer configuration data","signature":"printer_get_option(resource $printer_handle ,string $option )","inheritdoc":0,"modifier":[],"return":""},"printer_list":{"params":{"$enumtype":"","$name":"","$level":""},"docComment":"Return an array of printers attached to the server","signature":"printer_list(int $enumtype ,string $name ,int $level )","inheritdoc":0,"modifier":[],"return":""},"printer_logical_fontheight":{"params":{"$printer_handle":"","$height":""},"docComment":"Get logical font height","signature":"printer_logical_fontheight(resource $printer_handle ,int $height )","inheritdoc":0,"modifier":[],"return":""},"printer_open":{"params":{"$printername":""},"docComment":"Opens a connection to a printer","signature":"printer_open(string $printername )","inheritdoc":0,"modifier":[],"return":""},"printer_select_brush":{"params":{"$printer_handle":"","$brush_handle":""},"docComment":"Select a brush","signature":"printer_select_brush(resource $printer_handle ,resource $brush_handle )","inheritdoc":0,"modifier":[],"return":""},"printer_select_font":{"params":{"$printer_handle":"","$font_handle":""},"docComment":"Select a font","signature":"printer_select_font(resource $printer_handle ,resource $font_handle )","inheritdoc":0,"modifier":[],"return":""},"printer_select_pen":{"params":{"$printer_handle":"","$pen_handle":""},"docComment":"Select a pen","signature":"printer_select_pen(resource $printer_handle ,resource $pen_handle )","inheritdoc":0,"modifier":[],"return":""},"printer_set_option":{"params":{"$printer_handle":"","$option":"","$value":""},"docComment":"Configure the printer connection","signature":"printer_set_option(resource $printer_handle ,int $option ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"printer_start_doc":{"params":{"$printer_handle":"","$document":""},"docComment":"Start a new document","signature":"printer_start_doc(resource $printer_handle ,string $document )","inheritdoc":0,"modifier":[],"return":""},"printer_start_page":{"params":{"$printer_handle":""},"docComment":"Start a new page","signature":"printer_start_page(resource $printer_handle )","inheritdoc":0,"modifier":[],"return":""},"printer_write":{"params":{"$printer_handle":"","$content":""},"docComment":"Write data to the printer","signature":"printer_write(resource $printer_handle ,string $content )","inheritdoc":0,"modifier":[],"return":""},"setproctitle":{"params":{"$title":""},"docComment":"Set the process title","signature":"setproctitle(string $title )","inheritdoc":0,"modifier":[],"return":""},"setthreadtitle":{"params":{"$title":""},"docComment":"Set the thread title","signature":"setthreadtitle(string $title )","inheritdoc":0,"modifier":[],"return":""},"ps_add_bookmark":{"params":{"$psdoc":"","$text":"","$parent":"","$open":""},"docComment":"Add bookmark to current page","signature":"ps_add_bookmark(resource $psdoc ,string $text ,[int $parent] ,[int $open] )","inheritdoc":0,"modifier":[],"return":""},"ps_add_launchlink":{"params":{"$psdoc":"","$llx":"","$lly":"","$urx":"","$ury":"","$filename":""},"docComment":"Adds link which launches file","signature":"ps_add_launchlink(resource $psdoc ,float $llx ,float $lly ,float $urx ,float $ury ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"ps_add_locallink":{"params":{"$psdoc":"","$llx":"","$lly":"","$urx":"","$ury":"","$page":"","$dest":""},"docComment":"Adds link to a page in the same document","signature":"ps_add_locallink(resource $psdoc ,float $llx ,float $lly ,float $urx ,float $ury ,int $page ,string $dest )","inheritdoc":0,"modifier":[],"return":""},"ps_add_note":{"params":{"$psdoc":"","$llx":"","$lly":"","$urx":"","$ury":"","$contents":"","$title":"","$icon":"","$open":""},"docComment":"Adds note to current page","signature":"ps_add_note(resource $psdoc ,float $llx ,float $lly ,float $urx ,float $ury ,string $contents ,string $title ,string $icon ,int $open )","inheritdoc":0,"modifier":[],"return":""},"ps_add_pdflink":{"params":{"$psdoc":"","$llx":"","$lly":"","$urx":"","$ury":"","$filename":"","$page":"","$dest":""},"docComment":"Adds link to a page in a second pdf document","signature":"ps_add_pdflink(resource $psdoc ,float $llx ,float $lly ,float $urx ,float $ury ,string $filename ,int $page ,string $dest )","inheritdoc":0,"modifier":[],"return":""},"ps_add_weblink":{"params":{"$psdoc":"","$llx":"","$lly":"","$urx":"","$ury":"","$url":""},"docComment":"Adds link to a web location","signature":"ps_add_weblink(resource $psdoc ,float $llx ,float $lly ,float $urx ,float $ury ,string $url )","inheritdoc":0,"modifier":[],"return":""},"ps_arc":{"params":{"$psdoc":"","$x":"","$y":"","$radius":"","$alpha":"","$beta":""},"docComment":"Draws an arc counterclockwise","signature":"ps_arc(resource $psdoc ,float $x ,float $y ,float $radius ,float $alpha ,float $beta )","inheritdoc":0,"modifier":[],"return":""},"ps_arcn":{"params":{"$psdoc":"","$x":"","$y":"","$radius":"","$alpha":"","$beta":""},"docComment":"Draws an arc clockwise","signature":"ps_arcn(resource $psdoc ,float $x ,float $y ,float $radius ,float $alpha ,float $beta )","inheritdoc":0,"modifier":[],"return":""},"ps_begin_page":{"params":{"$psdoc":"","$width":"","$height":""},"docComment":"Start a new page","signature":"ps_begin_page(resource $psdoc ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":""},"ps_begin_pattern":{"params":{"$psdoc":"","$width":"","$height":"","$xstep":"","$ystep":"","$painttype":""},"docComment":"Start a new pattern","signature":"ps_begin_pattern(resource $psdoc ,float $width ,float $height ,float $xstep ,float $ystep ,int $painttype )","inheritdoc":0,"modifier":[],"return":""},"ps_begin_template":{"params":{"$psdoc":"","$width":"","$height":""},"docComment":"Start a new template","signature":"ps_begin_template(resource $psdoc ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":""},"ps_circle":{"params":{"$psdoc":"","$x":"","$y":"","$radius":""},"docComment":"Draws a circle","signature":"ps_circle(resource $psdoc ,float $x ,float $y ,float $radius )","inheritdoc":0,"modifier":[],"return":""},"ps_clip":{"params":{"$psdoc":""},"docComment":"Clips drawing to current path","signature":"ps_clip(resource $psdoc )","inheritdoc":0,"modifier":[],"return":""},"ps_close_image":{"params":{"$psdoc":"","$imageid":""},"docComment":"Closes image and frees memory","signature":"ps_close_image(resource $psdoc ,int $imageid )","inheritdoc":0,"modifier":[],"return":""},"ps_close":{"params":{"$psdoc":""},"docComment":"Closes a PostScript document","signature":"ps_close(resource $psdoc )","inheritdoc":0,"modifier":[],"return":""},"ps_closepath_stroke":{"params":{"$psdoc":""},"docComment":"Closes and strokes path","signature":"ps_closepath_stroke(resource $psdoc )","inheritdoc":0,"modifier":[],"return":""},"ps_closepath":{"params":{"$psdoc":""},"docComment":"Closes path","signature":"ps_closepath(resource $psdoc )","inheritdoc":0,"modifier":[],"return":""},"ps_continue_text":{"params":{"$psdoc":"","$text":""},"docComment":"Continue text in next line","signature":"ps_continue_text(resource $psdoc ,string $text )","inheritdoc":0,"modifier":[],"return":""},"ps_curveto":{"params":{"$psdoc":"","$x1":"","$y1":"","$x2":"","$y2":"","$x3":"","$y3":""},"docComment":"Draws a curve","signature":"ps_curveto(resource $psdoc ,float $x1 ,float $y1 ,float $x2 ,float $y2 ,float $x3 ,float $y3 )","inheritdoc":0,"modifier":[],"return":""},"ps_delete":{"params":{"$psdoc":""},"docComment":"Deletes all resources of a PostScript document","signature":"ps_delete(resource $psdoc )","inheritdoc":0,"modifier":[],"return":""},"ps_end_page":{"params":{"$psdoc":""},"docComment":"End a page","signature":"ps_end_page(resource $psdoc )","inheritdoc":0,"modifier":[],"return":""},"ps_end_pattern":{"params":{"$psdoc":""},"docComment":"End a pattern","signature":"ps_end_pattern(resource $psdoc )","inheritdoc":0,"modifier":[],"return":""},"ps_end_template":{"params":{"$psdoc":""},"docComment":"End a template","signature":"ps_end_template(resource $psdoc )","inheritdoc":0,"modifier":[],"return":""},"ps_fill_stroke":{"params":{"$psdoc":""},"docComment":"Fills and strokes the current path","signature":"ps_fill_stroke(resource $psdoc )","inheritdoc":0,"modifier":[],"return":""},"ps_fill":{"params":{"$psdoc":""},"docComment":"Fills the current path","signature":"ps_fill(resource $psdoc )","inheritdoc":0,"modifier":[],"return":""},"ps_findfont":{"params":{"$psdoc":"","$fontname":"","$encoding":"","$embed":""},"docComment":"Loads a font","signature":"ps_findfont(resource $psdoc ,string $fontname ,string $encoding ,[bool $embed] )","inheritdoc":0,"modifier":[],"return":""},"ps_get_buffer":{"params":{"$psdoc":""},"docComment":"Fetches the full buffer containig the generated PS data","signature":"ps_get_buffer(resource $psdoc )","inheritdoc":0,"modifier":[],"return":""},"ps_get_parameter":{"params":{"$psdoc":"","$name":"","$modifier":""},"docComment":"Gets certain parameters","signature":"ps_get_parameter(resource $psdoc ,string $name ,float $modifier )","inheritdoc":0,"modifier":[],"return":""},"ps_get_value":{"params":{"$psdoc":"","$name":"","$modifier":""},"docComment":"Gets certain values","signature":"ps_get_value(resource $psdoc ,string $name ,float $modifier )","inheritdoc":0,"modifier":[],"return":""},"ps_hyphenate":{"params":{"$psdoc":"","$text":""},"docComment":"Hyphenates a word","signature":"ps_hyphenate(resource $psdoc ,string $text )","inheritdoc":0,"modifier":[],"return":""},"ps_include_file":{"params":{"$psdoc":"","$file":""},"docComment":"Reads an external file with raw PostScript code","signature":"ps_include_file(resource $psdoc ,string $file )","inheritdoc":0,"modifier":[],"return":""},"ps_lineto":{"params":{"$psdoc":"","$x":"","$y":""},"docComment":"Draws a line","signature":"ps_lineto(resource $psdoc ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"ps_makespotcolor":{"params":{"$psdoc":"","$name":"","$reserved":""},"docComment":"Create spot color","signature":"ps_makespotcolor(resource $psdoc ,string $name ,[int $reserved] )","inheritdoc":0,"modifier":[],"return":""},"ps_moveto":{"params":{"$psdoc":"","$x":"","$y":""},"docComment":"Sets current point","signature":"ps_moveto(resource $psdoc ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"ps_new":{"params":[],"docComment":"Creates a new PostScript document object","signature":"ps_new( )","inheritdoc":0,"modifier":[],"return":""},"ps_open_file":{"params":{"$psdoc":"","$filename":""},"docComment":"Opens a file for output","signature":"ps_open_file(resource $psdoc ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"ps_open_image_file":{"params":{"$psdoc":"","$type":"","$filename":"","$stringparam":"","$intparam":""},"docComment":"Opens image from file","signature":"ps_open_image_file(resource $psdoc ,string $type ,string $filename ,string $stringparam ,[int $intparam] )","inheritdoc":0,"modifier":[],"return":""},"ps_open_image":{"params":{"$psdoc":"","$type":"","$source":"","$data":"","$lenght":"","$width":"","$height":"","$components":"","$bpc":"","$params":""},"docComment":"Reads an image for later placement","signature":"ps_open_image(resource $psdoc ,string $type ,string $source ,string $data ,int $lenght ,int $width ,int $height ,int $components ,int $bpc ,string $params )","inheritdoc":0,"modifier":[],"return":""},"ps_open_memory_image":{"params":{"$psdoc":"","$gd":""},"docComment":"Takes an GD image and returns an image for placement in a PS document","signature":"ps_open_memory_image(resource $psdoc ,int $gd )","inheritdoc":0,"modifier":[],"return":""},"ps_place_image":{"params":{"$psdoc":"","$imageid":"","$x":"","$y":"","$scale":""},"docComment":"Places image on the page","signature":"ps_place_image(resource $psdoc ,int $imageid ,float $x ,float $y ,float $scale )","inheritdoc":0,"modifier":[],"return":""},"ps_rect":{"params":{"$psdoc":"","$x":"","$y":"","$width":"","$height":""},"docComment":"Draws a rectangle","signature":"ps_rect(resource $psdoc ,float $x ,float $y ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":""},"ps_restore":{"params":{"$psdoc":""},"docComment":"Restore previously save context","signature":"ps_restore(resource $psdoc )","inheritdoc":0,"modifier":[],"return":""},"ps_rotate":{"params":{"$psdoc":"","$rot":""},"docComment":"Sets rotation factor","signature":"ps_rotate(resource $psdoc ,float $rot )","inheritdoc":0,"modifier":[],"return":""},"ps_save":{"params":{"$psdoc":""},"docComment":"Save current context","signature":"ps_save(resource $psdoc )","inheritdoc":0,"modifier":[],"return":""},"ps_scale":{"params":{"$psdoc":"","$x":"","$y":""},"docComment":"Sets scaling factor","signature":"ps_scale(resource $psdoc ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"ps_set_border_color":{"params":{"$psdoc":"","$red":"","$green":"","$blue":""},"docComment":"Sets color of border for annotations","signature":"ps_set_border_color(resource $psdoc ,float $red ,float $green ,float $blue )","inheritdoc":0,"modifier":[],"return":""},"ps_set_border_dash":{"params":{"$psdoc":"","$black":"","$white":""},"docComment":"Sets length of dashes for border of annotations","signature":"ps_set_border_dash(resource $psdoc ,float $black ,float $white )","inheritdoc":0,"modifier":[],"return":""},"ps_set_border_style":{"params":{"$psdoc":"","$style":"","$width":""},"docComment":"Sets border style of annotations","signature":"ps_set_border_style(resource $psdoc ,string $style ,float $width )","inheritdoc":0,"modifier":[],"return":""},"ps_set_info":{"params":{"$p":"","$key":"","$val":""},"docComment":"Sets information fields of document","signature":"ps_set_info(resource $p ,string $key ,string $val )","inheritdoc":0,"modifier":[],"return":""},"ps_set_parameter":{"params":{"$psdoc":"","$name":"","$value":""},"docComment":"Sets certain parameters","signature":"ps_set_parameter(resource $psdoc ,string $name ,string $value )","inheritdoc":0,"modifier":[],"return":""},"ps_set_text_pos":{"params":{"$psdoc":"","$x":"","$y":""},"docComment":"Sets position for text output","signature":"ps_set_text_pos(resource $psdoc ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"ps_set_value":{"params":{"$psdoc":"","$name":"","$value":""},"docComment":"Sets certain values","signature":"ps_set_value(resource $psdoc ,string $name ,float $value )","inheritdoc":0,"modifier":[],"return":""},"ps_setcolor":{"params":{"$psdoc":"","$type":"","$colorspace":"","$c1":"","$c2":"","$c3":"","$c4":""},"docComment":"Sets current color","signature":"ps_setcolor(resource $psdoc ,string $type ,string $colorspace ,float $c1 ,float $c2 ,float $c3 ,float $c4 )","inheritdoc":0,"modifier":[],"return":""},"ps_setdash":{"params":{"$psdoc":"","$on":"","$off":""},"docComment":"Sets appearance of a dashed line","signature":"ps_setdash(resource $psdoc ,float $on ,float $off )","inheritdoc":0,"modifier":[],"return":""},"ps_setflat":{"params":{"$psdoc":"","$value":""},"docComment":"Sets flatness","signature":"ps_setflat(resource $psdoc ,float $value )","inheritdoc":0,"modifier":[],"return":""},"ps_setfont":{"params":{"$psdoc":"","$fontid":"","$size":""},"docComment":"Sets font to use for following output","signature":"ps_setfont(resource $psdoc ,int $fontid ,float $size )","inheritdoc":0,"modifier":[],"return":""},"ps_setgray":{"params":{"$psdoc":"","$gray":""},"docComment":"Sets gray value","signature":"ps_setgray(resource $psdoc ,float $gray )","inheritdoc":0,"modifier":[],"return":""},"ps_setlinecap":{"params":{"$psdoc":"","$type":""},"docComment":"Sets appearance of line ends","signature":"ps_setlinecap(resource $psdoc ,int $type )","inheritdoc":0,"modifier":[],"return":""},"ps_setlinejoin":{"params":{"$psdoc":"","$type":""},"docComment":"Sets how contected lines are joined","signature":"ps_setlinejoin(resource $psdoc ,int $type )","inheritdoc":0,"modifier":[],"return":""},"ps_setlinewidth":{"params":{"$psdoc":"","$width":""},"docComment":"Sets width of a line","signature":"ps_setlinewidth(resource $psdoc ,float $width )","inheritdoc":0,"modifier":[],"return":""},"ps_setmiterlimit":{"params":{"$psdoc":"","$value":""},"docComment":"Sets the miter limit","signature":"ps_setmiterlimit(resource $psdoc ,float $value )","inheritdoc":0,"modifier":[],"return":""},"ps_setoverprintmode":{"params":{"$psdoc":"","$mode":""},"docComment":"Sets overprint mode","signature":"ps_setoverprintmode(resource $psdoc ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"ps_setpolydash":{"params":{"$psdoc":"","$arr":""},"docComment":"Sets appearance of a dashed line","signature":"ps_setpolydash(resource $psdoc ,float $arr )","inheritdoc":0,"modifier":[],"return":""},"ps_shading_pattern":{"params":{"$psdoc":"","$shadingid":"","$optlist":""},"docComment":"Creates a pattern based on a shading","signature":"ps_shading_pattern(resource $psdoc ,int $shadingid ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"ps_shading":{"params":{"$psdoc":"","$type":"","$x0":"","$y0":"","$x1":"","$y1":"","$c1":"","$c2":"","$c3":"","$c4":"","$optlist":""},"docComment":"Creates a shading for later use","signature":"ps_shading(resource $psdoc ,string $type ,float $x0 ,float $y0 ,float $x1 ,float $y1 ,float $c1 ,float $c2 ,float $c3 ,float $c4 ,string $optlist )","inheritdoc":0,"modifier":[],"return":""},"ps_shfill":{"params":{"$psdoc":"","$shadingid":""},"docComment":"Fills an area with a shading","signature":"ps_shfill(resource $psdoc ,int $shadingid )","inheritdoc":0,"modifier":[],"return":""},"ps_show_boxed":{"params":{"$psdoc":"","$text":"","$left":"","$bottom":"","$width":"","$height":"","$hmode":"","$feature":""},"docComment":"Output text in a box","signature":"ps_show_boxed(resource $psdoc ,string $text ,float $left ,float $bottom ,float $width ,float $height ,string $hmode ,string $feature )","inheritdoc":0,"modifier":[],"return":""},"ps_show_xy2":{"params":{"$psdoc":"","$text":"","$len":"","$xcoor":"","$ycoor":""},"docComment":"Output text at position","signature":"ps_show_xy2(resource $psdoc ,string $text ,int $len ,float $xcoor ,float $ycoor )","inheritdoc":0,"modifier":[],"return":""},"ps_show_xy":{"params":{"$psdoc":"","$text":"","$x":"","$y":""},"docComment":"Output text at given position","signature":"ps_show_xy(resource $psdoc ,string $text ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"ps_show2":{"params":{"$psdoc":"","$text":"","$len":""},"docComment":"Output a text at current position","signature":"ps_show2(resource $psdoc ,string $text ,int $len )","inheritdoc":0,"modifier":[],"return":""},"ps_show":{"params":{"$psdoc":"","$text":""},"docComment":"Output text","signature":"ps_show(resource $psdoc ,string $text )","inheritdoc":0,"modifier":[],"return":""},"ps_string_geometry":{"params":{"$psdoc":"","$text":"","$fontid":"","$size":""},"docComment":"Gets geometry of a string","signature":"ps_string_geometry(resource $psdoc ,string $text ,[int $fontid] ,[float $size] )","inheritdoc":0,"modifier":[],"return":""},"ps_stringwidth":{"params":{"$psdoc":"","$text":"","$fontid":"","$size":""},"docComment":"Gets width of a string","signature":"ps_stringwidth(resource $psdoc ,string $text ,[int $fontid] ,[float $size] )","inheritdoc":0,"modifier":[],"return":""},"ps_stroke":{"params":{"$psdoc":""},"docComment":"Draws the current path","signature":"ps_stroke(resource $psdoc )","inheritdoc":0,"modifier":[],"return":""},"ps_symbol_name":{"params":{"$psdoc":"","$ord":"","$fontid":""},"docComment":"Gets name of a glyph","signature":"ps_symbol_name(resource $psdoc ,int $ord ,[int $fontid] )","inheritdoc":0,"modifier":[],"return":""},"ps_symbol_width":{"params":{"$psdoc":"","$ord":"","$fontid":"","$size":""},"docComment":"Gets width of a glyph","signature":"ps_symbol_width(resource $psdoc ,int $ord ,[int $fontid] ,[float $size] )","inheritdoc":0,"modifier":[],"return":""},"ps_symbol":{"params":{"$psdoc":"","$ord":""},"docComment":"Output a glyph","signature":"ps_symbol(resource $psdoc ,int $ord )","inheritdoc":0,"modifier":[],"return":""},"ps_translate":{"params":{"$psdoc":"","$x":"","$y":""},"docComment":"Sets translation","signature":"ps_translate(resource $psdoc ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"qdom_error":{"params":[],"docComment":"Returns the error string from the last QDOM operation or FALSE if no errors occurred","signature":"qdom_error( )","inheritdoc":0,"modifier":[],"return":""},"qdom_tree":{"params":{"$doc":""},"docComment":"Creates a tree of an XML string","signature":"qdom_tree(string $doc )","inheritdoc":0,"modifier":[],"return":""},"radius_acct_open":{"params":[],"docComment":"Creates a Radius handle for accounting","signature":"radius_acct_open( )","inheritdoc":0,"modifier":[],"return":""},"radius_add_server":{"params":{"$radius_handle":"","$hostname":"","$port":"","$secret":"","$timeout":"","$max_tries":""},"docComment":"Adds a server","signature":"radius_add_server(resource $radius_handle ,string $hostname ,int $port ,string $secret ,int $timeout ,int $max_tries )","inheritdoc":0,"modifier":[],"return":""},"radius_auth_open":{"params":[],"docComment":"Creates a Radius handle for authentication","signature":"radius_auth_open( )","inheritdoc":0,"modifier":[],"return":""},"radius_close":{"params":{"$radius_handle":""},"docComment":"Frees all ressources","signature":"radius_close(resource $radius_handle )","inheritdoc":0,"modifier":[],"return":""},"radius_config":{"params":{"$radius_handle":"","$file":""},"docComment":"Causes the library to read the given configuration file","signature":"radius_config(resource $radius_handle ,string $file )","inheritdoc":0,"modifier":[],"return":""},"radius_create_request":{"params":{"$radius_handle":"","$type":""},"docComment":"Create accounting or authentication request","signature":"radius_create_request(resource $radius_handle ,int $type )","inheritdoc":0,"modifier":[],"return":""},"radius_cvt_addr":{"params":{"$data":""},"docComment":"Converts raw data to IP-Address","signature":"radius_cvt_addr(string $data )","inheritdoc":0,"modifier":[],"return":""},"radius_cvt_int":{"params":{"$data":""},"docComment":"Converts raw data to integer","signature":"radius_cvt_int(string $data )","inheritdoc":0,"modifier":[],"return":""},"radius_cvt_string":{"params":{"$data":""},"docComment":"Converts raw data to string","signature":"radius_cvt_string(string $data )","inheritdoc":0,"modifier":[],"return":""},"radius_demangle_mppe_key":{"params":{"$radius_handle":"","$mangled":""},"docComment":"Derives mppe-keys from mangled data","signature":"radius_demangle_mppe_key(resource $radius_handle ,string $mangled )","inheritdoc":0,"modifier":[],"return":""},"radius_demangle":{"params":{"$radius_handle":"","$mangled":""},"docComment":"Demangles data","signature":"radius_demangle(resource $radius_handle ,string $mangled )","inheritdoc":0,"modifier":[],"return":""},"radius_get_attr":{"params":{"$radius_handle":""},"docComment":"Extracts an attribute","signature":"radius_get_attr(resource $radius_handle )","inheritdoc":0,"modifier":[],"return":""},"radius_get_tagged_attr_data":{"params":{"$data":""},"docComment":"Extracts the data from a tagged attribute","signature":"radius_get_tagged_attr_data(string $data )","inheritdoc":0,"modifier":[],"return":""},"radius_get_tagged_attr_tag":{"params":{"$data":""},"docComment":"Extracts the tag from a tagged attribute","signature":"radius_get_tagged_attr_tag(string $data )","inheritdoc":0,"modifier":[],"return":""},"radius_get_vendor_attr":{"params":{"$data":""},"docComment":"Extracts a vendor specific attribute","signature":"radius_get_vendor_attr(string $data )","inheritdoc":0,"modifier":[],"return":""},"radius_put_addr":{"params":{"$radius_handle":"","$type":"","$addr":"","$options":"","$tag":""},"docComment":"Attaches an IP address attribute","signature":"radius_put_addr(resource $radius_handle ,int $type ,string $addr ,[int $options] ,int $tag )","inheritdoc":0,"modifier":[],"return":""},"radius_put_attr":{"params":{"$radius_handle":"","$type":"","$value":"","$options":"","$tag":""},"docComment":"Attaches a binary attribute","signature":"radius_put_attr(resource $radius_handle ,int $type ,string $value ,[int $options] ,int $tag )","inheritdoc":0,"modifier":[],"return":""},"radius_put_int":{"params":{"$radius_handle":"","$type":"","$value":"","$options":"","$tag":""},"docComment":"Attaches an integer attribute","signature":"radius_put_int(resource $radius_handle ,int $type ,int $value ,[int $options] ,int $tag )","inheritdoc":0,"modifier":[],"return":""},"radius_put_string":{"params":{"$radius_handle":"","$type":"","$value":"","$options":"","$tag":""},"docComment":"Attaches a string attribute","signature":"radius_put_string(resource $radius_handle ,int $type ,string $value ,[int $options] ,int $tag )","inheritdoc":0,"modifier":[],"return":""},"radius_put_vendor_addr":{"params":{"$radius_handle":"","$vendor":"","$type":"","$addr":""},"docComment":"Attaches a vendor specific IP address attribute","signature":"radius_put_vendor_addr(resource $radius_handle ,int $vendor ,int $type ,string $addr )","inheritdoc":0,"modifier":[],"return":""},"radius_put_vendor_attr":{"params":{"$radius_handle":"","$vendor":"","$type":"","$value":"","$options":"","$tag":""},"docComment":"Attaches a vendor specific binary attribute","signature":"radius_put_vendor_attr(resource $radius_handle ,int $vendor ,int $type ,string $value ,[int $options] ,int $tag )","inheritdoc":0,"modifier":[],"return":""},"radius_put_vendor_int":{"params":{"$radius_handle":"","$vendor":"","$type":"","$value":"","$options":"","$tag":""},"docComment":"Attaches a vendor specific integer attribute","signature":"radius_put_vendor_int(resource $radius_handle ,int $vendor ,int $type ,int $value ,[int $options] ,int $tag )","inheritdoc":0,"modifier":[],"return":""},"radius_put_vendor_string":{"params":{"$radius_handle":"","$vendor":"","$type":"","$value":"","$options":"","$tag":""},"docComment":"Attaches a vendor specific string attribute","signature":"radius_put_vendor_string(resource $radius_handle ,int $vendor ,int $type ,string $value ,[int $options] ,int $tag )","inheritdoc":0,"modifier":[],"return":""},"radius_request_authenticator":{"params":{"$radius_handle":""},"docComment":"Returns the request authenticator","signature":"radius_request_authenticator(resource $radius_handle )","inheritdoc":0,"modifier":[],"return":""},"radius_salt_encrypt_attr":{"params":{"$radius_handle":"","$data":""},"docComment":"Salt-encrypts a value","signature":"radius_salt_encrypt_attr(resource $radius_handle ,string $data )","inheritdoc":0,"modifier":[],"return":""},"radius_send_request":{"params":{"$radius_handle":""},"docComment":"Sends the request and waites for a reply","signature":"radius_send_request(resource $radius_handle )","inheritdoc":0,"modifier":[],"return":""},"radius_server_secret":{"params":{"$radius_handle":""},"docComment":"Returns the shared secret","signature":"radius_server_secret(resource $radius_handle )","inheritdoc":0,"modifier":[],"return":""},"radius_strerror":{"params":{"$radius_handle":""},"docComment":"Returns an error message","signature":"radius_strerror(resource $radius_handle )","inheritdoc":0,"modifier":[],"return":""},"rar_wrapper_cache_stats":{"params":[],"docComment":"Cache hits and misses for the URL wrapper","signature":"rar_wrapper_cache_stats( )","inheritdoc":0,"modifier":[],"return":""},"rpm_close":{"params":{"$rpmr":""},"docComment":"Closes an RPM file","signature":"rpm_close(resource $rpmr )","inheritdoc":0,"modifier":[],"return":""},"rpm_get_tag":{"params":{"$rpmr":"","$tagnum":""},"docComment":"Retrieves a header tag from an RPM file","signature":"rpm_get_tag(resource $rpmr ,int $tagnum )","inheritdoc":0,"modifier":[],"return":""},"rpm_is_valid":{"params":{"$filename":""},"docComment":"Tests a filename for validity as an RPM file","signature":"rpm_is_valid(string $filename )","inheritdoc":0,"modifier":[],"return":""},"rpm_open":{"params":{"$filename":""},"docComment":"Opens an RPM file","signature":"rpm_open(string $filename )","inheritdoc":0,"modifier":[],"return":""},"rpm_version":{"params":[],"docComment":"Returns a string representing the current version of the\n   rpmreader extension","signature":"rpm_version( )","inheritdoc":0,"modifier":[],"return":""},"rrd_create":{"params":{"$filename":"","$options":""},"docComment":"Creates rrd database file","signature":"rrd_create(string $filename ,array $options )","inheritdoc":0,"modifier":[],"return":""},"rrd_error":{"params":[],"docComment":"Gets latest error message.","signature":"rrd_error( )","inheritdoc":0,"modifier":[],"return":""},"rrd_fetch":{"params":{"$filename":"","$options":""},"docComment":"Fetch the data for graph as array.","signature":"rrd_fetch(string $filename ,array $options )","inheritdoc":0,"modifier":[],"return":""},"rrd_first":{"params":{"$file":"","$raaindex":""},"docComment":"Gets the timestamp of the first sample from rrd file.","signature":"rrd_first(string $file ,[int $raaindex] )","inheritdoc":0,"modifier":[],"return":""},"rrd_graph":{"params":{"$filename":"","$options":""},"docComment":"Creates image from a data.","signature":"rrd_graph(string $filename ,array $options )","inheritdoc":0,"modifier":[],"return":""},"rrd_info":{"params":{"$filename":""},"docComment":"Gets information about rrd file","signature":"rrd_info(string $filename )","inheritdoc":0,"modifier":[],"return":""},"rrd_last":{"params":{"$filename":""},"docComment":"Gets unix timestamp of the last sample.","signature":"rrd_last(string $filename )","inheritdoc":0,"modifier":[],"return":""},"rrd_lastupdate":{"params":{"$filename":""},"docComment":"Gets information about last updated data.","signature":"rrd_lastupdate(string $filename )","inheritdoc":0,"modifier":[],"return":""},"rrd_restore":{"params":{"$xml_file":"","$rrd_file":"","$options":""},"docComment":"Restores the RRD file from XML dump.","signature":"rrd_restore(string $xml_file ,string $rrd_file ,array $options )","inheritdoc":0,"modifier":[],"return":""},"rrd_tune":{"params":{"$filename":"","$options":""},"docComment":"Tunes some RRD database file header options.","signature":"rrd_tune(string $filename ,array $options )","inheritdoc":0,"modifier":[],"return":""},"rrd_update":{"params":{"$filename":"","$options":""},"docComment":"Updates the RRD database.","signature":"rrd_update(string $filename ,array $options )","inheritdoc":0,"modifier":[],"return":""},"rrd_version":{"params":[],"docComment":"Gets information about underlying rrdtool library","signature":"rrd_version( )","inheritdoc":0,"modifier":[],"return":""},"rrd_xport":{"params":{"$options":""},"docComment":"Exports the information about RRD database.","signature":"rrd_xport(array $options )","inheritdoc":0,"modifier":[],"return":""},"Runkit_Sandbox":{"params":[],"docComment":"\n   Runkit Sandbox Class -- PHP Virtual Machine\n  ","signature":"","inheritdoc":0,"modifier":[],"return":""},"Runkit_Sandbox_Parent":{"params":[],"docComment":"\n   Runkit Anti-Sandbox Class\n  ","signature":"Runkit_Sandbox_Parent::__construct( )","inheritdoc":0,"modifier":[],"return":""},"runkit_class_adopt":{"params":{"$classname":"","$parentname":""},"docComment":"\n   Convert a base class to an inherited class, add ancestral methods when appropriate\n  ","signature":"runkit_class_adopt(string $classname ,string $parentname )","inheritdoc":0,"modifier":[],"return":""},"runkit_class_emancipate":{"params":{"$classname":""},"docComment":"\n   Convert an inherited class to a base class, removes any method whose scope is ancestral\n  ","signature":"runkit_class_emancipate(string $classname )","inheritdoc":0,"modifier":[],"return":""},"runkit_constant_add":{"params":{"$constname":"","$value":""},"docComment":"\n   Similar to define(), but allows defining in class definitions as well\n  ","signature":"runkit_constant_add(string $constname ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"runkit_constant_redefine":{"params":{"$constname":"","$newvalue":""},"docComment":"\n   Redefine an already defined constant\n  ","signature":"runkit_constant_redefine(string $constname ,mixed $newvalue )","inheritdoc":0,"modifier":[],"return":""},"runkit_constant_remove":{"params":{"$constname":""},"docComment":"\n   Remove\/Delete an already defined constant\n  ","signature":"runkit_constant_remove(string $constname )","inheritdoc":0,"modifier":[],"return":""},"runkit_function_add":{"params":{"$funcname":"","$arglist":"","$code":""},"docComment":"\n   Add a new function, similar to  \n  ","signature":"runkit_function_add(string $funcname ,string $arglist ,string $code )","inheritdoc":0,"modifier":[],"return":""},"runkit_function_copy":{"params":{"$funcname":"","$targetname":""},"docComment":"\n   Copy a function to a new function name\n  ","signature":"runkit_function_copy(string $funcname ,string $targetname )","inheritdoc":0,"modifier":[],"return":""},"runkit_function_redefine":{"params":{"$funcname":"","$arglist":"","$code":""},"docComment":"\n   Replace a function definition with a new implementation\n  ","signature":"runkit_function_redefine(string $funcname ,string $arglist ,string $code )","inheritdoc":0,"modifier":[],"return":""},"runkit_function_remove":{"params":{"$funcname":""},"docComment":"\n   Remove a function definition\n  ","signature":"runkit_function_remove(string $funcname )","inheritdoc":0,"modifier":[],"return":""},"runkit_function_rename":{"params":{"$funcname":"","$newname":""},"docComment":"\n   Change a function's name\n  ","signature":"runkit_function_rename(string $funcname ,string $newname )","inheritdoc":0,"modifier":[],"return":""},"runkit_import":{"params":{"$filename":"","$flags":""},"docComment":"\n   Process a PHP file importing function and class definitions, overwriting where appropriate\n  ","signature":"runkit_import(string $filename ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"runkit_lint_file":{"params":{"$filename":""},"docComment":"\n   Check the PHP syntax of the specified file\n  ","signature":"runkit_lint_file(string $filename )","inheritdoc":0,"modifier":[],"return":""},"runkit_lint":{"params":{"$code":""},"docComment":"\n   Check the PHP syntax of the specified php code\n  ","signature":"runkit_lint(string $code )","inheritdoc":0,"modifier":[],"return":""},"runkit_method_add":{"params":{"$classname":"","$methodname":"","$args":"","$code":"","$flags":""},"docComment":"Dynamically adds a new method to a given class","signature":"runkit_method_add(string $classname ,string $methodname ,string $args ,string $code ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"runkit_method_copy":{"params":{"$dClass":"","$dMethod":"","$sClass":"","$sMethod":""},"docComment":"Copies a method from class to another","signature":"runkit_method_copy(string $dClass ,string $dMethod ,string $sClass ,string $sMethod )","inheritdoc":0,"modifier":[],"return":""},"runkit_method_redefine":{"params":{"$classname":"","$methodname":"","$args":"","$code":"","$flags":""},"docComment":"Dynamically changes the code of the given method","signature":"runkit_method_redefine(string $classname ,string $methodname ,string $args ,string $code ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"runkit_method_remove":{"params":{"$classname":"","$methodname":""},"docComment":"Dynamically removes the given method","signature":"runkit_method_remove(string $classname ,string $methodname )","inheritdoc":0,"modifier":[],"return":""},"runkit_method_rename":{"params":{"$classname":"","$methodname":"","$newname":""},"docComment":"Dynamically changes the name of the given method","signature":"runkit_method_rename(string $classname ,string $methodname ,string $newname )","inheritdoc":0,"modifier":[],"return":""},"runkit_return_value_used":{"params":[],"docComment":"Determines if the current functions return value will be used","signature":"runkit_return_value_used( )","inheritdoc":0,"modifier":[],"return":""},"runkit_sandbox_output_handler":{"params":{"$sandbox":"","$callback":""},"docComment":"\n   Specify a function to capture and\/or process output from a runkit sandbox\n  ","signature":"runkit_sandbox_output_handler(object $sandbox ,mixed $callback )","inheritdoc":0,"modifier":[],"return":""},"runkit_superglobals":{"params":[],"docComment":"\n   Return numerically indexed array of registered superglobals\n  ","signature":"runkit_superglobals( )","inheritdoc":0,"modifier":[],"return":""},"SAMConnection::commit":{"params":[],"docComment":"\n   Commits (completes) the current unit of work.\n  ","signature":"SAMConnection::commit( )","inheritdoc":0,"modifier":[],"return":""},"SAMConnection::connect":{"params":{"$protocol":"","$properties":""},"docComment":"\n   Establishes a connection to a Messaging Server\n  ","signature":"SAMConnection::connect(string $protocol ,array $properties )","inheritdoc":0,"modifier":[],"return":""},"SAMConnection::__construct":{"params":[],"docComment":"\n   Creates a new connection to a Messaging Server\n  ","signature":"","inheritdoc":0,"modifier":[],"return":""},"SAMConnection::disconnect":{"params":[],"docComment":"\n   Disconnects from a Messaging Server\n  ","signature":"SAMConnection::disconnect( )","inheritdoc":0,"modifier":[],"return":""},"SAMConnection::errno":{"params":[],"docComment":"Contains the unique numeric error code of the last executed SAM operation.","signature":"","inheritdoc":0,"modifier":[],"return":""},"SAMConnection::error":{"params":[],"docComment":"Contains the text description of the last failed SAM operation.","signature":"","inheritdoc":0,"modifier":[],"return":""},"SAMConnection::isConnected":{"params":[],"docComment":"\n   Queries whether a connection is established to a Messaging Server\n  ","signature":"SAMConnection::isConnected( )","inheritdoc":0,"modifier":[],"return":""},"SAMConnection::peek":{"params":{"$target":"","$properties":""},"docComment":"\n   Read a message from a queue without removing it from the queue.\n  ","signature":"SAMConnection::peek(string $target ,array $properties )","inheritdoc":0,"modifier":[],"return":"SAMMessage"},"SAMConnection::peekAll":{"params":{"$target":"","$properties":""},"docComment":"\n   Read one or more messages from a queue without removing it from the queue.\n  ","signature":"SAMConnection::peekAll(string $target ,array $properties )","inheritdoc":0,"modifier":[],"return":""},"SAMConnection::receive":{"params":{"$target":"","$properties":""},"docComment":"\n   Receive a message from a queue or subscription.\n  ","signature":"SAMConnection::receive(string $target ,array $properties )","inheritdoc":0,"modifier":[],"return":"SAMMessage"},"SAMConnection::remove":{"params":{"$target":"","$properties":""},"docComment":"\n   Remove a message from a queue.\n  ","signature":"SAMConnection::remove(string $target ,array $properties )","inheritdoc":0,"modifier":[],"return":"SAMMessage"},"SAMConnection::rollback":{"params":[],"docComment":"\n   Cancels (rolls back) an in-flight unit of work.\n  ","signature":"SAMConnection::rollback( )","inheritdoc":0,"modifier":[],"return":""},"SAMConnection::send":{"params":{"$target":"","$msg":"SAMMessage","$properties":""},"docComment":"\n   Send a message to a queue or publish an item to a topic.\n  ","signature":"SAMConnection::send(string $target ,SAMMessage $msg ,array $properties )","inheritdoc":0,"modifier":[],"return":""},"SAMConnection::setDebug":{"params":{"$switch":""},"docComment":"\n   Turn on or off additional debugging output.\n  ","signature":"SAMConnection::setDebug(bool $switch )","inheritdoc":0,"modifier":[],"return":""},"SAMConnection::subscribe":{"params":{"$targetTopic":""},"docComment":"\n   Create a subscription to a specified topic.\n  ","signature":"SAMConnection::subscribe(string $targetTopic )","inheritdoc":0,"modifier":[],"return":""},"SAMConnection::unsubscribe":{"params":{"$subscriptionId":"","$targetTopic":""},"docComment":"\n   Cancel a subscription to a specified topic.\n  ","signature":"SAMConnection::unsubscribe(string $subscriptionId ,string $targetTopic )","inheritdoc":0,"modifier":[],"return":""},"SAMMessage::body":{"params":[],"docComment":"\n   The body of the message.\n  ","signature":"","inheritdoc":0,"modifier":[],"return":""},"SAMMessage::__construct":{"params":[],"docComment":"\n   Creates a new Message object\n  ","signature":"","inheritdoc":0,"modifier":[],"return":""},"SAMMessage::header":{"params":[],"docComment":"\n   The header properties of the message.\n  ","signature":"","inheritdoc":0,"modifier":[],"return":""},"SCA::createDataObject":{"params":{"$type_namespace_uri":"","$type_name":""},"docComment":" create an SDO ","signature":"SCA::createDataObject(string $type_namespace_uri ,string $type_name )","inheritdoc":0,"modifier":[],"return":"SDO_DataObject"},"SCA::getService":{"params":{"$target":"","$binding":"","$config":""},"docComment":"\n   Obtain a proxy for a service\n  ","signature":"SCA::getService(string $target ,string $binding ,array $config )","inheritdoc":0,"modifier":[],"return":""},"SCA_LocalProxy::createDataObject":{"params":{"$type_namespace_uri":"","$type_name":""},"docComment":" create an SDO ","signature":"SCA_LocalProxy::createDataObject(string $type_namespace_uri ,string $type_name )","inheritdoc":0,"modifier":[],"return":"SDO_DataObject"},"SCA_SoapProxy::createDataObject":{"params":{"$type_namespace_uri":"","$type_name":""},"docComment":" create an SDO ","signature":"SCA_SoapProxy::createDataObject(string $type_namespace_uri ,string $type_name )","inheritdoc":0,"modifier":[],"return":"SDO_DataObject"},"SDO_DAS_ChangeSummary::beginLogging":{"params":[],"docComment":"\n   Begin change logging\n  ","signature":"SDO_DAS_ChangeSummary::beginLogging( )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_ChangeSummary::endLogging":{"params":[],"docComment":"\n   End change logging\n  ","signature":"SDO_DAS_ChangeSummary::endLogging( )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_ChangeSummary::getChangeType":{"params":{"$dataObject":"SDO_DataObject"},"docComment":"\n   Get the type of change made to an SDO_DataObject\n  ","signature":"SDO_DAS_ChangeSummary::getChangeType(SDO_DataObject $dataObject )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_ChangeSummary::getChangedDataObjects":{"params":[],"docComment":"\n   Get the changed data objects from a change summary\n  ","signature":"SDO_DAS_ChangeSummary::getChangedDataObjects( )","inheritdoc":0,"modifier":[],"return":"SDO_List"},"SDO_DAS_ChangeSummary::getOldContainer":{"params":{"$data_object":"SDO_DataObject"},"docComment":"\n   Get the old container for a deleted SDO_DataObject\n  ","signature":"SDO_DAS_ChangeSummary::getOldContainer(SDO_DataObject $data_object )","inheritdoc":0,"modifier":[],"return":"SDO_DataObject"},"SDO_DAS_ChangeSummary::getOldValues":{"params":{"$data_object":"SDO_DataObject"},"docComment":"\n   Get the old values for a given changed SDO_DataObject\n  ","signature":"SDO_DAS_ChangeSummary::getOldValues(SDO_DataObject $data_object )","inheritdoc":0,"modifier":[],"return":"SDO_List"},"SDO_DAS_ChangeSummary::isLogging":{"params":[],"docComment":"\n   Test to see whether change logging is switched on\n  ","signature":"SDO_DAS_ChangeSummary::isLogging( )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_DataFactory::addPropertyToType":{"params":{"$parent_type_namespace_uri":"","$parent_type_name":"","$property_name":"","$type_namespace_uri":"","$type_name":"","$options":""},"docComment":"\n   Adds a property to a type\n  ","signature":"SDO_DAS_DataFactory::addPropertyToType(string $parent_type_namespace_uri ,string $parent_type_name ,string $property_name ,string $type_namespace_uri ,string $type_name ,array $options )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_DataFactory::addType":{"params":{"$type_namespace_uri":"","$type_name":"","$options":""},"docComment":"\n   Add a new type to a model\n  ","signature":"SDO_DAS_DataFactory::addType(string $type_namespace_uri ,string $type_name ,array $options )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_DataFactory::getDataFactory":{"params":[],"docComment":"\n   Get a data factory instance\n  ","signature":"SDO_DAS_DataFactory::getDataFactory( )","inheritdoc":0,"modifier":[],"return":"SDO_DAS_DataFactory"},"SDO_DAS_DataObject::getChangeSummary":{"params":[],"docComment":"\n   Get a data object's change summary\n  ","signature":"SDO_DAS_DataObject::getChangeSummary( )","inheritdoc":0,"modifier":[],"return":"SDO_DAS_ChangeSummary"},"SDO_DAS_Setting::getListIndex":{"params":[],"docComment":"\n   Get the list index for a changed many-valued property\n  ","signature":"SDO_DAS_Setting::getListIndex( )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_Setting::getPropertyIndex":{"params":[],"docComment":"\n   Get the property index for a changed property\n  ","signature":"SDO_DAS_Setting::getPropertyIndex( )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_Setting::getPropertyName":{"params":[],"docComment":"\n   Get the property name for a changed property\n  ","signature":"SDO_DAS_Setting::getPropertyName( )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_Setting::getValue":{"params":[],"docComment":"\n   Get the old value for the changed property\n  ","signature":"SDO_DAS_Setting::getValue( )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_Setting::isSet":{"params":[],"docComment":"\n   Test whether a property was set prior to being modified\n  ","signature":"SDO_DAS_Setting::isSet( )","inheritdoc":0,"modifier":[],"return":""},"SDO_DataFactory::create":{"params":{"$type_namespace_uri":"","$type_name":""},"docComment":"\n   Create an SDO_DataObject\n  ","signature":"SDO_DataFactory::create(string $type_namespace_uri ,string $type_name )","inheritdoc":0,"modifier":[],"return":""},"SDO_DataObject::clear":{"params":[],"docComment":"\n   Clear an SDO_DataObject's properties\n  ","signature":"SDO_DataObject::clear( )","inheritdoc":0,"modifier":[],"return":""},"SDO_DataObject::createDataObject":{"params":{"$identifier":""},"docComment":"\n   Create a child SDO_DataObject\n  ","signature":"SDO_DataObject::createDataObject(mixed $identifier )","inheritdoc":0,"modifier":[],"return":"SDO_DataObject"},"SDO_DataObject::getContainer":{"params":[],"docComment":"\n   Get a data object's container\n  ","signature":"SDO_DataObject::getContainer( )","inheritdoc":0,"modifier":[],"return":"SDO_DataObject"},"SDO_DataObject::getSequence":{"params":[],"docComment":"\n   Get the sequence for a data object\n  ","signature":"SDO_DataObject::getSequence( )","inheritdoc":0,"modifier":[],"return":"SDO_Sequence"},"SDO_DataObject::getTypeName":{"params":[],"docComment":"\n   Return the name of the type for a data object.\n  ","signature":"SDO_DataObject::getTypeName( )","inheritdoc":0,"modifier":[],"return":""},"SDO_DataObject::getTypeNamespaceURI":{"params":[],"docComment":"\n   Return the namespace URI of the type for a data object.\n  ","signature":"SDO_DataObject::getTypeNamespaceURI( )","inheritdoc":0,"modifier":[],"return":""},"SDO_Exception::getCause":{"params":[],"docComment":"\n   Get the cause of the exception.\n  ","signature":"SDO_Exception::getCause( )","inheritdoc":0,"modifier":[],"return":""},"SDO_List::insert":{"params":{"$value":"","$index":""},"docComment":"\n   Insert into a list\n  ","signature":"SDO_List::insert(mixed $value ,int $index )","inheritdoc":0,"modifier":[],"return":""},"SDO_Model_Property::getContainingType":{"params":[],"docComment":"\n   Get the SDO_Model_Type which contains this property\n  ","signature":"SDO_Model_Property::getContainingType( )","inheritdoc":0,"modifier":[],"return":"SDO_Model_Type"},"SDO_Model_Property::getDefault":{"params":[],"docComment":"\n   Get the default value for the property\n  ","signature":"SDO_Model_Property::getDefault( )","inheritdoc":0,"modifier":[],"return":""},"SDO_Model_Property::getName":{"params":[],"docComment":"\n   Get the name of the SDO_Model_Property\n  ","signature":"SDO_Model_Property::getName( )","inheritdoc":0,"modifier":[],"return":""},"SDO_Model_Property::getType":{"params":[],"docComment":"\n   Get the SDO_Model_Type of the property\n  ","signature":"SDO_Model_Property::getType( )","inheritdoc":0,"modifier":[],"return":"SDO_Model_Type"},"SDO_Model_Property::isContainment":{"params":[],"docComment":"\n   Test to see if the property defines a containment relationship\n  ","signature":"SDO_Model_Property::isContainment( )","inheritdoc":0,"modifier":[],"return":""},"SDO_Model_Property::isMany":{"params":[],"docComment":"\n   Test to see if the property is many-valued\n  ","signature":"SDO_Model_Property::isMany( )","inheritdoc":0,"modifier":[],"return":""},"SDO_Model_ReflectionDataObject::__construct":{"params":{"$data_object":"SDO_DataObject"},"docComment":"\n   Construct an SDO_Model_ReflectionDataObject\n  ","signature":"SDO_Model_ReflectionDataObject::__construct(SDO_DataObject $data_object )","inheritdoc":0,"modifier":[],"return":""},"SDO_Model_ReflectionDataObject::export":{"params":{"$rdo":"SDO_Model_ReflectionDataObject","$return":""},"docComment":"\n   Get a string describing the SDO_DataObject.\n  ","signature":"SDO_Model_ReflectionDataObject::export(SDO_Model_ReflectionDataObject $rdo ,bool $return )","inheritdoc":0,"modifier":[],"return":""},"SDO_Model_ReflectionDataObject::getContainmentProperty":{"params":[],"docComment":"\n   Get the property which defines the containment relationship to the data object\n  ","signature":"SDO_Model_ReflectionDataObject::getContainmentProperty( )","inheritdoc":0,"modifier":[],"return":"SDO_Model_Property"},"SDO_Model_ReflectionDataObject::getInstanceProperties":{"params":[],"docComment":"\n   Get the instance properties of the SDO_DataObject\n  ","signature":"SDO_Model_ReflectionDataObject::getInstanceProperties( )","inheritdoc":0,"modifier":[],"return":""},"SDO_Model_ReflectionDataObject::getType":{"params":[],"docComment":"\n   Get the SDO_Model_Type for the SDO_DataObject\n  ","signature":"SDO_Model_ReflectionDataObject::getType( )","inheritdoc":0,"modifier":[],"return":"SDO_Model_Type"},"SDO_Model_Type::getBaseType":{"params":[],"docComment":"\n   Get the base type for this type\n  ","signature":"SDO_Model_Type::getBaseType( )","inheritdoc":0,"modifier":[],"return":"SDO_Model_Type"},"SDO_Model_Type::getName":{"params":[],"docComment":"\n   Get the name of the type\n  ","signature":"SDO_Model_Type::getName( )","inheritdoc":0,"modifier":[],"return":""},"SDO_Model_Type::getNamespaceURI":{"params":[],"docComment":"\n   Get the namespace URI of the type\n  ","signature":"SDO_Model_Type::getNamespaceURI( )","inheritdoc":0,"modifier":[],"return":""},"SDO_Model_Type::getProperties":{"params":[],"docComment":"\n   Get the SDO_Model_Property objects defined for the type\n  ","signature":"SDO_Model_Type::getProperties( )","inheritdoc":0,"modifier":[],"return":""},"SDO_Model_Type::getProperty":{"params":{"$identifier":""},"docComment":"\n   Get an SDO_Model_Property of the type\n  ","signature":"SDO_Model_Type::getProperty(mixed $identifier )","inheritdoc":0,"modifier":[],"return":"SDO_Model_Property"},"SDO_Model_Type::isAbstractType":{"params":[],"docComment":"\n   Test to see if this SDO_Model_Type is an abstract data type\n  ","signature":"SDO_Model_Type::isAbstractType( )","inheritdoc":0,"modifier":[],"return":""},"SDO_Model_Type::isDataType":{"params":[],"docComment":"\n   Test to see if this SDO_Model_Type is a primitive data type\n  ","signature":"SDO_Model_Type::isDataType( )","inheritdoc":0,"modifier":[],"return":""},"SDO_Model_Type::isInstance":{"params":{"$data_object":"SDO_DataObject"},"docComment":"\n   Test for an SDO_DataObject being an instance of this SDO_Model_Type\n  ","signature":"SDO_Model_Type::isInstance(SDO_DataObject $data_object )","inheritdoc":0,"modifier":[],"return":""},"SDO_Model_Type::isOpenType":{"params":[],"docComment":"\n   Test to see if this type is an open type\n  ","signature":"SDO_Model_Type::isOpenType( )","inheritdoc":0,"modifier":[],"return":""},"SDO_Model_Type::isSequencedType":{"params":[],"docComment":"\n   Test to see if this is a sequenced type\n  ","signature":"SDO_Model_Type::isSequencedType( )","inheritdoc":0,"modifier":[],"return":""},"SDO_Sequence::getProperty":{"params":{"$sequence_index":""},"docComment":"\n  Return the property for the specified sequence index.\n  ","signature":"SDO_Sequence::getProperty(int $sequence_index )","inheritdoc":0,"modifier":[],"return":"SDO_Model_Property"},"SDO_Sequence::insert":{"params":{"$value":"","$sequenceIndex":"","$propertyIdentifier":""},"docComment":"\n   Insert into a sequence\n  ","signature":"SDO_Sequence::insert(mixed $value ,int $sequenceIndex ,mixed $propertyIdentifier )","inheritdoc":0,"modifier":[],"return":""},"SDO_Sequence::move":{"params":{"$toIndex":"","$fromIndex":""},"docComment":"\n   Move an item to another sequence position\n  ","signature":"SDO_Sequence::move(int $toIndex ,int $fromIndex )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_XML::addTypes":{"params":{"$xsd_file":""},"docComment":"\n   To load a second or subsequent schema file to a SDO_DAS_XML object\n  ","signature":"SDO_DAS_XML::addTypes(string $xsd_file )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_XML::create":{"params":{"$xsd_file":"","$key":""},"docComment":"\n   To create SDO_DAS_XML object for a given schema file\n  ","signature":"SDO_DAS_XML::create(mixed $xsd_file ,string $key )","inheritdoc":0,"modifier":[],"return":"SDO_DAS_XML"},"SDO_DAS_XML::createDataObject":{"params":{"$namespace_uri":"","$type_name":""},"docComment":"\n   Creates SDO_DataObject for a given namespace URI and type name\n  ","signature":"SDO_DAS_XML::createDataObject(string $namespace_uri ,string $type_name )","inheritdoc":0,"modifier":[],"return":"SDO_DataObject"},"SDO_DAS_XML::createDocument":{"params":{"$document_element_name":"","$document_element_namespace_URI":"","$dataobject":"SDO_DataObject"},"docComment":"\n   Creates an XML Document object from scratch, without the need to load a document from a file or string.\n  ","signature":"SDO_DAS_XML::createDocument(string $document_element_namespace_URI ,string $document_element_name ,SDO_DataObject $dataobject )","inheritdoc":0,"modifier":[],"return":"SDO_DAS_XML_Document"},"SDO_DAS_XML::loadFile":{"params":{"$xml_file":""},"docComment":"\n   Returns SDO_DAS_XML_Document object for a given path to xml instance document\n  ","signature":"SDO_DAS_XML::loadFile(string $xml_file )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_XML::loadString":{"params":{"$xml_string":""},"docComment":"\n   Returns SDO_DAS_XML_Document for a given xml instance string\n  ","signature":"SDO_DAS_XML::loadString(string $xml_string )","inheritdoc":0,"modifier":[],"return":"SDO_DAS_XML_Document"},"SDO_DAS_XML::saveFile":{"params":{"$xdoc":"","$xml_file":"","$indent":""},"docComment":"\n   Saves the SDO_DAS_XML_Document object to a file\n  ","signature":"SDO_DAS_XML::saveFile( $xdoc ,string $xml_file ,int $indent )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_XML::saveString":{"params":{"$xdoc":"","$indent":""},"docComment":"\n   Saves the SDO_DAS_XML_Document object to a string\n  ","signature":"SDO_DAS_XML::saveString( $xdoc ,int $indent )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_XML_Document::getRootDataObject":{"params":[],"docComment":"\n   Returns the root SDO_DataObject\n  ","signature":"SDO_DAS_XML_Document::getRootDataObject( )","inheritdoc":0,"modifier":[],"return":"SDO_DataObject"},"SDO_DAS_XML_Document::getRootElementName":{"params":[],"docComment":"\n   Returns root element's name\n  ","signature":"SDO_DAS_XML_Document::getRootElementName( )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_XML_Document::getRootElementURI":{"params":[],"docComment":"\n   Returns root element's URI string\n  ","signature":"SDO_DAS_XML_Document::getRootElementURI( )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_XML_Document::setEncoding":{"params":{"$encoding":""},"docComment":"\n   Sets the given string as encoding\n  ","signature":"SDO_DAS_XML_Document::setEncoding(string $encoding )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_XML_Document::setXMLDeclaration":{"params":{"$xmlDeclatation":""},"docComment":"\n   Sets the xml declaration\n  ","signature":"SDO_DAS_XML_Document::setXMLDeclaration(bool $xmlDeclatation )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_XML_Document::setXMLVersion":{"params":{"$xmlVersion":""},"docComment":"\n   Sets the given string as xml version\n  ","signature":"SDO_DAS_XML_Document::setXMLVersion(string $xmlVersion )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_Relational::applyChanges":{"params":{"$database_handle":"PDO","$root_data_object":""},"docComment":"\n   Applies the changes made to a data graph back to the database.\n  ","signature":"SDO_DAS_Relational::applyChanges(PDO $database_handle , $root_data_object )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_Relational::__construct":{"params":{"$database_metadata":"","$application_root_type":"","$SDO_containment_references_metadata":""},"docComment":"\n   Creates an instance of a Relational Data Access Service\n  ","signature":"SDO_DAS_Relational::__construct(array $database_metadata ,string $application_root_type ,array $SDO_containment_references_metadata )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_Relational::createRootDataObject":{"params":[],"docComment":"\n   Returns the special root object in an otherwise \n   empty data graph. Used when creating a data graph from scratch.\n  ","signature":"SDO_DAS_Relational::createRootDataObject( )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_Relational::executePreparedQuery":{"params":{"$database_handle":"PDO","$prepared_statement":"PDOStatement","$value_list":"","$column_specifier":""},"docComment":"\n   Executes an SQL query passed as a prepared statement, with a \n   list of values to substitute for placeholders, and return the \n   results as a normalised data graph.\n  ","signature":"SDO_DAS_Relational::executePreparedQuery(PDO $database_handle ,PDOStatement $prepared_statement ,array $value_list ,array $column_specifier )","inheritdoc":0,"modifier":[],"return":""},"SDO_DAS_Relational::executeQuery":{"params":{"$database_handle":"PDO","$SQL_statement":"","$column_specifier":""},"docComment":"\n   Executes a given SQL query against a relational database \n   and returns the results as a normalised data graph.\n  ","signature":"SDO_DAS_Relational::executeQuery(PDO $database_handle ,string $SQL_statement ,array $column_specifier )","inheritdoc":0,"modifier":[],"return":""},"session_pgsql_add_error":{"params":{"$error_level":"","$error_message":""},"docComment":"Increments error counts and sets last error message","signature":"session_pgsql_add_error(int $error_level ,string $error_message )","inheritdoc":0,"modifier":[],"return":""},"session_pgsql_get_error":{"params":{"$with_error_message":""},"docComment":"Returns number of errors and last error message","signature":"session_pgsql_get_error([bool $with_error_message] )","inheritdoc":0,"modifier":[],"return":""},"session_pgsql_get_field":{"params":[],"docComment":"Get custom field value","signature":"session_pgsql_get_field( )","inheritdoc":0,"modifier":[],"return":""},"session_pgsql_reset":{"params":[],"docComment":"Reset connection to session database servers","signature":"session_pgsql_reset( )","inheritdoc":0,"modifier":[],"return":""},"session_pgsql_set_field":{"params":{"$value":""},"docComment":"Set custom field value","signature":"session_pgsql_set_field(string $value )","inheritdoc":0,"modifier":[],"return":""},"session_pgsql_status":{"params":[],"docComment":"Get current save handler status","signature":"session_pgsql_status( )","inheritdoc":0,"modifier":[],"return":""},"solr_get_version":{"params":[],"docComment":"Returns the current version of the Apache Solr extension","signature":"solr_get_version( )","inheritdoc":0,"modifier":[],"return":""},"calcul_hmac":{"params":{"$clent":"","$siretcode":"","$price":"","$reference":"","$validity":"","$taxation":"","$devise":"","$language":""},"docComment":"Obtain a hmac key (needs 8 arguments)","signature":"calcul_hmac(string $clent ,string $siretcode ,string $price ,string $reference ,string $validity ,string $taxation ,string $devise ,string $language )","inheritdoc":0,"modifier":[],"return":""},"calculhmac":{"params":{"$clent":"","$data":""},"docComment":"Obtain a hmac key (needs 2 arguments)","signature":"calculhmac(string $clent ,string $data )","inheritdoc":0,"modifier":[],"return":""},"nthmac":{"params":{"$clent":"","$data":""},"docComment":"Obtain a nthmac key (needs 2 arguments)","signature":"nthmac(string $clent ,string $data )","inheritdoc":0,"modifier":[],"return":""},"signeurlpaiement":{"params":{"$clent":"","$data":""},"docComment":"Obtain the payment url (needs 2 arguments)","signature":"(string $clent ,string $data )","inheritdoc":0,"modifier":[],"return":""},"sqlite_array_query":{"params":{"$dbhandle":"","$query":"","$result_type":"","$decode_binary":""},"docComment":"Execute a query against a given database and returns an array","signature":"public SQLiteDatabase::arrayQuery(string $query ,[int $result_type] ,[bool $decode_binary] )","inheritdoc":0,"modifier":["public"],"return":""},"sqlite_busy_timeout":{"params":{"$dbhandle":"","$milliseconds":""},"docComment":"Set busy timeout duration, or disable busy handlers","signature":"public SQLiteDatabase::busyTimeout(int $milliseconds )","inheritdoc":0,"modifier":["public"],"return":""},"sqlite_changes":{"params":{"$dbhandle":""},"docComment":"\n   Returns the number of rows that were changed by the most\n   recent SQL statement\n  ","signature":"public SQLiteDatabase::changes( )","inheritdoc":0,"modifier":["public"],"return":""},"sqlite_close":{"params":{"$dbhandle":""},"docComment":"Closes an open SQLite database","signature":"sqlite_close(resource $dbhandle )","inheritdoc":0,"modifier":[],"return":""},"sqlite_column":{"params":{"$result":"","$index_or_name":"","$decode_binary":""},"docComment":"Fetches a column from the current row of a result set","signature":"SQLiteUnbuffered::column(mixed $index_or_name ,[bool $decode_binary] )","inheritdoc":0,"modifier":[],"return":""},"sqlite_create_aggregate":{"params":{"$dbhandle":"","$function_name":"","$step_func":"","$finalize_func":"","$num_args":""},"docComment":"Register an aggregating UDF for use in SQL statements","signature":"public SQLiteDatabase::createAggregate(string $function_name ,callable $step_func ,callable $finalize_func ,[int $num_args] )","inheritdoc":0,"modifier":["public"],"return":""},"sqlite_create_function":{"params":{"$dbhandle":"","$function_name":"","$callback":"","$num_args":""},"docComment":"\n   Registers a \"regular\" User Defined Function for use in SQL statements\n  ","signature":"public SQLiteDatabase::createFunction(string $function_name ,callable $callback ,[int $num_args] )","inheritdoc":0,"modifier":["public"],"return":""},"sqlite_current":{"params":{"$result":"","$result_type":"","$decode_binary":""},"docComment":"Fetches the current row from a result set as an array","signature":"SQLiteUnbuffered::current([int $result_type] ,[bool $decode_binary] )","inheritdoc":0,"modifier":[],"return":""},"sqlite_error_string":{"params":{"$error_code":""},"docComment":"Returns the textual description of an error code","signature":"sqlite_error_string(int $error_code )","inheritdoc":0,"modifier":[],"return":""},"sqlite_escape_string":{"params":{"$item":""},"docComment":"Escapes a string for use as a query parameter","signature":"sqlite_escape_string(string $item )","inheritdoc":0,"modifier":[],"return":""},"sqlite_exec":{"params":{"$dbhandle":"","$query":"","&$error_msg":""},"docComment":"Executes a result-less query against a given database","signature":"public SQLiteDatabase::queryExec(string $query ,string &$error_msg )","inheritdoc":0,"modifier":["public"],"return":""},"sqlite_factory":{"params":{"$filename":"","$mode":"","&$error_message":""},"docComment":"Opens an SQLite database and returns an SQLiteDatabase object","signature":"sqlite_factory(string $filename ,[int $mode] ,string &$error_message )","inheritdoc":0,"modifier":[],"return":""},"sqlite_fetch_all":{"params":{"$result":"","$result_type":"","$decode_binary":""},"docComment":"Fetches all rows from a result set as an array of arrays","signature":"SQLiteUnbuffered::fetchAll([int $result_type] ,[bool $decode_binary] )","inheritdoc":0,"modifier":[],"return":""},"sqlite_fetch_array":{"params":{"$result":"","$result_type":"","$decode_binary":""},"docComment":"Fetches the next row from a result set as an array","signature":"SQLiteUnbuffered::fetch([int $result_type] ,[bool $decode_binary] )","inheritdoc":0,"modifier":[],"return":""},"sqlite_fetch_column_types":{"params":{"$table_name":"","$dbhandle":"","$result_type":""},"docComment":"\n   Return an array of column types from a particular table\n  ","signature":"public SQLiteDatabase::fetchColumnTypes(string $table_name ,[int $result_type] )","inheritdoc":0,"modifier":["public"],"return":""},"sqlite_fetch_object":{"params":{"$result":"","$class_name":"","$ctor_params":"","$decode_binary":""},"docComment":"Fetches the next row from a result set as an object","signature":"SQLiteUnbuffered::fetchObject(string $class_name ,array $ctor_params ,[bool $decode_binary] )","inheritdoc":0,"modifier":[],"return":""},"sqlite_fetch_single":{"params":{"$result":"","$decode_binary":""},"docComment":"Fetches the first column of a result set as a string","signature":"SQLiteUnbuffered::fetchSingle([bool $decode_binary] )","inheritdoc":0,"modifier":[],"return":""},"sqlite_fetch_string":{"params":{"$result":"","$decode_binary":""},"docComment":"Fetches the first column of a result set as a string","signature":"SQLiteUnbuffered::fetchSingle([bool $decode_binary] )","inheritdoc":0,"modifier":[],"return":""},"sqlite_field_name":{"params":{"$result":"","$field_index":""},"docComment":"Returns the name of a particular field","signature":"SQLiteUnbuffered::fieldName(int $field_index )","inheritdoc":0,"modifier":[],"return":""},"sqlite_has_more":{"params":{"$result":""},"docComment":"Finds whether or not more rows are available","signature":"sqlite_has_more(resource $result )","inheritdoc":0,"modifier":[],"return":""},"sqlite_has_prev":{"params":{"$result":""},"docComment":"Returns whether or not a previous row is available","signature":"SQLiteResult::hasPrev( )","inheritdoc":0,"modifier":[],"return":""},"sqlite_key":{"params":[],"docComment":"Returns the current row index","signature":"SQLiteResult::key( )","inheritdoc":0,"modifier":[],"return":""},"sqlite_last_error":{"params":{"$dbhandle":""},"docComment":"Returns the error code of the last error for a database","signature":"public SQLiteDatabase::lastError( )","inheritdoc":0,"modifier":["public"],"return":""},"sqlite_last_insert_rowid":{"params":{"$dbhandle":""},"docComment":"Returns the rowid of the most recently inserted row","signature":"public SQLiteDatabase::lastInsertRowid( )","inheritdoc":0,"modifier":["public"],"return":""},"sqlite_libencoding":{"params":[],"docComment":"Returns the encoding of the linked SQLite library","signature":"sqlite_libencoding( )","inheritdoc":0,"modifier":[],"return":""},"sqlite_libversion":{"params":[],"docComment":"Returns the version of the linked SQLite library","signature":"sqlite_libversion( )","inheritdoc":0,"modifier":[],"return":""},"sqlite_next":{"params":{"$result":""},"docComment":"Seek to the next row number","signature":"SQLiteUnbuffered::next( )","inheritdoc":0,"modifier":[],"return":""},"sqlite_num_fields":{"params":{"$result":""},"docComment":"Returns the number of fields in a result set","signature":"SQLiteUnbuffered::numFields( )","inheritdoc":0,"modifier":[],"return":""},"sqlite_num_rows":{"params":{"$result":""},"docComment":"Returns the number of rows in a buffered result set","signature":"SQLiteResult::numRows( )","inheritdoc":0,"modifier":[],"return":""},"sqlite_open":{"params":{"$filename":"","$mode":"","&$error_message":""},"docComment":"Opens an SQLite database and create the database if it does not exist","signature":"sqlite_open(string $filename ,[int $mode] ,string &$error_message )","inheritdoc":0,"modifier":[],"return":""},"sqlite_popen":{"params":{"$filename":"","$mode":"","&$error_message":""},"docComment":"\n   Opens a persistent handle to an SQLite database and create the database if it does not exist\n  ","signature":"sqlite_popen(string $filename ,[int $mode] ,string &$error_message )","inheritdoc":0,"modifier":[],"return":""},"sqlite_prev":{"params":{"$result":""},"docComment":"Seek to the previous row number of a result set","signature":"SQLiteResult::prev( )","inheritdoc":0,"modifier":[],"return":""},"sqlite_query":{"params":{"$dbhandle":"","$query":"","$result_type":"","&$error_msg":""},"docComment":"Executes a query against a given database and returns a result handle","signature":"public SQLiteDatabase::query(string $query ,[int $result_type] ,string &$error_msg )","inheritdoc":0,"modifier":["public"],"return":""},"sqlite_rewind":{"params":{"$result":""},"docComment":"Seek to the first row number","signature":"SQLiteResult::rewind( )","inheritdoc":0,"modifier":[],"return":""},"sqlite_seek":{"params":{"$result":"","$rownum":""},"docComment":"Seek to a particular row number of a buffered result set","signature":"SQLiteResult::seek(int $rownum )","inheritdoc":0,"modifier":[],"return":""},"sqlite_single_query":{"params":{"$db":"","$query":"","$first_row_only":"","$decode_binary":""},"docComment":"\n   Executes a query and returns either an array for one single column or the value of the first row\n  ","signature":"public SQLiteDatabase::singleQuery(string $query ,bool $first_row_only ,bool $decode_binary )","inheritdoc":0,"modifier":["public"],"return":""},"sqlite_udf_decode_binary":{"params":{"$data":""},"docComment":"Decode binary data passed as parameters to an ","signature":"sqlite_udf_decode_binary(string $data )","inheritdoc":0,"modifier":[],"return":""},"sqlite_udf_encode_binary":{"params":{"$data":""},"docComment":"Encode binary data before returning it from an UDF","signature":"sqlite_udf_encode_binary(string $data )","inheritdoc":0,"modifier":[],"return":""},"sqlite_unbuffered_query":{"params":{"$dbhandle":"","$query":"","$result_type":"","&$error_msg":""},"docComment":"Execute a query that does not prefetch and buffer all data","signature":"public SQLiteDatabase::unbufferedQuery(string $query ,[int $result_type] ,string &$error_msg )","inheritdoc":0,"modifier":["public"],"return":""},"sqlite_valid":{"params":{"$result":""},"docComment":"Returns whether more rows are available","signature":"SQLiteUnbuffered::valid( )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_begin_transaction":{"params":{"$conn":""},"docComment":"Begins a database transaction","signature":"sqlsrv_begin_transaction(resource $conn )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_cancel":{"params":{"$stmt":""},"docComment":"Cancels a statement","signature":"sqlsrv_cancel(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_client_info":{"params":{"$conn":""},"docComment":"Returns information about the client and specified connection","signature":"sqlsrv_client_info(resource $conn )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_close":{"params":{"$conn":""},"docComment":"Closes an open connection and releases resourses associated with the connection","signature":"sqlsrv_close(resource $conn )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_commit":{"params":{"$conn":""},"docComment":"Commits a transaction that was begun with  ","signature":"sqlsrv_commit(resource $conn )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_configure":{"params":{"$setting":"","$value":""},"docComment":"Changes the driver error handling and logging configurations","signature":"sqlsrv_configure(string $setting ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_connect":{"params":{"$serverName":"","$connectionInfo":""},"docComment":"Opens a connection to a Microsoft SQL Server database","signature":"sqlsrv_connect(string $serverName ,array $connectionInfo )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_errors":{"params":{"$errorsOrWarnings":""},"docComment":"Returns error and warning information about the last SQLSRV operation performed","signature":"sqlsrv_errors(int $errorsOrWarnings )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_execute":{"params":{"$stmt":""},"docComment":"Executes a statement prepared with  ","signature":"sqlsrv_execute(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_fetch_array":{"params":{"$stmt":"","$fetchType":"","$row":"","$offset":""},"docComment":"Returns a row as an array","signature":"sqlsrv_fetch_array(resource $stmt ,int $fetchType ,int $row ,int $offset )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_fetch_object":{"params":{"$stmt":"","$className":"","$ctorParams":"","$row":"","$offset":""},"docComment":"Retrieves the next row of data in a result set as an object","signature":"sqlsrv_fetch_object(resource $stmt ,string $className ,array $ctorParams ,int $row ,int $offset )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_fetch":{"params":{"$stmt":"","$row":"","$offset":""},"docComment":"Makes the next row in a result set available for reading","signature":"sqlsrv_fetch(resource $stmt ,int $row ,int $offset )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_field_metadata":{"params":{"$stmt":""},"docComment":"Retrieves metadata for the fields of a statement prepared by \n    or  \n  ","signature":"sqlsrv_field_metadata(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_free_stmt":{"params":{"$stmt":""},"docComment":"Frees all resources for the specified statement","signature":"sqlsrv_free_stmt(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_get_config":{"params":{"$setting":""},"docComment":"Returns the value of the specified configuration setting","signature":"sqlsrv_get_config(string $setting )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_get_field":{"params":{"$stmt":"","$fieldIndex":"","$getAsType":""},"docComment":"Gets field data from the currently selected row","signature":"sqlsrv_get_field(resource $stmt ,int $fieldIndex ,int $getAsType )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_has_rows":{"params":{"$stmt":""},"docComment":"Indicates whether the specified statement has rows","signature":"sqlsrv_has_rows(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_next_result":{"params":{"$stmt":""},"docComment":"Makes the next result of the specified statement active","signature":"sqlsrv_next_result(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_num_fields":{"params":{"$stmt":""},"docComment":"Retrieves the number of fields (columns) on a statement","signature":"sqlsrv_num_fields(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_num_rows":{"params":{"$stmt":""},"docComment":"Retrieves the number of rows in a result set","signature":"sqlsrv_num_rows(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_prepare":{"params":{"$conn":"","$sql":"","$params":"","$options":""},"docComment":"Prepares a query for execution","signature":"sqlsrv_prepare(resource $conn ,string $sql ,array $params ,array $options )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_query":{"params":{"$conn":"","$sql":"","$params":"","$options":""},"docComment":"Prepares and executes a query.","signature":"sqlsrv_query(resource $conn ,string $sql ,array $params ,array $options )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_rollback":{"params":{"$conn":""},"docComment":"Rolls back a transaction that was begun with \n   ","signature":"sqlsrv_rollback(resource $conn )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_rows_affected":{"params":{"$stmt":""},"docComment":"Returns the number of rows modified by the last INSERT, UPDATE, or \n  DELETE query executed","signature":"sqlsrv_rows_affected(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_send_stream_data":{"params":{"$stmt":""},"docComment":"Sends data from parameter streams to the server","signature":"sqlsrv_send_stream_data(resource $stmt )","inheritdoc":0,"modifier":[],"return":""},"sqlsrv_server_info":{"params":{"$conn":""},"docComment":"Returns information about the server","signature":"sqlsrv_server_info(resource $conn )","inheritdoc":0,"modifier":[],"return":""},"ssdeep_fuzzy_compare":{"params":{"$signature1":"","$signature2":""},"docComment":"Calculates the match score between two fuzzy hash signatures","signature":"ssdeep_fuzzy_compare(string $signature1 ,string $signature2 )","inheritdoc":0,"modifier":[],"return":""},"ssdeep_fuzzy_hash_filename":{"params":{"$file_name":""},"docComment":"Create a fuzzy hash from a file","signature":"ssdeep_fuzzy_hash_filename(string $file_name )","inheritdoc":0,"modifier":[],"return":""},"ssdeep_fuzzy_hash":{"params":{"$to_hash":""},"docComment":"Create a fuzzy hash from a string","signature":"ssdeep_fuzzy_hash(string $to_hash )","inheritdoc":0,"modifier":[],"return":""},"ssh2_auth_agent":{"params":{"$session":"","$username":""},"docComment":"Authenticate over SSH using the ssh agent","signature":"ssh2_auth_agent(resource $session ,string $username )","inheritdoc":0,"modifier":[],"return":""},"ssh2_auth_hostbased_file":{"params":{"$session":"","$username":"","$hostname":"","$pubkeyfile":"","$privkeyfile":"","$passphrase":"","$local_username":""},"docComment":"Authenticate using a public hostkey","signature":"ssh2_auth_hostbased_file(resource $session ,string $username ,string $hostname ,string $pubkeyfile ,string $privkeyfile ,string $passphrase ,string $local_username )","inheritdoc":0,"modifier":[],"return":""},"ssh2_auth_none":{"params":{"$session":"","$username":""},"docComment":"Authenticate as \"none\"","signature":"ssh2_auth_none(resource $session ,string $username )","inheritdoc":0,"modifier":[],"return":""},"ssh2_auth_password":{"params":{"$session":"","$username":"","$password":""},"docComment":"Authenticate over SSH using a plain password","signature":"ssh2_auth_password(resource $session ,string $username ,string $password )","inheritdoc":0,"modifier":[],"return":""},"ssh2_auth_pubkey_file":{"params":{"$session":"","$username":"","$pubkeyfile":"","$privkeyfile":"","$passphrase":""},"docComment":"Authenticate using a public key","signature":"ssh2_auth_pubkey_file(resource $session ,string $username ,string $pubkeyfile ,string $privkeyfile ,string $passphrase )","inheritdoc":0,"modifier":[],"return":""},"ssh2_connect":{"params":{"$host":"","$port":"","$methods":"","$callbacks":""},"docComment":"Connect to an SSH server","signature":"ssh2_connect(string $host ,[int $port] ,array $methods ,array $callbacks )","inheritdoc":0,"modifier":[],"return":""},"ssh2_exec":{"params":{"$session":"","$command":"","$pty":"","$env":"","$width":"","$height":"","$width_height_type":""},"docComment":"Execute a command on a remote server","signature":"ssh2_exec(resource $session ,string $command ,string $pty ,array $env ,[int $width] ,[int $height] ,[int $width_height_type] )","inheritdoc":0,"modifier":[],"return":""},"ssh2_fetch_stream":{"params":{"$channel":"","$streamid":""},"docComment":"Fetch an extended data stream","signature":"ssh2_fetch_stream(resource $channel ,int $streamid )","inheritdoc":0,"modifier":[],"return":""},"ssh2_fingerprint":{"params":{"$session":"","$flags":""},"docComment":"Retrieve fingerprint of remote server","signature":"ssh2_fingerprint(resource $session ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"ssh2_methods_negotiated":{"params":{"$session":""},"docComment":"Return list of negotiated methods","signature":"ssh2_methods_negotiated(resource $session )","inheritdoc":0,"modifier":[],"return":""},"ssh2_publickey_add":{"params":{"$pkey":"","$algoname":"","$blob":"","$overwrite":"","$attributes":""},"docComment":"\n   Add an authorized publickey\n  ","signature":"ssh2_publickey_add(resource $pkey ,string $algoname ,string $blob ,[bool $overwrite] ,array $attributes )","inheritdoc":0,"modifier":[],"return":""},"ssh2_publickey_init":{"params":{"$session":""},"docComment":"\n   Initialize Publickey subsystem\n  ","signature":"ssh2_publickey_init(resource $session )","inheritdoc":0,"modifier":[],"return":""},"ssh2_publickey_list":{"params":{"$pkey":""},"docComment":"\n   List currently authorized publickeys\n  ","signature":"ssh2_publickey_list(resource $pkey )","inheritdoc":0,"modifier":[],"return":""},"ssh2_publickey_remove":{"params":{"$pkey":"","$algoname":"","$blob":""},"docComment":"\n   Remove an authorized publickey\n  ","signature":"ssh2_publickey_remove(resource $pkey ,string $algoname ,string $blob )","inheritdoc":0,"modifier":[],"return":""},"ssh2_scp_recv":{"params":{"$session":"","$remote_file":"","$local_file":""},"docComment":"Request a file via SCP","signature":"ssh2_scp_recv(resource $session ,string $remote_file ,string $local_file )","inheritdoc":0,"modifier":[],"return":""},"ssh2_scp_send":{"params":{"$session":"","$local_file":"","$remote_file":"","$create_mode":""},"docComment":"Send a file via SCP","signature":"ssh2_scp_send(resource $session ,string $local_file ,string $remote_file ,[int $create_mode] )","inheritdoc":0,"modifier":[],"return":""},"ssh2_sftp_chmod":{"params":{"$sftp":"","$filename":"","$mode":""},"docComment":"Changes file mode","signature":"ssh2_sftp_chmod(resource $sftp ,string $filename ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"ssh2_sftp_lstat":{"params":{"$sftp":"","$path":""},"docComment":"Stat a symbolic link","signature":"ssh2_sftp_lstat(resource $sftp ,string $path )","inheritdoc":0,"modifier":[],"return":""},"ssh2_sftp_mkdir":{"params":{"$sftp":"","$dirname":"","$mode":"","$recursive":""},"docComment":"Create a directory","signature":"ssh2_sftp_mkdir(resource $sftp ,string $dirname ,[int $mode] ,[bool $recursive] )","inheritdoc":0,"modifier":[],"return":""},"ssh2_sftp_readlink":{"params":{"$sftp":"","$link":""},"docComment":"Return the target of a symbolic link","signature":"ssh2_sftp_readlink(resource $sftp ,string $link )","inheritdoc":0,"modifier":[],"return":""},"ssh2_sftp_realpath":{"params":{"$sftp":"","$filename":""},"docComment":"Resolve the realpath of a provided path string","signature":"ssh2_sftp_realpath(resource $sftp ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"ssh2_sftp_rename":{"params":{"$sftp":"","$from":"","$to":""},"docComment":"Rename a remote file","signature":"ssh2_sftp_rename(resource $sftp ,string $from ,string $to )","inheritdoc":0,"modifier":[],"return":""},"ssh2_sftp_rmdir":{"params":{"$sftp":"","$dirname":""},"docComment":"Remove a directory","signature":"ssh2_sftp_rmdir(resource $sftp ,string $dirname )","inheritdoc":0,"modifier":[],"return":""},"ssh2_sftp_stat":{"params":{"$sftp":"","$path":""},"docComment":"Stat a file on a remote filesystem","signature":"ssh2_sftp_stat(resource $sftp ,string $path )","inheritdoc":0,"modifier":[],"return":""},"ssh2_sftp_symlink":{"params":{"$sftp":"","$target":"","$link":""},"docComment":"Create a symlink","signature":"ssh2_sftp_symlink(resource $sftp ,string $target ,string $link )","inheritdoc":0,"modifier":[],"return":""},"ssh2_sftp_unlink":{"params":{"$sftp":"","$filename":""},"docComment":"Delete a file","signature":"ssh2_sftp_unlink(resource $sftp ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"ssh2_sftp":{"params":{"$session":""},"docComment":"Initialize SFTP subsystem","signature":"ssh2_sftp(resource $session )","inheritdoc":0,"modifier":[],"return":""},"ssh2_shell":{"params":{"$session":"","$term_type":"","$env":"","$width":"","$height":"","$width_height_type":""},"docComment":"Request an interactive shell","signature":"ssh2_shell(resource $session ,[string $term_type] ,array $env ,[int $width] ,[int $height] ,[int $width_height_type] )","inheritdoc":0,"modifier":[],"return":""},"ssh2_tunnel":{"params":{"$session":"","$host":"","$port":""},"docComment":"Open a tunnel through a remote server","signature":"ssh2_tunnel(resource $session ,string $host ,int $port )","inheritdoc":0,"modifier":[],"return":""},"stats_absolute_deviation":{"params":{"$a":""},"docComment":"Returns the absolute deviation of an array of values","signature":"stats_absolute_deviation(array $a )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_beta":{"params":{"$par1":"","$par2":"","$par3":"","$which":""},"docComment":"CDF function for BETA Distribution. Calculates any one parameter of the beta distribution given values for the others.","signature":"stats_cdf_beta(float $par1 ,float $par2 ,float $par3 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_binomial":{"params":{"$par1":"","$par2":"","$par3":"","$which":""},"docComment":"Calculates any one parameter of the binomial distribution given values for the others.","signature":"stats_cdf_binomial(float $par1 ,float $par2 ,float $par3 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_cauchy":{"params":{"$par1":"","$par2":"","$par3":"","$which":""},"docComment":"Not documented","signature":"stats_cdf_cauchy(float $par1 ,float $par2 ,float $par3 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_chisquare":{"params":{"$par1":"","$par2":"","$which":""},"docComment":"Calculates any one parameter of the chi-square distribution given values for the others.","signature":"stats_cdf_chisquare(float $par1 ,float $par2 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_exponential":{"params":{"$par1":"","$par2":"","$which":""},"docComment":"Not documented","signature":"stats_cdf_exponential(float $par1 ,float $par2 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_f":{"params":{"$par1":"","$par2":"","$par3":"","$which":""},"docComment":"Calculates any one parameter of the F distribution given values for the others.","signature":"stats_cdf_f(float $par1 ,float $par2 ,float $par3 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_gamma":{"params":{"$par1":"","$par2":"","$par3":"","$which":""},"docComment":"Calculates any one parameter of the gamma distribution given values for the others.","signature":"stats_cdf_gamma(float $par1 ,float $par2 ,float $par3 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_laplace":{"params":{"$par1":"","$par2":"","$par3":"","$which":""},"docComment":"Not documented","signature":"stats_cdf_laplace(float $par1 ,float $par2 ,float $par3 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_logistic":{"params":{"$par1":"","$par2":"","$par3":"","$which":""},"docComment":"Not documented","signature":"stats_cdf_logistic(float $par1 ,float $par2 ,float $par3 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_negative_binomial":{"params":{"$par1":"","$par2":"","$par3":"","$which":""},"docComment":"Calculates any one parameter of the negative binomial distribution given values for the others.","signature":"stats_cdf_negative_binomial(float $par1 ,float $par2 ,float $par3 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_noncentral_chisquare":{"params":{"$par1":"","$par2":"","$par3":"","$which":""},"docComment":"Calculates any one parameter of the non-central chi-square distribution given values for the others.","signature":"stats_cdf_noncentral_chisquare(float $par1 ,float $par2 ,float $par3 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_noncentral_f":{"params":{"$par1":"","$par2":"","$par3":"","$par4":"","$which":""},"docComment":"Calculates any one parameter of the Non-central F distribution given values for the others.","signature":"stats_cdf_noncentral_f(float $par1 ,float $par2 ,float $par3 ,float $par4 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_poisson":{"params":{"$par1":"","$par2":"","$which":""},"docComment":"Calculates any one parameter of the Poisson distribution given values for the others.","signature":"stats_cdf_poisson(float $par1 ,float $par2 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_t":{"params":{"$par1":"","$par2":"","$which":""},"docComment":"Calculates any one parameter of the T distribution given values for the others.","signature":"stats_cdf_t(float $par1 ,float $par2 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_uniform":{"params":{"$par1":"","$par2":"","$par3":"","$which":""},"docComment":"Not documented","signature":"stats_cdf_uniform(float $par1 ,float $par2 ,float $par3 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_cdf_weibull":{"params":{"$par1":"","$par2":"","$par3":"","$which":""},"docComment":"Not documented","signature":"stats_cdf_weibull(float $par1 ,float $par2 ,float $par3 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_covariance":{"params":{"$a":"","$b":""},"docComment":"Computes the covariance of two data sets","signature":"stats_covariance(array $a ,array $b )","inheritdoc":0,"modifier":[],"return":""},"stats_den_uniform":{"params":{"$x":"","$a":"","$b":""},"docComment":"Not documented","signature":"stats_den_uniform(float $x ,float $a ,float $b )","inheritdoc":0,"modifier":[],"return":""},"stats_dens_beta":{"params":{"$x":"","$a":"","$b":""},"docComment":"Not documented","signature":"stats_dens_beta(float $x ,float $a ,float $b )","inheritdoc":0,"modifier":[],"return":""},"stats_dens_cauchy":{"params":{"$x":"","$ave":"","$stdev":""},"docComment":"Not documented","signature":"stats_dens_cauchy(float $x ,float $ave ,float $stdev )","inheritdoc":0,"modifier":[],"return":""},"stats_dens_chisquare":{"params":{"$x":"","$dfr":""},"docComment":"Not documented","signature":"stats_dens_chisquare(float $x ,float $dfr )","inheritdoc":0,"modifier":[],"return":""},"stats_dens_exponential":{"params":{"$x":"","$scale":""},"docComment":"Not documented","signature":"stats_dens_exponential(float $x ,float $scale )","inheritdoc":0,"modifier":[],"return":""},"stats_dens_f":{"params":{"$x":"","$dfr1":"","$dfr2":""},"docComment":"\n ","signature":"stats_dens_f(float $x ,float $dfr1 ,float $dfr2 )","inheritdoc":0,"modifier":[],"return":""},"stats_dens_gamma":{"params":{"$x":"","$shape":"","$scale":""},"docComment":"Not documented","signature":"stats_dens_gamma(float $x ,float $shape ,float $scale )","inheritdoc":0,"modifier":[],"return":""},"stats_dens_laplace":{"params":{"$x":"","$ave":"","$stdev":""},"docComment":"Not documented","signature":"stats_dens_laplace(float $x ,float $ave ,float $stdev )","inheritdoc":0,"modifier":[],"return":""},"stats_dens_logistic":{"params":{"$x":"","$ave":"","$stdev":""},"docComment":"Not documented","signature":"stats_dens_logistic(float $x ,float $ave ,float $stdev )","inheritdoc":0,"modifier":[],"return":""},"stats_dens_negative_binomial":{"params":{"$x":"","$n":"","$pi":""},"docComment":"Not documented","signature":"stats_dens_negative_binomial(float $x ,float $n ,float $pi )","inheritdoc":0,"modifier":[],"return":""},"stats_dens_normal":{"params":{"$x":"","$ave":"","$stdev":""},"docComment":"Not documented","signature":"stats_dens_normal(float $x ,float $ave ,float $stdev )","inheritdoc":0,"modifier":[],"return":""},"stats_dens_pmf_binomial":{"params":{"$x":"","$n":"","$pi":""},"docComment":"Not documented","signature":"stats_dens_pmf_binomial(float $x ,float $n ,float $pi )","inheritdoc":0,"modifier":[],"return":""},"stats_dens_pmf_hypergeometric":{"params":{"$n1":"","$n2":"","$N1":"","$N2":""},"docComment":"\n ","signature":"stats_dens_pmf_hypergeometric(float $n1 ,float $n2 ,float $N1 ,float $N2 )","inheritdoc":0,"modifier":[],"return":""},"stats_dens_pmf_poisson":{"params":{"$x":"","$lb":""},"docComment":"Not documented","signature":"stats_dens_pmf_poisson(float $x ,float $lb )","inheritdoc":0,"modifier":[],"return":""},"stats_dens_t":{"params":{"$x":"","$dfr":""},"docComment":"Not documented","signature":"stats_dens_t(float $x ,float $dfr )","inheritdoc":0,"modifier":[],"return":""},"stats_dens_weibull":{"params":{"$x":"","$a":"","$b":""},"docComment":"Not documented","signature":"stats_dens_weibull(float $x ,float $a ,float $b )","inheritdoc":0,"modifier":[],"return":""},"stats_harmonic_mean":{"params":{"$a":""},"docComment":"Returns the harmonic mean of an array of values","signature":"stats_harmonic_mean(array $a )","inheritdoc":0,"modifier":[],"return":""},"stats_kurtosis":{"params":{"$a":""},"docComment":"Computes the kurtosis of the data in the array","signature":"stats_kurtosis(array $a )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_beta":{"params":{"$a":"","$b":""},"docComment":"Generates beta random deviate","signature":"stats_rand_gen_beta(float $a ,float $b )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_chisquare":{"params":{"$df":""},"docComment":"Generates random deviate from the distribution of a chisquare with \"df\" degrees of freedom random variable.","signature":"stats_rand_gen_chisquare(float $df )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_exponential":{"params":{"$av":""},"docComment":"Generates a single random deviate from an exponential distribution with mean \"av\"","signature":"stats_rand_gen_exponential(float $av )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_f":{"params":{"$dfn":"","$dfd":""},"docComment":"Generates a random deviate","signature":"stats_rand_gen_f(float $dfn ,float $dfd )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_funiform":{"params":{"$low":"","$high":""},"docComment":"Generates uniform float between low (exclusive) and high (exclusive)","signature":"stats_rand_gen_funiform(float $low ,float $high )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_gamma":{"params":{"$a":"","$r":""},"docComment":"Generates random deviates from a gamma distribution","signature":"stats_rand_gen_gamma(float $a ,float $r )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_ibinomial_negative":{"params":{"$n":"","$p":""},"docComment":"Generates a single random deviate from a negative binomial distribution. Arguments : n - the number of trials in the negative binomial distribution from which a random deviate is to be generated (n > 0), p - the probability of an event (0 < p < 1)).","signature":"stats_rand_gen_ibinomial_negative(int $n ,float $p )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_ibinomial":{"params":{"$n":"","$pp":""},"docComment":"Generates a single random deviate from a binomial distribution whose number of trials is \"n\" (n >= 0) and whose probability of an event in each trial is \"pp\" ([0;1]). Method : algorithm BTPE","signature":"stats_rand_gen_ibinomial(int $n ,float $pp )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_int":{"params":[],"docComment":"Generates random integer between 1 and 2147483562","signature":"stats_rand_gen_int( )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_ipoisson":{"params":{"$mu":""},"docComment":"Generates a single random deviate from a Poisson distribution with mean \"mu\" (mu >= 0.0).","signature":"stats_rand_gen_ipoisson(float $mu )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_iuniform":{"params":{"$low":"","$high":""},"docComment":"Generates integer uniformly distributed between LOW (inclusive) and HIGH (inclusive)","signature":"stats_rand_gen_iuniform(int $low ,int $high )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_noncenral_chisquare":{"params":{"$df":"","$xnonc":""},"docComment":"Generates random deviate from the distribution of a noncentral chisquare with \"df\" degrees of freedom and noncentrality parameter \"xnonc\". d must be >= 1.0, xnonc must >= 0.0","signature":"stats_rand_gen_noncenral_chisquare(float $df ,float $xnonc )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_noncentral_f":{"params":{"$dfn":"","$dfd":"","$xnonc":""},"docComment":"Generates a random deviate from the noncentral F (variance ratio) distribution with \"dfn\" degrees of freedom in the numerator, and \"dfd\" degrees of freedom in the denominator, and noncentrality parameter \"xnonc\". Method : directly generates ratio of noncentral numerator chisquare variate to central denominator chisquare variate.","signature":"stats_rand_gen_noncentral_f(float $dfn ,float $dfd ,float $xnonc )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_noncentral_t":{"params":{"$df":"","$xnonc":""},"docComment":"Generates a single random deviate from a noncentral T distribution","signature":"stats_rand_gen_noncentral_t(float $df ,float $xnonc )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_normal":{"params":{"$av":"","$sd":""},"docComment":"Generates a single random deviate from a normal distribution with mean, av, and standard deviation, sd (sd >= 0). Method : Renames SNORM from TOMS as slightly modified by BWB to use RANF instead of SUNIF.","signature":"stats_rand_gen_normal(float $av ,float $sd )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_gen_t":{"params":{"$df":""},"docComment":"Generates a single random deviate from a T distribution","signature":"stats_rand_gen_t(float $df )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_get_seeds":{"params":[],"docComment":"Not documented","signature":"stats_rand_get_seeds( )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_phrase_to_seeds":{"params":{"$phrase":""},"docComment":"generate two seeds for the RGN random number generator","signature":"stats_rand_phrase_to_seeds(string $phrase )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_ranf":{"params":[],"docComment":"Returns a random floating point number from a uniform distribution over 0 - 1 (endpoints of this interval are not returned) using the current generator","signature":"stats_rand_ranf( )","inheritdoc":0,"modifier":[],"return":""},"stats_rand_setall":{"params":{"$iseed1":"","$iseed2":""},"docComment":"Not documented","signature":"stats_rand_setall(int $iseed1 ,int $iseed2 )","inheritdoc":0,"modifier":[],"return":""},"stats_skew":{"params":{"$a":""},"docComment":"Computes the skewness of the data in the array","signature":"stats_skew(array $a )","inheritdoc":0,"modifier":[],"return":""},"stats_standard_deviation":{"params":{"$a":"","$sample":""},"docComment":"Returns the standard deviation","signature":"stats_standard_deviation(array $a ,[bool $sample] )","inheritdoc":0,"modifier":[],"return":""},"stats_stat_binomial_coef":{"params":{"$x":"","$n":""},"docComment":"Not documented","signature":"stats_stat_binomial_coef(int $x ,int $n )","inheritdoc":0,"modifier":[],"return":""},"stats_stat_correlation":{"params":{"$arr1":"","$arr2":""},"docComment":"Not documented","signature":"stats_stat_correlation(array $arr1 ,array $arr2 )","inheritdoc":0,"modifier":[],"return":""},"stats_stat_gennch":{"params":{"$n":""},"docComment":"Not documented","signature":"stats_stat_gennch(int $n )","inheritdoc":0,"modifier":[],"return":""},"stats_stat_independent_t":{"params":{"$arr1":"","$arr2":""},"docComment":"Not documented","signature":"stats_stat_independent_t(array $arr1 ,array $arr2 )","inheritdoc":0,"modifier":[],"return":""},"stats_stat_innerproduct":{"params":{"$arr1":"","$arr2":""},"docComment":"\n ","signature":"stats_stat_innerproduct(array $arr1 ,array $arr2 )","inheritdoc":0,"modifier":[],"return":""},"stats_stat_noncentral_t":{"params":{"$par1":"","$par2":"","$par3":"","$which":""},"docComment":"Calculates any one parameter of the noncentral t distribution give values for the others.","signature":"stats_stat_noncentral_t(float $par1 ,float $par2 ,float $par3 ,int $which )","inheritdoc":0,"modifier":[],"return":""},"stats_stat_paired_t":{"params":{"$arr1":"","$arr2":""},"docComment":"Not documented","signature":"stats_stat_paired_t(array $arr1 ,array $arr2 )","inheritdoc":0,"modifier":[],"return":""},"stats_stat_percentile":{"params":{"$df":"","$xnonc":""},"docComment":"Not documented","signature":"stats_stat_percentile(float $df ,float $xnonc )","inheritdoc":0,"modifier":[],"return":""},"stats_stat_powersum":{"params":{"$arr":"","$power":""},"docComment":"Not documented","signature":"stats_stat_powersum(array $arr ,float $power )","inheritdoc":0,"modifier":[],"return":""},"stats_variance":{"params":{"$a":"","$sample":""},"docComment":"Returns the population variance","signature":"stats_variance(array $a ,[bool $sample] )","inheritdoc":0,"modifier":[],"return":""},"stomp_connect_error":{"params":[],"docComment":"Returns a string description of the last connect error","signature":"stomp_connect_error( )","inheritdoc":0,"modifier":[],"return":""},"stomp_version":{"params":[],"docComment":"Gets the current stomp extension version","signature":"stomp_version( )","inheritdoc":0,"modifier":[],"return":""},"svn_add":{"params":{"$path":"","$recursive":"","$force":""},"docComment":"Schedules the addition of an item in a working directory","signature":"svn_add(string $path ,[bool $recursive] ,[bool $force] )","inheritdoc":0,"modifier":[],"return":""},"svn_auth_get_parameter":{"params":{"$key":""},"docComment":"Retrieves authentication parameter","signature":"svn_auth_get_parameter(string $key )","inheritdoc":0,"modifier":[],"return":""},"svn_auth_set_parameter":{"params":{"$key":"","$value":""},"docComment":"Sets an authentication parameter","signature":"svn_auth_set_parameter(string $key ,string $value )","inheritdoc":0,"modifier":[],"return":""},"svn_blame":{"params":{"$repository_url":"","$revision_no":""},"docComment":"Get the SVN blame for a file","signature":"svn_blame(string $repository_url ,[int $revision_no] )","inheritdoc":0,"modifier":[],"return":""},"svn_cat":{"params":{"$repos_url":"","$revision_no":""},"docComment":"Returns the contents of a file in a repository","signature":"svn_cat(string $repos_url ,int $revision_no )","inheritdoc":0,"modifier":[],"return":""},"svn_checkout":{"params":{"$repos":"","$targetpath":"","$revision":"","$flags":""},"docComment":"Checks out a working copy from the repository","signature":"svn_checkout(string $repos ,string $targetpath ,int $revision ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"svn_cleanup":{"params":{"$workingdir":""},"docComment":"Recursively cleanup a working copy directory, finishing incomplete operations and removing locks","signature":"svn_cleanup(string $workingdir )","inheritdoc":0,"modifier":[],"return":""},"svn_client_version":{"params":[],"docComment":"Returns the version of the SVN client libraries","signature":"svn_client_version( )","inheritdoc":0,"modifier":[],"return":""},"svn_commit":{"params":{"$log":"","$targets":"","$recursive":""},"docComment":"Sends changes from the local working copy to the repository","signature":"svn_commit(string $log ,array $targets ,[bool $recursive] )","inheritdoc":0,"modifier":[],"return":""},"svn_delete":{"params":{"$path":"","$force":""},"docComment":"Delete items from a working copy or repository.","signature":"svn_delete(string $path ,[bool $force] )","inheritdoc":0,"modifier":[],"return":""},"svn_diff":{"params":{"$path1":"","$rev1":"","$path2":"","$rev2":""},"docComment":"Recursively diffs two paths","signature":"svn_diff(string $path1 ,int $rev1 ,string $path2 ,int $rev2 )","inheritdoc":0,"modifier":[],"return":""},"svn_export":{"params":{"$frompath":"","$topath":"","$working_copy":"","$revision_no":""},"docComment":"Export the contents of a SVN directory","signature":"svn_export(string $frompath ,string $topath ,[bool $working_copy] ,[int $revision_no] )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_abort_txn":{"params":{"$txn":""},"docComment":"Abort a transaction, returns true if everything is okay, false otherwise","signature":"svn_fs_abort_txn(resource $txn )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_apply_text":{"params":{"$root":"","$path":""},"docComment":"Creates and returns a stream that will be used to replace","signature":"svn_fs_apply_text(resource $root ,string $path )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_begin_txn2":{"params":{"$repos":"","$rev":""},"docComment":"Create a new transaction","signature":"svn_fs_begin_txn2(resource $repos ,int $rev )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_change_node_prop":{"params":{"$root":"","$path":"","$name":"","$value":""},"docComment":"Return true if everything is ok, false otherwise","signature":"svn_fs_change_node_prop(resource $root ,string $path ,string $name ,string $value )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_check_path":{"params":{"$fsroot":"","$path":""},"docComment":"Determines what kind of item lives at path in a given repository fsroot","signature":"svn_fs_check_path(resource $fsroot ,string $path )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_contents_changed":{"params":{"$root1":"","$path1":"","$root2":"","$path2":""},"docComment":"Return true if content is different, false otherwise","signature":"svn_fs_contents_changed(resource $root1 ,string $path1 ,resource $root2 ,string $path2 )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_copy":{"params":{"$from_root":"","$from_path":"","$to_root":"","$to_path":""},"docComment":"Copies a file or a directory, returns true if all is ok, false otherwise","signature":"svn_fs_copy(resource $from_root ,string $from_path ,resource $to_root ,string $to_path )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_delete":{"params":{"$root":"","$path":""},"docComment":"Deletes a file or a directory, return true if all is ok, false otherwise","signature":"svn_fs_delete(resource $root ,string $path )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_dir_entries":{"params":{"$fsroot":"","$path":""},"docComment":"Enumerates the directory entries under path; returns a hash of dir names to file type","signature":"svn_fs_dir_entries(resource $fsroot ,string $path )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_file_contents":{"params":{"$fsroot":"","$path":""},"docComment":"Returns a stream to access the contents of a file from a given version of the fs","signature":"svn_fs_file_contents(resource $fsroot ,string $path )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_file_length":{"params":{"$fsroot":"","$path":""},"docComment":"Returns the length of a file from a given version of the fs","signature":"svn_fs_file_length(resource $fsroot ,string $path )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_is_dir":{"params":{"$root":"","$path":""},"docComment":"Return true if the path points to a directory, false otherwise","signature":"svn_fs_is_dir(resource $root ,string $path )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_is_file":{"params":{"$root":"","$path":""},"docComment":"Return true if the path points to a file, false otherwise","signature":"svn_fs_is_file(resource $root ,string $path )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_make_dir":{"params":{"$root":"","$path":""},"docComment":"Creates a new empty directory, returns true if all is ok, false otherwise","signature":"svn_fs_make_dir(resource $root ,string $path )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_make_file":{"params":{"$root":"","$path":""},"docComment":"Creates a new empty file, returns true if all is ok, false otherwise","signature":"svn_fs_make_file(resource $root ,string $path )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_node_created_rev":{"params":{"$fsroot":"","$path":""},"docComment":"Returns the revision in which path under fsroot was created","signature":"svn_fs_node_created_rev(resource $fsroot ,string $path )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_node_prop":{"params":{"$fsroot":"","$path":"","$propname":""},"docComment":"Returns the value of a property for a node","signature":"svn_fs_node_prop(resource $fsroot ,string $path ,string $propname )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_props_changed":{"params":{"$root1":"","$path1":"","$root2":"","$path2":""},"docComment":"Return true if props are different, false otherwise","signature":"svn_fs_props_changed(resource $root1 ,string $path1 ,resource $root2 ,string $path2 )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_revision_prop":{"params":{"$fs":"","$revnum":"","$propname":""},"docComment":"Fetches the value of a named property","signature":"svn_fs_revision_prop(resource $fs ,int $revnum ,string $propname )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_revision_root":{"params":{"$fs":"","$revnum":""},"docComment":"Get a handle on a specific version of the repository root","signature":"svn_fs_revision_root(resource $fs ,int $revnum )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_txn_root":{"params":{"$txn":""},"docComment":"Creates and returns a transaction root","signature":"svn_fs_txn_root(resource $txn )","inheritdoc":0,"modifier":[],"return":""},"svn_fs_youngest_rev":{"params":{"$fs":""},"docComment":"Returns the number of the youngest revision in the filesystem","signature":"svn_fs_youngest_rev(resource $fs )","inheritdoc":0,"modifier":[],"return":""},"svn_import":{"params":{"$path":"","$url":"","$nonrecursive":""},"docComment":"Imports an unversioned path into a repository","signature":"svn_import(string $path ,string $url ,bool $nonrecursive )","inheritdoc":0,"modifier":[],"return":""},"svn_log":{"params":{"$repos_url":"","$start_revision":"","$end_revision":"","$limit":"","$flags":""},"docComment":"Returns the commit log messages of a repository URL","signature":"svn_log(string $repos_url ,int $start_revision ,int $end_revision ,[int $limit] ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"svn_ls":{"params":{"$repos_url":"","$revision_no":"","$recurse":"","$peg":""},"docComment":"Returns list of directory contents in repository URL, optionally at revision number","signature":"svn_ls(string $repos_url ,[int $revision_no] ,[bool $recurse] ,[bool $peg] )","inheritdoc":0,"modifier":[],"return":""},"svn_mkdir":{"params":{"$path":"","$log_message":""},"docComment":"Creates a directory in a working copy or repository","signature":"svn_mkdir(string $path ,string $log_message )","inheritdoc":0,"modifier":[],"return":""},"svn_repos_create":{"params":{"$path":"","$config":"","$fsconfig":""},"docComment":"Create a new subversion repository at path","signature":"svn_repos_create(string $path ,array $config ,array $fsconfig )","inheritdoc":0,"modifier":[],"return":""},"svn_repos_fs_begin_txn_for_commit":{"params":{"$repos":"","$rev":"","$author":"","$log_msg":""},"docComment":"Create a new transaction","signature":"svn_repos_fs_begin_txn_for_commit(resource $repos ,int $rev ,string $author ,string $log_msg )","inheritdoc":0,"modifier":[],"return":""},"svn_repos_fs_commit_txn":{"params":{"$txn":""},"docComment":"Commits a transaction and returns the new revision","signature":"svn_repos_fs_commit_txn(resource $txn )","inheritdoc":0,"modifier":[],"return":""},"svn_repos_fs":{"params":{"$repos":""},"docComment":"Gets a handle on the filesystem for a repository","signature":"svn_repos_fs(resource $repos )","inheritdoc":0,"modifier":[],"return":""},"svn_repos_hotcopy":{"params":{"$repospath":"","$destpath":"","$cleanlogs":""},"docComment":"Make a hot-copy of the repos at repospath; copy it to destpath","signature":"svn_repos_hotcopy(string $repospath ,string $destpath ,bool $cleanlogs )","inheritdoc":0,"modifier":[],"return":""},"svn_repos_open":{"params":{"$path":""},"docComment":"Open a shared lock on a repository.","signature":"svn_repos_open(string $path )","inheritdoc":0,"modifier":[],"return":""},"svn_repos_recover":{"params":{"$path":""},"docComment":"Run recovery procedures on the repository located at path.","signature":"svn_repos_recover(string $path )","inheritdoc":0,"modifier":[],"return":""},"svn_revert":{"params":{"$path":"","$recursive":""},"docComment":"Revert changes to the working copy","signature":"svn_revert(string $path ,[bool $recursive] )","inheritdoc":0,"modifier":[],"return":""},"svn_status":{"params":{"$path":"","$flags":""},"docComment":"Returns the status of working copy files and directories","signature":"svn_status(string $path ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"svn_update":{"params":{"$path":"","$revno":"","$recurse":""},"docComment":"Update working copy","signature":"svn_update(string $path ,[int $revno] ,[bool $recurse] )","inheritdoc":0,"modifier":[],"return":""},"swf_actiongeturl":{"params":{"$url":"","$target":""},"docComment":"Get a URL from a Shockwave Flash movie","signature":"swf_actiongeturl(string $url ,string $target )","inheritdoc":0,"modifier":[],"return":""},"swf_actiongotoframe":{"params":{"$framenumber":""},"docComment":"Play a frame and then stop","signature":"swf_actiongotoframe(int $framenumber )","inheritdoc":0,"modifier":[],"return":""},"swf_actiongotolabel":{"params":{"$label":""},"docComment":"Display a frame with the specified label","signature":"swf_actiongotolabel(string $label )","inheritdoc":0,"modifier":[],"return":""},"swf_actionnextframe":{"params":[],"docComment":"Go forward one frame","signature":"swf_actionnextframe( )","inheritdoc":0,"modifier":[],"return":""},"swf_actionplay":{"params":[],"docComment":"Start playing the flash movie from the current frame","signature":"swf_actionplay( )","inheritdoc":0,"modifier":[],"return":""},"swf_actionprevframe":{"params":[],"docComment":"Go backwards one frame","signature":"swf_actionprevframe( )","inheritdoc":0,"modifier":[],"return":""},"swf_actionsettarget":{"params":{"$target":""},"docComment":"Set the context for actions","signature":"swf_actionsettarget(string $target )","inheritdoc":0,"modifier":[],"return":""},"swf_actionstop":{"params":[],"docComment":"Stop playing the flash movie at the current frame","signature":"swf_actionstop( )","inheritdoc":0,"modifier":[],"return":""},"swf_actiontogglequality":{"params":[],"docComment":"Toggle between low and high quality","signature":"swf_actiontogglequality( )","inheritdoc":0,"modifier":[],"return":""},"swf_actionwaitforframe":{"params":{"$framenumber":"","$skipcount":""},"docComment":"Skip actions if a frame has not been loaded","signature":"swf_actionwaitforframe(int $framenumber ,int $skipcount )","inheritdoc":0,"modifier":[],"return":""},"swf_addbuttonrecord":{"params":{"$states":"","$shapeid":"","$depth":""},"docComment":"Controls location, appearance and active area of the current button","signature":"swf_addbuttonrecord(int $states ,int $shapeid ,int $depth )","inheritdoc":0,"modifier":[],"return":""},"swf_addcolor":{"params":{"$r":"","$g":"","$b":"","$a":""},"docComment":"Set the global add color to the rgba value specified","signature":"swf_addcolor(float $r ,float $g ,float $b ,float $a )","inheritdoc":0,"modifier":[],"return":""},"swf_closefile":{"params":{"$return_file":""},"docComment":"Close the current Shockwave Flash file","signature":"swf_closefile(int $return_file )","inheritdoc":0,"modifier":[],"return":""},"swf_definebitmap":{"params":{"$objid":"","$image_name":""},"docComment":"Define a bitmap","signature":"swf_definebitmap(int $objid ,string $image_name )","inheritdoc":0,"modifier":[],"return":""},"swf_definefont":{"params":{"$fontid":"","$fontname":""},"docComment":"Defines a font","signature":"swf_definefont(int $fontid ,string $fontname )","inheritdoc":0,"modifier":[],"return":""},"swf_defineline":{"params":{"$objid":"","$x1":"","$y1":"","$x2":"","$y2":"","$width":""},"docComment":"Define a line","signature":"swf_defineline(int $objid ,float $x1 ,float $y1 ,float $x2 ,float $y2 ,float $width )","inheritdoc":0,"modifier":[],"return":""},"swf_definepoly":{"params":{"$objid":"","$coords":"","$npoints":"","$width":""},"docComment":"Define a polygon","signature":"swf_definepoly(int $objid ,array $coords ,int $npoints ,float $width )","inheritdoc":0,"modifier":[],"return":""},"swf_definerect":{"params":{"$objid":"","$x1":"","$y1":"","$x2":"","$y2":"","$width":""},"docComment":"Define a rectangle","signature":"swf_definerect(int $objid ,float $x1 ,float $y1 ,float $x2 ,float $y2 ,float $width )","inheritdoc":0,"modifier":[],"return":""},"swf_definetext":{"params":{"$objid":"","$str":"","$docenter":""},"docComment":"Define a text string","signature":"swf_definetext(int $objid ,string $str ,int $docenter )","inheritdoc":0,"modifier":[],"return":""},"swf_endbutton":{"params":[],"docComment":"End the definition of the current button","signature":"swf_endbutton( )","inheritdoc":0,"modifier":[],"return":""},"swf_enddoaction":{"params":[],"docComment":"End the current action","signature":"swf_enddoaction( )","inheritdoc":0,"modifier":[],"return":""},"swf_endshape":{"params":[],"docComment":"Completes the definition of the current shape","signature":"swf_endshape( )","inheritdoc":0,"modifier":[],"return":""},"swf_endsymbol":{"params":[],"docComment":"End the definition of a symbol","signature":"swf_endsymbol( )","inheritdoc":0,"modifier":[],"return":""},"swf_fontsize":{"params":{"$size":""},"docComment":"Change the font size","signature":"swf_fontsize(float $size )","inheritdoc":0,"modifier":[],"return":""},"swf_fontslant":{"params":{"$slant":""},"docComment":"Set the font slant","signature":"swf_fontslant(float $slant )","inheritdoc":0,"modifier":[],"return":""},"swf_fonttracking":{"params":{"$tracking":""},"docComment":"Set the current font tracking","signature":"swf_fonttracking(float $tracking )","inheritdoc":0,"modifier":[],"return":""},"swf_getbitmapinfo":{"params":{"$bitmapid":""},"docComment":"Get information about a bitmap","signature":"swf_getbitmapinfo(int $bitmapid )","inheritdoc":0,"modifier":[],"return":""},"swf_getfontinfo":{"params":[],"docComment":"Gets font information","signature":"swf_getfontinfo( )","inheritdoc":0,"modifier":[],"return":""},"swf_getframe":{"params":[],"docComment":"Get the frame number of the current frame","signature":"swf_getframe( )","inheritdoc":0,"modifier":[],"return":""},"swf_labelframe":{"params":{"$name":""},"docComment":"Label the current frame","signature":"swf_labelframe(string $name )","inheritdoc":0,"modifier":[],"return":""},"swf_lookat":{"params":{"$view_x":"","$view_y":"","$view_z":"","$reference_x":"","$reference_y":"","$reference_z":"","$twist":""},"docComment":"Define a viewing transformation","signature":"swf_lookat(float $view_x ,float $view_y ,float $view_z ,float $reference_x ,float $reference_y ,float $reference_z ,float $twist )","inheritdoc":0,"modifier":[],"return":""},"swf_modifyobject":{"params":{"$depth":"","$how":""},"docComment":"Modify an object","signature":"swf_modifyobject(int $depth ,int $how )","inheritdoc":0,"modifier":[],"return":""},"swf_mulcolor":{"params":{"$r":"","$g":"","$b":"","$a":""},"docComment":"Sets the global multiply color to the rgba value specified","signature":"swf_mulcolor(float $r ,float $g ,float $b ,float $a )","inheritdoc":0,"modifier":[],"return":""},"swf_nextid":{"params":[],"docComment":"Returns the next free object id","signature":"swf_nextid( )","inheritdoc":0,"modifier":[],"return":""},"swf_oncondition":{"params":{"$transition":""},"docComment":"Describe a transition used to trigger an action list","signature":"swf_oncondition(int $transition )","inheritdoc":0,"modifier":[],"return":""},"swf_openfile":{"params":{"$filename":"","$width":"","$height":"","$framerate":"","$r":"","$g":"","$b":""},"docComment":"Open a new Shockwave Flash file","signature":"swf_openfile(string $filename ,float $width ,float $height ,float $framerate ,float $r ,float $g ,float $b )","inheritdoc":0,"modifier":[],"return":""},"swf_ortho2":{"params":{"$xmin":"","$xmax":"","$ymin":"","$ymax":""},"docComment":"Defines 2D orthographic mapping of user coordinates onto the current viewport","signature":"swf_ortho2(float $xmin ,float $xmax ,float $ymin ,float $ymax )","inheritdoc":0,"modifier":[],"return":""},"swf_ortho":{"params":{"$xmin":"","$xmax":"","$ymin":"","$ymax":"","$zmin":"","$zmax":""},"docComment":"Defines an orthographic mapping of user coordinates onto the current viewport","signature":"swf_ortho(float $xmin ,float $xmax ,float $ymin ,float $ymax ,float $zmin ,float $zmax )","inheritdoc":0,"modifier":[],"return":""},"swf_perspective":{"params":{"$fovy":"","$aspect":"","$near":"","$far":""},"docComment":"Define a perspective projection transformation","signature":"swf_perspective(float $fovy ,float $aspect ,float $near ,float $far )","inheritdoc":0,"modifier":[],"return":""},"swf_placeobject":{"params":{"$objid":"","$depth":""},"docComment":"Place an object onto the screen","signature":"swf_placeobject(int $objid ,int $depth )","inheritdoc":0,"modifier":[],"return":""},"swf_polarview":{"params":{"$dist":"","$azimuth":"","$incidence":"","$twist":""},"docComment":"Define the viewer's position with polar coordinates","signature":"swf_polarview(float $dist ,float $azimuth ,float $incidence ,float $twist )","inheritdoc":0,"modifier":[],"return":""},"swf_popmatrix":{"params":[],"docComment":"Restore a previous transformation matrix","signature":"swf_popmatrix( )","inheritdoc":0,"modifier":[],"return":""},"swf_posround":{"params":{"$round":""},"docComment":"Enables or Disables the rounding of the translation when objects are placed or moved","signature":"swf_posround(int $round )","inheritdoc":0,"modifier":[],"return":""},"swf_pushmatrix":{"params":[],"docComment":"Push the current transformation matrix back onto the stack","signature":"swf_pushmatrix( )","inheritdoc":0,"modifier":[],"return":""},"swf_removeobject":{"params":{"$depth":""},"docComment":"Remove an object","signature":"swf_removeobject(int $depth )","inheritdoc":0,"modifier":[],"return":""},"swf_rotate":{"params":{"$angle":"","$axis":""},"docComment":"Rotate the current transformation","signature":"swf_rotate(float $angle ,string $axis )","inheritdoc":0,"modifier":[],"return":""},"swf_scale":{"params":{"$x":"","$y":"","$z":""},"docComment":"Scale the current transformation","signature":"swf_scale(float $x ,float $y ,float $z )","inheritdoc":0,"modifier":[],"return":""},"swf_setfont":{"params":{"$fontid":""},"docComment":"Change the current font","signature":"swf_setfont(int $fontid )","inheritdoc":0,"modifier":[],"return":""},"swf_setframe":{"params":{"$framenumber":""},"docComment":"Switch to a specified frame","signature":"swf_setframe(int $framenumber )","inheritdoc":0,"modifier":[],"return":""},"swf_shapearc":{"params":{"$x":"","$y":"","$r":"","$ang1":"","$ang2":""},"docComment":"Draw a circular arc","signature":"swf_shapearc(float $x ,float $y ,float $r ,float $ang1 ,float $ang2 )","inheritdoc":0,"modifier":[],"return":""},"swf_shapecurveto3":{"params":{"$x1":"","$y1":"","$x2":"","$y2":"","$x3":"","$y3":""},"docComment":"Draw a cubic bezier curve","signature":"swf_shapecurveto3(float $x1 ,float $y1 ,float $x2 ,float $y2 ,float $x3 ,float $y3 )","inheritdoc":0,"modifier":[],"return":""},"swf_shapecurveto":{"params":{"$x1":"","$y1":"","$x2":"","$y2":""},"docComment":"Draw a quadratic bezier curve between two points","signature":"swf_shapecurveto(float $x1 ,float $y1 ,float $x2 ,float $y2 )","inheritdoc":0,"modifier":[],"return":""},"swf_shapefillbitmapclip":{"params":{"$bitmapid":""},"docComment":"Set current fill mode to clipped bitmap","signature":"swf_shapefillbitmapclip(int $bitmapid )","inheritdoc":0,"modifier":[],"return":""},"swf_shapefillbitmaptile":{"params":{"$bitmapid":""},"docComment":"Set current fill mode to tiled bitmap","signature":"swf_shapefillbitmaptile(int $bitmapid )","inheritdoc":0,"modifier":[],"return":""},"swf_shapefilloff":{"params":[],"docComment":"Turns off filling","signature":"swf_shapefilloff( )","inheritdoc":0,"modifier":[],"return":""},"swf_shapefillsolid":{"params":{"$r":"","$g":"","$b":"","$a":""},"docComment":"Set the current fill style to the specified color","signature":"swf_shapefillsolid(float $r ,float $g ,float $b ,float $a )","inheritdoc":0,"modifier":[],"return":""},"swf_shapelinesolid":{"params":{"$r":"","$g":"","$b":"","$a":"","$width":""},"docComment":"Set the current line style","signature":"swf_shapelinesolid(float $r ,float $g ,float $b ,float $a ,float $width )","inheritdoc":0,"modifier":[],"return":""},"swf_shapelineto":{"params":{"$x":"","$y":""},"docComment":"Draw a line","signature":"swf_shapelineto(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"swf_shapemoveto":{"params":{"$x":"","$y":""},"docComment":"Move the current position","signature":"swf_shapemoveto(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"swf_showframe":{"params":[],"docComment":"Display the current frame","signature":"swf_showframe( )","inheritdoc":0,"modifier":[],"return":""},"swf_startbutton":{"params":{"$objid":"","$type":""},"docComment":"Start the definition of a button","signature":"swf_startbutton(int $objid ,int $type )","inheritdoc":0,"modifier":[],"return":""},"swf_startdoaction":{"params":[],"docComment":"Start a description of an action list for the current frame","signature":"swf_startdoaction( )","inheritdoc":0,"modifier":[],"return":""},"swf_startshape":{"params":{"$objid":""},"docComment":"Start a complex shape","signature":"swf_startshape(int $objid )","inheritdoc":0,"modifier":[],"return":""},"swf_startsymbol":{"params":{"$objid":""},"docComment":"Define a symbol","signature":"swf_startsymbol(int $objid )","inheritdoc":0,"modifier":[],"return":""},"swf_textwidth":{"params":{"$str":""},"docComment":"Get the width of a string","signature":"swf_textwidth(string $str )","inheritdoc":0,"modifier":[],"return":""},"swf_translate":{"params":{"$x":"","$y":"","$z":""},"docComment":"Translate the current transformations","signature":"swf_translate(float $x ,float $y ,float $z )","inheritdoc":0,"modifier":[],"return":""},"swf_viewport":{"params":{"$xmin":"","$xmax":"","$ymin":"","$ymax":""},"docComment":"Select an area for future drawing","signature":"swf_viewport(float $xmin ,float $xmax ,float $ymin ,float $ymax )","inheritdoc":0,"modifier":[],"return":""},"Swish::__construct":{"params":{"$index_names":""},"docComment":"Construct a Swish object","signature":"Swish::__construct(string $index_names )","inheritdoc":0,"modifier":[],"return":""},"Swish::getMetaList":{"params":{"$index_name":""},"docComment":"Get the list of meta entries for the index","signature":"Swish::getMetaList(string $index_name )","inheritdoc":0,"modifier":[],"return":""},"Swish::getPropertyList":{"params":{"$index_name":""},"docComment":"Get the list of properties for the index","signature":"Swish::getPropertyList(string $index_name )","inheritdoc":0,"modifier":[],"return":""},"Swish::prepare":{"params":{"$query":""},"docComment":"Prepare a search query","signature":"Swish::prepare(string $query )","inheritdoc":0,"modifier":[],"return":""},"Swish::query":{"params":{"$query":""},"docComment":"Execute a query and return results object","signature":"Swish::query(string $query )","inheritdoc":0,"modifier":[],"return":""},"SwishResult::getMetaList":{"params":[],"docComment":"Get a list of meta entries","signature":"SwishResult::getMetaList( )","inheritdoc":0,"modifier":[],"return":""},"SwishResult::stem":{"params":{"$word":""},"docComment":"Stems the given word","signature":"SwishResult::stem(string $word )","inheritdoc":0,"modifier":[],"return":""},"SwishResults::getParsedWords":{"params":{"$index_name":""},"docComment":"Get an array of parsed words","signature":"SwishResults::getParsedWords(string $index_name )","inheritdoc":0,"modifier":[],"return":""},"SwishResults::getRemovedStopwords":{"params":{"$index_name":""},"docComment":"Get an array of stopwords removed from the query","signature":"SwishResults::getRemovedStopwords(string $index_name )","inheritdoc":0,"modifier":[],"return":""},"SwishResults::nextResult":{"params":[],"docComment":"Get the next search result","signature":"SwishResults::nextResult( )","inheritdoc":0,"modifier":[],"return":""},"SwishResults::seekResult":{"params":{"$position":""},"docComment":"Set current seek pointer to the given position","signature":"SwishResults::seekResult(int $position )","inheritdoc":0,"modifier":[],"return":""},"SwishSearch::execute":{"params":{"$query":""},"docComment":"Execute the search and get the results","signature":"SwishSearch::execute(string $query )","inheritdoc":0,"modifier":[],"return":""},"SwishSearch::resetLimit":{"params":[],"docComment":"Reset the search limits","signature":"SwishSearch::resetLimit( )","inheritdoc":0,"modifier":[],"return":""},"SwishSearch::setLimit":{"params":{"$property":"","$low":"","$high":""},"docComment":"Set the search limits","signature":"SwishSearch::setLimit(string $property ,string $low ,string $high )","inheritdoc":0,"modifier":[],"return":""},"SwishSearch::setPhraseDelimiter":{"params":{"$delimiter":""},"docComment":"Set the phrase delimiter","signature":"SwishSearch::setPhraseDelimiter(string $delimiter )","inheritdoc":0,"modifier":[],"return":""},"SwishSearch::setSort":{"params":{"$sort":""},"docComment":"Set the sort order","signature":"SwishSearch::setSort(string $sort )","inheritdoc":0,"modifier":[],"return":""},"SwishSearch::setStructure":{"params":{"$structure":""},"docComment":"Set the structure flag in the search object","signature":"SwishSearch::setStructure(int $structure )","inheritdoc":0,"modifier":[],"return":""},"is_tainted":{"params":{"$string":""},"docComment":"Checks whether a string is tainted","signature":"is_tainted(string $string )","inheritdoc":0,"modifier":[],"return":""},"taint":{"params":{"&$string":"","$...":""},"docComment":"Taint a string","signature":"taint(string &$string ,string $... )","inheritdoc":0,"modifier":[],"return":""},"untaint":{"params":{"&$string":"","$...":""},"docComment":"Untaint strings","signature":"untaint(string &$string ,string $... )","inheritdoc":0,"modifier":[],"return":""},"tcpwrap_check":{"params":{"$daemon":"","$address":"","$user":"","$nodns":""},"docComment":"Performs a tcpwrap check","signature":"tcpwrap_check(string $daemon ,string $address ,string $user ,[bool $nodns] )","inheritdoc":0,"modifier":[],"return":""},"trader_acos":{"params":{"$real":""},"docComment":"Vector Trigonometric ACos","signature":"trader_acos(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_ad":{"params":{"$high":"","$low":"","$close":"","$volume":""},"docComment":"Chaikin A\/D Line","signature":"trader_ad(array $high ,array $low ,array $close ,array $volume )","inheritdoc":0,"modifier":[],"return":""},"trader_add":{"params":{"$real0":"","$real1":""},"docComment":"Vector Arithmetic Add","signature":"trader_add(array $real0 ,array $real1 )","inheritdoc":0,"modifier":[],"return":""},"trader_adosc":{"params":{"$high":"","$low":"","$close":"","$volume":"","$fastPeriod":"","$slowPeriod":""},"docComment":"Chaikin A\/D Oscillator","signature":"trader_adosc(array $high ,array $low ,array $close ,array $volume ,integer $fastPeriod ,integer $slowPeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_adx":{"params":{"$high":"","$low":"","$close":"","$timePeriod":""},"docComment":"Average Directional Movement Index","signature":"trader_adx(array $high ,array $low ,array $close ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_adxr":{"params":{"$high":"","$low":"","$close":"","$timePeriod":""},"docComment":"Average Directional Movement Index Rating","signature":"trader_adxr(array $high ,array $low ,array $close ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_apo":{"params":{"$real":"","$fastPeriod":"","$slowPeriod":"","$mAType":""},"docComment":"Absolute Price Oscillator","signature":"trader_apo(array $real ,integer $fastPeriod ,integer $slowPeriod ,integer $mAType )","inheritdoc":0,"modifier":[],"return":""},"trader_aroon":{"params":{"$high":"","$low":"","$timePeriod":""},"docComment":"Aroon","signature":"trader_aroon(array $high ,array $low ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_aroonosc":{"params":{"$high":"","$low":"","$timePeriod":""},"docComment":"Aroon Oscillator","signature":"trader_aroonosc(array $high ,array $low ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_asin":{"params":{"$real":""},"docComment":"Vector Trigonometric ASin","signature":"trader_asin(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_atan":{"params":{"$real":""},"docComment":"Vector Trigonometric ATan","signature":"trader_atan(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_atr":{"params":{"$high":"","$low":"","$close":"","$timePeriod":""},"docComment":"Average True Range","signature":"trader_atr(array $high ,array $low ,array $close ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_avgprice":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Average Price","signature":"trader_avgprice(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_bbands":{"params":{"$real":"","$timePeriod":"","$nbDevUp":"","$nbDevDn":"","$mAType":""},"docComment":"Bollinger Bands","signature":"trader_bbands(array $real ,integer $timePeriod ,float $nbDevUp ,float $nbDevDn ,integer $mAType )","inheritdoc":0,"modifier":[],"return":""},"trader_beta":{"params":{"$real0":"","$real1":"","$timePeriod":""},"docComment":"Beta","signature":"trader_beta(array $real0 ,array $real1 ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_bop":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Balance Of Power","signature":"trader_bop(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cci":{"params":{"$high":"","$low":"","$close":"","$timePeriod":""},"docComment":"Commodity Channel Index","signature":"trader_cci(array $high ,array $low ,array $close ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_cdl2crows":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Two Crows","signature":"trader_cdl2crows(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdl3blackcrows":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Three Black Crows","signature":"trader_cdl3blackcrows(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdl3inside":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Three Inside Up\/Down","signature":"trader_cdl3inside(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdl3linestrike":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Three-Line Strike","signature":"trader_cdl3linestrike(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdl3outside":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Three Outside Up\/Down","signature":"trader_cdl3outside(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdl3starsinsouth":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Three Stars In The South","signature":"trader_cdl3starsinsouth(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdl3whitesoldiers":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Three Advancing White Soldiers","signature":"trader_cdl3whitesoldiers(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlabandonedbaby":{"params":{"$open":"","$high":"","$low":"","$close":"","$penetration":""},"docComment":"Abandoned Baby","signature":"trader_cdlabandonedbaby(array $open ,array $high ,array $low ,array $close ,float $penetration )","inheritdoc":0,"modifier":[],"return":""},"trader_cdladvanceblock":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Advance Block","signature":"trader_cdladvanceblock(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlbelthold":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Belt-hold","signature":"trader_cdlbelthold(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlbreakaway":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Breakaway","signature":"trader_cdlbreakaway(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlclosingmarubozu":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Closing Marubozu","signature":"trader_cdlclosingmarubozu(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlconcealbabyswall":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Concealing Baby Swallow","signature":"trader_cdlconcealbabyswall(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlcounterattack":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Counterattack","signature":"trader_cdlcounterattack(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdldarkcloudcover":{"params":{"$open":"","$high":"","$low":"","$close":"","$penetration":""},"docComment":"Dark Cloud Cover","signature":"trader_cdldarkcloudcover(array $open ,array $high ,array $low ,array $close ,float $penetration )","inheritdoc":0,"modifier":[],"return":""},"trader_cdldoji":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Doji","signature":"trader_cdldoji(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdldojistar":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Doji Star","signature":"trader_cdldojistar(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdldragonflydoji":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Dragonfly Doji","signature":"trader_cdldragonflydoji(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlengulfing":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Engulfing Pattern","signature":"trader_cdlengulfing(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdleveningdojistar":{"params":{"$open":"","$high":"","$low":"","$close":"","$penetration":""},"docComment":"Evening Doji Star","signature":"trader_cdleveningdojistar(array $open ,array $high ,array $low ,array $close ,float $penetration )","inheritdoc":0,"modifier":[],"return":""},"trader_cdleveningstar":{"params":{"$open":"","$high":"","$low":"","$close":"","$penetration":""},"docComment":"Evening Star","signature":"trader_cdleveningstar(array $open ,array $high ,array $low ,array $close ,float $penetration )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlgapsidesidewhite":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Up\/Down-gap side-by-side white lines","signature":"trader_cdlgapsidesidewhite(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlgravestonedoji":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Gravestone Doji","signature":"trader_cdlgravestonedoji(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlhammer":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Hammer","signature":"trader_cdlhammer(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlhangingman":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Hanging Man","signature":"trader_cdlhangingman(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlharami":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Harami Pattern","signature":"trader_cdlharami(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlharamicross":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Harami Cross Pattern","signature":"trader_cdlharamicross(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlhighwave":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"High-Wave Candle","signature":"trader_cdlhighwave(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlhikkake":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Hikkake Pattern","signature":"trader_cdlhikkake(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlhikkakemod":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Modified Hikkake Pattern","signature":"trader_cdlhikkakemod(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlhomingpigeon":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Homing Pigeon","signature":"trader_cdlhomingpigeon(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlidentical3crows":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Identical Three Crows","signature":"trader_cdlidentical3crows(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlinneck":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"In-Neck Pattern","signature":"trader_cdlinneck(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlinvertedhammer":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Inverted Hammer","signature":"trader_cdlinvertedhammer(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlkicking":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Kicking","signature":"trader_cdlkicking(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlkickingbylength":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Kicking - bull\/bear determined by the longer marubozu","signature":"trader_cdlkickingbylength(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlladderbottom":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Ladder Bottom","signature":"trader_cdlladderbottom(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdllongleggeddoji":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Long Legged Doji","signature":"trader_cdllongleggeddoji(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdllongline":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Long Line Candle","signature":"trader_cdllongline(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlmarubozu":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Marubozu","signature":"trader_cdlmarubozu(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlmatchinglow":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Matching Low","signature":"trader_cdlmatchinglow(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlmathold":{"params":{"$open":"","$high":"","$low":"","$close":"","$penetration":""},"docComment":"Mat Hold","signature":"trader_cdlmathold(array $open ,array $high ,array $low ,array $close ,float $penetration )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlmorningdojistar":{"params":{"$open":"","$high":"","$low":"","$close":"","$penetration":""},"docComment":"Morning Doji Star","signature":"trader_cdlmorningdojistar(array $open ,array $high ,array $low ,array $close ,float $penetration )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlmorningstar":{"params":{"$open":"","$high":"","$low":"","$close":"","$penetration":""},"docComment":"Morning Star","signature":"trader_cdlmorningstar(array $open ,array $high ,array $low ,array $close ,float $penetration )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlonneck":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"On-Neck Pattern","signature":"trader_cdlonneck(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlpiercing":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Piercing Pattern","signature":"trader_cdlpiercing(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlrickshawman":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Rickshaw Man","signature":"trader_cdlrickshawman(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlrisefall3methods":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Rising\/Falling Three Methods","signature":"trader_cdlrisefall3methods(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlseparatinglines":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Separating Lines","signature":"trader_cdlseparatinglines(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlshootingstar":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Shooting Star","signature":"trader_cdlshootingstar(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlshortline":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Short Line Candle","signature":"trader_cdlshortline(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlspinningtop":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Spinning Top","signature":"trader_cdlspinningtop(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlstalledpattern":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Stalled Pattern","signature":"trader_cdlstalledpattern(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlsticksandwich":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Stick Sandwich","signature":"trader_cdlsticksandwich(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdltakuri":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Takuri (Dragonfly Doji with very long lower shadow)","signature":"trader_cdltakuri(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdltasukigap":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Tasuki Gap","signature":"trader_cdltasukigap(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlthrusting":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Thrusting Pattern","signature":"trader_cdlthrusting(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdltristar":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Tristar Pattern","signature":"trader_cdltristar(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlunique3river":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Unique 3 River","signature":"trader_cdlunique3river(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlupsidegap2crows":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Upside Gap Two Crows","signature":"trader_cdlupsidegap2crows(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_cdlxsidegap3methods":{"params":{"$open":"","$high":"","$low":"","$close":""},"docComment":"Upside\/Downside Gap Three Methods","signature":"trader_cdlxsidegap3methods(array $open ,array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_ceil":{"params":{"$real":""},"docComment":"Vector Ceil","signature":"trader_ceil(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_cmo":{"params":{"$real":"","$timePeriod":""},"docComment":"Chande Momentum Oscillator","signature":"trader_cmo(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_correl":{"params":{"$real0":"","$real1":"","$timePeriod":""},"docComment":"Pearson's Correlation Coefficient (r)","signature":"trader_correl(array $real0 ,array $real1 ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_cos":{"params":{"$real":""},"docComment":"Vector Trigonometric Cos","signature":"trader_cos(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_cosh":{"params":{"$real":""},"docComment":"Vector Trigonometric Cosh","signature":"trader_cosh(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_dema":{"params":{"$real":"","$timePeriod":""},"docComment":"Double Exponential Moving Average","signature":"trader_dema(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_div":{"params":{"$real0":"","$real1":""},"docComment":"Vector Arithmetic Div","signature":"trader_div(array $real0 ,array $real1 )","inheritdoc":0,"modifier":[],"return":""},"trader_dx":{"params":{"$high":"","$low":"","$close":"","$timePeriod":""},"docComment":"Directional Movement Index","signature":"trader_dx(array $high ,array $low ,array $close ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_ema":{"params":{"$real":"","$timePeriod":""},"docComment":"Exponential Moving Average","signature":"trader_ema(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_errno":{"params":[],"docComment":"Get error code","signature":"trader_errno( )","inheritdoc":0,"modifier":[],"return":""},"trader_exp":{"params":{"$real":""},"docComment":"Vector Arithmetic Exp","signature":"trader_exp(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_floor":{"params":{"$real":""},"docComment":"Vector Floor","signature":"trader_floor(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_get_compat":{"params":[],"docComment":"Get compatibility mode","signature":"trader_get_compat( )","inheritdoc":0,"modifier":[],"return":""},"trader_get_unstable_period":{"params":{"$functionId":""},"docComment":"Get unstable period","signature":"trader_get_unstable_period(integer $functionId )","inheritdoc":0,"modifier":[],"return":""},"trader_ht_dcperiod":{"params":{"$real":""},"docComment":"Hilbert Transform - Dominant Cycle Period","signature":"trader_ht_dcperiod(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_ht_dcphase":{"params":{"$real":""},"docComment":"Hilbert Transform - Dominant Cycle Phase","signature":"trader_ht_dcphase(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_ht_phasor":{"params":{"$real":""},"docComment":"Hilbert Transform - Phasor Components","signature":"trader_ht_phasor(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_ht_sine":{"params":{"$real":""},"docComment":"Hilbert Transform - SineWave","signature":"trader_ht_sine(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_ht_trendline":{"params":{"$real":""},"docComment":"Hilbert Transform - Instantaneous Trendline","signature":"trader_ht_trendline(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_ht_trendmode":{"params":{"$real":""},"docComment":"Hilbert Transform - Trend vs Cycle Mode","signature":"trader_ht_trendmode(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_kama":{"params":{"$real":"","$timePeriod":""},"docComment":"Kaufman Adaptive Moving Average","signature":"trader_kama(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_linearreg_angle":{"params":{"$real":"","$timePeriod":""},"docComment":"Linear Regression Angle","signature":"trader_linearreg_angle(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_linearreg_intercept":{"params":{"$real":"","$timePeriod":""},"docComment":"Linear Regression Intercept","signature":"trader_linearreg_intercept(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_linearreg_slope":{"params":{"$real":"","$timePeriod":""},"docComment":"Linear Regression Slope","signature":"trader_linearreg_slope(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_linearreg":{"params":{"$real":"","$timePeriod":""},"docComment":"Linear Regression","signature":"trader_linearreg(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_ln":{"params":{"$real":""},"docComment":"Vector Log Natural","signature":"trader_ln(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_log10":{"params":{"$real":""},"docComment":"Vector Log10","signature":"trader_log10(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_ma":{"params":{"$real":"","$timePeriod":"","$mAType":""},"docComment":"Moving average","signature":"trader_ma(array $real ,integer $timePeriod ,integer $mAType )","inheritdoc":0,"modifier":[],"return":""},"trader_macd":{"params":{"$real":"","$fastPeriod":"","$slowPeriod":"","$signalPeriod":""},"docComment":"Moving Average Convergence\/Divergence","signature":"trader_macd(array $real ,integer $fastPeriod ,integer $slowPeriod ,integer $signalPeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_macdext":{"params":{"$real":"","$fastPeriod":"","$fastMAType":"","$slowPeriod":"","$slowMAType":"","$signalPeriod":"","$signalMAType":""},"docComment":"MACD with controllable MA type","signature":"trader_macdext(array $real ,integer $fastPeriod ,integer $fastMAType ,integer $slowPeriod ,integer $slowMAType ,integer $signalPeriod ,integer $signalMAType )","inheritdoc":0,"modifier":[],"return":""},"trader_macdfix":{"params":{"$real":"","$signalPeriod":""},"docComment":"Moving Average Convergence\/Divergence Fix 12\/26","signature":"trader_macdfix(array $real ,integer $signalPeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_mama":{"params":{"$real":"","$fastLimit":"","$slowLimit":""},"docComment":"MESA Adaptive Moving Average","signature":"trader_mama(array $real ,float $fastLimit ,float $slowLimit )","inheritdoc":0,"modifier":[],"return":""},"trader_mavp":{"params":{"$real":"","$periods":"","$minPeriod":"","$maxPeriod":"","$mAType":""},"docComment":"Moving average with variable period","signature":"trader_mavp(array $real ,array $periods ,integer $minPeriod ,integer $maxPeriod ,integer $mAType )","inheritdoc":0,"modifier":[],"return":""},"trader_max":{"params":{"$real":"","$timePeriod":""},"docComment":"Highest value over a specified period","signature":"trader_max(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_maxindex":{"params":{"$real":"","$timePeriod":""},"docComment":"Index of highest value over a specified period","signature":"trader_maxindex(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_medprice":{"params":{"$high":"","$low":""},"docComment":"Median Price","signature":"trader_medprice(array $high ,array $low )","inheritdoc":0,"modifier":[],"return":""},"trader_mfi":{"params":{"$high":"","$low":"","$close":"","$volume":"","$timePeriod":""},"docComment":"Money Flow Index","signature":"trader_mfi(array $high ,array $low ,array $close ,array $volume ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_midpoint":{"params":{"$real":"","$timePeriod":""},"docComment":"MidPoint over period","signature":"trader_midpoint(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_midprice":{"params":{"$high":"","$low":"","$timePeriod":""},"docComment":"Midpoint Price over period","signature":"trader_midprice(array $high ,array $low ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_min":{"params":{"$real":"","$timePeriod":""},"docComment":"Lowest value over a specified period","signature":"trader_min(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_minindex":{"params":{"$real":"","$timePeriod":""},"docComment":"Index of lowest value over a specified period","signature":"trader_minindex(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_minmax":{"params":{"$real":"","$timePeriod":""},"docComment":"Lowest and highest values over a specified period","signature":"trader_minmax(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_minmaxindex":{"params":{"$real":"","$timePeriod":""},"docComment":"Indexes of lowest and highest values over a specified period","signature":"trader_minmaxindex(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_minus_di":{"params":{"$high":"","$low":"","$close":"","$timePeriod":""},"docComment":"Minus Directional Indicator","signature":"trader_minus_di(array $high ,array $low ,array $close ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_minus_dm":{"params":{"$high":"","$low":"","$timePeriod":""},"docComment":"Minus Directional Movement","signature":"trader_minus_dm(array $high ,array $low ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_mom":{"params":{"$real":"","$timePeriod":""},"docComment":"Momentum","signature":"trader_mom(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_mult":{"params":{"$real0":"","$real1":""},"docComment":"Vector Arithmetic Mult","signature":"trader_mult(array $real0 ,array $real1 )","inheritdoc":0,"modifier":[],"return":""},"trader_natr":{"params":{"$high":"","$low":"","$close":"","$timePeriod":""},"docComment":"Normalized Average True Range","signature":"trader_natr(array $high ,array $low ,array $close ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_obv":{"params":{"$real":"","$volume":""},"docComment":"On Balance Volume","signature":"trader_obv(array $real ,array $volume )","inheritdoc":0,"modifier":[],"return":""},"trader_plus_di":{"params":{"$high":"","$low":"","$close":"","$timePeriod":""},"docComment":"Plus Directional Indicator","signature":"trader_plus_di(array $high ,array $low ,array $close ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_plus_dm":{"params":{"$high":"","$low":"","$timePeriod":""},"docComment":"Plus Directional Movement","signature":"trader_plus_dm(array $high ,array $low ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_ppo":{"params":{"$real":"","$fastPeriod":"","$slowPeriod":"","$mAType":""},"docComment":"Percentage Price Oscillator","signature":"trader_ppo(array $real ,integer $fastPeriod ,integer $slowPeriod ,integer $mAType )","inheritdoc":0,"modifier":[],"return":""},"trader_roc":{"params":{"$real":"","$timePeriod":""},"docComment":"Rate of change : ((price\/prevPrice)-1)*100","signature":"trader_roc(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_rocp":{"params":{"$real":"","$timePeriod":""},"docComment":"Rate of change Percentage: (price-prevPrice)\/prevPrice","signature":"trader_rocp(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_rocr100":{"params":{"$real":"","$timePeriod":""},"docComment":"Rate of change ratio 100 scale: (price\/prevPrice)*100","signature":"trader_rocr100(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_rocr":{"params":{"$real":"","$timePeriod":""},"docComment":"Rate of change ratio: (price\/prevPrice)","signature":"trader_rocr(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_rsi":{"params":{"$real":"","$timePeriod":""},"docComment":"Relative Strength Index","signature":"trader_rsi(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_sar":{"params":{"$high":"","$low":"","$acceleration":"","$maximum":""},"docComment":"Parabolic SAR","signature":"trader_sar(array $high ,array $low ,float $acceleration ,float $maximum )","inheritdoc":0,"modifier":[],"return":""},"trader_sarext":{"params":{"$high":"","$low":"","$startValue":"","$offsetOnReverse":"","$accelerationInitLong":"","$accelerationLong":"","$accelerationMaxLong":"","$accelerationInitShort":"","$accelerationShort":"","$accelerationMaxShort":""},"docComment":"Parabolic SAR - Extended","signature":"trader_sarext(array $high ,array $low ,float $startValue ,float $offsetOnReverse ,float $accelerationInitLong ,float $accelerationLong ,float $accelerationMaxLong ,float $accelerationInitShort ,float $accelerationShort ,float $accelerationMaxShort )","inheritdoc":0,"modifier":[],"return":""},"trader_set_compat":{"params":{"$compatId":""},"docComment":"Set compatibility mode","signature":"trader_set_compat(integer $compatId )","inheritdoc":0,"modifier":[],"return":""},"trader_set_unstable_period":{"params":{"$functionId":"","$timePeriod":""},"docComment":"Set unstable period","signature":"trader_set_unstable_period(integer $functionId ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_sin":{"params":{"$real":""},"docComment":"Vector Trigonometric Sin","signature":"trader_sin(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_sinh":{"params":{"$real":""},"docComment":"Vector Trigonometric Sinh","signature":"trader_sinh(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_sma":{"params":{"$real":"","$timePeriod":""},"docComment":"Simple Moving Average","signature":"trader_sma(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_sqrt":{"params":{"$real":""},"docComment":"Vector Square Root","signature":"trader_sqrt(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_stddev":{"params":{"$real":"","$timePeriod":"","$nbDev":""},"docComment":"Standard Deviation","signature":"trader_stddev(array $real ,integer $timePeriod ,float $nbDev )","inheritdoc":0,"modifier":[],"return":""},"trader_stoch":{"params":{"$high":"","$low":"","$close":"","$fastK_Period":"","$slowK_Period":"","$slowK_MAType":"","$slowD_Period":"","$slowD_MAType":""},"docComment":"Stochastic","signature":"trader_stoch(array $high ,array $low ,array $close ,integer $fastK_Period ,integer $slowK_Period ,integer $slowK_MAType ,integer $slowD_Period ,integer $slowD_MAType )","inheritdoc":0,"modifier":[],"return":""},"trader_stochf":{"params":{"$high":"","$low":"","$close":"","$fastK_Period":"","$fastD_Period":"","$fastD_MAType":""},"docComment":"Stochastic Fast","signature":"trader_stochf(array $high ,array $low ,array $close ,integer $fastK_Period ,integer $fastD_Period ,integer $fastD_MAType )","inheritdoc":0,"modifier":[],"return":""},"trader_stochrsi":{"params":{"$real":"","$timePeriod":"","$fastK_Period":"","$fastD_Period":"","$fastD_MAType":""},"docComment":"Stochastic Relative Strength Index","signature":"trader_stochrsi(array $real ,integer $timePeriod ,integer $fastK_Period ,integer $fastD_Period ,integer $fastD_MAType )","inheritdoc":0,"modifier":[],"return":""},"trader_sub":{"params":{"$real0":"","$real1":""},"docComment":"Vector Arithmetic Subtraction","signature":"trader_sub(array $real0 ,array $real1 )","inheritdoc":0,"modifier":[],"return":""},"trader_sum":{"params":{"$real":"","$timePeriod":""},"docComment":"Summation","signature":"trader_sum(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_t3":{"params":{"$real":"","$timePeriod":"","$vFactor":""},"docComment":"Triple Exponential Moving Average (T3)","signature":"trader_t3(array $real ,integer $timePeriod ,float $vFactor )","inheritdoc":0,"modifier":[],"return":""},"trader_tan":{"params":{"$real":""},"docComment":"Vector Trigonometric Tan","signature":"trader_tan(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_tanh":{"params":{"$real":""},"docComment":"Vector Trigonometric Tanh","signature":"trader_tanh(array $real )","inheritdoc":0,"modifier":[],"return":""},"trader_tema":{"params":{"$real":"","$timePeriod":""},"docComment":"Triple Exponential Moving Average","signature":"trader_tema(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_trange":{"params":{"$high":"","$low":"","$close":""},"docComment":"True Range","signature":"trader_trange(array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_trima":{"params":{"$real":"","$timePeriod":""},"docComment":"Triangular Moving Average","signature":"trader_trima(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_trix":{"params":{"$real":"","$timePeriod":""},"docComment":"1-day Rate-Of-Change (ROC) of a Triple Smooth EMA","signature":"trader_trix(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_tsf":{"params":{"$real":"","$timePeriod":""},"docComment":"Time Series Forecast","signature":"trader_tsf(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_typprice":{"params":{"$high":"","$low":"","$close":""},"docComment":"Typical Price","signature":"trader_typprice(array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_ultosc":{"params":{"$high":"","$low":"","$close":"","$timePeriod1":"","$timePeriod2":"","$timePeriod3":""},"docComment":"Ultimate Oscillator","signature":"trader_ultosc(array $high ,array $low ,array $close ,integer $timePeriod1 ,integer $timePeriod2 ,integer $timePeriod3 )","inheritdoc":0,"modifier":[],"return":""},"trader_var":{"params":{"$real":"","$timePeriod":"","$nbDev":""},"docComment":"Variance","signature":"trader_var(array $real ,integer $timePeriod ,float $nbDev )","inheritdoc":0,"modifier":[],"return":""},"trader_wclprice":{"params":{"$high":"","$low":"","$close":""},"docComment":"Weighted Close Price","signature":"trader_wclprice(array $high ,array $low ,array $close )","inheritdoc":0,"modifier":[],"return":""},"trader_willr":{"params":{"$high":"","$low":"","$close":"","$timePeriod":""},"docComment":"Williams' %R","signature":"trader_willr(array $high ,array $low ,array $close ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"trader_wma":{"params":{"$real":"","$timePeriod":""},"docComment":"Weighted Moving Average","signature":"trader_wma(array $real ,integer $timePeriod )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_add_alias_domain_ex":{"params":{"$olddomain":"","$newdomain":""},"docComment":"Add alias to an existing virtual domain","signature":"vpopmail_add_alias_domain_ex(string $olddomain ,string $newdomain )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_add_alias_domain":{"params":{"$domain":"","$aliasdomain":""},"docComment":"Add an alias for a virtual domain","signature":"vpopmail_add_alias_domain(string $domain ,string $aliasdomain )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_add_domain_ex":{"params":{"$domain":"","$passwd":"","$quota":"","$bounce":"","$apop":""},"docComment":"Add a new virtual domain","signature":"vpopmail_add_domain_ex(string $domain ,string $passwd ,string $quota ,string $bounce ,bool $apop )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_add_domain":{"params":{"$domain":"","$dir":"","$uid":"","$gid":""},"docComment":"Add a new virtual domain","signature":"vpopmail_add_domain(string $domain ,string $dir ,int $uid ,int $gid )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_add_user":{"params":{"$user":"","$domain":"","$password":"","$gecos":"","$apop":""},"docComment":"Add a new user to the specified virtual domain","signature":"vpopmail_add_user(string $user ,string $domain ,string $password ,string $gecos ,bool $apop )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_alias_add":{"params":{"$user":"","$domain":"","$alias":""},"docComment":"Insert a virtual alias","signature":"vpopmail_alias_add(string $user ,string $domain ,string $alias )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_alias_del_domain":{"params":{"$domain":""},"docComment":"Deletes all virtual aliases of a domain","signature":"vpopmail_alias_del_domain(string $domain )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_alias_del":{"params":{"$user":"","$domain":""},"docComment":"Deletes all virtual aliases of a user","signature":"vpopmail_alias_del(string $user ,string $domain )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_alias_get_all":{"params":{"$domain":""},"docComment":"Get all lines of an alias for a domain","signature":"vpopmail_alias_get_all(string $domain )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_alias_get":{"params":{"$alias":"","$domain":""},"docComment":"Get all lines of an alias for a domain","signature":"vpopmail_alias_get(string $alias ,string $domain )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_auth_user":{"params":{"$user":"","$domain":"","$password":"","$apop":""},"docComment":"Attempt to validate a username\/domain\/password","signature":"vpopmail_auth_user(string $user ,string $domain ,string $password ,string $apop )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_del_domain_ex":{"params":{"$domain":""},"docComment":"Delete a virtual domain","signature":"vpopmail_del_domain_ex(string $domain )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_del_domain":{"params":{"$domain":""},"docComment":"Delete a virtual domain","signature":"vpopmail_del_domain(string $domain )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_del_user":{"params":{"$user":"","$domain":""},"docComment":"Delete a user from a virtual domain","signature":"vpopmail_del_user(string $user ,string $domain )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_error":{"params":[],"docComment":"Get text message for last vpopmail error","signature":"vpopmail_error( )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_passwd":{"params":{"$user":"","$domain":"","$password":"","$apop":""},"docComment":"Change a virtual user's password","signature":"vpopmail_passwd(string $user ,string $domain ,string $password ,bool $apop )","inheritdoc":0,"modifier":[],"return":""},"vpopmail_set_user_quota":{"params":{"$user":"","$domain":"","$quota":""},"docComment":"Sets a virtual user's quota","signature":"vpopmail_set_user_quota(string $user ,string $domain ,string $quota )","inheritdoc":0,"modifier":[],"return":""},"w32api_deftype":{"params":{"$typename":"","$member1_type":"","$member1_name":"","$...":""},"docComment":"Defines a type for use with other w32api_functions","signature":"w32api_deftype(string $typename ,string $member1_type ,string $member1_name ,string $... ,string $... )","inheritdoc":0,"modifier":[],"return":""},"w32api_init_dtype":{"params":{"$typename":"","$value":"","$...":""},"docComment":"Creates an instance of the data type typename and fills it with the values passed","signature":"w32api_init_dtype(string $typename ,mixed $value ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"w32api_invoke_function":{"params":{"$funcname":"","$argument":"","$...":""},"docComment":"Invokes function funcname with the arguments passed after the function name","signature":"w32api_invoke_function(string $funcname ,mixed $argument ,mixed $... )","inheritdoc":0,"modifier":[],"return":""},"w32api_register_function":{"params":{"$library":"","$function_name":"","$return_type":""},"docComment":"Registers function function_name from library with PHP","signature":"w32api_register_function(string $library ,string $function_name ,string $return_type )","inheritdoc":0,"modifier":[],"return":""},"w32api_set_call_method":{"params":{"$method":""},"docComment":"Sets the calling method used","signature":"w32api_set_call_method(int $method )","inheritdoc":0,"modifier":[],"return":""},"win32_ps_list_procs":{"params":[],"docComment":"List running processes","signature":"win32_ps_list_procs( )","inheritdoc":0,"modifier":[],"return":""},"win32_ps_stat_mem":{"params":[],"docComment":"Stat memory utilization","signature":"win32_ps_stat_mem( )","inheritdoc":0,"modifier":[],"return":""},"win32_ps_stat_proc":{"params":{"$pid":""},"docComment":"Stat process","signature":"win32_ps_stat_proc([int $pid] )","inheritdoc":0,"modifier":[],"return":""},"win32_continue_service":{"params":{"$servicename":"","$machine":""},"docComment":"Resumes a paused service","signature":"win32_continue_service(string $servicename ,string $machine )","inheritdoc":0,"modifier":[],"return":""},"win32_create_service":{"params":{"$details":"","$machine":""},"docComment":"Creates a new service entry in the SCM database","signature":"win32_create_service(array $details ,string $machine )","inheritdoc":0,"modifier":[],"return":""},"win32_delete_service":{"params":{"$servicename":"","$machine":""},"docComment":"Deletes a service entry from the SCM database","signature":"win32_delete_service(string $servicename ,string $machine )","inheritdoc":0,"modifier":[],"return":""},"win32_get_last_control_message":{"params":[],"docComment":"Returns the last control message that was sent to this service","signature":"win32_get_last_control_message( )","inheritdoc":0,"modifier":[],"return":""},"win32_pause_service":{"params":{"$servicename":"","$machine":""},"docComment":"Pauses a service","signature":"win32_pause_service(string $servicename ,string $machine )","inheritdoc":0,"modifier":[],"return":""},"win32_query_service_status":{"params":{"$servicename":"","$machine":""},"docComment":"Queries the status of a service","signature":"win32_query_service_status(string $servicename ,string $machine )","inheritdoc":0,"modifier":[],"return":""},"win32_set_service_status":{"params":{"$status":"","$checkpoint":""},"docComment":"Update the service status","signature":"win32_set_service_status(int $status ,[int $checkpoint] )","inheritdoc":0,"modifier":[],"return":""},"win32_start_service_ctrl_dispatcher":{"params":{"$name":""},"docComment":"Registers the script with the SCM, so that it can act as the service with the given name","signature":"win32_start_service_ctrl_dispatcher(string $name )","inheritdoc":0,"modifier":[],"return":""},"win32_start_service":{"params":{"$servicename":"","$machine":""},"docComment":"Starts a service","signature":"win32_start_service(string $servicename ,string $machine )","inheritdoc":0,"modifier":[],"return":""},"win32_stop_service":{"params":{"$servicename":"","$machine":""},"docComment":"Stops a service","signature":"win32_stop_service(string $servicename ,string $machine )","inheritdoc":0,"modifier":[],"return":""},"wincache_fcache_fileinfo":{"params":{"$summaryonly":""},"docComment":"\n   Retrieves information about files cached in the file cache\n  ","signature":"wincache_fcache_fileinfo([bool $summaryonly] )","inheritdoc":0,"modifier":[],"return":""},"wincache_fcache_meminfo":{"params":[],"docComment":"\n   Retrieves information about file cache memory usage\n  ","signature":"wincache_fcache_meminfo( )","inheritdoc":0,"modifier":[],"return":""},"wincache_lock":{"params":{"$key":"","$isglobal":""},"docComment":"\n   Acquires an exclusive lock on a given key\n  ","signature":"wincache_lock(string $key ,[bool $isglobal] )","inheritdoc":0,"modifier":[],"return":""},"wincache_ocache_fileinfo":{"params":{"$summaryonly":""},"docComment":"\n   Retrieves information about files cached in the opcode cache\n  ","signature":"wincache_ocache_fileinfo([bool $summaryonly] )","inheritdoc":0,"modifier":[],"return":""},"wincache_ocache_meminfo":{"params":[],"docComment":"\n   Retrieves information about opcode cache memory usage\n  ","signature":"wincache_ocache_meminfo( )","inheritdoc":0,"modifier":[],"return":""},"wincache_refresh_if_changed":{"params":{"$files":""},"docComment":"\n   Refreshes the cache entries for the cached files\n  ","signature":"wincache_refresh_if_changed(array $files )","inheritdoc":0,"modifier":[],"return":""},"wincache_rplist_fileinfo":{"params":{"$summaryonly":""},"docComment":"\n   Retrieves information about resolve file path cache\n  ","signature":"wincache_rplist_fileinfo([bool $summaryonly] )","inheritdoc":0,"modifier":[],"return":""},"wincache_rplist_meminfo":{"params":[],"docComment":"\n   Retrieves information about memory usage by the resolve file path cache\n  ","signature":"wincache_rplist_meminfo( )","inheritdoc":0,"modifier":[],"return":""},"wincache_scache_info":{"params":{"$summaryonly":""},"docComment":"\n   Retrieves information about files cached in the session cache\n  ","signature":"wincache_scache_info([bool $summaryonly] )","inheritdoc":0,"modifier":[],"return":""},"wincache_scache_meminfo":{"params":[],"docComment":"\n   Retrieves information about session cache memory usage\n  ","signature":"wincache_scache_meminfo( )","inheritdoc":0,"modifier":[],"return":""},"wincache_ucache_add":{"params":{"$key":"","$value":"","$ttl":"","$values":"","$unused":""},"docComment":"\n   Adds a variable in user cache only if variable does not already exist in the cache\n  ","signature":"wincache_ucache_add(array $values ,mixed $unused ,[int $ttl] )","inheritdoc":0,"modifier":[],"return":""},"wincache_ucache_cas":{"params":{"$key":"","$old_value":"","$new_value":""},"docComment":"\n   Compares the variable with old value and assigns new value to it\n  ","signature":"wincache_ucache_cas(string $key ,int $old_value ,int $new_value )","inheritdoc":0,"modifier":[],"return":""},"wincache_ucache_clear":{"params":[],"docComment":"\n   Deletes entire content of the user cache\n  ","signature":"wincache_ucache_clear( )","inheritdoc":0,"modifier":[],"return":""},"wincache_ucache_dec":{"params":{"$key":"","$dec_by":"","&$success":""},"docComment":"\n   Decrements the value associated with the key\n  ","signature":"wincache_ucache_dec(string $key ,[int $dec_by] ,bool &$success )","inheritdoc":0,"modifier":[],"return":""},"wincache_ucache_delete":{"params":{"$key":""},"docComment":"\n   Deletes variables from the user cache\n  ","signature":"wincache_ucache_delete(mixed $key )","inheritdoc":0,"modifier":[],"return":""},"wincache_ucache_exists":{"params":{"$key":""},"docComment":"\n   Checks if a variable exists in the user cache\n  ","signature":"wincache_ucache_exists(string $key )","inheritdoc":0,"modifier":[],"return":""},"wincache_ucache_get":{"params":{"$key":"","&$success":""},"docComment":"\n   Gets a variable stored in the user cache\n  ","signature":"wincache_ucache_get(mixed $key ,bool &$success )","inheritdoc":0,"modifier":[],"return":""},"wincache_ucache_inc":{"params":{"$key":"","$inc_by":"","&$success":""},"docComment":"\n   Increments the value associated with the key\n  ","signature":"wincache_ucache_inc(string $key ,[int $inc_by] ,bool &$success )","inheritdoc":0,"modifier":[],"return":""},"wincache_ucache_info":{"params":{"$summaryonly":"","$key":""},"docComment":"\n   Retrieves information about data stored in the user cache\n  ","signature":"wincache_ucache_info([bool $summaryonly] ,string $key )","inheritdoc":0,"modifier":[],"return":""},"wincache_ucache_meminfo":{"params":[],"docComment":"\n   Retrieves information about user cache memory usage\n  ","signature":"wincache_ucache_meminfo( )","inheritdoc":0,"modifier":[],"return":""},"wincache_ucache_set":{"params":{"$key":"","$value":"","$ttl":"","$values":"","$unused":""},"docComment":"\n   Adds a variable in user cache and overwrites a variable if it already exists in the cache\n  ","signature":"wincache_ucache_set(array $values ,mixed $unused ,[int $ttl] )","inheritdoc":0,"modifier":[],"return":""},"wincache_unlock":{"params":{"$key":""},"docComment":"\n   Releases an exclusive lock on a given key\n  ","signature":"wincache_unlock(string $key )","inheritdoc":0,"modifier":[],"return":""},"xattr_get":{"params":{"$filename":"","$name":"","$flags":""},"docComment":"\n   Get an extended attribute\n  ","signature":"xattr_get(string $filename ,string $name ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"xattr_list":{"params":{"$filename":"","$flags":""},"docComment":"\n   Get a list of extended attributes\n  ","signature":"xattr_list(string $filename ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"xattr_remove":{"params":{"$filename":"","$name":"","$flags":""},"docComment":"\n   Remove an extended attribute\n  ","signature":"xattr_remove(string $filename ,string $name ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"xattr_set":{"params":{"$filename":"","$name":"","$value":"","$flags":""},"docComment":"\n   Set an extended attribute\n  ","signature":"xattr_set(string $filename ,string $name ,string $value ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"xattr_supported":{"params":{"$filename":"","$flags":""},"docComment":"\n   Check if filesystem supports extended attributes\n  ","signature":"xattr_supported(string $filename ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"xdiff_file_bdiff_size":{"params":{"$file":""},"docComment":"Read a size of file created by applying a binary diff","signature":"xdiff_file_bdiff_size(string $file )","inheritdoc":0,"modifier":[],"return":""},"xdiff_file_bdiff":{"params":{"$old_file":"","$new_file":"","$dest":""},"docComment":"Make binary diff of two files","signature":"xdiff_file_bdiff(string $old_file ,string $new_file ,string $dest )","inheritdoc":0,"modifier":[],"return":""},"xdiff_file_bpatch":{"params":{"$file":"","$patch":"","$dest":""},"docComment":"Patch a file with a binary diff","signature":"xdiff_file_bpatch(string $file ,string $patch ,string $dest )","inheritdoc":0,"modifier":[],"return":""},"xdiff_file_diff_binary":{"params":[],"docComment":"","signature":"","inheritdoc":0,"modifier":[],"return":""},"xdiff_file_diff":{"params":{"$old_file":"","$new_file":"","$dest":"","$context":"","$minimal":""},"docComment":"Make unified diff of two files","signature":"xdiff_file_diff(string $old_file ,string $new_file ,string $dest ,[int $context] ,[bool $minimal] )","inheritdoc":0,"modifier":[],"return":""},"xdiff_file_merge3":{"params":{"$old_file":"","$new_file1":"","$new_file2":"","$dest":""},"docComment":"Merge 3 files into one","signature":"xdiff_file_merge3(string $old_file ,string $new_file1 ,string $new_file2 ,string $dest )","inheritdoc":0,"modifier":[],"return":""},"xdiff_file_patch_binary":{"params":[],"docComment":"","signature":"","inheritdoc":0,"modifier":[],"return":""},"xdiff_file_patch":{"params":{"$file":"","$patch":"","$dest":"","$flags":""},"docComment":"Patch a file with an unified diff","signature":"xdiff_file_patch(string $file ,string $patch ,string $dest ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""},"xdiff_file_rabdiff":{"params":{"$old_file":"","$new_file":"","$dest":""},"docComment":"Make binary diff of two files using the Rabin's polynomial fingerprinting algorithm","signature":"xdiff_file_rabdiff(string $old_file ,string $new_file ,string $dest )","inheritdoc":0,"modifier":[],"return":""},"xdiff_string_bdiff_size":{"params":{"$patch":""},"docComment":"Read a size of file created by applying a binary diff","signature":"xdiff_string_bdiff_size(string $patch )","inheritdoc":0,"modifier":[],"return":""},"xdiff_string_bdiff":{"params":{"$old_data":"","$new_data":""},"docComment":"Make binary diff of two strings","signature":"xdiff_string_bdiff(string $old_data ,string $new_data )","inheritdoc":0,"modifier":[],"return":""},"xdiff_string_bpatch":{"params":{"$str":"","$patch":""},"docComment":"Patch a string with a binary diff","signature":"xdiff_string_bpatch(string $str ,string $patch )","inheritdoc":0,"modifier":[],"return":""},"xdiff_string_diff_binary":{"params":[],"docComment":"","signature":"","inheritdoc":0,"modifier":[],"return":""},"xdiff_string_diff":{"params":{"$old_data":"","$new_data":"","$context":"","$minimal":""},"docComment":"Make unified diff of two strings","signature":"xdiff_string_diff(string $old_data ,string $new_data ,[int $context] ,[bool $minimal] )","inheritdoc":0,"modifier":[],"return":""},"xdiff_string_merge3":{"params":{"$old_data":"","$new_data1":"","$new_data2":"","&$error":""},"docComment":"Merge 3 strings into one","signature":"xdiff_string_merge3(string $old_data ,string $new_data1 ,string $new_data2 ,string &$error )","inheritdoc":0,"modifier":[],"return":""},"xdiff_string_patch_binary":{"params":[],"docComment":"","signature":"","inheritdoc":0,"modifier":[],"return":""},"xdiff_string_patch":{"params":{"$str":"","$patch":"","$flags":"","&$error":""},"docComment":"Patch a string with an unified diff","signature":"xdiff_string_patch(string $str ,string $patch ,int $flags ,string &$error )","inheritdoc":0,"modifier":[],"return":""},"xdiff_string_rabdiff":{"params":{"$old_data":"","$new_data":""},"docComment":"Make binary diff of two strings using the Rabin's polynomial fingerprinting algorithm","signature":"(string $old_data ,string $new_data )","inheritdoc":0,"modifier":[],"return":""},"xhprof_disable":{"params":[],"docComment":"Stops xhprof profiler","signature":"xhprof_disable( )","inheritdoc":0,"modifier":[],"return":""},"xhprof_enable":{"params":{"$flags":"","$options":""},"docComment":"Start xhprof profiler","signature":"xhprof_enable([int $flags] ,array $options )","inheritdoc":0,"modifier":[],"return":""},"xhprof_sample_disable":{"params":[],"docComment":"Stops xhprof sample profiler","signature":"xhprof_sample_disable( )","inheritdoc":0,"modifier":[],"return":""},"xhprof_sample_enable":{"params":[],"docComment":"Start XHProf profiling in sampling mode","signature":"xhprof_sample_enable( )","inheritdoc":0,"modifier":[],"return":""},"xslt_backend_info":{"params":[],"docComment":"Returns the information on the compilation settings of the backend","signature":"xslt_backend_info( )","inheritdoc":0,"modifier":[],"return":""},"xslt_backend_name":{"params":[],"docComment":"Returns the name of the backend","signature":"xslt_backend_name( )","inheritdoc":0,"modifier":[],"return":""},"xslt_backend_version":{"params":[],"docComment":"Returns the version number of Sablotron","signature":"xslt_backend_version( )","inheritdoc":0,"modifier":[],"return":""},"xslt_create":{"params":[],"docComment":"Create a new XSLT processor","signature":"xslt_create( )","inheritdoc":0,"modifier":[],"return":""},"xslt_errno":{"params":{"$xh":""},"docComment":"Returns an error number","signature":"xslt_errno(resource $xh )","inheritdoc":0,"modifier":[],"return":""},"xslt_error":{"params":{"$xh":""},"docComment":"Returns an error string","signature":"xslt_error(resource $xh )","inheritdoc":0,"modifier":[],"return":""},"xslt_free":{"params":{"$xh":""},"docComment":"Free XSLT processor","signature":"xslt_free(resource $xh )","inheritdoc":0,"modifier":[],"return":""},"xslt_getopt":{"params":{"$processor":""},"docComment":"Get options on a given xsl processor","signature":"xslt_getopt(resource $processor )","inheritdoc":0,"modifier":[],"return":""},"xslt_process":{"params":{"$xh":"","$xmlcontainer":"","$xslcontainer":"","$resultcontainer":"","$arguments":"","$parameters":""},"docComment":"Perform an  transformation","signature":"xslt_process(resource $xh ,string $xmlcontainer ,string $xslcontainer ,string $resultcontainer ,array $arguments ,array $parameters )","inheritdoc":0,"modifier":[],"return":""},"xslt_set_base":{"params":{"$xh":"","$uri":""},"docComment":"Set the base URI for all  transformations","signature":"xslt_set_base(resource $xh ,string $uri )","inheritdoc":0,"modifier":[],"return":""},"xslt_set_encoding":{"params":{"$xh":"","$encoding":""},"docComment":"Set the encoding for the parsing of  documents","signature":"xslt_set_encoding(resource $xh ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"xslt_set_error_handler":{"params":{"$xh":"","$handler":""},"docComment":"Set an error handler for a  processor","signature":"xslt_set_error_handler(resource $xh ,mixed $handler )","inheritdoc":0,"modifier":[],"return":""},"xslt_set_log":{"params":{"$xh":"","$log":""},"docComment":"Set the log file to write log messages to","signature":"xslt_set_log(resource $xh ,mixed $log )","inheritdoc":0,"modifier":[],"return":""},"xslt_set_object":{"params":{"$processor":"","&$obj":""},"docComment":"Sets the object in which to resolve callback functions","signature":"xslt_set_object(resource $processor ,object &$obj )","inheritdoc":0,"modifier":[],"return":""},"xslt_set_sax_handler":{"params":{"$xh":"","$handlers":""},"docComment":"Set SAX handlers for a XSLT processor","signature":"xslt_set_sax_handler(resource $xh ,array $handlers )","inheritdoc":0,"modifier":[],"return":""},"xslt_set_sax_handlers":{"params":{"$processor":"","$handlers":""},"docComment":"Set the SAX handlers to be called when the XML document gets processed","signature":"xslt_set_sax_handlers(resource $processor ,array $handlers )","inheritdoc":0,"modifier":[],"return":""},"xslt_set_scheme_handler":{"params":{"$xh":"","$handlers":""},"docComment":"Set Scheme handlers for a  processor","signature":"xslt_set_scheme_handler(resource $xh ,array $handlers )","inheritdoc":0,"modifier":[],"return":""},"xslt_set_scheme_handlers":{"params":{"$xh":"","$handlers":""},"docComment":"Set the scheme handlers for the  processor","signature":"xslt_set_scheme_handlers(resource $xh ,array $handlers )","inheritdoc":0,"modifier":[],"return":""},"xslt_setopt":{"params":{"$processor":"","$newmask":""},"docComment":"Set options on a given XSLT processor","signature":"xslt_setopt(resource $processor ,int $newmask )","inheritdoc":0,"modifier":[],"return":""},"yaml_emit_file":{"params":{"$filename":"","$data":"","$encoding":"","$linebreak":"","$callbacks":""},"docComment":"Send the YAML representation of a value to a file","signature":"yaml_emit_file(string $filename ,mixed $data ,[int $encoding] ,[int $linebreak] ,array $callbacks )","inheritdoc":0,"modifier":[],"return":""},"yaml_emit":{"params":{"$data":"","$encoding":"","$linebreak":"","$callbacks":""},"docComment":"Returns the YAML representation of a value","signature":"yaml_emit(mixed $data ,[int $encoding] ,[int $linebreak] ,array $callbacks )","inheritdoc":0,"modifier":[],"return":""},"yaml_parse_file":{"params":{"$filename":"","$pos":"","&$ndocs":"","$callbacks":""},"docComment":"Parse a YAML stream from a file","signature":"yaml_parse_file(string $filename ,[int $pos] ,int &$ndocs ,array $callbacks )","inheritdoc":0,"modifier":[],"return":""},"yaml_parse_url":{"params":{"$url":"","$pos":"","&$ndocs":"","$callbacks":""},"docComment":"Parse a Yaml stream from a URL","signature":"yaml_parse_url(string $url ,[int $pos] ,int &$ndocs ,array $callbacks )","inheritdoc":0,"modifier":[],"return":""},"yaml_parse":{"params":{"$input":"","$pos":"","&$ndocs":"","$callbacks":""},"docComment":"Parse a YAML stream","signature":"yaml_parse(string $input ,[int $pos] ,int &$ndocs ,array $callbacks )","inheritdoc":0,"modifier":[],"return":""},"yaz_addinfo":{"params":{"$id":""},"docComment":"Returns additional error information","signature":"yaz_addinfo(resource $id )","inheritdoc":0,"modifier":[],"return":""},"yaz_ccl_conf":{"params":{"$id":"","$config":""},"docComment":"Configure CCL parser","signature":"yaz_ccl_conf(resource $id ,array $config )","inheritdoc":0,"modifier":[],"return":""},"yaz_ccl_parse":{"params":{"$id":"","$query":"","&$result":""},"docComment":"Invoke CCL Parser","signature":"yaz_ccl_parse(resource $id ,string $query ,array &$result )","inheritdoc":0,"modifier":[],"return":""},"yaz_close":{"params":{"$id":""},"docComment":"Close YAZ connection","signature":"yaz_close(resource $id )","inheritdoc":0,"modifier":[],"return":""},"yaz_connect":{"params":{"$zurl":"","$options":""},"docComment":"\n   Prepares for a connection to a Z39.50 server\n  ","signature":"yaz_connect(string $zurl ,mixed $options )","inheritdoc":0,"modifier":[],"return":""},"yaz_database":{"params":{"$id":"","$databases":""},"docComment":"\n   Specifies the databases within a session\n  ","signature":"yaz_database(resource $id ,string $databases )","inheritdoc":0,"modifier":[],"return":""},"yaz_element":{"params":{"$id":"","$elementset":""},"docComment":"\n   Specifies Element-Set Name for retrieval\n  ","signature":"yaz_element(resource $id ,string $elementset )","inheritdoc":0,"modifier":[],"return":""},"yaz_errno":{"params":{"$id":""},"docComment":"Returns error number","signature":"yaz_errno(resource $id )","inheritdoc":0,"modifier":[],"return":""},"yaz_error":{"params":{"$id":""},"docComment":"Returns error description","signature":"yaz_error(resource $id )","inheritdoc":0,"modifier":[],"return":""},"yaz_es_result":{"params":{"$id":""},"docComment":"\n   Inspects Extended Services Result\n  ","signature":"yaz_es_result(resource $id )","inheritdoc":0,"modifier":[],"return":""},"yaz_es":{"params":{"$id":"","$type":"","$args":""},"docComment":"\n   Prepares for an Extended Service Request\n  ","signature":"yaz_es(resource $id ,string $type ,array $args )","inheritdoc":0,"modifier":[],"return":""},"yaz_get_option":{"params":{"$id":"","$name":""},"docComment":"Returns value of option for connection","signature":"yaz_get_option(resource $id ,string $name )","inheritdoc":0,"modifier":[],"return":""},"yaz_hits":{"params":{"$id":"","&$searchresult":""},"docComment":"Returns number of hits for last search","signature":"yaz_hits(resource $id ,array &$searchresult )","inheritdoc":0,"modifier":[],"return":""},"yaz_itemorder":{"params":{"$id":"","$args":""},"docComment":"\n   Prepares for Z39.50 Item Order with an ILL-Request package\n  ","signature":"yaz_itemorder(resource $id ,array $args )","inheritdoc":0,"modifier":[],"return":""},"yaz_present":{"params":{"$id":""},"docComment":"\n   Prepares for retrieval (Z39.50 present)\n  ","signature":"yaz_present(resource $id )","inheritdoc":0,"modifier":[],"return":""},"yaz_range":{"params":{"$id":"","$start":"","$number":""},"docComment":"\n   Specifies a range of records to retrieve\n  ","signature":"yaz_range(resource $id ,int $start ,int $number )","inheritdoc":0,"modifier":[],"return":""},"yaz_record":{"params":{"$id":"","$pos":"","$type":""},"docComment":"Returns a record","signature":"yaz_record(resource $id ,int $pos ,string $type )","inheritdoc":0,"modifier":[],"return":""},"yaz_scan_result":{"params":{"$id":"","&$result":""},"docComment":"Returns Scan Response result","signature":"yaz_scan_result(resource $id ,array &$result )","inheritdoc":0,"modifier":[],"return":""},"yaz_scan":{"params":{"$id":"","$type":"","$startterm":"","$flags":""},"docComment":"Prepares for a scan","signature":"yaz_scan(resource $id ,string $type ,string $startterm ,array $flags )","inheritdoc":0,"modifier":[],"return":""},"yaz_schema":{"params":{"$id":"","$schema":""},"docComment":"\n   Specifies schema for retrieval\n  ","signature":"yaz_schema(resource $id ,string $schema )","inheritdoc":0,"modifier":[],"return":""},"yaz_search":{"params":{"$id":"","$type":"","$query":""},"docComment":"Prepares for a search","signature":"yaz_search(resource $id ,string $type ,string $query )","inheritdoc":0,"modifier":[],"return":""},"yaz_set_option":{"params":{"$id":"","$name":"","$value":"","$options":""},"docComment":"Sets one or more options for connection","signature":"yaz_set_option(resource $id ,array $options )","inheritdoc":0,"modifier":[],"return":""},"yaz_sort":{"params":{"$id":"","$criteria":""},"docComment":"Sets sorting criteria","signature":"yaz_sort(resource $id ,string $criteria )","inheritdoc":0,"modifier":[],"return":""},"yaz_syntax":{"params":{"$id":"","$syntax":""},"docComment":"\n   Specifies the preferred record syntax for retrieval\n  ","signature":"yaz_syntax(resource $id ,string $syntax )","inheritdoc":0,"modifier":[],"return":""},"yaz_wait":{"params":{"&$options":""},"docComment":"Wait for Z39.50 requests to complete","signature":"yaz_wait(array &$options )","inheritdoc":0,"modifier":[],"return":""}},"classes":{"DateTime":{"classname":"DateTime","docComment":"","methods":{"modifier":{"public":["add","createFromFormat","getLastErrors","modify","__set_state","setDate","setISODate","setTime","setTimestamp","setTimezone","sub","diff","diff","diff","format","format","format","getOffset","getOffset","getOffset","getTimestamp","getTimestamp","getTimestamp","getTimezone","getTimezone","getTimezone","__wakeup","__wakeup","__wakeup"],"private":[],"protected":[],"final":[],"static":["createFromFormat","getLastErrors","__set_state"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$interval":"DateInterval","$object":"DateTime"},"docComment":"\n   Adds an amount of days, months, years, hours, minutes and seconds to a\n   DateTime object\n  ","signature":"(DateTime $object ,DateInterval $interval )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"createFromFormat":{"params":{"$format":"","$time":"","$timezone":"DateTimeZone"},"docComment":"Returns new DateTime object formatted according to the specified format","signature":"(string $format ,string $time ,DateTimeZone $timezone )","inheritdoc":0,"modifier":["public","static"],"return":"DateTime"},"getLastErrors":{"params":[],"docComment":"Returns the warnings and errors","signature":"( )","inheritdoc":0,"modifier":["public","static"],"return":""},"modify":{"params":{"$modify":"","$object":"DateTime"},"docComment":"Alters the timestamp","signature":"(DateTime $object ,string $modify )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"__set_state":{"params":{"$array":""},"docComment":"The __set_state handler","signature":"static DateTime::__set_state(array $array )","inheritdoc":0,"modifier":["public","static"],"return":"DateTime"},"setDate":{"params":{"$year":"","$month":"","$day":"","$object":"DateTime"},"docComment":"Sets the date","signature":"(DateTime $object ,int $year ,int $month ,int $day )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"setISODate":{"params":{"$year":"","$week":"","$day":"","$object":"DateTime"},"docComment":"Sets the ISO date","signature":"(DateTime $object ,int $year ,int $week ,[int $day] )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"setTime":{"params":{"$hour":"","$minute":"","$second":"","$object":"DateTime"},"docComment":"Sets the time","signature":"(DateTime $object ,int $hour ,int $minute ,[int $second] )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"setTimestamp":{"params":{"$unixtimestamp":"","$object":"DateTime"},"docComment":"Sets the date and time based on an Unix timestamp","signature":"(DateTime $object ,int $unixtimestamp )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"setTimezone":{"params":{"$timezone":"DateTimeZone","$object":"DateTime"},"docComment":"Sets the time zone for the DateTime object","signature":"(DateTime $object ,DateTimeZone $timezone )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"sub":{"params":{"$interval":"DateInterval","$object":"DateTime"},"docComment":"\n   Subtracts an amount of days, months, years, hours, minutes and seconds from\n   a DateTime object\n  ","signature":"(DateTime $object ,DateInterval $interval )","inheritdoc":0,"modifier":["public"],"return":"DateTime"},"diff":{"params":{"$datetime2":"DateTimeInterface","$absolute":"","$datetime1":"DateTimeInterface"},"docComment":"Returns the difference between two DateTime objects","signature":"(DateTimeInterface $datetime1 ,DateTimeInterface $datetime2 ,[bool $absolute] )","inheritdoc":0,"modifier":["public","public","public"],"return":"DateInterval"},"format":{"params":{"$format":"","$object":"DateTimeInterface"},"docComment":"Returns date formatted according to given format","signature":"(DateTimeInterface $object ,string $format )","inheritdoc":0,"modifier":["public","public","public"],"return":""},"getOffset":{"params":{"$object":"DateTimeInterface"},"docComment":"Returns the timezone offset","signature":"(DateTimeInterface $object )","inheritdoc":0,"modifier":["public","public","public"],"return":""},"getTimestamp":{"params":{"$object":"DateTimeInterface"},"docComment":"Gets the Unix timestamp","signature":"(DateTimeInterface $object )","inheritdoc":0,"modifier":["public","public","public"],"return":""},"getTimezone":{"params":{"$object":"DateTimeInterface"},"docComment":"Return time zone relative to given DateTime","signature":"(DateTimeInterface $object )","inheritdoc":0,"modifier":["public","public","public"],"return":"DateTimeZone"},"__wakeup":{"params":[],"docComment":"The __wakeup handler","signature":"public DateTimeInterface::__wakeup( )","inheritdoc":0,"modifier":["public","public","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["ATOM","COOKIE","ISO8601","RFC822","RFC850","RFC1036","RFC1123","RFC2822","RFC3339","RSS","W3C"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","ATOM":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"COOKIE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ISO8601":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RFC822":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RFC850":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RFC1036":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RFC1123":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RFC2822":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RFC3339":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RSS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"W3C":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DateTimeImmutable":{"classname":"DateTimeImmutable","docComment":"","methods":{"modifier":{"public":["add","createFromFormat","getLastErrors","modify","__set_state","setDate","setISODate","setTime","setTimestamp","setTimezone","sub","diff","diff","diff","format","format","format","getOffset","getOffset","getOffset","getTimestamp","getTimestamp","getTimestamp","getTimezone","getTimezone","getTimezone","__wakeup","__wakeup","__wakeup"],"private":[],"protected":[],"final":[],"static":["createFromFormat","getLastErrors","__set_state"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$interval":"DateInterval"},"docComment":"\n   Adds an amount of days, months, years, hours, minutes and seconds\n  ","signature":"public DateTimeImmutable::add(DateInterval $interval )","inheritdoc":0,"modifier":["public"],"return":"DateTimeImmutable"},"createFromFormat":{"params":{"$format":"","$time":"","$timezone":"DateTimeZone"},"docComment":"Returns new DateTimeImmutable object formatted according to the specified format","signature":"(string $format ,string $time ,DateTimeZone $timezone )","inheritdoc":0,"modifier":["public","static"],"return":"DateTimeImmutable"},"getLastErrors":{"params":[],"docComment":"Returns the warnings and errors","signature":"static DateTimeImmutable::getLastErrors( )","inheritdoc":0,"modifier":["public","static"],"return":""},"modify":{"params":{"$modify":""},"docComment":"Alters the timestamp","signature":"public DateTimeImmutable::modify(string $modify )","inheritdoc":0,"modifier":["public"],"return":"DateTimeImmutable"},"__set_state":{"params":{"$array":""},"docComment":"The __set_state handler","signature":"static DateTimeImmutable::__set_state(array $array )","inheritdoc":0,"modifier":["public","static"],"return":"DateTimeImmutable"},"setDate":{"params":{"$year":"","$month":"","$day":""},"docComment":"Sets the date","signature":"public DateTimeImmutable::setDate(int $year ,int $month ,int $day )","inheritdoc":0,"modifier":["public"],"return":"DateTimeImmutable"},"setISODate":{"params":{"$year":"","$week":"","$day":""},"docComment":"Sets the ISO date","signature":"public DateTimeImmutable::setISODate(int $year ,int $week ,[int $day] )","inheritdoc":0,"modifier":["public"],"return":"DateTimeImmutable"},"setTime":{"params":{"$hour":"","$minute":"","$second":""},"docComment":"Sets the time","signature":"public DateTimeImmutable::setTime(int $hour ,int $minute ,[int $second] )","inheritdoc":0,"modifier":["public"],"return":"DateTimeImmutable"},"setTimestamp":{"params":{"$unixtimestamp":""},"docComment":"Sets the date and time based on an Unix timestamp","signature":"public DateTimeImmutable::setTimestamp(int $unixtimestamp )","inheritdoc":0,"modifier":["public"],"return":"DateTimeImmutable"},"setTimezone":{"params":{"$timezone":"DateTimeZone"},"docComment":"Sets the time zone","signature":"public DateTimeImmutable::setTimezone(DateTimeZone $timezone )","inheritdoc":0,"modifier":["public"],"return":"DateTimeImmutable"},"sub":{"params":{"$interval":"DateInterval"},"docComment":"\n   Subtracts an amount of days, months, years, hours, minutes and seconds\n  ","signature":"public DateTimeImmutable::sub(DateInterval $interval )","inheritdoc":0,"modifier":["public"],"return":"DateTimeImmutable"},"diff":{"params":{"$datetime2":"DateTimeInterface","$absolute":"","$datetime1":"DateTimeInterface"},"docComment":"Returns the difference between two DateTime objects","signature":"(DateTimeInterface $datetime1 ,DateTimeInterface $datetime2 ,[bool $absolute] )","inheritdoc":0,"modifier":["public","public","public"],"return":"DateInterval"},"format":{"params":{"$format":"","$object":"DateTimeInterface"},"docComment":"Returns date formatted according to given format","signature":"(DateTimeInterface $object ,string $format )","inheritdoc":0,"modifier":["public","public","public"],"return":""},"getOffset":{"params":{"$object":"DateTimeInterface"},"docComment":"Returns the timezone offset","signature":"(DateTimeInterface $object )","inheritdoc":0,"modifier":["public","public","public"],"return":""},"getTimestamp":{"params":{"$object":"DateTimeInterface"},"docComment":"Gets the Unix timestamp","signature":"(DateTimeInterface $object )","inheritdoc":0,"modifier":["public","public","public"],"return":""},"getTimezone":{"params":{"$object":"DateTimeInterface"},"docComment":"Return time zone relative to given DateTime","signature":"(DateTimeInterface $object )","inheritdoc":0,"modifier":["public","public","public"],"return":"DateTimeZone"},"__wakeup":{"params":[],"docComment":"The __wakeup handler","signature":"public DateTimeInterface::__wakeup( )","inheritdoc":0,"modifier":["public","public","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DateTimeInterface":{"classname":"DateTimeInterface","docComment":"","methods":{"modifier":{"public":["diff","diff","diff","format","format","format","getOffset","getOffset","getOffset","getTimestamp","getTimestamp","getTimestamp","getTimezone","getTimezone","getTimezone","__wakeup","__wakeup","__wakeup"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","diff":{"params":{"$datetime2":"DateTimeInterface","$absolute":"","$datetime1":"DateTimeInterface"},"docComment":"Returns the difference between two DateTime objects","signature":"(DateTimeInterface $datetime1 ,DateTimeInterface $datetime2 ,[bool $absolute] )","inheritdoc":0,"modifier":["public","public","public"],"return":"DateInterval"},"format":{"params":{"$format":"","$object":"DateTimeInterface"},"docComment":"Returns date formatted according to given format","signature":"(DateTimeInterface $object ,string $format )","inheritdoc":0,"modifier":["public","public","public"],"return":""},"getOffset":{"params":{"$object":"DateTimeInterface"},"docComment":"Returns the timezone offset","signature":"(DateTimeInterface $object )","inheritdoc":0,"modifier":["public","public","public"],"return":""},"getTimestamp":{"params":{"$object":"DateTimeInterface"},"docComment":"Gets the Unix timestamp","signature":"(DateTimeInterface $object )","inheritdoc":0,"modifier":["public","public","public"],"return":""},"getTimezone":{"params":{"$object":"DateTimeInterface"},"docComment":"Return time zone relative to given DateTime","signature":"(DateTimeInterface $object )","inheritdoc":0,"modifier":["public","public","public"],"return":"DateTimeZone"},"__wakeup":{"params":[],"docComment":"The __wakeup handler","signature":"public DateTimeInterface::__wakeup( )","inheritdoc":0,"modifier":["public","public","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DateTimeZone":{"classname":"DateTimeZone","docComment":"","methods":{"modifier":{"public":["getLocation","getName","getOffset","getTransitions","listAbbreviations","listIdentifiers"],"private":[],"protected":[],"final":[],"static":["listAbbreviations","listIdentifiers"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getLocation":{"params":{"$object":"DateTimeZone"},"docComment":"Returns location information for a timezone","signature":"(DateTimeZone $object )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":{"$object":"DateTimeZone"},"docComment":"Returns the name of the timezone","signature":"(DateTimeZone $object )","inheritdoc":0,"modifier":["public"],"return":""},"getOffset":{"params":{"$datetime":"DateTime","$object":"DateTimeZone"},"docComment":"Returns the timezone offset from GMT","signature":"(DateTimeZone $object ,DateTime $datetime )","inheritdoc":0,"modifier":["public"],"return":""},"getTransitions":{"params":{"$timestamp_begin":"","$timestamp_end":"","$object":"DateTimeZone"},"docComment":"Returns all transitions for the timezone","signature":"(DateTimeZone $object ,int $timestamp_begin ,int $timestamp_end )","inheritdoc":0,"modifier":["public"],"return":""},"listAbbreviations":{"params":[],"docComment":"Returns associative array containing dst, offset and the timezone name","signature":"( )","inheritdoc":0,"modifier":["public","static"],"return":""},"listIdentifiers":{"params":{"$what":"","$country":""},"docComment":"Returns a numerically indexed array containing all defined timezone identifiers","signature":"([int $what] ,[string $country] )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["AFRICA","AMERICA","ANTARCTICA","ARCTIC","ASIA","ATLANTIC","AUSTRALIA","EUROPE","INDIAN","PACIFIC","UTC","ALL","ALL_WITH_BC","PER_COUNTRY"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","AFRICA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"AMERICA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ANTARCTICA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ARCTIC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ASIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATLANTIC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"AUSTRALIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"EUROPE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INDIAN":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PACIFIC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"UTC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ALL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ALL_WITH_BC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PER_COUNTRY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DateInterval":{"classname":"DateInterval","docComment":"","methods":{"modifier":{"public":["createFromDateString","format"],"private":[],"protected":[],"final":[],"static":["createFromDateString"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","createFromDateString":{"params":{"$time":""},"docComment":"Sets up a DateInterval from the relative parts of the string","signature":"static DateInterval::createFromDateString(string $time )","inheritdoc":0,"modifier":["public","static"],"return":"DateInterval"},"format":{"params":{"$format":""},"docComment":"Formats the interval","signature":"public DateInterval::format(string $format )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["y","m","d","h","i","s","invert","days"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","y":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"m":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"d":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"h":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"i":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"s":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"invert":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"days":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DatePeriod":{"classname":"DatePeriod","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["EXCLUDE_START_DATE"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","EXCLUDE_START_DATE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Directory":{"classname":"Directory","docComment":"","methods":{"modifier":{"public":["close","read","rewind"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","close":{"params":{"$dir_handle":""},"docComment":"Close directory handle","signature":"public Directory::close(resource $dir_handle )","inheritdoc":0,"modifier":["public"],"return":""},"read":{"params":{"$dir_handle":""},"docComment":"Read entry from directory handle","signature":"public Directory::read(resource $dir_handle )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":{"$dir_handle":""},"docComment":"Rewind directory handle","signature":"public Directory::rewind(resource $dir_handle )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["path","handle"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","path":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"handle":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Phar":{"classname":"Phar","docComment":"","methods":{"modifier":{"public":["addEmptyDir","addFile","addFromString","apiVersion","buildFromDirectory","buildFromIterator","canCompress","canWrite","compress","compressAllFilesBZIP2","compressAllFilesGZ","compressFiles","__construct","convertToData","convertToExecutable","copy","count","createDefaultStub","decompress","decompressFiles","delMetadata","delete","extractTo","getMetadata","getModified","getSignature","getStub","getSupportedCompression","getSupportedSignatures","getVersion","hasMetadata","interceptFileFuncs","isBuffering","isCompressed","isFileFormat","isValidPharFilename","isWritable","loadPhar","mapPhar","mount","mungServer","offsetExists","offsetGet","offsetSet","offsetUnset","running","setAlias","setDefaultStub","setMetadata","setSignatureAlgorithm","setStub","startBuffering","stopBuffering","uncompressAllFiles","unlinkArchive","webPhar"],"private":[],"protected":[],"final":["apiVersion","canCompress","canWrite","createDefaultStub","getSupportedCompression","getSupportedSignatures","interceptFileFuncs","isValidPharFilename","loadPhar","mapPhar","mount","mungServer","running","unlinkArchive","webPhar"],"static":["apiVersion","canCompress","canWrite","createDefaultStub","getSupportedCompression","getSupportedSignatures","interceptFileFuncs","isValidPharFilename","loadPhar","mapPhar","mount","mungServer","running","unlinkArchive","webPhar"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addEmptyDir":{"params":{"$dirname":""},"docComment":"Add an empty directory to the phar archive","signature":"public Phar::addEmptyDir(string $dirname )","inheritdoc":0,"modifier":["public"],"return":""},"addFile":{"params":{"$file":"","$localname":""},"docComment":"Add a file from the filesystem to the phar archive","signature":"public Phar::addFile(string $file ,string $localname )","inheritdoc":0,"modifier":["public"],"return":""},"addFromString":{"params":{"$localname":"","$contents":""},"docComment":"Add a file from the filesystem to the phar archive","signature":"public Phar::addFromString(string $localname ,string $contents )","inheritdoc":0,"modifier":["public"],"return":""},"apiVersion":{"params":[],"docComment":"Returns the api version","signature":"static Phar::apiVersion( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"buildFromDirectory":{"params":{"$base_dir":"","$regex":""},"docComment":"Construct a phar archive from the files within a directory.","signature":"public Phar::buildFromDirectory(string $base_dir ,string $regex )","inheritdoc":0,"modifier":["public"],"return":""},"buildFromIterator":{"params":{"$iter":"Iterator","$base_directory":""},"docComment":"Construct a phar archive from an iterator.","signature":"public Phar::buildFromIterator(Iterator $iter ,string $base_directory )","inheritdoc":0,"modifier":["public"],"return":""},"canCompress":{"params":{"$type":""},"docComment":"Returns whether phar extension supports compression using either zlib or bzip2","signature":"static Phar::canCompress([int $type] )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"canWrite":{"params":[],"docComment":"Returns whether phar extension supports writing and creating phars","signature":"static Phar::canWrite( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"compress":{"params":{"$compression":"","$extension":""},"docComment":"Compresses the entire Phar archive using Gzip or Bzip2 compression","signature":"public Phar::compress(int $compression ,string $extension )","inheritdoc":0,"modifier":["public"],"return":""},"compressAllFilesBZIP2":{"params":[],"docComment":"Compresses all files in the current Phar archive using Bzip2 compression","signature":"public Phar::compressAllFilesBZIP2( )","inheritdoc":0,"modifier":["public"],"return":""},"compressAllFilesGZ":{"params":[],"docComment":"Compresses all files in the current Phar archive using Gzip compression","signature":"public Phar::compressAllFilesGZ( )","inheritdoc":0,"modifier":["public"],"return":""},"compressFiles":{"params":{"$compression":""},"docComment":"Compresses all files in the current Phar archive","signature":"public Phar::compressFiles(int $compression )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$fname":"","$flags":"","$alias":""},"docComment":"Construct a Phar archive object","signature":"public Phar::__construct(string $fname ,int $flags ,string $alias )","inheritdoc":0,"modifier":["public"],"return":""},"convertToData":{"params":{"$format":"","$compression":"","$extension":""},"docComment":"Convert a phar archive to a non-executable tar or zip file","signature":"public Phar::convertToData([int $format] ,[int $compression] ,string $extension )","inheritdoc":0,"modifier":["public"],"return":"PharData"},"convertToExecutable":{"params":{"$format":"","$compression":"","$extension":""},"docComment":"Convert a phar archive to another executable phar archive file format","signature":"public Phar::convertToExecutable([int $format] ,[int $compression] ,string $extension )","inheritdoc":0,"modifier":["public"],"return":"Phar"},"copy":{"params":{"$oldfile":"","$newfile":""},"docComment":"Copy a file internal to the phar archive to another new file within the phar","signature":"public Phar::copy(string $oldfile ,string $newfile )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"Returns the number of entries (files) in the Phar archive","signature":"public Phar::count( )","inheritdoc":0,"modifier":["public"],"return":""},"createDefaultStub":{"params":{"$indexfile":"","$webindexfile":""},"docComment":"Create a phar-file format specific stub","signature":"static Phar::createDefaultStub(string $indexfile ,string $webindexfile )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"decompress":{"params":{"$extension":""},"docComment":"Decompresses the entire Phar archive","signature":"public Phar::decompress(string $extension )","inheritdoc":0,"modifier":["public"],"return":""},"decompressFiles":{"params":[],"docComment":"Decompresses all files in the current Phar archive","signature":"public Phar::decompressFiles( )","inheritdoc":0,"modifier":["public"],"return":""},"delMetadata":{"params":[],"docComment":"Deletes the global metadata of the phar","signature":"public Phar::delMetadata( )","inheritdoc":0,"modifier":["public"],"return":""},"delete":{"params":{"$entry":""},"docComment":"Delete a file within a phar archive","signature":"public Phar::delete(string $entry )","inheritdoc":0,"modifier":["public"],"return":""},"extractTo":{"params":{"$pathto":"","$files":"","$overwrite":""},"docComment":"Extract the contents of a phar archive to a directory","signature":"public Phar::extractTo(string $pathto , $files ,[bool $overwrite] )","inheritdoc":0,"modifier":["public"],"return":""},"getMetadata":{"params":[],"docComment":"Returns phar archive meta-data","signature":"public Phar::getMetadata( )","inheritdoc":0,"modifier":["public"],"return":""},"getModified":{"params":[],"docComment":"Return whether phar was modified","signature":"public Phar::getModified( )","inheritdoc":0,"modifier":["public"],"return":""},"getSignature":{"params":[],"docComment":"Return MD5\/SHA1\/SHA256\/SHA512\/OpenSSL signature of a Phar archive","signature":"public Phar::getSignature( )","inheritdoc":0,"modifier":["public"],"return":""},"getStub":{"params":[],"docComment":"Return the PHP loader or bootstrap stub of a Phar archive","signature":"public Phar::getStub( )","inheritdoc":0,"modifier":["public"],"return":""},"getSupportedCompression":{"params":[],"docComment":"Return array of supported compression algorithms","signature":"static Phar::getSupportedCompression( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"getSupportedSignatures":{"params":[],"docComment":"Return array of supported signature types","signature":"static Phar::getSupportedSignatures( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"getVersion":{"params":[],"docComment":"Return version info of Phar archive","signature":"public Phar::getVersion( )","inheritdoc":0,"modifier":["public"],"return":""},"hasMetadata":{"params":[],"docComment":"Returns whether phar has global meta-data","signature":"public Phar::hasMetadata( )","inheritdoc":0,"modifier":["public"],"return":""},"interceptFileFuncs":{"params":[],"docComment":"instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions","signature":"static Phar::interceptFileFuncs( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"isBuffering":{"params":[],"docComment":"Used to determine whether Phar write operations are being buffered, or are flushing directly to disk","signature":"public Phar::isBuffering( )","inheritdoc":0,"modifier":["public"],"return":""},"isCompressed":{"params":[],"docComment":"Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz\/tar.bz and so on)","signature":"public Phar::isCompressed( )","inheritdoc":0,"modifier":["public"],"return":""},"isFileFormat":{"params":{"$format":""},"docComment":"Returns true if the phar archive is based on the tar\/phar\/zip file format depending on the parameter","signature":"public Phar::isFileFormat(int $format )","inheritdoc":0,"modifier":["public"],"return":""},"isValidPharFilename":{"params":{"$filename":"","$executable":""},"docComment":"Returns whether the given filename is a valid phar filename","signature":"static Phar::isValidPharFilename(string $filename ,[bool $executable] )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"isWritable":{"params":[],"docComment":"Returns true if the phar archive can be modified","signature":"public Phar::isWritable( )","inheritdoc":0,"modifier":["public"],"return":""},"loadPhar":{"params":{"$filename":"","$alias":""},"docComment":"Loads any phar archive with an alias","signature":"static Phar::loadPhar(string $filename ,string $alias )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"mapPhar":{"params":{"$alias":"","$dataoffset":""},"docComment":"Reads the currently executed file (a phar) and registers its manifest","signature":"static Phar::mapPhar(string $alias ,[int $dataoffset] )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"mount":{"params":{"$pharpath":"","$externalpath":""},"docComment":"Mount an external path or file to a virtual location within the phar archive","signature":"static Phar::mount(string $pharpath ,string $externalpath )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"mungServer":{"params":{"$munglist":""},"docComment":"Defines a list of up to 4 $_SERVER variables that should be modified for execution","signature":"static Phar::mungServer(array $munglist )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"offsetExists":{"params":{"$offset":""},"docComment":"determines whether a file exists in the phar","signature":"public Phar::offsetExists(string $offset )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$offset":""},"docComment":"Gets a  object for a specific file","signature":"public Phar::offsetGet(string $offset )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$offset":"","$value":""},"docComment":"set the contents of an internal file to those of an external file","signature":"public Phar::offsetSet(string $offset ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$offset":""},"docComment":"remove a file from a phar","signature":"public Phar::offsetUnset(string $offset )","inheritdoc":0,"modifier":["public"],"return":""},"running":{"params":{"$retphar":""},"docComment":"Returns the full path on disk or full phar URL to the currently executing Phar archive","signature":"static Phar::running([bool $retphar] )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"setAlias":{"params":{"$alias":""},"docComment":"Set the alias for the Phar archive","signature":"public Phar::setAlias(string $alias )","inheritdoc":0,"modifier":["public"],"return":""},"setDefaultStub":{"params":{"$index":"","$webindex":""},"docComment":"Used to set the PHP loader or bootstrap stub of a Phar archive to the default loader","signature":"public Phar::setDefaultStub(string $index ,string $webindex )","inheritdoc":0,"modifier":["public"],"return":""},"setMetadata":{"params":{"$metadata":""},"docComment":"Sets phar archive meta-data","signature":"public Phar::setMetadata(mixed $metadata )","inheritdoc":0,"modifier":["public"],"return":""},"setSignatureAlgorithm":{"params":{"$sigtype":""},"docComment":"set the signature algorithm for a phar and apply it.  The","signature":"public Phar::setSignatureAlgorithm(int $sigtype )","inheritdoc":0,"modifier":["public"],"return":""},"setStub":{"params":{"$stub":"","$len":""},"docComment":"Used to set the PHP loader or bootstrap stub of a Phar archive","signature":"public Phar::setStub(string $stub ,[int $len] )","inheritdoc":0,"modifier":["public"],"return":""},"startBuffering":{"params":[],"docComment":"Start buffering Phar write operations, do not modify the Phar object on disk","signature":"public Phar::startBuffering( )","inheritdoc":0,"modifier":["public"],"return":""},"stopBuffering":{"params":[],"docComment":"Stop buffering write requests to the Phar archive, and save changes to disk","signature":"public Phar::stopBuffering( )","inheritdoc":0,"modifier":["public"],"return":""},"uncompressAllFiles":{"params":[],"docComment":"Uncompresses all files in the current Phar archive","signature":"public Phar::uncompressAllFiles( )","inheritdoc":0,"modifier":["public"],"return":""},"unlinkArchive":{"params":{"$archive":""},"docComment":"Completely remove a phar archive from disk and from memory","signature":"static Phar::unlinkArchive(string $archive )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"webPhar":{"params":{"$alias":"","$index":"","$f404":"","$mimetypes":"","$rewrites":""},"docComment":"mapPhar for web-based phars. front controller for web applications","signature":"static Phar::webPhar(string $alias ,[string $index] ,string $f404 ,array $mimetypes ,callable $rewrites )","inheritdoc":0,"modifier":["final","public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"PharData":{"classname":"PharData","docComment":"","methods":{"modifier":{"public":["addEmptyDir","addFile","addFromString","buildFromDirectory","buildFromIterator","compress","compressFiles","__construct","convertToData","convertToExecutable","copy","decompress","decompressFiles","delMetadata","delete","extractTo","isWritable","offsetSet","offsetUnset","setAlias","setDefaultStub","setMetadata","setSignatureAlgorithm","setStub","addEmptyDir","addFile","addFromString","apiVersion","buildFromDirectory","buildFromIterator","canCompress","canWrite","compress","compressAllFilesBZIP2","compressAllFilesGZ","compressFiles","__construct","convertToData","convertToExecutable","copy","count","createDefaultStub","decompress","decompressFiles","delMetadata","delete","extractTo","getMetadata","getModified","getSignature","getStub","getSupportedCompression","getSupportedSignatures","getVersion","hasMetadata","interceptFileFuncs","isBuffering","isCompressed","isFileFormat","isValidPharFilename","isWritable","loadPhar","mapPhar","mount","mungServer","offsetExists","offsetGet","offsetSet","offsetUnset","running","setAlias","setDefaultStub","setMetadata","setSignatureAlgorithm","setStub","startBuffering","stopBuffering","uncompressAllFiles","unlinkArchive","webPhar"],"private":[],"protected":[],"final":["apiVersion","canCompress","canWrite","createDefaultStub","getSupportedCompression","getSupportedSignatures","interceptFileFuncs","isValidPharFilename","loadPhar","mapPhar","mount","mungServer","running","unlinkArchive","webPhar"],"static":["apiVersion","canCompress","canWrite","createDefaultStub","getSupportedCompression","getSupportedSignatures","interceptFileFuncs","isValidPharFilename","loadPhar","mapPhar","mount","mungServer","running","unlinkArchive","webPhar"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addEmptyDir":{"params":{"$dirname":""},"docComment":"Add an empty directory to the phar archive","signature":"public Phar::addEmptyDir(string $dirname )","inheritdoc":0,"modifier":["public"],"return":""},"addFile":{"params":{"$file":"","$localname":""},"docComment":"Add a file from the filesystem to the phar archive","signature":"public Phar::addFile(string $file ,string $localname )","inheritdoc":0,"modifier":["public"],"return":""},"addFromString":{"params":{"$localname":"","$contents":""},"docComment":"Add a file from the filesystem to the phar archive","signature":"public Phar::addFromString(string $localname ,string $contents )","inheritdoc":0,"modifier":["public"],"return":""},"buildFromDirectory":{"params":{"$base_dir":"","$regex":""},"docComment":"Construct a phar archive from the files within a directory.","signature":"public Phar::buildFromDirectory(string $base_dir ,string $regex )","inheritdoc":0,"modifier":["public"],"return":""},"buildFromIterator":{"params":{"$iter":"Iterator","$base_directory":""},"docComment":"Construct a phar archive from an iterator.","signature":"public Phar::buildFromIterator(Iterator $iter ,string $base_directory )","inheritdoc":0,"modifier":["public"],"return":""},"compress":{"params":{"$compression":"","$extension":""},"docComment":"Compresses the entire Phar archive using Gzip or Bzip2 compression","signature":"public Phar::compress(int $compression ,string $extension )","inheritdoc":0,"modifier":["public"],"return":""},"compressFiles":{"params":{"$compression":""},"docComment":"Compresses all files in the current Phar archive","signature":"public Phar::compressFiles(int $compression )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$fname":"","$flags":"","$alias":""},"docComment":"Construct a Phar archive object","signature":"public Phar::__construct(string $fname ,int $flags ,string $alias )","inheritdoc":0,"modifier":["public"],"return":""},"convertToData":{"params":{"$format":"","$compression":"","$extension":""},"docComment":"Convert a phar archive to a non-executable tar or zip file","signature":"public Phar::convertToData([int $format] ,[int $compression] ,string $extension )","inheritdoc":0,"modifier":["public"],"return":"PharData"},"convertToExecutable":{"params":{"$format":"","$compression":"","$extension":""},"docComment":"Convert a phar archive to another executable phar archive file format","signature":"public Phar::convertToExecutable([int $format] ,[int $compression] ,string $extension )","inheritdoc":0,"modifier":["public"],"return":"Phar"},"copy":{"params":{"$oldfile":"","$newfile":""},"docComment":"Copy a file internal to the phar archive to another new file within the phar","signature":"public Phar::copy(string $oldfile ,string $newfile )","inheritdoc":0,"modifier":["public"],"return":""},"decompress":{"params":{"$extension":""},"docComment":"Decompresses the entire Phar archive","signature":"public Phar::decompress(string $extension )","inheritdoc":0,"modifier":["public"],"return":""},"decompressFiles":{"params":[],"docComment":"Decompresses all files in the current Phar archive","signature":"public Phar::decompressFiles( )","inheritdoc":0,"modifier":["public"],"return":""},"delMetadata":{"params":[],"docComment":"Deletes the global metadata of the phar","signature":"public Phar::delMetadata( )","inheritdoc":0,"modifier":["public"],"return":""},"delete":{"params":{"$entry":""},"docComment":"Delete a file within a phar archive","signature":"public Phar::delete(string $entry )","inheritdoc":0,"modifier":["public"],"return":""},"extractTo":{"params":{"$pathto":"","$files":"","$overwrite":""},"docComment":"Extract the contents of a phar archive to a directory","signature":"public Phar::extractTo(string $pathto , $files ,[bool $overwrite] )","inheritdoc":0,"modifier":["public"],"return":""},"isWritable":{"params":[],"docComment":"Returns true if the phar archive can be modified","signature":"public Phar::isWritable( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$offset":"","$value":""},"docComment":"set the contents of an internal file to those of an external file","signature":"public Phar::offsetSet(string $offset ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$offset":""},"docComment":"remove a file from a phar","signature":"public Phar::offsetUnset(string $offset )","inheritdoc":0,"modifier":["public"],"return":""},"setAlias":{"params":{"$alias":""},"docComment":"Set the alias for the Phar archive","signature":"public Phar::setAlias(string $alias )","inheritdoc":0,"modifier":["public"],"return":""},"setDefaultStub":{"params":{"$index":"","$webindex":""},"docComment":"Used to set the PHP loader or bootstrap stub of a Phar archive to the default loader","signature":"public Phar::setDefaultStub(string $index ,string $webindex )","inheritdoc":0,"modifier":["public"],"return":""},"setMetadata":{"params":{"$metadata":""},"docComment":"Sets phar archive meta-data","signature":"public Phar::setMetadata(mixed $metadata )","inheritdoc":0,"modifier":["public"],"return":""},"setSignatureAlgorithm":{"params":{"$sigtype":""},"docComment":"set the signature algorithm for a phar and apply it.  The","signature":"public Phar::setSignatureAlgorithm(int $sigtype )","inheritdoc":0,"modifier":["public"],"return":""},"setStub":{"params":{"$stub":"","$len":""},"docComment":"Used to set the PHP loader or bootstrap stub of a Phar archive","signature":"public Phar::setStub(string $stub ,[int $len] )","inheritdoc":0,"modifier":["public"],"return":""},"apiVersion":{"params":[],"docComment":"Returns the api version","signature":"static Phar::apiVersion( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"canCompress":{"params":{"$type":""},"docComment":"Returns whether phar extension supports compression using either zlib or bzip2","signature":"static Phar::canCompress([int $type] )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"canWrite":{"params":[],"docComment":"Returns whether phar extension supports writing and creating phars","signature":"static Phar::canWrite( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"compressAllFilesBZIP2":{"params":[],"docComment":"Compresses all files in the current Phar archive using Bzip2 compression","signature":"public Phar::compressAllFilesBZIP2( )","inheritdoc":0,"modifier":["public"],"return":""},"compressAllFilesGZ":{"params":[],"docComment":"Compresses all files in the current Phar archive using Gzip compression","signature":"public Phar::compressAllFilesGZ( )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"Returns the number of entries (files) in the Phar archive","signature":"public Phar::count( )","inheritdoc":0,"modifier":["public"],"return":""},"createDefaultStub":{"params":{"$indexfile":"","$webindexfile":""},"docComment":"Create a phar-file format specific stub","signature":"static Phar::createDefaultStub(string $indexfile ,string $webindexfile )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"getMetadata":{"params":[],"docComment":"Returns phar archive meta-data","signature":"public Phar::getMetadata( )","inheritdoc":0,"modifier":["public"],"return":""},"getModified":{"params":[],"docComment":"Return whether phar was modified","signature":"public Phar::getModified( )","inheritdoc":0,"modifier":["public"],"return":""},"getSignature":{"params":[],"docComment":"Return MD5\/SHA1\/SHA256\/SHA512\/OpenSSL signature of a Phar archive","signature":"public Phar::getSignature( )","inheritdoc":0,"modifier":["public"],"return":""},"getStub":{"params":[],"docComment":"Return the PHP loader or bootstrap stub of a Phar archive","signature":"public Phar::getStub( )","inheritdoc":0,"modifier":["public"],"return":""},"getSupportedCompression":{"params":[],"docComment":"Return array of supported compression algorithms","signature":"static Phar::getSupportedCompression( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"getSupportedSignatures":{"params":[],"docComment":"Return array of supported signature types","signature":"static Phar::getSupportedSignatures( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"getVersion":{"params":[],"docComment":"Return version info of Phar archive","signature":"public Phar::getVersion( )","inheritdoc":0,"modifier":["public"],"return":""},"hasMetadata":{"params":[],"docComment":"Returns whether phar has global meta-data","signature":"public Phar::hasMetadata( )","inheritdoc":0,"modifier":["public"],"return":""},"interceptFileFuncs":{"params":[],"docComment":"instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions","signature":"static Phar::interceptFileFuncs( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"isBuffering":{"params":[],"docComment":"Used to determine whether Phar write operations are being buffered, or are flushing directly to disk","signature":"public Phar::isBuffering( )","inheritdoc":0,"modifier":["public"],"return":""},"isCompressed":{"params":[],"docComment":"Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz\/tar.bz and so on)","signature":"public Phar::isCompressed( )","inheritdoc":0,"modifier":["public"],"return":""},"isFileFormat":{"params":{"$format":""},"docComment":"Returns true if the phar archive is based on the tar\/phar\/zip file format depending on the parameter","signature":"public Phar::isFileFormat(int $format )","inheritdoc":0,"modifier":["public"],"return":""},"isValidPharFilename":{"params":{"$filename":"","$executable":""},"docComment":"Returns whether the given filename is a valid phar filename","signature":"static Phar::isValidPharFilename(string $filename ,[bool $executable] )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"loadPhar":{"params":{"$filename":"","$alias":""},"docComment":"Loads any phar archive with an alias","signature":"static Phar::loadPhar(string $filename ,string $alias )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"mapPhar":{"params":{"$alias":"","$dataoffset":""},"docComment":"Reads the currently executed file (a phar) and registers its manifest","signature":"static Phar::mapPhar(string $alias ,[int $dataoffset] )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"mount":{"params":{"$pharpath":"","$externalpath":""},"docComment":"Mount an external path or file to a virtual location within the phar archive","signature":"static Phar::mount(string $pharpath ,string $externalpath )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"mungServer":{"params":{"$munglist":""},"docComment":"Defines a list of up to 4 $_SERVER variables that should be modified for execution","signature":"static Phar::mungServer(array $munglist )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"offsetExists":{"params":{"$offset":""},"docComment":"determines whether a file exists in the phar","signature":"public Phar::offsetExists(string $offset )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$offset":""},"docComment":"Gets a  object for a specific file","signature":"public Phar::offsetGet(string $offset )","inheritdoc":0,"modifier":["public"],"return":""},"running":{"params":{"$retphar":""},"docComment":"Returns the full path on disk or full phar URL to the currently executing Phar archive","signature":"static Phar::running([bool $retphar] )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"startBuffering":{"params":[],"docComment":"Start buffering Phar write operations, do not modify the Phar object on disk","signature":"public Phar::startBuffering( )","inheritdoc":0,"modifier":["public"],"return":""},"stopBuffering":{"params":[],"docComment":"Stop buffering write requests to the Phar archive, and save changes to disk","signature":"public Phar::stopBuffering( )","inheritdoc":0,"modifier":["public"],"return":""},"uncompressAllFiles":{"params":[],"docComment":"Uncompresses all files in the current Phar archive","signature":"public Phar::uncompressAllFiles( )","inheritdoc":0,"modifier":["public"],"return":""},"unlinkArchive":{"params":{"$archive":""},"docComment":"Completely remove a phar archive from disk and from memory","signature":"static Phar::unlinkArchive(string $archive )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"webPhar":{"params":{"$alias":"","$index":"","$f404":"","$mimetypes":"","$rewrites":""},"docComment":"mapPhar for web-based phars. front controller for web applications","signature":"static Phar::webPhar(string $alias ,[string $index] ,string $f404 ,array $mimetypes ,callable $rewrites )","inheritdoc":0,"modifier":["final","public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"PharFileInfo":{"classname":"PharFileInfo","docComment":"","methods":{"modifier":{"public":["chmod","compress","__construct","decompress","delMetadata","getCRC32","getCompressedSize","getMetadata","getPharFlags","hasMetadata","isCRCChecked","isCompressed","isCompressedBZIP2","isCompressedGZ","setCompressedBZIP2","setCompressedGZ","setMetadata","setUncompressed"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","chmod":{"params":{"$permissions":""},"docComment":"Sets file-specific permission bits","signature":"public PharFileInfo::chmod(int $permissions )","inheritdoc":0,"modifier":["public"],"return":""},"compress":{"params":{"$compression":""},"docComment":"Compresses the current Phar entry with either zlib or bzip2 compression","signature":"public PharFileInfo::compress(int $compression )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$entry":""},"docComment":"Construct a Phar entry object","signature":"public PharFileInfo::__construct(string $entry )","inheritdoc":0,"modifier":["public"],"return":""},"decompress":{"params":[],"docComment":"Decompresses the current Phar entry within the phar","signature":"public PharFileInfo::decompress( )","inheritdoc":0,"modifier":["public"],"return":""},"delMetadata":{"params":[],"docComment":"Deletes the metadata of the entry","signature":"public PharFileInfo::delMetadata( )","inheritdoc":0,"modifier":["public"],"return":""},"getCRC32":{"params":[],"docComment":"Returns CRC32 code or throws an exception if CRC has not been verified","signature":"public PharFileInfo::getCRC32( )","inheritdoc":0,"modifier":["public"],"return":""},"getCompressedSize":{"params":[],"docComment":"Returns the actual size of the file (with compression) inside the Phar archive","signature":"public PharFileInfo::getCompressedSize( )","inheritdoc":0,"modifier":["public"],"return":""},"getMetadata":{"params":[],"docComment":"Returns file-specific meta-data saved with a file","signature":"public PharFileInfo::getMetadata( )","inheritdoc":0,"modifier":["public"],"return":""},"getPharFlags":{"params":[],"docComment":"Returns the Phar file entry flags","signature":"public PharFileInfo::getPharFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"hasMetadata":{"params":[],"docComment":"Returns the metadata of the entry","signature":"public PharFileInfo::hasMetadata( )","inheritdoc":0,"modifier":["public"],"return":""},"isCRCChecked":{"params":[],"docComment":"Returns whether file entry has had its CRC verified","signature":"public PharFileInfo::isCRCChecked( )","inheritdoc":0,"modifier":["public"],"return":""},"isCompressed":{"params":{"$compression_type":""},"docComment":"Returns whether the entry is compressed","signature":"public PharFileInfo::isCompressed([int $compression_type] )","inheritdoc":0,"modifier":["public"],"return":""},"isCompressedBZIP2":{"params":[],"docComment":"Returns whether the entry is compressed using bzip2","signature":"public PharFileInfo::isCompressedBZIP2( )","inheritdoc":0,"modifier":["public"],"return":""},"isCompressedGZ":{"params":[],"docComment":"Returns whether the entry is compressed using gz","signature":"public PharFileInfo::isCompressedGZ( )","inheritdoc":0,"modifier":["public"],"return":""},"setCompressedBZIP2":{"params":[],"docComment":"Compresses the current Phar entry within the phar using Bzip2 compression","signature":"public PharFileInfo::setCompressedBZIP2( )","inheritdoc":0,"modifier":["public"],"return":""},"setCompressedGZ":{"params":[],"docComment":"Compresses the current Phar entry within the phar using gz compression","signature":"public PharFileInfo::setCompressedGZ( )","inheritdoc":0,"modifier":["public"],"return":""},"setMetadata":{"params":{"$metadata":""},"docComment":"Sets file-specific meta-data saved with a file","signature":"public PharFileInfo::setMetadata(mixed $metadata )","inheritdoc":0,"modifier":["public"],"return":""},"setUncompressed":{"params":[],"docComment":"Uncompresses the current Phar entry within the phar, if it is compressed","signature":"public PharFileInfo::setUncompressed( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"PharException":{"classname":"PharException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Reflection":{"classname":"Reflection","docComment":"","methods":{"modifier":{"public":["export","getModifierNames"],"private":[],"protected":[],"final":[],"static":["export","getModifierNames"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","export":{"params":{"$reflector":"Reflector","$return":""},"docComment":"Exports","signature":"static Reflection::export(Reflector $reflector ,[bool $return] )","inheritdoc":0,"modifier":["public","static"],"return":""},"getModifierNames":{"params":{"$modifiers":""},"docComment":"Gets modifier names","signature":"static Reflection::getModifierNames(int $modifiers )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ReflectionClass":{"classname":"ReflectionClass","docComment":"","methods":{"modifier":{"public":["__construct","export","getConstant","getConstants","getConstructor","getDefaultProperties","getDocComment","getEndLine","getExtension","getExtensionName","getFileName","getInterfaceNames","getInterfaces","getMethod","getMethods","getModifiers","getName","getNamespaceName","getParentClass","getProperties","getProperty","getShortName","getStartLine","getStaticProperties","getStaticPropertyValue","getTraitAliases","getTraitNames","getTraits","hasConstant","hasMethod","hasProperty","implementsInterface","inNamespace","isAbstract","isCloneable","isFinal","isInstance","isInstantiable","isInterface","isInternal","isIterateable","isSubclassOf","isTrait","isUserDefined","newInstance","newInstanceArgs","newInstanceWithoutConstructor","setStaticPropertyValue","__toString"],"private":[],"protected":[],"final":[],"static":["export"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$argument":""},"docComment":"Constructs a ReflectionClass","signature":"public ReflectionClass::__construct(mixed $argument )","inheritdoc":0,"modifier":["public"],"return":""},"export":{"params":{"$argument":"","$return":""},"docComment":"Exports a class","signature":"static ReflectionClass::export(mixed $argument ,[bool $return] )","inheritdoc":0,"modifier":["public","static"],"return":""},"getConstant":{"params":{"$name":""},"docComment":"Gets defined constant","signature":"public ReflectionClass::getConstant(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"getConstants":{"params":[],"docComment":"Gets constants","signature":"public ReflectionClass::getConstants( )","inheritdoc":0,"modifier":["public"],"return":""},"getConstructor":{"params":[],"docComment":"Gets the constructor of the class","signature":"public ReflectionClass::getConstructor( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionMethod"},"getDefaultProperties":{"params":[],"docComment":"Gets default properties","signature":"public ReflectionClass::getDefaultProperties( )","inheritdoc":0,"modifier":["public"],"return":""},"getDocComment":{"params":[],"docComment":"Gets doc comments","signature":"public ReflectionClass::getDocComment( )","inheritdoc":0,"modifier":["public"],"return":""},"getEndLine":{"params":[],"docComment":"Gets end line","signature":"public ReflectionClass::getEndLine( )","inheritdoc":0,"modifier":["public"],"return":""},"getExtension":{"params":[],"docComment":"Gets a  object for the extension which defined the class","signature":"public ReflectionClass::getExtension( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionExtension"},"getExtensionName":{"params":[],"docComment":"Gets the name of the extension which defined the class","signature":"public ReflectionClass::getExtensionName( )","inheritdoc":0,"modifier":["public"],"return":""},"getFileName":{"params":[],"docComment":"Gets the filename of the file in which the class has been defined","signature":"public ReflectionClass::getFileName( )","inheritdoc":0,"modifier":["public"],"return":""},"getInterfaceNames":{"params":[],"docComment":"Gets the interface names","signature":"public ReflectionClass::getInterfaceNames( )","inheritdoc":0,"modifier":["public"],"return":""},"getInterfaces":{"params":[],"docComment":"Gets the interfaces","signature":"public ReflectionClass::getInterfaces( )","inheritdoc":0,"modifier":["public"],"return":""},"getMethod":{"params":{"$name":""},"docComment":"Gets a  for a class method.","signature":"public ReflectionClass::getMethod(string $name )","inheritdoc":0,"modifier":["public"],"return":"ReflectionMethod"},"getMethods":{"params":{"$filter":""},"docComment":"Gets an array of methods","signature":"public ReflectionClass::getMethods(int $filter )","inheritdoc":0,"modifier":["public"],"return":""},"getModifiers":{"params":[],"docComment":"Gets modifiers","signature":"public ReflectionClass::getModifiers( )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":[],"docComment":"Gets class name","signature":"public ReflectionClass::getName( )","inheritdoc":0,"modifier":["public"],"return":""},"getNamespaceName":{"params":[],"docComment":"Gets namespace name","signature":"public ReflectionClass::getNamespaceName( )","inheritdoc":0,"modifier":["public"],"return":""},"getParentClass":{"params":[],"docComment":"Gets parent class","signature":"public ReflectionClass::getParentClass( )","inheritdoc":0,"modifier":["public"],"return":""},"getProperties":{"params":{"$filter":""},"docComment":"Gets properties","signature":"public ReflectionClass::getProperties(int $filter )","inheritdoc":0,"modifier":["public"],"return":""},"getProperty":{"params":{"$name":""},"docComment":"Gets a  for a class's property","signature":"public ReflectionClass::getProperty(string $name )","inheritdoc":0,"modifier":["public"],"return":"ReflectionProperty"},"getShortName":{"params":[],"docComment":"Gets short name","signature":"public ReflectionClass::getShortName( )","inheritdoc":0,"modifier":["public"],"return":""},"getStartLine":{"params":[],"docComment":"Gets starting line number","signature":"public ReflectionClass::getStartLine( )","inheritdoc":0,"modifier":["public"],"return":""},"getStaticProperties":{"params":[],"docComment":"Gets static properties","signature":"public ReflectionClass::getStaticProperties( )","inheritdoc":0,"modifier":["public"],"return":""},"getStaticPropertyValue":{"params":{"$name":"","&$def_value":""},"docComment":"Gets static property value","signature":"public ReflectionClass::getStaticPropertyValue(string $name ,mixed &$def_value )","inheritdoc":0,"modifier":["public"],"return":""},"getTraitAliases":{"params":[],"docComment":"Returns an array of trait aliases","signature":"public ReflectionClass::getTraitAliases( )","inheritdoc":0,"modifier":["public"],"return":""},"getTraitNames":{"params":[],"docComment":"Returns an array of names of traits used by this class","signature":"public ReflectionClass::getTraitNames( )","inheritdoc":0,"modifier":["public"],"return":""},"getTraits":{"params":[],"docComment":"Returns an array of traits used by this class","signature":"public ReflectionClass::getTraits( )","inheritdoc":0,"modifier":["public"],"return":""},"hasConstant":{"params":{"$name":""},"docComment":"Checks if constant is defined","signature":"public ReflectionClass::hasConstant(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"hasMethod":{"params":{"$name":""},"docComment":"Checks if method is defined","signature":"public ReflectionClass::hasMethod(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"hasProperty":{"params":{"$name":""},"docComment":"Checks if property is defined","signature":"public ReflectionClass::hasProperty(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"implementsInterface":{"params":{"$interface":""},"docComment":"Implements interface","signature":"public ReflectionClass::implementsInterface(string $interface )","inheritdoc":0,"modifier":["public"],"return":""},"inNamespace":{"params":[],"docComment":"Checks if in namespace","signature":"public ReflectionClass::inNamespace( )","inheritdoc":0,"modifier":["public"],"return":""},"isAbstract":{"params":[],"docComment":"Checks if class is abstract","signature":"public ReflectionClass::isAbstract( )","inheritdoc":0,"modifier":["public"],"return":""},"isCloneable":{"params":[],"docComment":"Returns whether this class is cloneable","signature":"public ReflectionClass::isCloneable( )","inheritdoc":0,"modifier":["public"],"return":""},"isFinal":{"params":[],"docComment":"Checks if class is final","signature":"public ReflectionClass::isFinal( )","inheritdoc":0,"modifier":["public"],"return":""},"isInstance":{"params":{"$object":""},"docComment":"Checks class for instance","signature":"public ReflectionClass::isInstance(object $object )","inheritdoc":0,"modifier":["public"],"return":""},"isInstantiable":{"params":[],"docComment":"Checks if the class is instantiable","signature":"public ReflectionClass::isInstantiable( )","inheritdoc":0,"modifier":["public"],"return":""},"isInterface":{"params":[],"docComment":"Checks if the class is an interface","signature":"public ReflectionClass::isInterface( )","inheritdoc":0,"modifier":["public"],"return":""},"isInternal":{"params":[],"docComment":"Checks if class is defined internally by an extension, or the core","signature":"public ReflectionClass::isInternal( )","inheritdoc":0,"modifier":["public"],"return":""},"isIterateable":{"params":[],"docComment":"Checks if iterateable","signature":"public ReflectionClass::isIterateable( )","inheritdoc":0,"modifier":["public"],"return":""},"isSubclassOf":{"params":{"$class":""},"docComment":"Checks if a subclass","signature":"public ReflectionClass::isSubclassOf(string $class )","inheritdoc":0,"modifier":["public"],"return":""},"isTrait":{"params":[],"docComment":"Returns whether this is a trait","signature":"public ReflectionClass::isTrait( )","inheritdoc":0,"modifier":["public"],"return":""},"isUserDefined":{"params":[],"docComment":"Checks if user defined","signature":"public ReflectionClass::isUserDefined( )","inheritdoc":0,"modifier":["public"],"return":""},"newInstance":{"params":{"$args":"","$...":""},"docComment":"Creates a new class instance from given arguments.","signature":"public ReflectionClass::newInstance(mixed $args ,mixed $... )","inheritdoc":0,"modifier":["public"],"return":""},"newInstanceArgs":{"params":{"$args":""},"docComment":"Creates a new class instance from given arguments.","signature":"public ReflectionClass::newInstanceArgs(array $args )","inheritdoc":0,"modifier":["public"],"return":""},"newInstanceWithoutConstructor":{"params":[],"docComment":"Creates a new class instance without invoking the constructor.","signature":"public ReflectionClass::newInstanceWithoutConstructor( )","inheritdoc":0,"modifier":["public"],"return":""},"setStaticPropertyValue":{"params":{"$name":"","$value":""},"docComment":"Sets static property value","signature":"public ReflectionClass::setStaticPropertyValue(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Returns the string representation of the ReflectionClass object.","signature":"public ReflectionClass::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["name"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["IS_IMPLICIT_ABSTRACT","IS_EXPLICIT_ABSTRACT","IS_FINAL"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","IS_IMPLICIT_ABSTRACT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_EXPLICIT_ABSTRACT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_FINAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ReflectionZendExtension":{"classname":"ReflectionZendExtension","docComment":"","methods":{"modifier":{"public":["__construct","export","getAuthor","getCopyright","getName","getURL","getVersion","__toString"],"private":["__clone"],"protected":[],"final":["__clone"],"static":["export"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__clone":{"params":[],"docComment":"Clone handler","signature":"private ReflectionZendExtension::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""},"__construct":{"params":{"$name":""},"docComment":"Constructor","signature":"public ReflectionZendExtension::__construct(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"export":{"params":{"$name":"","$return":""},"docComment":"Export","signature":"static ReflectionZendExtension::export(string $name ,string $return )","inheritdoc":0,"modifier":["public","static"],"return":""},"getAuthor":{"params":[],"docComment":"Gets author","signature":"public ReflectionZendExtension::getAuthor( )","inheritdoc":0,"modifier":["public"],"return":""},"getCopyright":{"params":[],"docComment":"Gets copyright","signature":"public ReflectionZendExtension::getCopyright( )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":[],"docComment":"Gets name","signature":"public ReflectionZendExtension::getName( )","inheritdoc":0,"modifier":["public"],"return":""},"getURL":{"params":[],"docComment":"Gets URL","signature":"public ReflectionZendExtension::getURL( )","inheritdoc":0,"modifier":["public"],"return":""},"getVersion":{"params":[],"docComment":"Gets version","signature":"public ReflectionZendExtension::getVersion( )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"To string handler","signature":"public ReflectionZendExtension::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["name"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ReflectionExtension":{"classname":"ReflectionExtension","docComment":"","methods":{"modifier":{"public":["__construct","export","getClasses","getClassNames","getConstants","getDependencies","getFunctions","getINIEntries","getName","getVersion","info","isPersistent","isTemporary","__toString"],"private":["__clone"],"protected":[],"final":["__clone"],"static":["export"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__clone":{"params":[],"docComment":"Clones","signature":"private ReflectionExtension::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""},"__construct":{"params":{"$name":""},"docComment":"Constructs a ReflectionExtension","signature":"public ReflectionExtension::__construct(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"export":{"params":{"$name":"","$return":""},"docComment":"Export","signature":"static ReflectionExtension::export(string $name ,[string $return] )","inheritdoc":0,"modifier":["public","static"],"return":""},"getClasses":{"params":[],"docComment":"Gets classes","signature":"public ReflectionExtension::getClasses( )","inheritdoc":0,"modifier":["public"],"return":""},"getClassNames":{"params":[],"docComment":"Gets class names","signature":"public ReflectionExtension::getClassNames( )","inheritdoc":0,"modifier":["public"],"return":""},"getConstants":{"params":[],"docComment":"Gets constants","signature":"public ReflectionExtension::getConstants( )","inheritdoc":0,"modifier":["public"],"return":""},"getDependencies":{"params":[],"docComment":"Gets dependencies","signature":"public ReflectionExtension::getDependencies( )","inheritdoc":0,"modifier":["public"],"return":""},"getFunctions":{"params":[],"docComment":"Gets extension functions","signature":"public ReflectionExtension::getFunctions( )","inheritdoc":0,"modifier":["public"],"return":""},"getINIEntries":{"params":[],"docComment":"Gets extension ini entries","signature":"public ReflectionExtension::getINIEntries( )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":[],"docComment":"Gets extension name","signature":"public ReflectionExtension::getName( )","inheritdoc":0,"modifier":["public"],"return":""},"getVersion":{"params":[],"docComment":"Gets extension version","signature":"public ReflectionExtension::getVersion( )","inheritdoc":0,"modifier":["public"],"return":""},"info":{"params":[],"docComment":"Print extension info","signature":"public ReflectionExtension::info( )","inheritdoc":0,"modifier":["public"],"return":""},"isPersistent":{"params":[],"docComment":"Returns whether this extension is persistent","signature":"public ReflectionExtension::isPersistent( )","inheritdoc":0,"modifier":["public"],"return":""},"isTemporary":{"params":[],"docComment":"Returns whether this extension is temporary","signature":"public ReflectionExtension::isTemporary( )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"To string","signature":"public ReflectionExtension::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["name"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ReflectionFunction":{"classname":"ReflectionFunction","docComment":"","methods":{"modifier":{"public":["__construct","export","getClosure","invoke","invokeArgs","isDisabled","__toString","getClosureScopeClass","getClosureThis","getDocComment","getEndLine","getExtension","getExtensionName","getFileName","getName","getNamespaceName","getNumberOfParameters","getNumberOfRequiredParameters","getParameters","getShortName","getStartLine","getStaticVariables","inNamespace","isClosure","isDeprecated","isGenerator","isInternal","isUserDefined","returnsReference","__toString"],"private":["__clone"],"protected":[],"final":["__clone"],"static":["export"],"interface":[],"abstract":["__toString"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$name":""},"docComment":"Constructs a ReflectionFunction object","signature":"public ReflectionFunction::__construct(mixed $name )","inheritdoc":0,"modifier":["public"],"return":""},"export":{"params":{"$name":"","$return":""},"docComment":"Exports function","signature":"static ReflectionFunction::export(string $name ,string $return )","inheritdoc":0,"modifier":["public","static"],"return":""},"getClosure":{"params":[],"docComment":"Returns a dynamically created closure for the function","signature":"public ReflectionFunction::getClosure( )","inheritdoc":0,"modifier":["public"],"return":"Closure"},"invoke":{"params":{"$parameter":"","$...":""},"docComment":"Invokes function","signature":"public ReflectionFunction::invoke(mixed $parameter ,mixed $... )","inheritdoc":0,"modifier":["public"],"return":""},"invokeArgs":{"params":{"$args":""},"docComment":"Invokes function args","signature":"public ReflectionFunction::invokeArgs(array $args )","inheritdoc":0,"modifier":["public"],"return":""},"isDisabled":{"params":[],"docComment":"Checks if function is disabled","signature":"public ReflectionFunction::isDisabled( )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"To string","signature":"public ReflectionFunctionAbstract::__toString( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"__clone":{"params":[],"docComment":"Clones function","signature":"private ReflectionFunctionAbstract::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""},"getClosureScopeClass":{"params":[],"docComment":"Returns the scope associated to the closure","signature":"public ReflectionFunctionAbstract::getClosureScopeClass( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionClass"},"getClosureThis":{"params":[],"docComment":"Returns this pointer bound to closure","signature":"public ReflectionFunctionAbstract::getClosureThis( )","inheritdoc":0,"modifier":["public"],"return":""},"getDocComment":{"params":[],"docComment":"Gets doc comment","signature":"public ReflectionFunctionAbstract::getDocComment( )","inheritdoc":0,"modifier":["public"],"return":""},"getEndLine":{"params":[],"docComment":"Gets end line number","signature":"public ReflectionFunctionAbstract::getEndLine( )","inheritdoc":0,"modifier":["public"],"return":""},"getExtension":{"params":[],"docComment":"Gets extension info","signature":"public ReflectionFunctionAbstract::getExtension( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionExtension"},"getExtensionName":{"params":[],"docComment":"Gets extension name","signature":"public ReflectionFunctionAbstract::getExtensionName( )","inheritdoc":0,"modifier":["public"],"return":""},"getFileName":{"params":[],"docComment":"Gets file name","signature":"public ReflectionFunctionAbstract::getFileName( )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":[],"docComment":"Gets function name","signature":"public ReflectionFunctionAbstract::getName( )","inheritdoc":0,"modifier":["public"],"return":""},"getNamespaceName":{"params":[],"docComment":"Gets namespace name","signature":"public ReflectionFunctionAbstract::getNamespaceName( )","inheritdoc":0,"modifier":["public"],"return":""},"getNumberOfParameters":{"params":[],"docComment":"Gets number of parameters","signature":"public ReflectionFunctionAbstract::getNumberOfParameters( )","inheritdoc":0,"modifier":["public"],"return":""},"getNumberOfRequiredParameters":{"params":[],"docComment":"Gets number of required parameters","signature":"public ReflectionFunctionAbstract::getNumberOfRequiredParameters( )","inheritdoc":0,"modifier":["public"],"return":""},"getParameters":{"params":[],"docComment":"Gets parameters","signature":"public ReflectionFunctionAbstract::getParameters( )","inheritdoc":0,"modifier":["public"],"return":""},"getShortName":{"params":[],"docComment":"Gets function short name","signature":"public ReflectionFunctionAbstract::getShortName( )","inheritdoc":0,"modifier":["public"],"return":""},"getStartLine":{"params":[],"docComment":"Gets starting line number","signature":"public ReflectionFunctionAbstract::getStartLine( )","inheritdoc":0,"modifier":["public"],"return":""},"getStaticVariables":{"params":[],"docComment":"Gets static variables","signature":"public ReflectionFunctionAbstract::getStaticVariables( )","inheritdoc":0,"modifier":["public"],"return":""},"inNamespace":{"params":[],"docComment":"Checks if function in namespace","signature":"public ReflectionFunctionAbstract::inNamespace( )","inheritdoc":0,"modifier":["public"],"return":""},"isClosure":{"params":[],"docComment":"Checks if closure","signature":"public ReflectionFunctionAbstract::isClosure( )","inheritdoc":0,"modifier":["public"],"return":""},"isDeprecated":{"params":[],"docComment":"Checks if deprecated","signature":"public ReflectionFunctionAbstract::isDeprecated( )","inheritdoc":0,"modifier":["public"],"return":""},"isGenerator":{"params":[],"docComment":"Returns whether this function is a generator","signature":"public ReflectionFunctionAbstract::isGenerator( )","inheritdoc":0,"modifier":["public"],"return":""},"isInternal":{"params":[],"docComment":"Checks if is internal","signature":"public ReflectionFunctionAbstract::isInternal( )","inheritdoc":0,"modifier":["public"],"return":""},"isUserDefined":{"params":[],"docComment":"Checks if user defined","signature":"public ReflectionFunctionAbstract::isUserDefined( )","inheritdoc":0,"modifier":["public"],"return":""},"returnsReference":{"params":[],"docComment":"Checks if returns reference","signature":"public ReflectionFunctionAbstract::returnsReference( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["name"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["IS_DEPRECATED"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","IS_DEPRECATED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ReflectionFunctionAbstract":{"classname":"ReflectionFunctionAbstract","docComment":"","methods":{"modifier":{"public":["getClosureScopeClass","getClosureThis","getDocComment","getEndLine","getExtension","getExtensionName","getFileName","getName","getNamespaceName","getNumberOfParameters","getNumberOfRequiredParameters","getParameters","getShortName","getStartLine","getStaticVariables","inNamespace","isClosure","isDeprecated","isGenerator","isInternal","isUserDefined","returnsReference","__toString"],"private":["__clone"],"protected":[],"final":["__clone"],"static":[],"interface":[],"abstract":["__toString"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__clone":{"params":[],"docComment":"Clones function","signature":"private ReflectionFunctionAbstract::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""},"getClosureScopeClass":{"params":[],"docComment":"Returns the scope associated to the closure","signature":"public ReflectionFunctionAbstract::getClosureScopeClass( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionClass"},"getClosureThis":{"params":[],"docComment":"Returns this pointer bound to closure","signature":"public ReflectionFunctionAbstract::getClosureThis( )","inheritdoc":0,"modifier":["public"],"return":""},"getDocComment":{"params":[],"docComment":"Gets doc comment","signature":"public ReflectionFunctionAbstract::getDocComment( )","inheritdoc":0,"modifier":["public"],"return":""},"getEndLine":{"params":[],"docComment":"Gets end line number","signature":"public ReflectionFunctionAbstract::getEndLine( )","inheritdoc":0,"modifier":["public"],"return":""},"getExtension":{"params":[],"docComment":"Gets extension info","signature":"public ReflectionFunctionAbstract::getExtension( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionExtension"},"getExtensionName":{"params":[],"docComment":"Gets extension name","signature":"public ReflectionFunctionAbstract::getExtensionName( )","inheritdoc":0,"modifier":["public"],"return":""},"getFileName":{"params":[],"docComment":"Gets file name","signature":"public ReflectionFunctionAbstract::getFileName( )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":[],"docComment":"Gets function name","signature":"public ReflectionFunctionAbstract::getName( )","inheritdoc":0,"modifier":["public"],"return":""},"getNamespaceName":{"params":[],"docComment":"Gets namespace name","signature":"public ReflectionFunctionAbstract::getNamespaceName( )","inheritdoc":0,"modifier":["public"],"return":""},"getNumberOfParameters":{"params":[],"docComment":"Gets number of parameters","signature":"public ReflectionFunctionAbstract::getNumberOfParameters( )","inheritdoc":0,"modifier":["public"],"return":""},"getNumberOfRequiredParameters":{"params":[],"docComment":"Gets number of required parameters","signature":"public ReflectionFunctionAbstract::getNumberOfRequiredParameters( )","inheritdoc":0,"modifier":["public"],"return":""},"getParameters":{"params":[],"docComment":"Gets parameters","signature":"public ReflectionFunctionAbstract::getParameters( )","inheritdoc":0,"modifier":["public"],"return":""},"getShortName":{"params":[],"docComment":"Gets function short name","signature":"public ReflectionFunctionAbstract::getShortName( )","inheritdoc":0,"modifier":["public"],"return":""},"getStartLine":{"params":[],"docComment":"Gets starting line number","signature":"public ReflectionFunctionAbstract::getStartLine( )","inheritdoc":0,"modifier":["public"],"return":""},"getStaticVariables":{"params":[],"docComment":"Gets static variables","signature":"public ReflectionFunctionAbstract::getStaticVariables( )","inheritdoc":0,"modifier":["public"],"return":""},"inNamespace":{"params":[],"docComment":"Checks if function in namespace","signature":"public ReflectionFunctionAbstract::inNamespace( )","inheritdoc":0,"modifier":["public"],"return":""},"isClosure":{"params":[],"docComment":"Checks if closure","signature":"public ReflectionFunctionAbstract::isClosure( )","inheritdoc":0,"modifier":["public"],"return":""},"isDeprecated":{"params":[],"docComment":"Checks if deprecated","signature":"public ReflectionFunctionAbstract::isDeprecated( )","inheritdoc":0,"modifier":["public"],"return":""},"isGenerator":{"params":[],"docComment":"Returns whether this function is a generator","signature":"public ReflectionFunctionAbstract::isGenerator( )","inheritdoc":0,"modifier":["public"],"return":""},"isInternal":{"params":[],"docComment":"Checks if is internal","signature":"public ReflectionFunctionAbstract::isInternal( )","inheritdoc":0,"modifier":["public"],"return":""},"isUserDefined":{"params":[],"docComment":"Checks if user defined","signature":"public ReflectionFunctionAbstract::isUserDefined( )","inheritdoc":0,"modifier":["public"],"return":""},"returnsReference":{"params":[],"docComment":"Checks if returns reference","signature":"public ReflectionFunctionAbstract::returnsReference( )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"To string","signature":"public ReflectionFunctionAbstract::__toString( )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":["name"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ReflectionMethod":{"classname":"ReflectionMethod","docComment":"","methods":{"modifier":{"public":["__construct","__construct","export","getClosure","getDeclaringClass","getModifiers","getPrototype","invoke","invokeArgs","isAbstract","isConstructor","isDestructor","isFinal","isPrivate","isProtected","isPublic","isStatic","setAccessible","__toString","getClosureScopeClass","getClosureThis","getDocComment","getEndLine","getExtension","getExtensionName","getFileName","getName","getNamespaceName","getNumberOfParameters","getNumberOfRequiredParameters","getParameters","getShortName","getStartLine","getStaticVariables","inNamespace","isClosure","isDeprecated","isGenerator","isInternal","isUserDefined","returnsReference","__toString"],"private":["__clone"],"protected":[],"final":["__clone"],"static":["export"],"interface":[],"abstract":["__toString"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$class":"","$name":"","$class_method":""},"docComment":"Constructs a ReflectionMethod","signature":"public ReflectionMethod::__construct(string $class_method )","inheritdoc":0,"modifier":["public","public"],"return":""},"export":{"params":{"$class":"","$name":"","$return":""},"docComment":"Export a reflection method.","signature":"static ReflectionMethod::export(string $class ,string $name ,[bool $return] )","inheritdoc":0,"modifier":["public","static"],"return":""},"getClosure":{"params":{"$object":""},"docComment":"Returns a dynamically created closure for the method","signature":"public ReflectionMethod::getClosure(string $object )","inheritdoc":0,"modifier":["public"],"return":"Closure"},"getDeclaringClass":{"params":[],"docComment":"Gets declaring class for the reflected method.","signature":"public ReflectionMethod::getDeclaringClass( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionClass"},"getModifiers":{"params":[],"docComment":"Gets the method modifiers","signature":"public ReflectionMethod::getModifiers( )","inheritdoc":0,"modifier":["public"],"return":""},"getPrototype":{"params":[],"docComment":"Gets the method prototype (if there is one).","signature":"public ReflectionMethod::getPrototype( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionMethod"},"invoke":{"params":{"$object":"","$parameter":"","$...":""},"docComment":"Invoke","signature":"public ReflectionMethod::invoke(object $object ,mixed $parameter ,mixed $... )","inheritdoc":0,"modifier":["public"],"return":""},"invokeArgs":{"params":{"$object":"","$args":""},"docComment":"Invoke args","signature":"public ReflectionMethod::invokeArgs(object $object ,array $args )","inheritdoc":0,"modifier":["public"],"return":""},"isAbstract":{"params":[],"docComment":"Checks if method is abstract","signature":"public ReflectionMethod::isAbstract( )","inheritdoc":0,"modifier":["public"],"return":""},"isConstructor":{"params":[],"docComment":"Checks if method is a constructor","signature":"public ReflectionMethod::isConstructor( )","inheritdoc":0,"modifier":["public"],"return":""},"isDestructor":{"params":[],"docComment":"Checks if method is a destructor","signature":"public ReflectionMethod::isDestructor( )","inheritdoc":0,"modifier":["public"],"return":""},"isFinal":{"params":[],"docComment":"Checks if method is final","signature":"public ReflectionMethod::isFinal( )","inheritdoc":0,"modifier":["public"],"return":""},"isPrivate":{"params":[],"docComment":"Checks if method is private","signature":"public ReflectionMethod::isPrivate( )","inheritdoc":0,"modifier":["public"],"return":""},"isProtected":{"params":[],"docComment":"Checks if method is protected","signature":"public ReflectionMethod::isProtected( )","inheritdoc":0,"modifier":["public"],"return":""},"isPublic":{"params":[],"docComment":"Checks if method is public","signature":"public ReflectionMethod::isPublic( )","inheritdoc":0,"modifier":["public"],"return":""},"isStatic":{"params":[],"docComment":"Checks if method is static","signature":"public ReflectionMethod::isStatic( )","inheritdoc":0,"modifier":["public"],"return":""},"setAccessible":{"params":{"$accessible":""},"docComment":"Set method accessibility","signature":"public ReflectionMethod::setAccessible(bool $accessible )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"To string","signature":"public ReflectionFunctionAbstract::__toString( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"__clone":{"params":[],"docComment":"Clones function","signature":"private ReflectionFunctionAbstract::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""},"getClosureScopeClass":{"params":[],"docComment":"Returns the scope associated to the closure","signature":"public ReflectionFunctionAbstract::getClosureScopeClass( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionClass"},"getClosureThis":{"params":[],"docComment":"Returns this pointer bound to closure","signature":"public ReflectionFunctionAbstract::getClosureThis( )","inheritdoc":0,"modifier":["public"],"return":""},"getDocComment":{"params":[],"docComment":"Gets doc comment","signature":"public ReflectionFunctionAbstract::getDocComment( )","inheritdoc":0,"modifier":["public"],"return":""},"getEndLine":{"params":[],"docComment":"Gets end line number","signature":"public ReflectionFunctionAbstract::getEndLine( )","inheritdoc":0,"modifier":["public"],"return":""},"getExtension":{"params":[],"docComment":"Gets extension info","signature":"public ReflectionFunctionAbstract::getExtension( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionExtension"},"getExtensionName":{"params":[],"docComment":"Gets extension name","signature":"public ReflectionFunctionAbstract::getExtensionName( )","inheritdoc":0,"modifier":["public"],"return":""},"getFileName":{"params":[],"docComment":"Gets file name","signature":"public ReflectionFunctionAbstract::getFileName( )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":[],"docComment":"Gets function name","signature":"public ReflectionFunctionAbstract::getName( )","inheritdoc":0,"modifier":["public"],"return":""},"getNamespaceName":{"params":[],"docComment":"Gets namespace name","signature":"public ReflectionFunctionAbstract::getNamespaceName( )","inheritdoc":0,"modifier":["public"],"return":""},"getNumberOfParameters":{"params":[],"docComment":"Gets number of parameters","signature":"public ReflectionFunctionAbstract::getNumberOfParameters( )","inheritdoc":0,"modifier":["public"],"return":""},"getNumberOfRequiredParameters":{"params":[],"docComment":"Gets number of required parameters","signature":"public ReflectionFunctionAbstract::getNumberOfRequiredParameters( )","inheritdoc":0,"modifier":["public"],"return":""},"getParameters":{"params":[],"docComment":"Gets parameters","signature":"public ReflectionFunctionAbstract::getParameters( )","inheritdoc":0,"modifier":["public"],"return":""},"getShortName":{"params":[],"docComment":"Gets function short name","signature":"public ReflectionFunctionAbstract::getShortName( )","inheritdoc":0,"modifier":["public"],"return":""},"getStartLine":{"params":[],"docComment":"Gets starting line number","signature":"public ReflectionFunctionAbstract::getStartLine( )","inheritdoc":0,"modifier":["public"],"return":""},"getStaticVariables":{"params":[],"docComment":"Gets static variables","signature":"public ReflectionFunctionAbstract::getStaticVariables( )","inheritdoc":0,"modifier":["public"],"return":""},"inNamespace":{"params":[],"docComment":"Checks if function in namespace","signature":"public ReflectionFunctionAbstract::inNamespace( )","inheritdoc":0,"modifier":["public"],"return":""},"isClosure":{"params":[],"docComment":"Checks if closure","signature":"public ReflectionFunctionAbstract::isClosure( )","inheritdoc":0,"modifier":["public"],"return":""},"isDeprecated":{"params":[],"docComment":"Checks if deprecated","signature":"public ReflectionFunctionAbstract::isDeprecated( )","inheritdoc":0,"modifier":["public"],"return":""},"isGenerator":{"params":[],"docComment":"Returns whether this function is a generator","signature":"public ReflectionFunctionAbstract::isGenerator( )","inheritdoc":0,"modifier":["public"],"return":""},"isInternal":{"params":[],"docComment":"Checks if is internal","signature":"public ReflectionFunctionAbstract::isInternal( )","inheritdoc":0,"modifier":["public"],"return":""},"isUserDefined":{"params":[],"docComment":"Checks if user defined","signature":"public ReflectionFunctionAbstract::isUserDefined( )","inheritdoc":0,"modifier":["public"],"return":""},"returnsReference":{"params":[],"docComment":"Checks if returns reference","signature":"public ReflectionFunctionAbstract::returnsReference( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["name","class"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["IS_STATIC","IS_PUBLIC","IS_PROTECTED","IS_PRIVATE","IS_ABSTRACT","IS_FINAL"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","IS_STATIC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_PUBLIC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_PROTECTED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_PRIVATE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_ABSTRACT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_FINAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"class":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ReflectionObject":{"classname":"ReflectionObject","docComment":"","methods":{"modifier":{"public":["__construct","export","__construct","export","getConstant","getConstants","getConstructor","getDefaultProperties","getDocComment","getEndLine","getExtension","getExtensionName","getFileName","getInterfaceNames","getInterfaces","getMethod","getMethods","getModifiers","getName","getNamespaceName","getParentClass","getProperties","getProperty","getShortName","getStartLine","getStaticProperties","getStaticPropertyValue","getTraitAliases","getTraitNames","getTraits","hasConstant","hasMethod","hasProperty","implementsInterface","inNamespace","isAbstract","isCloneable","isFinal","isInstance","isInstantiable","isInterface","isInternal","isIterateable","isSubclassOf","isTrait","isUserDefined","newInstance","newInstanceArgs","newInstanceWithoutConstructor","setStaticPropertyValue","__toString"],"private":[],"protected":[],"final":[],"static":["export","export"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$argument":""},"docComment":"Constructs a ReflectionClass","signature":"public ReflectionClass::__construct(mixed $argument )","inheritdoc":0,"modifier":["public"],"return":""},"export":{"params":{"$argument":"","$return":""},"docComment":"Exports a class","signature":"static ReflectionClass::export(mixed $argument ,[bool $return] )","inheritdoc":0,"modifier":["public","static"],"return":""},"getConstant":{"params":{"$name":""},"docComment":"Gets defined constant","signature":"public ReflectionClass::getConstant(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"getConstants":{"params":[],"docComment":"Gets constants","signature":"public ReflectionClass::getConstants( )","inheritdoc":0,"modifier":["public"],"return":""},"getConstructor":{"params":[],"docComment":"Gets the constructor of the class","signature":"public ReflectionClass::getConstructor( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionMethod"},"getDefaultProperties":{"params":[],"docComment":"Gets default properties","signature":"public ReflectionClass::getDefaultProperties( )","inheritdoc":0,"modifier":["public"],"return":""},"getDocComment":{"params":[],"docComment":"Gets doc comments","signature":"public ReflectionClass::getDocComment( )","inheritdoc":0,"modifier":["public"],"return":""},"getEndLine":{"params":[],"docComment":"Gets end line","signature":"public ReflectionClass::getEndLine( )","inheritdoc":0,"modifier":["public"],"return":""},"getExtension":{"params":[],"docComment":"Gets a  object for the extension which defined the class","signature":"public ReflectionClass::getExtension( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionExtension"},"getExtensionName":{"params":[],"docComment":"Gets the name of the extension which defined the class","signature":"public ReflectionClass::getExtensionName( )","inheritdoc":0,"modifier":["public"],"return":""},"getFileName":{"params":[],"docComment":"Gets the filename of the file in which the class has been defined","signature":"public ReflectionClass::getFileName( )","inheritdoc":0,"modifier":["public"],"return":""},"getInterfaceNames":{"params":[],"docComment":"Gets the interface names","signature":"public ReflectionClass::getInterfaceNames( )","inheritdoc":0,"modifier":["public"],"return":""},"getInterfaces":{"params":[],"docComment":"Gets the interfaces","signature":"public ReflectionClass::getInterfaces( )","inheritdoc":0,"modifier":["public"],"return":""},"getMethod":{"params":{"$name":""},"docComment":"Gets a  for a class method.","signature":"public ReflectionClass::getMethod(string $name )","inheritdoc":0,"modifier":["public"],"return":"ReflectionMethod"},"getMethods":{"params":{"$filter":""},"docComment":"Gets an array of methods","signature":"public ReflectionClass::getMethods(int $filter )","inheritdoc":0,"modifier":["public"],"return":""},"getModifiers":{"params":[],"docComment":"Gets modifiers","signature":"public ReflectionClass::getModifiers( )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":[],"docComment":"Gets class name","signature":"public ReflectionClass::getName( )","inheritdoc":0,"modifier":["public"],"return":""},"getNamespaceName":{"params":[],"docComment":"Gets namespace name","signature":"public ReflectionClass::getNamespaceName( )","inheritdoc":0,"modifier":["public"],"return":""},"getParentClass":{"params":[],"docComment":"Gets parent class","signature":"public ReflectionClass::getParentClass( )","inheritdoc":0,"modifier":["public"],"return":""},"getProperties":{"params":{"$filter":""},"docComment":"Gets properties","signature":"public ReflectionClass::getProperties(int $filter )","inheritdoc":0,"modifier":["public"],"return":""},"getProperty":{"params":{"$name":""},"docComment":"Gets a  for a class's property","signature":"public ReflectionClass::getProperty(string $name )","inheritdoc":0,"modifier":["public"],"return":"ReflectionProperty"},"getShortName":{"params":[],"docComment":"Gets short name","signature":"public ReflectionClass::getShortName( )","inheritdoc":0,"modifier":["public"],"return":""},"getStartLine":{"params":[],"docComment":"Gets starting line number","signature":"public ReflectionClass::getStartLine( )","inheritdoc":0,"modifier":["public"],"return":""},"getStaticProperties":{"params":[],"docComment":"Gets static properties","signature":"public ReflectionClass::getStaticProperties( )","inheritdoc":0,"modifier":["public"],"return":""},"getStaticPropertyValue":{"params":{"$name":"","&$def_value":""},"docComment":"Gets static property value","signature":"public ReflectionClass::getStaticPropertyValue(string $name ,mixed &$def_value )","inheritdoc":0,"modifier":["public"],"return":""},"getTraitAliases":{"params":[],"docComment":"Returns an array of trait aliases","signature":"public ReflectionClass::getTraitAliases( )","inheritdoc":0,"modifier":["public"],"return":""},"getTraitNames":{"params":[],"docComment":"Returns an array of names of traits used by this class","signature":"public ReflectionClass::getTraitNames( )","inheritdoc":0,"modifier":["public"],"return":""},"getTraits":{"params":[],"docComment":"Returns an array of traits used by this class","signature":"public ReflectionClass::getTraits( )","inheritdoc":0,"modifier":["public"],"return":""},"hasConstant":{"params":{"$name":""},"docComment":"Checks if constant is defined","signature":"public ReflectionClass::hasConstant(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"hasMethod":{"params":{"$name":""},"docComment":"Checks if method is defined","signature":"public ReflectionClass::hasMethod(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"hasProperty":{"params":{"$name":""},"docComment":"Checks if property is defined","signature":"public ReflectionClass::hasProperty(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"implementsInterface":{"params":{"$interface":""},"docComment":"Implements interface","signature":"public ReflectionClass::implementsInterface(string $interface )","inheritdoc":0,"modifier":["public"],"return":""},"inNamespace":{"params":[],"docComment":"Checks if in namespace","signature":"public ReflectionClass::inNamespace( )","inheritdoc":0,"modifier":["public"],"return":""},"isAbstract":{"params":[],"docComment":"Checks if class is abstract","signature":"public ReflectionClass::isAbstract( )","inheritdoc":0,"modifier":["public"],"return":""},"isCloneable":{"params":[],"docComment":"Returns whether this class is cloneable","signature":"public ReflectionClass::isCloneable( )","inheritdoc":0,"modifier":["public"],"return":""},"isFinal":{"params":[],"docComment":"Checks if class is final","signature":"public ReflectionClass::isFinal( )","inheritdoc":0,"modifier":["public"],"return":""},"isInstance":{"params":{"$object":""},"docComment":"Checks class for instance","signature":"public ReflectionClass::isInstance(object $object )","inheritdoc":0,"modifier":["public"],"return":""},"isInstantiable":{"params":[],"docComment":"Checks if the class is instantiable","signature":"public ReflectionClass::isInstantiable( )","inheritdoc":0,"modifier":["public"],"return":""},"isInterface":{"params":[],"docComment":"Checks if the class is an interface","signature":"public ReflectionClass::isInterface( )","inheritdoc":0,"modifier":["public"],"return":""},"isInternal":{"params":[],"docComment":"Checks if class is defined internally by an extension, or the core","signature":"public ReflectionClass::isInternal( )","inheritdoc":0,"modifier":["public"],"return":""},"isIterateable":{"params":[],"docComment":"Checks if iterateable","signature":"public ReflectionClass::isIterateable( )","inheritdoc":0,"modifier":["public"],"return":""},"isSubclassOf":{"params":{"$class":""},"docComment":"Checks if a subclass","signature":"public ReflectionClass::isSubclassOf(string $class )","inheritdoc":0,"modifier":["public"],"return":""},"isTrait":{"params":[],"docComment":"Returns whether this is a trait","signature":"public ReflectionClass::isTrait( )","inheritdoc":0,"modifier":["public"],"return":""},"isUserDefined":{"params":[],"docComment":"Checks if user defined","signature":"public ReflectionClass::isUserDefined( )","inheritdoc":0,"modifier":["public"],"return":""},"newInstance":{"params":{"$args":"","$...":""},"docComment":"Creates a new class instance from given arguments.","signature":"public ReflectionClass::newInstance(mixed $args ,mixed $... )","inheritdoc":0,"modifier":["public"],"return":""},"newInstanceArgs":{"params":{"$args":""},"docComment":"Creates a new class instance from given arguments.","signature":"public ReflectionClass::newInstanceArgs(array $args )","inheritdoc":0,"modifier":["public"],"return":""},"newInstanceWithoutConstructor":{"params":[],"docComment":"Creates a new class instance without invoking the constructor.","signature":"public ReflectionClass::newInstanceWithoutConstructor( )","inheritdoc":0,"modifier":["public"],"return":""},"setStaticPropertyValue":{"params":{"$name":"","$value":""},"docComment":"Sets static property value","signature":"public ReflectionClass::setStaticPropertyValue(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Returns the string representation of the ReflectionClass object.","signature":"public ReflectionClass::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["name"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["IS_IMPLICIT_ABSTRACT","IS_EXPLICIT_ABSTRACT","IS_FINAL"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","IS_IMPLICIT_ABSTRACT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_EXPLICIT_ABSTRACT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_FINAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ReflectionParameter":{"classname":"ReflectionParameter","docComment":"","methods":{"modifier":{"public":["allowsNull","canBePassedByValue","__construct","export","getClass","getDeclaringClass","getDeclaringFunction","getDefaultValue","getDefaultValueConstantName","getName","getPosition","isArray","isCallable","isDefaultValueAvailable","isDefaultValueConstant","isOptional","isPassedByReference","__toString"],"private":["__clone"],"protected":[],"final":["__clone"],"static":["export"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","allowsNull":{"params":[],"docComment":"Checks if null is allowed","signature":"public ReflectionParameter::allowsNull( )","inheritdoc":0,"modifier":["public"],"return":""},"canBePassedByValue":{"params":[],"docComment":"Returns whether this parameter can be passed by value","signature":"public ReflectionParameter::canBePassedByValue( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone","signature":"private ReflectionParameter::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""},"__construct":{"params":{"$function":"","$parameter":""},"docComment":"Construct","signature":"public ReflectionParameter::__construct(string $function ,string $parameter )","inheritdoc":0,"modifier":["public"],"return":""},"export":{"params":{"$function":"","$parameter":"","$return":""},"docComment":"Exports","signature":"static ReflectionParameter::export(string $function ,string $parameter ,bool $return )","inheritdoc":0,"modifier":["public","static"],"return":""},"getClass":{"params":[],"docComment":"Get class","signature":"public ReflectionParameter::getClass( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionClass"},"getDeclaringClass":{"params":[],"docComment":"Gets declaring class","signature":"public ReflectionParameter::getDeclaringClass( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionClass"},"getDeclaringFunction":{"params":[],"docComment":"Gets declaring function","signature":"public ReflectionParameter::getDeclaringFunction( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionFunction"},"getDefaultValue":{"params":[],"docComment":"Gets default parameter value","signature":"public ReflectionParameter::getDefaultValue( )","inheritdoc":0,"modifier":["public"],"return":""},"getDefaultValueConstantName":{"params":[],"docComment":"Returns the default value's constant name if default value is constant or null","signature":"public ReflectionParameter::getDefaultValueConstantName( )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":[],"docComment":"Gets parameter name","signature":"public ReflectionParameter::getName( )","inheritdoc":0,"modifier":["public"],"return":""},"getPosition":{"params":[],"docComment":"Gets parameter position","signature":"public ReflectionParameter::getPosition( )","inheritdoc":0,"modifier":["public"],"return":""},"isArray":{"params":[],"docComment":"Checks if parameter expects an array","signature":"public ReflectionParameter::isArray( )","inheritdoc":0,"modifier":["public"],"return":""},"isCallable":{"params":[],"docComment":"Returns whether parameter MUST be callable","signature":"public ReflectionParameter::isCallable( )","inheritdoc":0,"modifier":["public"],"return":""},"isDefaultValueAvailable":{"params":[],"docComment":"Checks if a default value is available","signature":"public ReflectionParameter::isDefaultValueAvailable( )","inheritdoc":0,"modifier":["public"],"return":""},"isDefaultValueConstant":{"params":[],"docComment":"Returns whether the default value of this parameter is constant","signature":"public ReflectionParameter::isDefaultValueConstant( )","inheritdoc":0,"modifier":["public"],"return":""},"isOptional":{"params":[],"docComment":"Checks if optional","signature":"public ReflectionParameter::isOptional( )","inheritdoc":0,"modifier":["public"],"return":""},"isPassedByReference":{"params":[],"docComment":"Checks if passed by reference","signature":"public ReflectionParameter::isPassedByReference( )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"To string","signature":"public ReflectionParameter::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["name"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ReflectionProperty":{"classname":"ReflectionProperty","docComment":"","methods":{"modifier":{"public":["__construct","export","getDeclaringClass","getDocComment","getModifiers","getName","getValue","getValue","isDefault","isPrivate","isProtected","isPublic","isStatic","setAccessible","setValue","setValue","__toString"],"private":["__clone"],"protected":[],"final":["__clone"],"static":["export"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__clone":{"params":[],"docComment":"Clone","signature":"private ReflectionProperty::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""},"__construct":{"params":{"$class":"","$name":""},"docComment":"Construct a ReflectionProperty object","signature":"public ReflectionProperty::__construct(mixed $class ,string $name )","inheritdoc":0,"modifier":["public"],"return":""},"export":{"params":{"$class":"","$name":"","$return":""},"docComment":"Export","signature":"static ReflectionProperty::export(mixed $class ,string $name ,bool $return )","inheritdoc":0,"modifier":["public","static"],"return":""},"getDeclaringClass":{"params":[],"docComment":"Gets declaring class","signature":"public ReflectionProperty::getDeclaringClass( )","inheritdoc":0,"modifier":["public"],"return":"ReflectionClass"},"getDocComment":{"params":[],"docComment":"Gets doc comment","signature":"public ReflectionProperty::getDocComment( )","inheritdoc":0,"modifier":["public"],"return":""},"getModifiers":{"params":[],"docComment":"Gets modifiers","signature":"public ReflectionProperty::getModifiers( )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":[],"docComment":"Gets property name","signature":"public ReflectionProperty::getName( )","inheritdoc":0,"modifier":["public"],"return":""},"getValue":{"params":{"$object":""},"docComment":"Gets value","signature":"public ReflectionProperty::getValue( )","inheritdoc":0,"modifier":["public","public"],"return":""},"isDefault":{"params":[],"docComment":"Checks if default value ","signature":"public ReflectionProperty::isDefault( )","inheritdoc":0,"modifier":["public"],"return":""},"isPrivate":{"params":[],"docComment":"Checks if property is private","signature":"public ReflectionProperty::isPrivate( )","inheritdoc":0,"modifier":["public"],"return":""},"isProtected":{"params":[],"docComment":"Checks if property is protected","signature":"public ReflectionProperty::isProtected( )","inheritdoc":0,"modifier":["public"],"return":""},"isPublic":{"params":[],"docComment":"Checks if property is public","signature":"public ReflectionProperty::isPublic( )","inheritdoc":0,"modifier":["public"],"return":""},"isStatic":{"params":[],"docComment":"Checks if property is static","signature":"public ReflectionProperty::isStatic( )","inheritdoc":0,"modifier":["public"],"return":""},"setAccessible":{"params":{"$accessible":""},"docComment":"Set property accessibility","signature":"public ReflectionProperty::setAccessible(bool $accessible )","inheritdoc":0,"modifier":["public"],"return":""},"setValue":{"params":{"$object":"","$value":""},"docComment":"Set property value","signature":"public ReflectionProperty::setValue(mixed $value )","inheritdoc":0,"modifier":["public","public"],"return":""},"__toString":{"params":[],"docComment":"To string","signature":"public ReflectionProperty::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["name","class"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["IS_STATIC","IS_PUBLIC","IS_PROTECTED","IS_PRIVATE"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","IS_STATIC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_PUBLIC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_PROTECTED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_PRIVATE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"class":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Reflector":{"classname":"Reflector","docComment":"","methods":{"modifier":{"public":["export","__toString"],"private":[],"protected":[],"final":[],"static":["export"],"interface":[],"abstract":["export","__toString"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","export":{"params":[],"docComment":"Exports","signature":"static Reflector::export( )","inheritdoc":0,"modifier":["abstract","public","static"],"return":""},"__toString":{"params":[],"docComment":"To string","signature":"public Reflector::__toString( )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ReflectionException":{"classname":"ReflectionException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SessionHandler":{"classname":"SessionHandler","docComment":"","methods":{"modifier":{"public":["close","destroy","gc","open","read","write"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","close":{"params":[],"docComment":"Close the session","signature":"public SessionHandler::close( )","inheritdoc":0,"modifier":["public"],"return":""},"destroy":{"params":{"$session_id":""},"docComment":"Destroy a session","signature":"public SessionHandler::destroy(string $session_id )","inheritdoc":0,"modifier":["public"],"return":""},"gc":{"params":{"$maxlifetime":""},"docComment":"Cleanup old sessions","signature":"public SessionHandler::gc(int $maxlifetime )","inheritdoc":0,"modifier":["public"],"return":""},"open":{"params":{"$save_path":"","$session_id":""},"docComment":"Initialize session","signature":"public SessionHandler::open(string $save_path ,string $session_id )","inheritdoc":0,"modifier":["public"],"return":""},"read":{"params":{"$session_id":""},"docComment":"Read session data","signature":"public SessionHandler::read(string $session_id )","inheritdoc":0,"modifier":["public"],"return":""},"write":{"params":{"$session_id":"","$session_data":""},"docComment":"Write session data","signature":"public SessionHandler::write(string $session_id ,string $session_data )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SessionHandlerInterface":{"classname":"SessionHandlerInterface","docComment":"","methods":{"modifier":{"public":["close","destroy","gc","open","read","write"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["close","destroy","gc","open","read","write"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","close":{"params":[],"docComment":"Close the session","signature":"public SessionHandlerInterface::close( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"destroy":{"params":{"$session_id":""},"docComment":"Destroy a session","signature":"public SessionHandlerInterface::destroy(string $session_id )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"gc":{"params":{"$maxlifetime":""},"docComment":"Cleanup old sessions","signature":"public SessionHandlerInterface::gc(string $maxlifetime )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"open":{"params":{"$save_path":"","$name":""},"docComment":"Initialize session","signature":"public SessionHandlerInterface::open(string $save_path ,string $name )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"read":{"params":{"$session_id":""},"docComment":"Read session data","signature":"public SessionHandlerInterface::read(string $session_id )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"write":{"params":{"$session_id":"","$session_data":""},"docComment":"Write session data","signature":"public SessionHandlerInterface::write(string $session_id ,string $session_data )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplDoublyLinkedList":{"classname":"SplDoublyLinkedList","docComment":"","methods":{"modifier":{"public":["bottom","count","current","getIteratorMode","isEmpty","key","next","offsetExists","offsetGet","offsetSet","offsetUnset","pop","prev","push","rewind","serialize","setIteratorMode","shift","top","unserialize","unshift","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","bottom":{"params":[],"docComment":"Peeks at the node from the beginning of the doubly linked list","signature":"public SplDoublyLinkedList::bottom( )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"Counts the number of elements in the doubly linked list.","signature":"public SplDoublyLinkedList::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Return current array entry","signature":"public SplDoublyLinkedList::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getIteratorMode":{"params":[],"docComment":"Returns the mode of iteration","signature":"public SplDoublyLinkedList::getIteratorMode( )","inheritdoc":0,"modifier":["public"],"return":""},"isEmpty":{"params":[],"docComment":"Checks whether the doubly linked list is empty.","signature":"public SplDoublyLinkedList::isEmpty( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Return current node index","signature":"public SplDoublyLinkedList::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move to next entry","signature":"public SplDoublyLinkedList::next( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$index":""},"docComment":"Returns whether the requested $index exists","signature":"public SplDoublyLinkedList::offsetExists(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$index":""},"docComment":"Returns the value at the specified $index","signature":"public SplDoublyLinkedList::offsetGet(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$index":"","$newval":""},"docComment":"Sets the value at the specified $index to $newval","signature":"public SplDoublyLinkedList::offsetSet(mixed $index ,mixed $newval )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$index":""},"docComment":"Unsets the value at the specified $index","signature":"public SplDoublyLinkedList::offsetUnset(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"pop":{"params":[],"docComment":"Pops a node from the end of the doubly linked list","signature":"public SplDoublyLinkedList::pop( )","inheritdoc":0,"modifier":["public"],"return":""},"prev":{"params":[],"docComment":"Move to previous entry","signature":"public SplDoublyLinkedList::prev( )","inheritdoc":0,"modifier":["public"],"return":""},"push":{"params":{"$value":""},"docComment":"Pushes an element at the end of the doubly linked list","signature":"public SplDoublyLinkedList::push(mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind iterator back to the start","signature":"public SplDoublyLinkedList::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"serialize":{"params":[],"docComment":"Serializes the storage","signature":"public SplDoublyLinkedList::serialize( )","inheritdoc":0,"modifier":["public"],"return":""},"setIteratorMode":{"params":{"$mode":""},"docComment":"Sets the mode of iteration","signature":"public SplDoublyLinkedList::setIteratorMode(int $mode )","inheritdoc":0,"modifier":["public"],"return":""},"shift":{"params":[],"docComment":"Shifts a node from the beginning of the doubly linked list","signature":"public SplDoublyLinkedList::shift( )","inheritdoc":0,"modifier":["public"],"return":""},"top":{"params":[],"docComment":"Peeks at the node from the end of the doubly linked list","signature":"public SplDoublyLinkedList::top( )","inheritdoc":0,"modifier":["public"],"return":""},"unserialize":{"params":{"$serialized":""},"docComment":"Unserializes the storage","signature":"public SplDoublyLinkedList::unserialize(string $serialized )","inheritdoc":0,"modifier":["public"],"return":""},"unshift":{"params":{"$value":""},"docComment":"Prepends the doubly linked list with an element","signature":"public SplDoublyLinkedList::unshift(mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the doubly linked list contains more nodes","signature":"public SplDoublyLinkedList::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplStack":{"classname":"SplStack","docComment":"","methods":{"modifier":{"public":["setIteratorMode","bottom","count","current","getIteratorMode","isEmpty","key","next","offsetExists","offsetGet","offsetSet","offsetUnset","pop","prev","push","rewind","serialize","setIteratorMode","shift","top","unserialize","unshift","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","setIteratorMode":{"params":{"$mode":""},"docComment":"Sets the mode of iteration","signature":"public SplDoublyLinkedList::setIteratorMode(int $mode )","inheritdoc":0,"modifier":["public"],"return":""},"bottom":{"params":[],"docComment":"Peeks at the node from the beginning of the doubly linked list","signature":"public SplDoublyLinkedList::bottom( )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"Counts the number of elements in the doubly linked list.","signature":"public SplDoublyLinkedList::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Return current array entry","signature":"public SplDoublyLinkedList::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getIteratorMode":{"params":[],"docComment":"Returns the mode of iteration","signature":"public SplDoublyLinkedList::getIteratorMode( )","inheritdoc":0,"modifier":["public"],"return":""},"isEmpty":{"params":[],"docComment":"Checks whether the doubly linked list is empty.","signature":"public SplDoublyLinkedList::isEmpty( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Return current node index","signature":"public SplDoublyLinkedList::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move to next entry","signature":"public SplDoublyLinkedList::next( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$index":""},"docComment":"Returns whether the requested $index exists","signature":"public SplDoublyLinkedList::offsetExists(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$index":""},"docComment":"Returns the value at the specified $index","signature":"public SplDoublyLinkedList::offsetGet(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$index":"","$newval":""},"docComment":"Sets the value at the specified $index to $newval","signature":"public SplDoublyLinkedList::offsetSet(mixed $index ,mixed $newval )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$index":""},"docComment":"Unsets the value at the specified $index","signature":"public SplDoublyLinkedList::offsetUnset(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"pop":{"params":[],"docComment":"Pops a node from the end of the doubly linked list","signature":"public SplDoublyLinkedList::pop( )","inheritdoc":0,"modifier":["public"],"return":""},"prev":{"params":[],"docComment":"Move to previous entry","signature":"public SplDoublyLinkedList::prev( )","inheritdoc":0,"modifier":["public"],"return":""},"push":{"params":{"$value":""},"docComment":"Pushes an element at the end of the doubly linked list","signature":"public SplDoublyLinkedList::push(mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind iterator back to the start","signature":"public SplDoublyLinkedList::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"serialize":{"params":[],"docComment":"Serializes the storage","signature":"public SplDoublyLinkedList::serialize( )","inheritdoc":0,"modifier":["public"],"return":""},"shift":{"params":[],"docComment":"Shifts a node from the beginning of the doubly linked list","signature":"public SplDoublyLinkedList::shift( )","inheritdoc":0,"modifier":["public"],"return":""},"top":{"params":[],"docComment":"Peeks at the node from the end of the doubly linked list","signature":"public SplDoublyLinkedList::top( )","inheritdoc":0,"modifier":["public"],"return":""},"unserialize":{"params":{"$serialized":""},"docComment":"Unserializes the storage","signature":"public SplDoublyLinkedList::unserialize(string $serialized )","inheritdoc":0,"modifier":["public"],"return":""},"unshift":{"params":{"$value":""},"docComment":"Prepends the doubly linked list with an element","signature":"public SplDoublyLinkedList::unshift(mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the doubly linked list contains more nodes","signature":"public SplDoublyLinkedList::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplQueue":{"classname":"SplQueue","docComment":"","methods":{"modifier":{"public":["dequeue","enqueue","setIteratorMode","bottom","count","current","getIteratorMode","isEmpty","key","next","offsetExists","offsetGet","offsetSet","offsetUnset","pop","prev","push","rewind","serialize","setIteratorMode","shift","top","unserialize","unshift","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","dequeue":{"params":[],"docComment":"Dequeues a node from the queue","signature":"SplQueue::dequeue( )","inheritdoc":0,"modifier":[],"return":""},"enqueue":{"params":{"$value":""},"docComment":"Adds an element to the queue.","signature":"SplQueue::enqueue(mixed $value )","inheritdoc":0,"modifier":[],"return":""},"setIteratorMode":{"params":{"$mode":""},"docComment":"Sets the mode of iteration","signature":"public SplDoublyLinkedList::setIteratorMode(int $mode )","inheritdoc":0,"modifier":["public"],"return":""},"bottom":{"params":[],"docComment":"Peeks at the node from the beginning of the doubly linked list","signature":"public SplDoublyLinkedList::bottom( )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"Counts the number of elements in the doubly linked list.","signature":"public SplDoublyLinkedList::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Return current array entry","signature":"public SplDoublyLinkedList::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getIteratorMode":{"params":[],"docComment":"Returns the mode of iteration","signature":"public SplDoublyLinkedList::getIteratorMode( )","inheritdoc":0,"modifier":["public"],"return":""},"isEmpty":{"params":[],"docComment":"Checks whether the doubly linked list is empty.","signature":"public SplDoublyLinkedList::isEmpty( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Return current node index","signature":"public SplDoublyLinkedList::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move to next entry","signature":"public SplDoublyLinkedList::next( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$index":""},"docComment":"Returns whether the requested $index exists","signature":"public SplDoublyLinkedList::offsetExists(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$index":""},"docComment":"Returns the value at the specified $index","signature":"public SplDoublyLinkedList::offsetGet(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$index":"","$newval":""},"docComment":"Sets the value at the specified $index to $newval","signature":"public SplDoublyLinkedList::offsetSet(mixed $index ,mixed $newval )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$index":""},"docComment":"Unsets the value at the specified $index","signature":"public SplDoublyLinkedList::offsetUnset(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"pop":{"params":[],"docComment":"Pops a node from the end of the doubly linked list","signature":"public SplDoublyLinkedList::pop( )","inheritdoc":0,"modifier":["public"],"return":""},"prev":{"params":[],"docComment":"Move to previous entry","signature":"public SplDoublyLinkedList::prev( )","inheritdoc":0,"modifier":["public"],"return":""},"push":{"params":{"$value":""},"docComment":"Pushes an element at the end of the doubly linked list","signature":"public SplDoublyLinkedList::push(mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind iterator back to the start","signature":"public SplDoublyLinkedList::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"serialize":{"params":[],"docComment":"Serializes the storage","signature":"public SplDoublyLinkedList::serialize( )","inheritdoc":0,"modifier":["public"],"return":""},"shift":{"params":[],"docComment":"Shifts a node from the beginning of the doubly linked list","signature":"public SplDoublyLinkedList::shift( )","inheritdoc":0,"modifier":["public"],"return":""},"top":{"params":[],"docComment":"Peeks at the node from the end of the doubly linked list","signature":"public SplDoublyLinkedList::top( )","inheritdoc":0,"modifier":["public"],"return":""},"unserialize":{"params":{"$serialized":""},"docComment":"Unserializes the storage","signature":"public SplDoublyLinkedList::unserialize(string $serialized )","inheritdoc":0,"modifier":["public"],"return":""},"unshift":{"params":{"$value":""},"docComment":"Prepends the doubly linked list with an element","signature":"public SplDoublyLinkedList::unshift(mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the doubly linked list contains more nodes","signature":"public SplDoublyLinkedList::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplHeap":{"classname":"SplHeap","docComment":"","methods":{"modifier":{"public":["count","current","extract","insert","isEmpty","key","next","recoverFromCorruption","rewind","top","valid"],"private":[],"protected":["compare"],"final":[],"static":[],"interface":[],"abstract":["compare"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","compare":{"params":{"$value1":"","$value2":""},"docComment":"Compare elements in order to place them correctly in the heap while sifting up.","signature":"protected SplHeap::compare(mixed $value1 ,mixed $value2 )","inheritdoc":0,"modifier":["abstract","protected"],"return":""},"count":{"params":[],"docComment":"Counts the number of elements in the heap.","signature":"public SplHeap::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Return current node pointed by the iterator","signature":"public SplHeap::current( )","inheritdoc":0,"modifier":["public"],"return":""},"extract":{"params":[],"docComment":"Extracts a node from top of the heap and sift up.","signature":"public SplHeap::extract( )","inheritdoc":0,"modifier":["public"],"return":""},"insert":{"params":{"$value":""},"docComment":"Inserts an element in the heap by sifting it up.","signature":"public SplHeap::insert(mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"isEmpty":{"params":[],"docComment":"Checks whether the heap is empty.","signature":"public SplHeap::isEmpty( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Return current node index","signature":"public SplHeap::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move to the next node","signature":"public SplHeap::next( )","inheritdoc":0,"modifier":["public"],"return":""},"recoverFromCorruption":{"params":[],"docComment":"Recover from the corrupted state and allow further actions on the heap.","signature":"public SplHeap::recoverFromCorruption( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind iterator back to the start (no-op)","signature":"public SplHeap::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"top":{"params":[],"docComment":"Peeks at the node from the top of the heap","signature":"public SplHeap::top( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the heap contains more nodes","signature":"public SplHeap::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplMaxHeap":{"classname":"SplMaxHeap","docComment":"","methods":{"modifier":{"public":["count","current","extract","insert","isEmpty","key","next","recoverFromCorruption","rewind","top","valid"],"private":[],"protected":["compare","compare"],"final":[],"static":[],"interface":[],"abstract":["compare"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","compare":{"params":{"$value1":"","$value2":""},"docComment":"Compare elements in order to place them correctly in the heap while sifting up.","signature":"protected SplHeap::compare(mixed $value1 ,mixed $value2 )","inheritdoc":0,"modifier":["abstract","protected"],"return":""},"count":{"params":[],"docComment":"Counts the number of elements in the heap.","signature":"public SplHeap::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Return current node pointed by the iterator","signature":"public SplHeap::current( )","inheritdoc":0,"modifier":["public"],"return":""},"extract":{"params":[],"docComment":"Extracts a node from top of the heap and sift up.","signature":"public SplHeap::extract( )","inheritdoc":0,"modifier":["public"],"return":""},"insert":{"params":{"$value":""},"docComment":"Inserts an element in the heap by sifting it up.","signature":"public SplHeap::insert(mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"isEmpty":{"params":[],"docComment":"Checks whether the heap is empty.","signature":"public SplHeap::isEmpty( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Return current node index","signature":"public SplHeap::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move to the next node","signature":"public SplHeap::next( )","inheritdoc":0,"modifier":["public"],"return":""},"recoverFromCorruption":{"params":[],"docComment":"Recover from the corrupted state and allow further actions on the heap.","signature":"public SplHeap::recoverFromCorruption( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind iterator back to the start (no-op)","signature":"public SplHeap::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"top":{"params":[],"docComment":"Peeks at the node from the top of the heap","signature":"public SplHeap::top( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the heap contains more nodes","signature":"public SplHeap::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplMinHeap":{"classname":"SplMinHeap","docComment":"","methods":{"modifier":{"public":["count","current","extract","insert","isEmpty","key","next","recoverFromCorruption","rewind","top","valid"],"private":[],"protected":["compare","compare"],"final":[],"static":[],"interface":[],"abstract":["compare"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","compare":{"params":{"$value1":"","$value2":""},"docComment":"Compare elements in order to place them correctly in the heap while sifting up.","signature":"protected SplHeap::compare(mixed $value1 ,mixed $value2 )","inheritdoc":0,"modifier":["abstract","protected"],"return":""},"count":{"params":[],"docComment":"Counts the number of elements in the heap.","signature":"public SplHeap::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Return current node pointed by the iterator","signature":"public SplHeap::current( )","inheritdoc":0,"modifier":["public"],"return":""},"extract":{"params":[],"docComment":"Extracts a node from top of the heap and sift up.","signature":"public SplHeap::extract( )","inheritdoc":0,"modifier":["public"],"return":""},"insert":{"params":{"$value":""},"docComment":"Inserts an element in the heap by sifting it up.","signature":"public SplHeap::insert(mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"isEmpty":{"params":[],"docComment":"Checks whether the heap is empty.","signature":"public SplHeap::isEmpty( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Return current node index","signature":"public SplHeap::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move to the next node","signature":"public SplHeap::next( )","inheritdoc":0,"modifier":["public"],"return":""},"recoverFromCorruption":{"params":[],"docComment":"Recover from the corrupted state and allow further actions on the heap.","signature":"public SplHeap::recoverFromCorruption( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind iterator back to the start (no-op)","signature":"public SplHeap::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"top":{"params":[],"docComment":"Peeks at the node from the top of the heap","signature":"public SplHeap::top( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the heap contains more nodes","signature":"public SplHeap::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplPriorityQueue":{"classname":"SplPriorityQueue","docComment":"","methods":{"modifier":{"public":["compare","count","current","extract","insert","isEmpty","key","next","recoverFromCorruption","rewind","setExtractFlags","top","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","compare":{"params":{"$priority1":"","$priority2":""},"docComment":"Compare priorities in order to place elements correctly in the heap while sifting up.","signature":"public SplPriorityQueue::compare(mixed $priority1 ,mixed $priority2 )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"Counts the number of elements in the queue.","signature":"public SplPriorityQueue::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Return current node pointed by the iterator","signature":"public SplPriorityQueue::current( )","inheritdoc":0,"modifier":["public"],"return":""},"extract":{"params":[],"docComment":"Extracts a node from top of the heap and sift up.","signature":"public SplPriorityQueue::extract( )","inheritdoc":0,"modifier":["public"],"return":""},"insert":{"params":{"$value":"","$priority":""},"docComment":"Inserts an element in the queue by sifting it up.","signature":"public SplPriorityQueue::insert(mixed $value ,mixed $priority )","inheritdoc":0,"modifier":["public"],"return":""},"isEmpty":{"params":[],"docComment":"Checks whether the queue is empty.","signature":"public SplPriorityQueue::isEmpty( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Return current node index","signature":"public SplPriorityQueue::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move to the next node","signature":"public SplPriorityQueue::next( )","inheritdoc":0,"modifier":["public"],"return":""},"recoverFromCorruption":{"params":[],"docComment":"Recover from the corrupted state and allow further actions on the queue.","signature":"public SplPriorityQueue::recoverFromCorruption( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind iterator back to the start (no-op)","signature":"public SplPriorityQueue::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"setExtractFlags":{"params":{"$flags":""},"docComment":"Sets the mode of extraction","signature":"public SplPriorityQueue::setExtractFlags(int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"top":{"params":[],"docComment":"Peeks at the node from the top of the queue","signature":"public SplPriorityQueue::top( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the queue contains more nodes","signature":"public SplPriorityQueue::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplFixedArray":{"classname":"SplFixedArray","docComment":"","methods":{"modifier":{"public":["count","current","fromArray","getSize","key","next","offsetExists","offsetGet","offsetSet","offsetUnset","rewind","setSize","toArray","valid","__wakeup"],"private":[],"protected":[],"final":[],"static":["fromArray"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","count":{"params":[],"docComment":"Returns the size of the array","signature":"public SplFixedArray::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Return current array entry","signature":"public SplFixedArray::current( )","inheritdoc":0,"modifier":["public"],"return":""},"fromArray":{"params":{"$array":"","$save_indexes":""},"docComment":"Import a PHP array in a  instance","signature":"static SplFixedArray::fromArray(array $array ,[bool $save_indexes] )","inheritdoc":0,"modifier":["public","static"],"return":"SplFixedArray"},"getSize":{"params":[],"docComment":"Gets the size of the array","signature":"public SplFixedArray::getSize( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Return current array index","signature":"public SplFixedArray::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move to next entry","signature":"public SplFixedArray::next( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$index":""},"docComment":"Returns whether the requested index exists","signature":"public SplFixedArray::offsetExists(int $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$index":""},"docComment":"Returns the value at the specified index","signature":"public SplFixedArray::offsetGet(int $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$index":"","$newval":""},"docComment":"Sets a new value at a specified index","signature":"public SplFixedArray::offsetSet(int $index ,mixed $newval )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$index":""},"docComment":"Unsets the value at the specified $index","signature":"public SplFixedArray::offsetUnset(int $index )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind iterator back to the start","signature":"public SplFixedArray::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"setSize":{"params":{"$size":""},"docComment":"Change the size of an array","signature":"public SplFixedArray::setSize(int $size )","inheritdoc":0,"modifier":["public"],"return":""},"toArray":{"params":[],"docComment":"Returns a PHP array from the fixed array","signature":"public SplFixedArray::toArray( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the array contains more elements","signature":"public SplFixedArray::valid( )","inheritdoc":0,"modifier":["public"],"return":""},"__wakeup":{"params":[],"docComment":"Reinitialises the array after being unserialised","signature":"public SplFixedArray::__wakeup( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplObjectStorage":{"classname":"SplObjectStorage","docComment":"","methods":{"modifier":{"public":["addAll","attach","contains","count","current","detach","getHash","getInfo","key","next","offsetExists","offsetGet","offsetSet","offsetUnset","removeAll","removeAllExcept","rewind","serialize","setInfo","unserialize","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addAll":{"params":{"$storage":"SplObjectStorage"},"docComment":"Adds all objects from another storage","signature":"public SplObjectStorage::addAll(SplObjectStorage $storage )","inheritdoc":0,"modifier":["public"],"return":""},"attach":{"params":{"$object":"","$data":""},"docComment":"Adds an object in the storage","signature":"public SplObjectStorage::attach(object $object ,[mixed $data] )","inheritdoc":0,"modifier":["public"],"return":""},"contains":{"params":{"$object":""},"docComment":"Checks if the storage contains a specific object","signature":"public SplObjectStorage::contains(object $object )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"Returns the number of objects in the storage","signature":"public SplObjectStorage::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Returns the current storage entry","signature":"public SplObjectStorage::current( )","inheritdoc":0,"modifier":["public"],"return":""},"detach":{"params":{"$object":""},"docComment":"Removes an  from the storage","signature":"public SplObjectStorage::detach(object $object )","inheritdoc":0,"modifier":["public"],"return":""},"getHash":{"params":{"$object":""},"docComment":"\n   Calculate a unique identifier for the contained objects\n  ","signature":"public SplObjectStorage::getHash(object $object )","inheritdoc":0,"modifier":["public"],"return":""},"getInfo":{"params":[],"docComment":"Returns the data associated with the current iterator entry","signature":"public SplObjectStorage::getInfo( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Returns the index at which the iterator currently is","signature":"public SplObjectStorage::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move to the next entry","signature":"public SplObjectStorage::next( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$object":""},"docComment":"Checks whether an object exists in the storage","signature":"public SplObjectStorage::offsetExists(object $object )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$object":""},"docComment":"Returns the data associated with an ","signature":"public SplObjectStorage::offsetGet(object $object )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$object":"","$data":""},"docComment":"Associates data to an object in the storage","signature":"public SplObjectStorage::offsetSet(object $object ,[mixed $data] )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$object":""},"docComment":"Removes an object from the storage","signature":"public SplObjectStorage::offsetUnset(object $object )","inheritdoc":0,"modifier":["public"],"return":""},"removeAll":{"params":{"$storage":"SplObjectStorage"},"docComment":"Removes objects contained in another storage from the current storage","signature":"public SplObjectStorage::removeAll(SplObjectStorage $storage )","inheritdoc":0,"modifier":["public"],"return":""},"removeAllExcept":{"params":{"$storage":"SplObjectStorage"},"docComment":"Removes all objects except for those contained in another storage from the current storage","signature":"public SplObjectStorage::removeAllExcept(SplObjectStorage $storage )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the iterator to the first storage element","signature":"public SplObjectStorage::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"serialize":{"params":[],"docComment":"Serializes the storage","signature":"public SplObjectStorage::serialize( )","inheritdoc":0,"modifier":["public"],"return":""},"setInfo":{"params":{"$data":""},"docComment":"Sets the data associated with the current iterator entry","signature":"public SplObjectStorage::setInfo(mixed $data )","inheritdoc":0,"modifier":["public"],"return":""},"unserialize":{"params":{"$serialized":""},"docComment":"Unserializes a storage from its string representation","signature":"public SplObjectStorage::unserialize(string $serialized )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Returns if the current iterator entry is valid","signature":"public SplObjectStorage::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"AppendIterator":{"classname":"AppendIterator","docComment":"","methods":{"modifier":{"public":["append","current","getArrayIterator","getInnerIterator","getIteratorIndex","key","next","rewind","valid","__construct","current","getInnerIterator","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","append":{"params":{"$iterator":"Iterator"},"docComment":"Appends an iterator","signature":"public AppendIterator::append(Iterator $iterator )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Get the current value","signature":"public IteratorIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getArrayIterator":{"params":[],"docComment":"Gets the ArrayIterator","signature":"public AppendIterator::getArrayIterator( )","inheritdoc":0,"modifier":["public"],"return":""},"getInnerIterator":{"params":[],"docComment":"Get the inner iterator","signature":"public IteratorIterator::getInnerIterator( )","inheritdoc":0,"modifier":["public"],"return":"Traversable"},"getIteratorIndex":{"params":[],"docComment":"Gets an index of iterators","signature":"public AppendIterator::getIteratorIndex( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Get the key of the current element","signature":"public IteratorIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Forward to the next element","signature":"public IteratorIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind to the first element","signature":"public IteratorIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Checks if the iterator is valid","signature":"public IteratorIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$iterator":"Traversable"},"docComment":"Create an iterator from anything that is traversable","signature":"public IteratorIterator::__construct(Traversable $iterator )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ArrayIterator":{"classname":"ArrayIterator","docComment":"","methods":{"modifier":{"public":["append","asort","__construct","count","current","getArrayCopy","getFlags","key","ksort","natcasesort","natsort","next","offsetExists","offsetGet","offsetSet","offsetUnset","rewind","seek","serialize","setFlags","uasort","uksort","unserialize","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","append":{"params":{"$value":""},"docComment":"Append an element","signature":"public ArrayIterator::append(mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"asort":{"params":[],"docComment":"Sort array by values","signature":"public ArrayIterator::asort( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$array":"","$flags":""},"docComment":"Construct an ArrayIterator","signature":"public ArrayIterator::__construct([mixed $array] ,[int $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"Count elements","signature":"public ArrayIterator::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Return current array entry","signature":"public ArrayIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getArrayCopy":{"params":[],"docComment":"Get array copy","signature":"public ArrayIterator::getArrayCopy( )","inheritdoc":0,"modifier":["public"],"return":""},"getFlags":{"params":[],"docComment":"Get flags","signature":"public ArrayIterator::getFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Return current array key","signature":"public ArrayIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"ksort":{"params":[],"docComment":"Sort array by keys","signature":"public ArrayIterator::ksort( )","inheritdoc":0,"modifier":["public"],"return":""},"natcasesort":{"params":[],"docComment":"Sort an array naturally, case insensitive","signature":"public ArrayIterator::natcasesort( )","inheritdoc":0,"modifier":["public"],"return":""},"natsort":{"params":[],"docComment":"Sort an array naturally","signature":"public ArrayIterator::natsort( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move to next entry","signature":"public ArrayIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$index":""},"docComment":"Check if offset exists","signature":"public ArrayIterator::offsetExists(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$index":""},"docComment":"Get value for an offset","signature":"public ArrayIterator::offsetGet(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$index":"","$newval":""},"docComment":"Set value for an offset","signature":"public ArrayIterator::offsetSet(string $index ,string $newval )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$index":""},"docComment":"Unset value for an offset","signature":"public ArrayIterator::offsetUnset(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind array back to the start","signature":"public ArrayIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"seek":{"params":{"$position":""},"docComment":"Seek to position","signature":"public ArrayIterator::seek(int $position )","inheritdoc":0,"modifier":["public"],"return":""},"serialize":{"params":[],"docComment":"Serialize","signature":"public ArrayIterator::serialize( )","inheritdoc":0,"modifier":["public"],"return":""},"setFlags":{"params":{"$flags":""},"docComment":"Set behaviour flags","signature":"public ArrayIterator::setFlags(string $flags )","inheritdoc":0,"modifier":["public"],"return":""},"uasort":{"params":{"$cmp_function":""},"docComment":"User defined sort","signature":"public ArrayIterator::uasort(string $cmp_function )","inheritdoc":0,"modifier":["public"],"return":""},"uksort":{"params":{"$cmp_function":""},"docComment":"User defined sort","signature":"public ArrayIterator::uksort(string $cmp_function )","inheritdoc":0,"modifier":["public"],"return":""},"unserialize":{"params":{"$serialized":""},"docComment":"Unserialize","signature":"public ArrayIterator::unserialize(string $serialized )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether array contains more entries","signature":"public ArrayIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CachingIterator":{"classname":"CachingIterator","docComment":"","methods":{"modifier":{"public":["__construct","count","current","getCache","getFlags","getInnerIterator","hasNext","key","next","offsetExists","offsetGet","offsetSet","offsetUnset","rewind","setFlags","__toString","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$iterator":"Iterator","$flags":""},"docComment":"Construct a new CachingIterator object for the iterator.","signature":"public CachingIterator::__construct(Iterator $iterator ,[string $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"The number of elements in the iterator","signature":"public CachingIterator::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Return the current element","signature":"public CachingIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getCache":{"params":[],"docComment":"The getCache purpose","signature":"public CachingIterator::getCache( )","inheritdoc":0,"modifier":["public"],"return":""},"getFlags":{"params":[],"docComment":"Get flags used","signature":"public CachingIterator::getFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"getInnerIterator":{"params":[],"docComment":"Returns the inner iterator","signature":"public CachingIterator::getInnerIterator( )","inheritdoc":0,"modifier":["public"],"return":"Iterator"},"hasNext":{"params":[],"docComment":"Check whether the inner iterator has a valid next element","signature":"public CachingIterator::hasNext( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Return the key for the current element","signature":"public CachingIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move the iterator forward","signature":"public CachingIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$index":""},"docComment":"The offsetExists purpose","signature":"public CachingIterator::offsetExists(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$index":""},"docComment":"The offsetGet purpose","signature":"public CachingIterator::offsetGet(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$index":"","$newval":""},"docComment":"The offsetSet purpose","signature":"public CachingIterator::offsetSet(string $index ,string $newval )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$index":""},"docComment":"The offsetUnset purpose","signature":"public CachingIterator::offsetUnset(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the iterator","signature":"public CachingIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"setFlags":{"params":{"$flags":""},"docComment":"The setFlags purpose","signature":"public CachingIterator::setFlags( $flags )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Return the string representation of the current element","signature":"public CachingIterator::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the current element is valid","signature":"public CachingIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["CALL_TOSTRING","CATCH_GET_CHILD","TOSTRING_USE_KEY","TOSTRING_USE_CURRENT","TOSTRING_USE_INNER","FULL_CACHE"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","CALL_TOSTRING":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CATCH_GET_CHILD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TOSTRING_USE_KEY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TOSTRING_USE_CURRENT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TOSTRING_USE_INNER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FULL_CACHE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CallbackFilterIterator":{"classname":"CallbackFilterIterator","docComment":"","methods":{"modifier":{"public":["accept","accept","__construct","current","getInnerIterator","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["accept"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","accept":{"params":[],"docComment":"Check whether the current element of the iterator is acceptable","signature":"abstract FilterIterator::accept( )","inheritdoc":0,"modifier":["public","abstract"],"return":""},"__construct":{"params":{"$iterator":"Iterator"},"docComment":"Construct a filterIterator","signature":"public FilterIterator::__construct(Iterator $iterator )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Get the current element value","signature":"public FilterIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getInnerIterator":{"params":[],"docComment":"Get the inner iterator","signature":"public FilterIterator::getInnerIterator( )","inheritdoc":0,"modifier":["public"],"return":"Iterator"},"key":{"params":[],"docComment":"Get the current key","signature":"public FilterIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move the iterator forward","signature":"public FilterIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the iterator","signature":"public FilterIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the current element is valid","signature":"public FilterIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DirectoryIterator":{"classname":"DirectoryIterator","docComment":"","methods":{"modifier":{"public":["current","getATime","getBasename","getCTime","getExtension","getFilename","getGroup","getInode","getMTime","getOwner","getPath","getPathname","getPerms","getSize","getType","isDir","isDot","isExecutable","isFile","isLink","isReadable","isWritable","key","next","rewind","seek","__toString","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","current":{"params":[],"docComment":"Return the current DirectoryIterator item.","signature":"public DirectoryIterator::current( )","inheritdoc":0,"modifier":["public"],"return":"DirectoryIterator"},"getATime":{"params":[],"docComment":"Get last access time of the current DirectoryIterator item","signature":"public DirectoryIterator::getATime( )","inheritdoc":0,"modifier":["public"],"return":""},"getBasename":{"params":{"$suffix":""},"docComment":"Get base name of current DirectoryIterator item.","signature":"public DirectoryIterator::getBasename(string $suffix )","inheritdoc":0,"modifier":["public"],"return":""},"getCTime":{"params":[],"docComment":"Get inode change time of the current DirectoryIterator item","signature":"public DirectoryIterator::getCTime( )","inheritdoc":0,"modifier":["public"],"return":""},"getExtension":{"params":[],"docComment":"Gets the file extension","signature":"public DirectoryIterator::getExtension( )","inheritdoc":0,"modifier":["public"],"return":""},"getFilename":{"params":[],"docComment":"Return file name of current DirectoryIterator item.","signature":"public DirectoryIterator::getFilename( )","inheritdoc":0,"modifier":["public"],"return":""},"getGroup":{"params":[],"docComment":"Get group for the current DirectoryIterator item","signature":"public DirectoryIterator::getGroup( )","inheritdoc":0,"modifier":["public"],"return":""},"getInode":{"params":[],"docComment":"Get inode for the current DirectoryIterator item","signature":"public DirectoryIterator::getInode( )","inheritdoc":0,"modifier":["public"],"return":""},"getMTime":{"params":[],"docComment":"Get last modification time of current DirectoryIterator item","signature":"public DirectoryIterator::getMTime( )","inheritdoc":0,"modifier":["public"],"return":""},"getOwner":{"params":[],"docComment":"Get owner of current DirectoryIterator item","signature":"public DirectoryIterator::getOwner( )","inheritdoc":0,"modifier":["public"],"return":""},"getPath":{"params":[],"docComment":"Get path of current Iterator item without filename","signature":"public DirectoryIterator::getPath( )","inheritdoc":0,"modifier":["public"],"return":""},"getPathname":{"params":[],"docComment":"Return path and file name of current DirectoryIterator item","signature":"public DirectoryIterator::getPathname( )","inheritdoc":0,"modifier":["public"],"return":""},"getPerms":{"params":[],"docComment":"Get the permissions of current DirectoryIterator item","signature":"public DirectoryIterator::getPerms( )","inheritdoc":0,"modifier":["public"],"return":""},"getSize":{"params":[],"docComment":"Get size of current DirectoryIterator item","signature":"public DirectoryIterator::getSize( )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"Determine the type of the current DirectoryIterator item","signature":"public DirectoryIterator::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"isDir":{"params":[],"docComment":"Determine if current DirectoryIterator item is a directory","signature":"public DirectoryIterator::isDir( )","inheritdoc":0,"modifier":["public"],"return":""},"isDot":{"params":[],"docComment":"Determine if current DirectoryIterator item is '.' or '..'","signature":"public DirectoryIterator::isDot( )","inheritdoc":0,"modifier":["public"],"return":""},"isExecutable":{"params":[],"docComment":"Determine if current DirectoryIterator item is executable","signature":"public DirectoryIterator::isExecutable( )","inheritdoc":0,"modifier":["public"],"return":""},"isFile":{"params":[],"docComment":"Determine if current DirectoryIterator item is a regular file","signature":"public DirectoryIterator::isFile( )","inheritdoc":0,"modifier":["public"],"return":""},"isLink":{"params":[],"docComment":"Determine if current DirectoryIterator item is a symbolic link","signature":"public DirectoryIterator::isLink( )","inheritdoc":0,"modifier":["public"],"return":""},"isReadable":{"params":[],"docComment":"Determine if current DirectoryIterator item can be read","signature":"public DirectoryIterator::isReadable( )","inheritdoc":0,"modifier":["public"],"return":""},"isWritable":{"params":[],"docComment":"Determine if current DirectoryIterator item can be written to","signature":"public DirectoryIterator::isWritable( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Return the key for the current DirectoryIterator item","signature":"public DirectoryIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move forward to next DirectoryIterator item","signature":"public DirectoryIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the DirectoryIterator back to the start","signature":"public DirectoryIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"seek":{"params":{"$position":""},"docComment":"Seek to a DirectoryIterator item","signature":"public DirectoryIterator::seek(int $position )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Get file name as a string","signature":"public DirectoryIterator::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether current DirectoryIterator position is a valid file","signature":"public DirectoryIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EmptyIterator":{"classname":"EmptyIterator","docComment":"","methods":{"modifier":{"public":["current","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","current":{"params":[],"docComment":"The current() method","signature":"public EmptyIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"The key() method","signature":"public EmptyIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"The next() method","signature":"public EmptyIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"The rewind() method","signature":"public EmptyIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"The valid() method","signature":"public EmptyIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"FilesystemIterator":{"classname":"FilesystemIterator","docComment":"","methods":{"modifier":{"public":["__construct","current","getFlags","key","next","rewind","setFlags","current","getATime","getBasename","getCTime","getExtension","getFilename","getGroup","getInode","getMTime","getOwner","getPath","getPathname","getPerms","getSize","getType","isDir","isDot","isExecutable","isFile","isLink","isReadable","isWritable","key","next","rewind","seek","__toString","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$path":"","$flags":""},"docComment":"Constructs a new filesystem iterator","signature":"public FilesystemIterator::__construct(string $path ,[int $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Return the current DirectoryIterator item.","signature":"public DirectoryIterator::current( )","inheritdoc":0,"modifier":["public"],"return":"DirectoryIterator"},"getFlags":{"params":[],"docComment":"Get the handling flags","signature":"public FilesystemIterator::getFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Return the key for the current DirectoryIterator item","signature":"public DirectoryIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move forward to next DirectoryIterator item","signature":"public DirectoryIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the DirectoryIterator back to the start","signature":"public DirectoryIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"setFlags":{"params":{"$flags":""},"docComment":"Sets handling flags","signature":"public FilesystemIterator::setFlags(int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"getATime":{"params":[],"docComment":"Get last access time of the current DirectoryIterator item","signature":"public DirectoryIterator::getATime( )","inheritdoc":0,"modifier":["public"],"return":""},"getBasename":{"params":{"$suffix":""},"docComment":"Get base name of current DirectoryIterator item.","signature":"public DirectoryIterator::getBasename(string $suffix )","inheritdoc":0,"modifier":["public"],"return":""},"getCTime":{"params":[],"docComment":"Get inode change time of the current DirectoryIterator item","signature":"public DirectoryIterator::getCTime( )","inheritdoc":0,"modifier":["public"],"return":""},"getExtension":{"params":[],"docComment":"Gets the file extension","signature":"public DirectoryIterator::getExtension( )","inheritdoc":0,"modifier":["public"],"return":""},"getFilename":{"params":[],"docComment":"Return file name of current DirectoryIterator item.","signature":"public DirectoryIterator::getFilename( )","inheritdoc":0,"modifier":["public"],"return":""},"getGroup":{"params":[],"docComment":"Get group for the current DirectoryIterator item","signature":"public DirectoryIterator::getGroup( )","inheritdoc":0,"modifier":["public"],"return":""},"getInode":{"params":[],"docComment":"Get inode for the current DirectoryIterator item","signature":"public DirectoryIterator::getInode( )","inheritdoc":0,"modifier":["public"],"return":""},"getMTime":{"params":[],"docComment":"Get last modification time of current DirectoryIterator item","signature":"public DirectoryIterator::getMTime( )","inheritdoc":0,"modifier":["public"],"return":""},"getOwner":{"params":[],"docComment":"Get owner of current DirectoryIterator item","signature":"public DirectoryIterator::getOwner( )","inheritdoc":0,"modifier":["public"],"return":""},"getPath":{"params":[],"docComment":"Get path of current Iterator item without filename","signature":"public DirectoryIterator::getPath( )","inheritdoc":0,"modifier":["public"],"return":""},"getPathname":{"params":[],"docComment":"Return path and file name of current DirectoryIterator item","signature":"public DirectoryIterator::getPathname( )","inheritdoc":0,"modifier":["public"],"return":""},"getPerms":{"params":[],"docComment":"Get the permissions of current DirectoryIterator item","signature":"public DirectoryIterator::getPerms( )","inheritdoc":0,"modifier":["public"],"return":""},"getSize":{"params":[],"docComment":"Get size of current DirectoryIterator item","signature":"public DirectoryIterator::getSize( )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"Determine the type of the current DirectoryIterator item","signature":"public DirectoryIterator::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"isDir":{"params":[],"docComment":"Determine if current DirectoryIterator item is a directory","signature":"public DirectoryIterator::isDir( )","inheritdoc":0,"modifier":["public"],"return":""},"isDot":{"params":[],"docComment":"Determine if current DirectoryIterator item is '.' or '..'","signature":"public DirectoryIterator::isDot( )","inheritdoc":0,"modifier":["public"],"return":""},"isExecutable":{"params":[],"docComment":"Determine if current DirectoryIterator item is executable","signature":"public DirectoryIterator::isExecutable( )","inheritdoc":0,"modifier":["public"],"return":""},"isFile":{"params":[],"docComment":"Determine if current DirectoryIterator item is a regular file","signature":"public DirectoryIterator::isFile( )","inheritdoc":0,"modifier":["public"],"return":""},"isLink":{"params":[],"docComment":"Determine if current DirectoryIterator item is a symbolic link","signature":"public DirectoryIterator::isLink( )","inheritdoc":0,"modifier":["public"],"return":""},"isReadable":{"params":[],"docComment":"Determine if current DirectoryIterator item can be read","signature":"public DirectoryIterator::isReadable( )","inheritdoc":0,"modifier":["public"],"return":""},"isWritable":{"params":[],"docComment":"Determine if current DirectoryIterator item can be written to","signature":"public DirectoryIterator::isWritable( )","inheritdoc":0,"modifier":["public"],"return":""},"seek":{"params":{"$position":""},"docComment":"Seek to a DirectoryIterator item","signature":"public DirectoryIterator::seek(int $position )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Get file name as a string","signature":"public DirectoryIterator::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether current DirectoryIterator position is a valid file","signature":"public DirectoryIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["CURRENT_AS_PATHNAME","CURRENT_AS_FILEINFO","CURRENT_AS_SELF","CURRENT_MODE_MASK","KEY_AS_PATHNAME","KEY_AS_FILENAME","FOLLOW_SYMLINKS","KEY_MODE_MASK","NEW_CURRENT_AND_KEY","SKIP_DOTS","UNIX_PATHS"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","CURRENT_AS_PATHNAME":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CURRENT_AS_FILEINFO":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CURRENT_AS_SELF":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CURRENT_MODE_MASK":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"KEY_AS_PATHNAME":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"KEY_AS_FILENAME":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FOLLOW_SYMLINKS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"KEY_MODE_MASK":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"NEW_CURRENT_AND_KEY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SKIP_DOTS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"UNIX_PATHS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"FilterIterator":{"classname":"FilterIterator","docComment":"","methods":{"modifier":{"public":["accept","__construct","current","getInnerIterator","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["accept"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","accept":{"params":[],"docComment":"Check whether the current element of the iterator is acceptable","signature":"abstract FilterIterator::accept( )","inheritdoc":0,"modifier":["public","abstract"],"return":""},"__construct":{"params":{"$iterator":"Iterator"},"docComment":"Construct a filterIterator","signature":"public FilterIterator::__construct(Iterator $iterator )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Get the current element value","signature":"public FilterIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getInnerIterator":{"params":[],"docComment":"Get the inner iterator","signature":"public FilterIterator::getInnerIterator( )","inheritdoc":0,"modifier":["public"],"return":"Iterator"},"key":{"params":[],"docComment":"Get the current key","signature":"public FilterIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move the iterator forward","signature":"public FilterIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the iterator","signature":"public FilterIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the current element is valid","signature":"public FilterIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"GlobIterator":{"classname":"GlobIterator","docComment":"","methods":{"modifier":{"public":["__construct","count","__construct","current","getFlags","key","next","rewind","setFlags"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$path":"","$flags":""},"docComment":"Constructs a new filesystem iterator","signature":"public FilesystemIterator::__construct(string $path ,[int $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"Get the number of directories and files","signature":"public GlobIterator::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"The current file","signature":"public FilesystemIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getFlags":{"params":[],"docComment":"Get the handling flags","signature":"public FilesystemIterator::getFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Retrieve the key for the current file","signature":"public FilesystemIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move to the next file","signature":"public FilesystemIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewinds back to the beginning","signature":"public FilesystemIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"setFlags":{"params":{"$flags":""},"docComment":"Sets handling flags","signature":"public FilesystemIterator::setFlags(int $flags )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"InfiniteIterator":{"classname":"InfiniteIterator","docComment":"","methods":{"modifier":{"public":["__construct","next","__construct","current","getInnerIterator","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$iterator":"Traversable"},"docComment":"Create an iterator from anything that is traversable","signature":"public IteratorIterator::__construct(Traversable $iterator )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Forward to the next element","signature":"public IteratorIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Get the current value","signature":"public IteratorIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getInnerIterator":{"params":[],"docComment":"Get the inner iterator","signature":"public IteratorIterator::getInnerIterator( )","inheritdoc":0,"modifier":["public"],"return":"Traversable"},"key":{"params":[],"docComment":"Get the key of the current element","signature":"public IteratorIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind to the first element","signature":"public IteratorIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Checks if the iterator is valid","signature":"public IteratorIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"IteratorIterator":{"classname":"IteratorIterator","docComment":"","methods":{"modifier":{"public":["__construct","current","getInnerIterator","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$iterator":"Traversable"},"docComment":"Create an iterator from anything that is traversable","signature":"public IteratorIterator::__construct(Traversable $iterator )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Get the current value","signature":"public IteratorIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getInnerIterator":{"params":[],"docComment":"Get the inner iterator","signature":"public IteratorIterator::getInnerIterator( )","inheritdoc":0,"modifier":["public"],"return":"Traversable"},"key":{"params":[],"docComment":"Get the key of the current element","signature":"public IteratorIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Forward to the next element","signature":"public IteratorIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind to the first element","signature":"public IteratorIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Checks if the iterator is valid","signature":"public IteratorIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"LimitIterator":{"classname":"LimitIterator","docComment":"","methods":{"modifier":{"public":["__construct","current","getInnerIterator","getPosition","key","next","rewind","seek","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$iterator":"Iterator","$offset":"","$count":""},"docComment":"Construct a LimitIterator","signature":"public LimitIterator::__construct(Iterator $iterator ,[int $offset] ,[int $count] )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Get current element","signature":"public LimitIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getInnerIterator":{"params":[],"docComment":"Get inner iterator","signature":"public LimitIterator::getInnerIterator( )","inheritdoc":0,"modifier":["public"],"return":"Iterator"},"getPosition":{"params":[],"docComment":"Return the current position","signature":"public LimitIterator::getPosition( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Get current key","signature":"public LimitIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move the iterator forward","signature":"public LimitIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the iterator to the specified starting offset","signature":"public LimitIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"seek":{"params":{"$position":""},"docComment":"Seek to the given position","signature":"public LimitIterator::seek(int $position )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the current element is valid","signature":"public LimitIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MultipleIterator":{"classname":"MultipleIterator","docComment":"","methods":{"modifier":{"public":["attachIterator","containsIterator","countIterators","current","detachIterator","getFlags","key","next","rewind","setFlags","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","attachIterator":{"params":{"$iterator":"Iterator","$infos":""},"docComment":"Attaches iterator information","signature":"public MultipleIterator::attachIterator(Iterator $iterator ,string $infos )","inheritdoc":0,"modifier":["public"],"return":""},"containsIterator":{"params":{"$iterator":"Iterator"},"docComment":"Checks if an iterator is attached","signature":"public MultipleIterator::containsIterator(Iterator $iterator )","inheritdoc":0,"modifier":["public"],"return":""},"countIterators":{"params":[],"docComment":"Gets the number of attached iterator instances","signature":"public MultipleIterator::countIterators( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Gets the registered iterator instances","signature":"public MultipleIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"detachIterator":{"params":{"$iterator":"Iterator"},"docComment":"Detaches an iterator","signature":"public MultipleIterator::detachIterator(Iterator $iterator )","inheritdoc":0,"modifier":["public"],"return":""},"getFlags":{"params":[],"docComment":"Gets the flag information","signature":"public MultipleIterator::getFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Gets the registered iterator instances","signature":"public MultipleIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Moves all attached iterator instances forward","signature":"public MultipleIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewinds all attached iterator instances","signature":"public MultipleIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"setFlags":{"params":{"$flags":""},"docComment":"Sets flags","signature":"public MultipleIterator::setFlags(int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Checks the validity of sub iterators","signature":"public MultipleIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["MIT_NEED_ANY","MIT_NEED_ALL","MIT_KEYS_NUMERIC","MIT_KEYS_ASSOC"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","MIT_NEED_ANY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"MIT_NEED_ALL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"MIT_KEYS_NUMERIC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"MIT_KEYS_ASSOC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"NoRewindIterator":{"classname":"NoRewindIterator","docComment":"","methods":{"modifier":{"public":["__construct","current","getInnerIterator","key","next","rewind","valid","__construct","current","getInnerIterator","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$iterator":"Traversable"},"docComment":"Create an iterator from anything that is traversable","signature":"public IteratorIterator::__construct(Traversable $iterator )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Get the current value","signature":"public IteratorIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getInnerIterator":{"params":[],"docComment":"Get the inner iterator","signature":"public IteratorIterator::getInnerIterator( )","inheritdoc":0,"modifier":["public"],"return":"Traversable"},"key":{"params":[],"docComment":"Get the key of the current element","signature":"public IteratorIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Forward to the next element","signature":"public IteratorIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind to the first element","signature":"public IteratorIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Checks if the iterator is valid","signature":"public IteratorIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ParentIterator":{"classname":"ParentIterator","docComment":"","methods":{"modifier":{"public":["accept","__construct","getChildren","hasChildren","next","rewind"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","accept":{"params":[],"docComment":"Determines acceptability","signature":"public ParentIterator::accept( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$iterator":"RecursiveIterator"},"docComment":"Constructs a ParentIterator","signature":"public ParentIterator::__construct(RecursiveIterator $iterator )","inheritdoc":0,"modifier":["public"],"return":""},"getChildren":{"params":[],"docComment":"Return the inner iterator's children contained in a ParentIterator","signature":"public ParentIterator::getChildren( )","inheritdoc":0,"modifier":["public"],"return":"ParentIterator"},"hasChildren":{"params":[],"docComment":"Check whether the inner iterator's current element has children","signature":"public ParentIterator::hasChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move the iterator forward","signature":"public ParentIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the iterator","signature":"public ParentIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RecursiveArrayIterator":{"classname":"RecursiveArrayIterator","docComment":"","methods":{"modifier":{"public":["getChildren","hasChildren","append","asort","__construct","count","current","getArrayCopy","getFlags","key","ksort","natcasesort","natsort","next","offsetExists","offsetGet","offsetSet","offsetUnset","rewind","seek","serialize","setFlags","uasort","uksort","unserialize","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getChildren":{"params":[],"docComment":"Returns an iterator for the current entry if it is an  or an .","signature":"public RecursiveArrayIterator::getChildren( )","inheritdoc":0,"modifier":["public"],"return":"RecursiveArrayIterator"},"hasChildren":{"params":[],"docComment":"Returns whether current entry is an array or an object.","signature":"public RecursiveArrayIterator::hasChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"append":{"params":{"$value":""},"docComment":"Append an element","signature":"public ArrayIterator::append(mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"asort":{"params":[],"docComment":"Sort array by values","signature":"public ArrayIterator::asort( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$array":"","$flags":""},"docComment":"Construct an ArrayIterator","signature":"public ArrayIterator::__construct([mixed $array] ,[int $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"Count elements","signature":"public ArrayIterator::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Return current array entry","signature":"public ArrayIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getArrayCopy":{"params":[],"docComment":"Get array copy","signature":"public ArrayIterator::getArrayCopy( )","inheritdoc":0,"modifier":["public"],"return":""},"getFlags":{"params":[],"docComment":"Get flags","signature":"public ArrayIterator::getFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Return current array key","signature":"public ArrayIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"ksort":{"params":[],"docComment":"Sort array by keys","signature":"public ArrayIterator::ksort( )","inheritdoc":0,"modifier":["public"],"return":""},"natcasesort":{"params":[],"docComment":"Sort an array naturally, case insensitive","signature":"public ArrayIterator::natcasesort( )","inheritdoc":0,"modifier":["public"],"return":""},"natsort":{"params":[],"docComment":"Sort an array naturally","signature":"public ArrayIterator::natsort( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move to next entry","signature":"public ArrayIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$index":""},"docComment":"Check if offset exists","signature":"public ArrayIterator::offsetExists(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$index":""},"docComment":"Get value for an offset","signature":"public ArrayIterator::offsetGet(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$index":"","$newval":""},"docComment":"Set value for an offset","signature":"public ArrayIterator::offsetSet(string $index ,string $newval )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$index":""},"docComment":"Unset value for an offset","signature":"public ArrayIterator::offsetUnset(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind array back to the start","signature":"public ArrayIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"seek":{"params":{"$position":""},"docComment":"Seek to position","signature":"public ArrayIterator::seek(int $position )","inheritdoc":0,"modifier":["public"],"return":""},"serialize":{"params":[],"docComment":"Serialize","signature":"public ArrayIterator::serialize( )","inheritdoc":0,"modifier":["public"],"return":""},"setFlags":{"params":{"$flags":""},"docComment":"Set behaviour flags","signature":"public ArrayIterator::setFlags(string $flags )","inheritdoc":0,"modifier":["public"],"return":""},"uasort":{"params":{"$cmp_function":""},"docComment":"User defined sort","signature":"public ArrayIterator::uasort(string $cmp_function )","inheritdoc":0,"modifier":["public"],"return":""},"uksort":{"params":{"$cmp_function":""},"docComment":"User defined sort","signature":"public ArrayIterator::uksort(string $cmp_function )","inheritdoc":0,"modifier":["public"],"return":""},"unserialize":{"params":{"$serialized":""},"docComment":"Unserialize","signature":"public ArrayIterator::unserialize(string $serialized )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether array contains more entries","signature":"public ArrayIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RecursiveCachingIterator":{"classname":"RecursiveCachingIterator","docComment":"","methods":{"modifier":{"public":["__construct","getChildren","hasChildren","__construct","count","current","getCache","getFlags","getInnerIterator","hasNext","key","next","offsetExists","offsetGet","offsetSet","offsetUnset","rewind","setFlags","__toString","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$iterator":"Iterator","$flags":""},"docComment":"Construct a new CachingIterator object for the iterator.","signature":"public CachingIterator::__construct(Iterator $iterator ,[string $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"getChildren":{"params":[],"docComment":"Return the inner iterator's children as a RecursiveCachingIterator","signature":"public RecursiveCachingIterator::getChildren( )","inheritdoc":0,"modifier":["public"],"return":"RecursiveCachingIterator"},"hasChildren":{"params":[],"docComment":"Check whether the current element of the inner iterator has children","signature":"public RecursiveCachingIterator::hasChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"The number of elements in the iterator","signature":"public CachingIterator::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Return the current element","signature":"public CachingIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getCache":{"params":[],"docComment":"The getCache purpose","signature":"public CachingIterator::getCache( )","inheritdoc":0,"modifier":["public"],"return":""},"getFlags":{"params":[],"docComment":"Get flags used","signature":"public CachingIterator::getFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"getInnerIterator":{"params":[],"docComment":"Returns the inner iterator","signature":"public CachingIterator::getInnerIterator( )","inheritdoc":0,"modifier":["public"],"return":"Iterator"},"hasNext":{"params":[],"docComment":"Check whether the inner iterator has a valid next element","signature":"public CachingIterator::hasNext( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Return the key for the current element","signature":"public CachingIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move the iterator forward","signature":"public CachingIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$index":""},"docComment":"The offsetExists purpose","signature":"public CachingIterator::offsetExists(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$index":""},"docComment":"The offsetGet purpose","signature":"public CachingIterator::offsetGet(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$index":"","$newval":""},"docComment":"The offsetSet purpose","signature":"public CachingIterator::offsetSet(string $index ,string $newval )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$index":""},"docComment":"The offsetUnset purpose","signature":"public CachingIterator::offsetUnset(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the iterator","signature":"public CachingIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"setFlags":{"params":{"$flags":""},"docComment":"The setFlags purpose","signature":"public CachingIterator::setFlags( $flags )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Return the string representation of the current element","signature":"public CachingIterator::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the current element is valid","signature":"public CachingIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RecursiveCallbackFilterIterator":{"classname":"RecursiveCallbackFilterIterator","docComment":"","methods":{"modifier":{"public":["getChildren","hasChildren","accept"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getChildren":{"params":[],"docComment":"Return the inner iterator's children contained in a RecursiveCallbackFilterIterator","signature":"public RecursiveCallbackFilterIterator::getChildren( )","inheritdoc":0,"modifier":["public"],"return":"RecursiveCallbackFilterIterator"},"hasChildren":{"params":[],"docComment":"Check whether the inner iterator's current element has children","signature":"public RecursiveCallbackFilterIterator::hasChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"accept":{"params":[],"docComment":"Calls the callback with the current value, the current key and the inner iterator as arguments","signature":"public CallbackFilterIterator::accept( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RecursiveDirectoryIterator":{"classname":"RecursiveDirectoryIterator","docComment":"","methods":{"modifier":{"public":["__construct","getChildren","getSubPath","getSubPathname","hasChildren","key","next","rewind","__construct","current","getFlags","key","next","rewind","setFlags"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$path":"","$flags":""},"docComment":"Constructs a new filesystem iterator","signature":"public FilesystemIterator::__construct(string $path ,[int $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"getChildren":{"params":[],"docComment":"Returns an iterator for the current entry if it is a directory","signature":"public RecursiveDirectoryIterator::getChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"getSubPath":{"params":[],"docComment":"Get sub path","signature":"public RecursiveDirectoryIterator::getSubPath( )","inheritdoc":0,"modifier":["public"],"return":""},"getSubPathname":{"params":[],"docComment":"Get sub path and name","signature":"public RecursiveDirectoryIterator::getSubPathname( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildren":{"params":{"$allow_links":""},"docComment":"Returns whether current entry is a directory and not '.' or '..'","signature":"public RecursiveDirectoryIterator::hasChildren([bool $allow_links] )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Retrieve the key for the current file","signature":"public FilesystemIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move to the next file","signature":"public FilesystemIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewinds back to the beginning","signature":"public FilesystemIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"The current file","signature":"public FilesystemIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getFlags":{"params":[],"docComment":"Get the handling flags","signature":"public FilesystemIterator::getFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"setFlags":{"params":{"$flags":""},"docComment":"Sets handling flags","signature":"public FilesystemIterator::setFlags(int $flags )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RecursiveFilterIterator":{"classname":"RecursiveFilterIterator","docComment":"","methods":{"modifier":{"public":["__construct","getChildren","hasChildren","accept","__construct","current","getInnerIterator","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["accept"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$iterator":"Iterator"},"docComment":"Construct a filterIterator","signature":"public FilterIterator::__construct(Iterator $iterator )","inheritdoc":0,"modifier":["public"],"return":""},"getChildren":{"params":[],"docComment":"Return the inner iterator's children contained in a RecursiveFilterIterator","signature":"public RecursiveFilterIterator::getChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildren":{"params":[],"docComment":"Check whether the inner iterator's current element has children","signature":"public RecursiveFilterIterator::hasChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"accept":{"params":[],"docComment":"Check whether the current element of the iterator is acceptable","signature":"abstract FilterIterator::accept( )","inheritdoc":0,"modifier":["public","abstract"],"return":""},"current":{"params":[],"docComment":"Get the current element value","signature":"public FilterIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getInnerIterator":{"params":[],"docComment":"Get the inner iterator","signature":"public FilterIterator::getInnerIterator( )","inheritdoc":0,"modifier":["public"],"return":"Iterator"},"key":{"params":[],"docComment":"Get the current key","signature":"public FilterIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move the iterator forward","signature":"public FilterIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the iterator","signature":"public FilterIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the current element is valid","signature":"public FilterIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RecursiveIteratorIterator":{"classname":"RecursiveIteratorIterator","docComment":"","methods":{"modifier":{"public":["beginChildren","beginIteration","callGetChildren","callHasChildren","__construct","current","endChildren","endIteration","getDepth","getInnerIterator","getMaxDepth","getSubIterator","key","next","nextElement","rewind","setMaxDepth","valid","getInnerIterator"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","beginChildren":{"params":[],"docComment":"Begin children","signature":"public RecursiveIteratorIterator::beginChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"beginIteration":{"params":[],"docComment":"Begin Iteration","signature":"public RecursiveIteratorIterator::beginIteration( )","inheritdoc":0,"modifier":["public"],"return":""},"callGetChildren":{"params":[],"docComment":"Get children","signature":"public RecursiveIteratorIterator::callGetChildren( )","inheritdoc":0,"modifier":["public"],"return":"RecursiveIterator"},"callHasChildren":{"params":[],"docComment":"Has children","signature":"public RecursiveIteratorIterator::callHasChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$iterator":"Traversable","$mode":"","$flags":""},"docComment":"Construct a RecursiveIteratorIterator","signature":"public RecursiveIteratorIterator::__construct(Traversable $iterator ,[int $mode] ,[int $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Access the current element value","signature":"public RecursiveIteratorIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"endChildren":{"params":[],"docComment":"End children","signature":"public RecursiveIteratorIterator::endChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"endIteration":{"params":[],"docComment":"End Iteration","signature":"public RecursiveIteratorIterator::endIteration( )","inheritdoc":0,"modifier":["public"],"return":""},"getDepth":{"params":[],"docComment":"Get the current depth of the recursive iteration","signature":"public RecursiveIteratorIterator::getDepth( )","inheritdoc":0,"modifier":["public"],"return":""},"getInnerIterator":{"params":[],"docComment":"Returns the inner iterator for the current entry.","signature":"public OuterIterator::getInnerIterator( )","inheritdoc":0,"modifier":["public"],"return":"Iterator"},"getMaxDepth":{"params":[],"docComment":"Get max depth","signature":"public RecursiveIteratorIterator::getMaxDepth( )","inheritdoc":0,"modifier":["public"],"return":""},"getSubIterator":{"params":{"$level":""},"docComment":"The current active sub iterator","signature":"public RecursiveIteratorIterator::getSubIterator(int $level )","inheritdoc":0,"modifier":["public"],"return":"RecursiveIterator"},"key":{"params":[],"docComment":"Access the current key","signature":"public RecursiveIteratorIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move forward to the next element","signature":"public RecursiveIteratorIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"nextElement":{"params":[],"docComment":"Next element","signature":"public RecursiveIteratorIterator::nextElement( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the iterator to the first element of the top level inner iterator","signature":"public RecursiveIteratorIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"setMaxDepth":{"params":{"$max_depth":""},"docComment":"Set max depth","signature":"public RecursiveIteratorIterator::setMaxDepth([string $max_depth] )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the current position is valid","signature":"public RecursiveIteratorIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["LEAVES_ONLY","SELF_FIRST","CHILD_FIRST","CATCH_GET_CHILD"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","LEAVES_ONLY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SELF_FIRST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CHILD_FIRST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CATCH_GET_CHILD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RecursiveRegexIterator":{"classname":"RecursiveRegexIterator","docComment":"","methods":{"modifier":{"public":["getChildren","hasChildren","getChildren","hasChildren","accept","getFlags","getMode","getPregFlags","getRegex","setFlags","setMode","setPregFlags"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getChildren":{"params":[],"docComment":"Returns an iterator for the current entry.","signature":"public RecursiveIterator::getChildren( )","inheritdoc":0,"modifier":["public"],"return":"RecursiveIterator"},"hasChildren":{"params":[],"docComment":"Returns if an iterator can be created fot the current entry.","signature":"public RecursiveIterator::hasChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"accept":{"params":[],"docComment":"Get accept status","signature":"public RegexIterator::accept( )","inheritdoc":0,"modifier":["public"],"return":""},"getFlags":{"params":[],"docComment":"Get flags","signature":"public RegexIterator::getFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"getMode":{"params":[],"docComment":"Returns operation mode.","signature":"public RegexIterator::getMode( )","inheritdoc":0,"modifier":["public"],"return":""},"getPregFlags":{"params":[],"docComment":"Returns the regular expression flags.","signature":"public RegexIterator::getPregFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"getRegex":{"params":[],"docComment":"Returns current regular expression","signature":"public RegexIterator::getRegex( )","inheritdoc":0,"modifier":["public"],"return":""},"setFlags":{"params":{"$flags":""},"docComment":"Sets the flags.","signature":"public RegexIterator::setFlags(int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"setMode":{"params":{"$mode":""},"docComment":"Sets the operation mode.","signature":"public RegexIterator::setMode(int $mode )","inheritdoc":0,"modifier":["public"],"return":""},"setPregFlags":{"params":{"$preg_flags":""},"docComment":"Sets the regular expression flags.","signature":"public RegexIterator::setPregFlags(int $preg_flags )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RecursiveTreeIterator":{"classname":"RecursiveTreeIterator","docComment":"","methods":{"modifier":{"public":["beginChildren","beginIteration","callGetChildren","callHasChildren","__construct","current","endChildren","endIteration","getEntry","getPostfix","getPrefix","key","next","nextElement","rewind","setPrefixPart","valid","beginChildren","beginIteration","callGetChildren","callHasChildren","__construct","current","endChildren","endIteration","getDepth","getInnerIterator","getMaxDepth","getSubIterator","key","next","nextElement","rewind","setMaxDepth","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","beginChildren":{"params":[],"docComment":"Begin children","signature":"public RecursiveIteratorIterator::beginChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"beginIteration":{"params":[],"docComment":"Begin Iteration","signature":"public RecursiveIteratorIterator::beginIteration( )","inheritdoc":0,"modifier":["public"],"return":""},"callGetChildren":{"params":[],"docComment":"Get children","signature":"public RecursiveIteratorIterator::callGetChildren( )","inheritdoc":0,"modifier":["public"],"return":"RecursiveIterator"},"callHasChildren":{"params":[],"docComment":"Has children","signature":"public RecursiveIteratorIterator::callHasChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$iterator":"Traversable","$mode":"","$flags":""},"docComment":"Construct a RecursiveIteratorIterator","signature":"public RecursiveIteratorIterator::__construct(Traversable $iterator ,[int $mode] ,[int $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Access the current element value","signature":"public RecursiveIteratorIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"endChildren":{"params":[],"docComment":"End children","signature":"public RecursiveIteratorIterator::endChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"endIteration":{"params":[],"docComment":"End Iteration","signature":"public RecursiveIteratorIterator::endIteration( )","inheritdoc":0,"modifier":["public"],"return":""},"getEntry":{"params":[],"docComment":"Get current entry","signature":"public RecursiveTreeIterator::getEntry( )","inheritdoc":0,"modifier":["public"],"return":""},"getPostfix":{"params":[],"docComment":"Get the postfix","signature":"public RecursiveTreeIterator::getPostfix( )","inheritdoc":0,"modifier":["public"],"return":""},"getPrefix":{"params":[],"docComment":"Get the prefix","signature":"public RecursiveTreeIterator::getPrefix( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Access the current key","signature":"public RecursiveIteratorIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move forward to the next element","signature":"public RecursiveIteratorIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"nextElement":{"params":[],"docComment":"Next element","signature":"public RecursiveIteratorIterator::nextElement( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the iterator to the first element of the top level inner iterator","signature":"public RecursiveIteratorIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"setPrefixPart":{"params":{"$part":"","$value":""},"docComment":"Set a part of the prefix","signature":"public RecursiveTreeIterator::setPrefixPart(int $part ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the current position is valid","signature":"public RecursiveIteratorIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""},"getDepth":{"params":[],"docComment":"Get the current depth of the recursive iteration","signature":"public RecursiveIteratorIterator::getDepth( )","inheritdoc":0,"modifier":["public"],"return":""},"getInnerIterator":{"params":[],"docComment":"Get inner iterator","signature":"public RecursiveIteratorIterator::getInnerIterator( )","inheritdoc":0,"modifier":["public"],"return":"iterator"},"getMaxDepth":{"params":[],"docComment":"Get max depth","signature":"public RecursiveIteratorIterator::getMaxDepth( )","inheritdoc":0,"modifier":["public"],"return":""},"getSubIterator":{"params":{"$level":""},"docComment":"The current active sub iterator","signature":"public RecursiveIteratorIterator::getSubIterator(int $level )","inheritdoc":0,"modifier":["public"],"return":"RecursiveIterator"},"setMaxDepth":{"params":{"$max_depth":""},"docComment":"Set max depth","signature":"public RecursiveIteratorIterator::setMaxDepth([string $max_depth] )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["BYPASS_CURRENT","BYPASS_KEY","PREFIX_LEFT","PREFIX_MID_HAS_NEXT","PREFIX_MID_LAST","PREFIX_END_HAS_NEXT","PREFIX_END_LAST","PREFIX_RIGHT"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","BYPASS_CURRENT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BYPASS_KEY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PREFIX_LEFT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PREFIX_MID_HAS_NEXT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PREFIX_MID_LAST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PREFIX_END_HAS_NEXT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PREFIX_END_LAST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PREFIX_RIGHT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RegexIterator":{"classname":"RegexIterator","docComment":"","methods":{"modifier":{"public":["accept","getFlags","getMode","getPregFlags","getRegex","setFlags","setMode","setPregFlags","accept","__construct","current","getInnerIterator","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["accept"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","accept":{"params":[],"docComment":"Check whether the current element of the iterator is acceptable","signature":"abstract FilterIterator::accept( )","inheritdoc":0,"modifier":["public","abstract"],"return":""},"getFlags":{"params":[],"docComment":"Get flags","signature":"public RegexIterator::getFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"getMode":{"params":[],"docComment":"Returns operation mode.","signature":"public RegexIterator::getMode( )","inheritdoc":0,"modifier":["public"],"return":""},"getPregFlags":{"params":[],"docComment":"Returns the regular expression flags.","signature":"public RegexIterator::getPregFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"getRegex":{"params":[],"docComment":"Returns current regular expression","signature":"public RegexIterator::getRegex( )","inheritdoc":0,"modifier":["public"],"return":""},"setFlags":{"params":{"$flags":""},"docComment":"Sets the flags.","signature":"public RegexIterator::setFlags(int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"setMode":{"params":{"$mode":""},"docComment":"Sets the operation mode.","signature":"public RegexIterator::setMode(int $mode )","inheritdoc":0,"modifier":["public"],"return":""},"setPregFlags":{"params":{"$preg_flags":""},"docComment":"Sets the regular expression flags.","signature":"public RegexIterator::setPregFlags(int $preg_flags )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$iterator":"Iterator"},"docComment":"Construct a filterIterator","signature":"public FilterIterator::__construct(Iterator $iterator )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Get the current element value","signature":"public FilterIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getInnerIterator":{"params":[],"docComment":"Get the inner iterator","signature":"public FilterIterator::getInnerIterator( )","inheritdoc":0,"modifier":["public"],"return":"Iterator"},"key":{"params":[],"docComment":"Get the current key","signature":"public FilterIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move the iterator forward","signature":"public FilterIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the iterator","signature":"public FilterIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the current element is valid","signature":"public FilterIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["MATCH","GET_MATCH","ALL_MATCHES","SPLIT","REPLACE","USE_KEY"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","MATCH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"GET_MATCH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ALL_MATCHES":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SPLIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"REPLACE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"USE_KEY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Countable":{"classname":"Countable","docComment":"","methods":{"modifier":{"public":["count"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["count"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","count":{"params":[],"docComment":"Count elements of an object","signature":"public Countable::count( )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"OuterIterator":{"classname":"OuterIterator","docComment":"","methods":{"modifier":{"public":["getInnerIterator","current","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["current","key","next","rewind","valid"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getInnerIterator":{"params":[],"docComment":"Returns the inner iterator for the current entry.","signature":"public OuterIterator::getInnerIterator( )","inheritdoc":0,"modifier":["public"],"return":"Iterator"},"current":{"params":[],"docComment":"Return the current element","signature":"public Iterator::current( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"key":{"params":[],"docComment":"Return the key of the current element","signature":"public Iterator::key( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"next":{"params":[],"docComment":"Move forward to next element","signature":"public Iterator::next( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the Iterator to the first element","signature":"public Iterator::rewind( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"valid":{"params":[],"docComment":"Checks if current position is valid","signature":"public Iterator::valid( )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RecursiveIterator":{"classname":"RecursiveIterator","docComment":"","methods":{"modifier":{"public":["getChildren","hasChildren","current","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["current","key","next","rewind","valid"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getChildren":{"params":[],"docComment":"Returns an iterator for the current entry.","signature":"public RecursiveIterator::getChildren( )","inheritdoc":0,"modifier":["public"],"return":"RecursiveIterator"},"hasChildren":{"params":[],"docComment":"Returns if an iterator can be created fot the current entry.","signature":"public RecursiveIterator::hasChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Return the current element","signature":"public Iterator::current( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"key":{"params":[],"docComment":"Return the key of the current element","signature":"public Iterator::key( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"next":{"params":[],"docComment":"Move forward to next element","signature":"public Iterator::next( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the Iterator to the first element","signature":"public Iterator::rewind( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"valid":{"params":[],"docComment":"Checks if current position is valid","signature":"public Iterator::valid( )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SeekableIterator":{"classname":"SeekableIterator","docComment":"","methods":{"modifier":{"public":["seek","current","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["seek","current","key","next","rewind","valid"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","seek":{"params":{"$position":""},"docComment":"Seeks to a position","signature":"public SeekableIterator::seek(int $position )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"current":{"params":[],"docComment":"Return the current element","signature":"public Iterator::current( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"key":{"params":[],"docComment":"Return the key of the current element","signature":"public Iterator::key( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"next":{"params":[],"docComment":"Move forward to next element","signature":"public Iterator::next( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the Iterator to the first element","signature":"public Iterator::rewind( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"valid":{"params":[],"docComment":"Checks if current position is valid","signature":"public Iterator::valid( )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"BadFunctionCallException":{"classname":"BadFunctionCallException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"BadMethodCallException":{"classname":"BadMethodCallException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DomainException":{"classname":"DomainException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"InvalidArgumentException":{"classname":"InvalidArgumentException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"LengthException":{"classname":"LengthException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"LogicException":{"classname":"LogicException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"OutOfBoundsException":{"classname":"OutOfBoundsException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"OutOfRangeException":{"classname":"OutOfRangeException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"OverflowException":{"classname":"OverflowException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RangeException":{"classname":"RangeException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RuntimeException":{"classname":"RuntimeException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"UnderflowException":{"classname":"UnderflowException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"UnexpectedValueException":{"classname":"UnexpectedValueException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplFileInfo":{"classname":"SplFileInfo","docComment":"","methods":{"modifier":{"public":["__construct","getATime","getBasename","getCTime","getExtension","getFileInfo","getFilename","getGroup","getInode","getLinkTarget","getMTime","getOwner","getPath","getPathInfo","getPathname","getPerms","getRealPath","getSize","getType","isDir","isExecutable","isFile","isLink","isReadable","isWritable","openFile","setFileClass","setInfoClass","__toString"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$file_name":""},"docComment":"Construct a new SplFileInfo object","signature":"public SplFileInfo::__construct(string $file_name )","inheritdoc":0,"modifier":["public"],"return":""},"getATime":{"params":[],"docComment":"Gets last access time of the file","signature":"public SplFileInfo::getATime( )","inheritdoc":0,"modifier":["public"],"return":""},"getBasename":{"params":{"$suffix":""},"docComment":"Gets the base name of the file","signature":"public SplFileInfo::getBasename(string $suffix )","inheritdoc":0,"modifier":["public"],"return":""},"getCTime":{"params":[],"docComment":"Gets the inode change time","signature":"public SplFileInfo::getCTime( )","inheritdoc":0,"modifier":["public"],"return":""},"getExtension":{"params":[],"docComment":"Gets the file extension","signature":"public SplFileInfo::getExtension( )","inheritdoc":0,"modifier":["public"],"return":""},"getFileInfo":{"params":{"$class_name":""},"docComment":"Gets an SplFileInfo object for the file","signature":"public SplFileInfo::getFileInfo(string $class_name )","inheritdoc":0,"modifier":["public"],"return":"SplFileInfo"},"getFilename":{"params":[],"docComment":"Gets the filename","signature":"public SplFileInfo::getFilename( )","inheritdoc":0,"modifier":["public"],"return":""},"getGroup":{"params":[],"docComment":"Gets the file group","signature":"public SplFileInfo::getGroup( )","inheritdoc":0,"modifier":["public"],"return":""},"getInode":{"params":[],"docComment":"Gets the inode for the file","signature":"public SplFileInfo::getInode( )","inheritdoc":0,"modifier":["public"],"return":""},"getLinkTarget":{"params":[],"docComment":"Gets the target of a link","signature":"public SplFileInfo::getLinkTarget( )","inheritdoc":0,"modifier":["public"],"return":""},"getMTime":{"params":[],"docComment":"Gets the last modified time","signature":"public SplFileInfo::getMTime( )","inheritdoc":0,"modifier":["public"],"return":""},"getOwner":{"params":[],"docComment":"Gets the owner of the file","signature":"public SplFileInfo::getOwner( )","inheritdoc":0,"modifier":["public"],"return":""},"getPath":{"params":[],"docComment":"Gets the path without filename","signature":"public SplFileInfo::getPath( )","inheritdoc":0,"modifier":["public"],"return":""},"getPathInfo":{"params":{"$class_name":""},"docComment":"Gets an SplFileInfo object for the path","signature":"public SplFileInfo::getPathInfo(string $class_name )","inheritdoc":0,"modifier":["public"],"return":"SplFileInfo"},"getPathname":{"params":[],"docComment":"Gets the path to the file","signature":"public SplFileInfo::getPathname( )","inheritdoc":0,"modifier":["public"],"return":""},"getPerms":{"params":[],"docComment":"Gets file permissions","signature":"public SplFileInfo::getPerms( )","inheritdoc":0,"modifier":["public"],"return":""},"getRealPath":{"params":[],"docComment":"Gets absolute path to file","signature":"public SplFileInfo::getRealPath( )","inheritdoc":0,"modifier":["public"],"return":""},"getSize":{"params":[],"docComment":"Gets file size","signature":"public SplFileInfo::getSize( )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"Gets file type","signature":"public SplFileInfo::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"isDir":{"params":[],"docComment":"Tells if the file is a directory","signature":"public SplFileInfo::isDir( )","inheritdoc":0,"modifier":["public"],"return":""},"isExecutable":{"params":[],"docComment":"Tells if the file is executable","signature":"public SplFileInfo::isExecutable( )","inheritdoc":0,"modifier":["public"],"return":""},"isFile":{"params":[],"docComment":"Tells if the object references a regular file","signature":"public SplFileInfo::isFile( )","inheritdoc":0,"modifier":["public"],"return":""},"isLink":{"params":[],"docComment":"Tells if the file is a link","signature":"public SplFileInfo::isLink( )","inheritdoc":0,"modifier":["public"],"return":""},"isReadable":{"params":[],"docComment":"Tells if file is readable","signature":"public SplFileInfo::isReadable( )","inheritdoc":0,"modifier":["public"],"return":""},"isWritable":{"params":[],"docComment":"Tells if the entry is writable","signature":"public SplFileInfo::isWritable( )","inheritdoc":0,"modifier":["public"],"return":""},"openFile":{"params":{"$open_mode":"","$use_include_path":"","$context":""},"docComment":"Gets an SplFileObject object for the file","signature":"public SplFileInfo::openFile([string $open_mode] ,[bool $use_include_path] ,[resource $context] )","inheritdoc":0,"modifier":["public"],"return":"SplFileObject"},"setFileClass":{"params":{"$class_name":""},"docComment":"Sets the class name used with  ","signature":"public SplFileInfo::setFileClass(string $class_name )","inheritdoc":0,"modifier":["public"],"return":""},"setInfoClass":{"params":{"$class_name":""},"docComment":"Sets the class used with getFileInfo and getPathInfo","signature":"public SplFileInfo::setInfoClass(string $class_name )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Returns the path to the file as a string","signature":"public SplFileInfo::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplFileObject":{"classname":"SplFileObject","docComment":"","methods":{"modifier":{"public":["__construct","current","eof","fflush","fgetc","fgetcsv","fgets","fgetss","flock","fpassthru","fputcsv","fscanf","fseek","fstat","ftell","ftruncate","fwrite","getChildren","getCsvControl","getFlags","getMaxLineLen","hasChildren","key","next","rewind","seek","setCsvControl","setFlags","setMaxLineLen","__toString","valid","__construct","getATime","getBasename","getCTime","getExtension","getFileInfo","getFilename","getGroup","getInode","getLinkTarget","getMTime","getOwner","getPath","getPathInfo","getPathname","getPerms","getRealPath","getSize","getType","isDir","isExecutable","isFile","isLink","isReadable","isWritable","openFile","setFileClass","setInfoClass","__toString"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$file_name":""},"docComment":"Construct a new SplFileInfo object","signature":"public SplFileInfo::__construct(string $file_name )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Retrieve current line of file","signature":"public SplFileObject::current( )","inheritdoc":0,"modifier":["public"],"return":""},"eof":{"params":[],"docComment":"Reached end of file","signature":"public SplFileObject::eof( )","inheritdoc":0,"modifier":["public"],"return":""},"fflush":{"params":[],"docComment":"Flushes the output to the file","signature":"public SplFileObject::fflush( )","inheritdoc":0,"modifier":["public"],"return":""},"fgetc":{"params":[],"docComment":"Gets character from file","signature":"public SplFileObject::fgetc( )","inheritdoc":0,"modifier":["public"],"return":""},"fgetcsv":{"params":{"$delimiter":"","$enclosure":"","$escape":""},"docComment":"Gets line from file and parse as CSV fields","signature":"public SplFileObject::fgetcsv([string $delimiter] ,[string $enclosure] ,[string $escape] )","inheritdoc":0,"modifier":["public"],"return":""},"fgets":{"params":[],"docComment":"Gets line from file","signature":"public SplFileObject::fgets( )","inheritdoc":0,"modifier":["public"],"return":""},"fgetss":{"params":{"$allowable_tags":""},"docComment":"Gets line from file and strip HTML tags","signature":"public SplFileObject::fgetss(string $allowable_tags )","inheritdoc":0,"modifier":["public"],"return":""},"flock":{"params":{"$operation":"","&$wouldblock":""},"docComment":"Portable file locking","signature":"public SplFileObject::flock(int $operation ,int &$wouldblock )","inheritdoc":0,"modifier":["public"],"return":""},"fpassthru":{"params":[],"docComment":"Output all remaining data on a file pointer","signature":"public SplFileObject::fpassthru( )","inheritdoc":0,"modifier":["public"],"return":""},"fputcsv":{"params":{"$fields":"","$delimiter":"","$enclosure":""},"docComment":"Write a field array as a CSV line","signature":"public SplFileObject::fputcsv(array $fields ,[string $delimiter] ,[string $enclosure] )","inheritdoc":0,"modifier":["public"],"return":""},"fscanf":{"params":{"$format":"","&$...":""},"docComment":"Parses input from file according to a format","signature":"public SplFileObject::fscanf(string $format ,mixed &$... )","inheritdoc":0,"modifier":["public"],"return":""},"fseek":{"params":{"$offset":"","$whence":""},"docComment":"Seek to a position","signature":"public SplFileObject::fseek(int $offset ,[int $whence] )","inheritdoc":0,"modifier":["public"],"return":""},"fstat":{"params":[],"docComment":"Gets information about the file","signature":"public SplFileObject::fstat( )","inheritdoc":0,"modifier":["public"],"return":""},"ftell":{"params":[],"docComment":"Return current file position","signature":"public SplFileObject::ftell( )","inheritdoc":0,"modifier":["public"],"return":""},"ftruncate":{"params":{"$size":""},"docComment":"Truncates the file to a given length","signature":"public SplFileObject::ftruncate(int $size )","inheritdoc":0,"modifier":["public"],"return":""},"fwrite":{"params":{"$str":"","$length":""},"docComment":"Write to file","signature":"public SplFileObject::fwrite(string $str ,int $length )","inheritdoc":0,"modifier":["public"],"return":""},"getChildren":{"params":[],"docComment":"No purpose","signature":"public SplFileObject::getChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"getCsvControl":{"params":[],"docComment":"Get the delimiter and enclosure character for CSV","signature":"public SplFileObject::getCsvControl( )","inheritdoc":0,"modifier":["public"],"return":""},"getFlags":{"params":[],"docComment":"Gets flags for the SplFileObject","signature":"public SplFileObject::getFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"getMaxLineLen":{"params":[],"docComment":"Get maximum line length","signature":"public SplFileObject::getMaxLineLen( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildren":{"params":[],"docComment":"SplFileObject does not have children","signature":"public SplFileObject::hasChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Get line number","signature":"public SplFileObject::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Read next line","signature":"public SplFileObject::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the file to the first line","signature":"public SplFileObject::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"seek":{"params":{"$line_pos":""},"docComment":"Seek to specified line","signature":"public SplFileObject::seek(int $line_pos )","inheritdoc":0,"modifier":["public"],"return":""},"setCsvControl":{"params":{"$delimiter":"","$enclosure":"","$escape":""},"docComment":"Set the delimiter and enclosure character for CSV","signature":"public SplFileObject::setCsvControl([string $delimiter] ,[string $enclosure] ,[string $escape] )","inheritdoc":0,"modifier":["public"],"return":""},"setFlags":{"params":{"$flags":""},"docComment":"Sets flags for the SplFileObject","signature":"public SplFileObject::setFlags(int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"setMaxLineLen":{"params":{"$max_len":""},"docComment":"Set maximum line length","signature":"public SplFileObject::setMaxLineLen(int $max_len )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Returns the path to the file as a string","signature":"public SplFileInfo::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Not at EOF","signature":"public SplFileObject::valid( )","inheritdoc":0,"modifier":["public"],"return":""},"getATime":{"params":[],"docComment":"Gets last access time of the file","signature":"public SplFileInfo::getATime( )","inheritdoc":0,"modifier":["public"],"return":""},"getBasename":{"params":{"$suffix":""},"docComment":"Gets the base name of the file","signature":"public SplFileInfo::getBasename(string $suffix )","inheritdoc":0,"modifier":["public"],"return":""},"getCTime":{"params":[],"docComment":"Gets the inode change time","signature":"public SplFileInfo::getCTime( )","inheritdoc":0,"modifier":["public"],"return":""},"getExtension":{"params":[],"docComment":"Gets the file extension","signature":"public SplFileInfo::getExtension( )","inheritdoc":0,"modifier":["public"],"return":""},"getFileInfo":{"params":{"$class_name":""},"docComment":"Gets an SplFileInfo object for the file","signature":"public SplFileInfo::getFileInfo(string $class_name )","inheritdoc":0,"modifier":["public"],"return":"SplFileInfo"},"getFilename":{"params":[],"docComment":"Gets the filename","signature":"public SplFileInfo::getFilename( )","inheritdoc":0,"modifier":["public"],"return":""},"getGroup":{"params":[],"docComment":"Gets the file group","signature":"public SplFileInfo::getGroup( )","inheritdoc":0,"modifier":["public"],"return":""},"getInode":{"params":[],"docComment":"Gets the inode for the file","signature":"public SplFileInfo::getInode( )","inheritdoc":0,"modifier":["public"],"return":""},"getLinkTarget":{"params":[],"docComment":"Gets the target of a link","signature":"public SplFileInfo::getLinkTarget( )","inheritdoc":0,"modifier":["public"],"return":""},"getMTime":{"params":[],"docComment":"Gets the last modified time","signature":"public SplFileInfo::getMTime( )","inheritdoc":0,"modifier":["public"],"return":""},"getOwner":{"params":[],"docComment":"Gets the owner of the file","signature":"public SplFileInfo::getOwner( )","inheritdoc":0,"modifier":["public"],"return":""},"getPath":{"params":[],"docComment":"Gets the path without filename","signature":"public SplFileInfo::getPath( )","inheritdoc":0,"modifier":["public"],"return":""},"getPathInfo":{"params":{"$class_name":""},"docComment":"Gets an SplFileInfo object for the path","signature":"public SplFileInfo::getPathInfo(string $class_name )","inheritdoc":0,"modifier":["public"],"return":"SplFileInfo"},"getPathname":{"params":[],"docComment":"Gets the path to the file","signature":"public SplFileInfo::getPathname( )","inheritdoc":0,"modifier":["public"],"return":""},"getPerms":{"params":[],"docComment":"Gets file permissions","signature":"public SplFileInfo::getPerms( )","inheritdoc":0,"modifier":["public"],"return":""},"getRealPath":{"params":[],"docComment":"Gets absolute path to file","signature":"public SplFileInfo::getRealPath( )","inheritdoc":0,"modifier":["public"],"return":""},"getSize":{"params":[],"docComment":"Gets file size","signature":"public SplFileInfo::getSize( )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"Gets file type","signature":"public SplFileInfo::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"isDir":{"params":[],"docComment":"Tells if the file is a directory","signature":"public SplFileInfo::isDir( )","inheritdoc":0,"modifier":["public"],"return":""},"isExecutable":{"params":[],"docComment":"Tells if the file is executable","signature":"public SplFileInfo::isExecutable( )","inheritdoc":0,"modifier":["public"],"return":""},"isFile":{"params":[],"docComment":"Tells if the object references a regular file","signature":"public SplFileInfo::isFile( )","inheritdoc":0,"modifier":["public"],"return":""},"isLink":{"params":[],"docComment":"Tells if the file is a link","signature":"public SplFileInfo::isLink( )","inheritdoc":0,"modifier":["public"],"return":""},"isReadable":{"params":[],"docComment":"Tells if file is readable","signature":"public SplFileInfo::isReadable( )","inheritdoc":0,"modifier":["public"],"return":""},"isWritable":{"params":[],"docComment":"Tells if the entry is writable","signature":"public SplFileInfo::isWritable( )","inheritdoc":0,"modifier":["public"],"return":""},"openFile":{"params":{"$open_mode":"","$use_include_path":"","$context":""},"docComment":"Gets an SplFileObject object for the file","signature":"public SplFileInfo::openFile([string $open_mode] ,[bool $use_include_path] ,[resource $context] )","inheritdoc":0,"modifier":["public"],"return":"SplFileObject"},"setFileClass":{"params":{"$class_name":""},"docComment":"Sets the class name used with  ","signature":"public SplFileInfo::setFileClass(string $class_name )","inheritdoc":0,"modifier":["public"],"return":""},"setInfoClass":{"params":{"$class_name":""},"docComment":"Sets the class used with getFileInfo and getPathInfo","signature":"public SplFileInfo::setInfoClass(string $class_name )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["DROP_NEW_LINE","READ_AHEAD","SKIP_EMPTY","READ_CSV"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","DROP_NEW_LINE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"READ_AHEAD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SKIP_EMPTY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"READ_CSV":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplTempFileObject":{"classname":"SplTempFileObject","docComment":"","methods":{"modifier":{"public":["__construct","__construct","current","eof","fflush","fgetc","fgetcsv","fgets","fgetss","flock","fpassthru","fputcsv","fscanf","fseek","fstat","ftell","ftruncate","fwrite","getChildren","getCsvControl","getFlags","getMaxLineLen","hasChildren","key","next","rewind","seek","setCsvControl","setFlags","setMaxLineLen","__toString","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$filename":"","$open_mode":"","$use_include_path":"","$context":""},"docComment":"Construct a new file object.","signature":"public SplFileObject::__construct(string $filename ,[string $open_mode] ,[bool $use_include_path] ,resource $context )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Retrieve current line of file","signature":"public SplFileObject::current( )","inheritdoc":0,"modifier":["public"],"return":""},"eof":{"params":[],"docComment":"Reached end of file","signature":"public SplFileObject::eof( )","inheritdoc":0,"modifier":["public"],"return":""},"fflush":{"params":[],"docComment":"Flushes the output to the file","signature":"public SplFileObject::fflush( )","inheritdoc":0,"modifier":["public"],"return":""},"fgetc":{"params":[],"docComment":"Gets character from file","signature":"public SplFileObject::fgetc( )","inheritdoc":0,"modifier":["public"],"return":""},"fgetcsv":{"params":{"$delimiter":"","$enclosure":"","$escape":""},"docComment":"Gets line from file and parse as CSV fields","signature":"public SplFileObject::fgetcsv([string $delimiter] ,[string $enclosure] ,[string $escape] )","inheritdoc":0,"modifier":["public"],"return":""},"fgets":{"params":[],"docComment":"Gets line from file","signature":"public SplFileObject::fgets( )","inheritdoc":0,"modifier":["public"],"return":""},"fgetss":{"params":{"$allowable_tags":""},"docComment":"Gets line from file and strip HTML tags","signature":"public SplFileObject::fgetss(string $allowable_tags )","inheritdoc":0,"modifier":["public"],"return":""},"flock":{"params":{"$operation":"","&$wouldblock":""},"docComment":"Portable file locking","signature":"public SplFileObject::flock(int $operation ,int &$wouldblock )","inheritdoc":0,"modifier":["public"],"return":""},"fpassthru":{"params":[],"docComment":"Output all remaining data on a file pointer","signature":"public SplFileObject::fpassthru( )","inheritdoc":0,"modifier":["public"],"return":""},"fputcsv":{"params":{"$fields":"","$delimiter":"","$enclosure":""},"docComment":"Write a field array as a CSV line","signature":"public SplFileObject::fputcsv(array $fields ,[string $delimiter] ,[string $enclosure] )","inheritdoc":0,"modifier":["public"],"return":""},"fscanf":{"params":{"$format":"","&$...":""},"docComment":"Parses input from file according to a format","signature":"public SplFileObject::fscanf(string $format ,mixed &$... )","inheritdoc":0,"modifier":["public"],"return":""},"fseek":{"params":{"$offset":"","$whence":""},"docComment":"Seek to a position","signature":"public SplFileObject::fseek(int $offset ,[int $whence] )","inheritdoc":0,"modifier":["public"],"return":""},"fstat":{"params":[],"docComment":"Gets information about the file","signature":"public SplFileObject::fstat( )","inheritdoc":0,"modifier":["public"],"return":""},"ftell":{"params":[],"docComment":"Return current file position","signature":"public SplFileObject::ftell( )","inheritdoc":0,"modifier":["public"],"return":""},"ftruncate":{"params":{"$size":""},"docComment":"Truncates the file to a given length","signature":"public SplFileObject::ftruncate(int $size )","inheritdoc":0,"modifier":["public"],"return":""},"fwrite":{"params":{"$str":"","$length":""},"docComment":"Write to file","signature":"public SplFileObject::fwrite(string $str ,int $length )","inheritdoc":0,"modifier":["public"],"return":""},"getChildren":{"params":[],"docComment":"No purpose","signature":"public SplFileObject::getChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"getCsvControl":{"params":[],"docComment":"Get the delimiter and enclosure character for CSV","signature":"public SplFileObject::getCsvControl( )","inheritdoc":0,"modifier":["public"],"return":""},"getFlags":{"params":[],"docComment":"Gets flags for the SplFileObject","signature":"public SplFileObject::getFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"getMaxLineLen":{"params":[],"docComment":"Get maximum line length","signature":"public SplFileObject::getMaxLineLen( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildren":{"params":[],"docComment":"SplFileObject does not have children","signature":"public SplFileObject::hasChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Get line number","signature":"public SplFileObject::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Read next line","signature":"public SplFileObject::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the file to the first line","signature":"public SplFileObject::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"seek":{"params":{"$line_pos":""},"docComment":"Seek to specified line","signature":"public SplFileObject::seek(int $line_pos )","inheritdoc":0,"modifier":["public"],"return":""},"setCsvControl":{"params":{"$delimiter":"","$enclosure":"","$escape":""},"docComment":"Set the delimiter and enclosure character for CSV","signature":"public SplFileObject::setCsvControl([string $delimiter] ,[string $enclosure] ,[string $escape] )","inheritdoc":0,"modifier":["public"],"return":""},"setFlags":{"params":{"$flags":""},"docComment":"Sets flags for the SplFileObject","signature":"public SplFileObject::setFlags(int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"setMaxLineLen":{"params":{"$max_len":""},"docComment":"Set maximum line length","signature":"public SplFileObject::setMaxLineLen(int $max_len )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Retrieve current line of file","signature":"public SplFileObject::current( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Not at EOF","signature":"public SplFileObject::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ArrayObject":{"classname":"ArrayObject","docComment":"","methods":{"modifier":{"public":["append","asort","count","exchangeArray","getArrayCopy","getFlags","getIterator","getIteratorClass","ksort","natcasesort","natsort","offsetExists","offsetGet","offsetSet","offsetUnset","serialize","setFlags","setIteratorClass","uasort","uksort","unserialize"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","append":{"params":{"$value":""},"docComment":"Appends the value","signature":"public ArrayObject::append(mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"asort":{"params":[],"docComment":"Sort the entries by value","signature":"public ArrayObject::asort( )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"Get the number of public properties in the ArrayObject","signature":"public ArrayObject::count( )","inheritdoc":0,"modifier":["public"],"return":""},"exchangeArray":{"params":{"$input":""},"docComment":"Exchange the array for another one.","signature":"public ArrayObject::exchangeArray(mixed $input )","inheritdoc":0,"modifier":["public"],"return":""},"getArrayCopy":{"params":[],"docComment":"Creates a copy of the ArrayObject.","signature":"public ArrayObject::getArrayCopy( )","inheritdoc":0,"modifier":["public"],"return":""},"getFlags":{"params":[],"docComment":"Gets the behavior flags.","signature":"public ArrayObject::getFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"getIterator":{"params":[],"docComment":"Create a new iterator from an ArrayObject instance","signature":"public ArrayObject::getIterator( )","inheritdoc":0,"modifier":["public"],"return":"ArrayIterator"},"getIteratorClass":{"params":[],"docComment":"Gets the iterator classname for the ArrayObject.","signature":"public ArrayObject::getIteratorClass( )","inheritdoc":0,"modifier":["public"],"return":""},"ksort":{"params":[],"docComment":"Sort the entries by key","signature":"public ArrayObject::ksort( )","inheritdoc":0,"modifier":["public"],"return":""},"natcasesort":{"params":[],"docComment":"Sort an array using a case insensitive \"natural order\" algorithm","signature":"public ArrayObject::natcasesort( )","inheritdoc":0,"modifier":["public"],"return":""},"natsort":{"params":[],"docComment":"Sort entries using a \"natural order\" algorithm","signature":"public ArrayObject::natsort( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$index":""},"docComment":"Returns whether the requested index exists","signature":"public ArrayObject::offsetExists(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$index":""},"docComment":"Returns the value at the specified index","signature":"public ArrayObject::offsetGet(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$index":"","$newval":""},"docComment":"Sets the value at the specified index to newval","signature":"public ArrayObject::offsetSet(mixed $index ,mixed $newval )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$index":""},"docComment":"Unsets the value at the specified index","signature":"public ArrayObject::offsetUnset(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"serialize":{"params":[],"docComment":"Serialize an ArrayObject","signature":"public ArrayObject::serialize( )","inheritdoc":0,"modifier":["public"],"return":""},"setFlags":{"params":{"$flags":""},"docComment":"Sets the behavior flags.","signature":"public ArrayObject::setFlags(int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"setIteratorClass":{"params":{"$iterator_class":""},"docComment":"Sets the iterator classname for the ArrayObject.","signature":"public ArrayObject::setIteratorClass(string $iterator_class )","inheritdoc":0,"modifier":["public"],"return":""},"uasort":{"params":{"$cmp_function":""},"docComment":"Sort the entries with a user-defined comparison function and maintain key association","signature":"public ArrayObject::uasort(callable $cmp_function )","inheritdoc":0,"modifier":["public"],"return":""},"uksort":{"params":{"$cmp_function":""},"docComment":"Sort the entries by keys using a user-defined comparison function","signature":"public ArrayObject::uksort(callable $cmp_function )","inheritdoc":0,"modifier":["public"],"return":""},"unserialize":{"params":{"$serialized":""},"docComment":"Unserialize an ArrayObject","signature":"public ArrayObject::unserialize(string $serialized )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["STD_PROP_LIST","ARRAY_AS_PROPS"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","STD_PROP_LIST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ARRAY_AS_PROPS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplObserver":{"classname":"SplObserver","docComment":"","methods":{"modifier":{"public":["update"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["update"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","update":{"params":{"$subject":"SplSubject"},"docComment":"Receive update from subject","signature":"public SplObserver::update(SplSubject $subject )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplSubject":{"classname":"SplSubject","docComment":"","methods":{"modifier":{"public":["attach","detach","notify"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["attach","detach","notify"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","attach":{"params":{"$observer":"SplObserver"},"docComment":"Attach an SplObserver","signature":"public SplSubject::attach(SplObserver $observer )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"detach":{"params":{"$observer":"SplObserver"},"docComment":"Detach an observer","signature":"public SplSubject::detach(SplObserver $observer )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"notify":{"params":[],"docComment":"Notify an observer","signature":"public SplSubject::notify( )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"php_user_filter":{"classname":"php_user_filter","docComment":"","methods":{"modifier":{"public":["filter","onClose","onCreate"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","filter":{"params":{"$in":"","$out":"","&$consumed":"","$closing":""},"docComment":"Called when applying the filter","signature":"public php_user_filter::filter(resource $in ,resource $out ,int &$consumed ,bool $closing )","inheritdoc":0,"modifier":["public"],"return":""},"onClose":{"params":[],"docComment":"Called when closing the filter","signature":"public php_user_filter::onClose( )","inheritdoc":0,"modifier":["public"],"return":""},"onCreate":{"params":[],"docComment":"Called when creating the filter","signature":"public php_user_filter::onCreate( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["filtername","params"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","filtername":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"params":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"streamWrapper":{"classname":"","docComment":"","methods":{"modifier":{"public":["__construct","__destruct","dir_closedir","dir_opendir","dir_readdir","dir_rewinddir","mkdir","rename","rmdir","stream_cast","stream_close","stream_eof","stream_flush","stream_lock","stream_metadata","stream_open","stream_read","stream_seek","stream_set_option","stream_stat","stream_tell","stream_truncate","stream_write","unlink","url_stat"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Constructs a new stream wrapper","signature":"streamWrapper::__construct( )","inheritdoc":0,"modifier":[],"return":""},"__destruct":{"params":[],"docComment":"Destructs an existing stream wrapper","signature":"streamWrapper::__destruct( )","inheritdoc":0,"modifier":[],"return":""},"dir_closedir":{"params":[],"docComment":"Close directory handle","signature":"public streamWrapper::dir_closedir( )","inheritdoc":0,"modifier":["public"],"return":""},"dir_opendir":{"params":{"$path":"","$options":""},"docComment":"Open directory handle","signature":"public streamWrapper::dir_opendir(string $path ,int $options )","inheritdoc":0,"modifier":["public"],"return":""},"dir_readdir":{"params":[],"docComment":"Read entry from directory handle","signature":"public streamWrapper::dir_readdir( )","inheritdoc":0,"modifier":["public"],"return":""},"dir_rewinddir":{"params":[],"docComment":"Rewind directory handle","signature":"public streamWrapper::dir_rewinddir( )","inheritdoc":0,"modifier":["public"],"return":""},"mkdir":{"params":{"$path":"","$mode":"","$options":""},"docComment":"Create a directory","signature":"public streamWrapper::mkdir(string $path ,int $mode ,int $options )","inheritdoc":0,"modifier":["public"],"return":""},"rename":{"params":{"$path_from":"","$path_to":""},"docComment":"Renames a file or directory","signature":"public streamWrapper::rename(string $path_from ,string $path_to )","inheritdoc":0,"modifier":["public"],"return":""},"rmdir":{"params":{"$path":"","$options":""},"docComment":"Removes a directory","signature":"public streamWrapper::rmdir(string $path ,int $options )","inheritdoc":0,"modifier":["public"],"return":""},"stream_cast":{"params":{"$cast_as":""},"docComment":"Retrieve the underlaying resource","signature":"public streamWrapper::stream_cast(int $cast_as )","inheritdoc":0,"modifier":["public"],"return":""},"stream_close":{"params":[],"docComment":"Close an resource","signature":"public streamWrapper::stream_close( )","inheritdoc":0,"modifier":["public"],"return":""},"stream_eof":{"params":[],"docComment":"Tests for end-of-file on a file pointer","signature":"public streamWrapper::stream_eof( )","inheritdoc":0,"modifier":["public"],"return":""},"stream_flush":{"params":[],"docComment":"Flushes the output","signature":"public streamWrapper::stream_flush( )","inheritdoc":0,"modifier":["public"],"return":""},"stream_lock":{"params":{"$operation":""},"docComment":"Advisory file locking","signature":"public streamWrapper::stream_lock(int $operation )","inheritdoc":0,"modifier":["public"],"return":""},"stream_metadata":{"params":{"$path":"","$option":"","$value":""},"docComment":"Change stream options","signature":"public streamWrapper::stream_metadata(string $path ,int $option ,mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"stream_open":{"params":{"$path":"","$mode":"","$options":"","&$opened_path":""},"docComment":"Opens file or URL","signature":"public streamWrapper::stream_open(string $path ,string $mode ,int $options ,string &$opened_path )","inheritdoc":0,"modifier":["public"],"return":""},"stream_read":{"params":{"$count":""},"docComment":"Read from stream","signature":"public streamWrapper::stream_read(int $count )","inheritdoc":0,"modifier":["public"],"return":""},"stream_seek":{"params":{"$offset":"","$whence":""},"docComment":"Seeks to specific location in a stream","signature":"public streamWrapper::stream_seek(int $offset ,[int $whence] )","inheritdoc":0,"modifier":["public"],"return":""},"stream_set_option":{"params":{"$option":"","$arg1":"","$arg2":""},"docComment":"Change stream options","signature":"public streamWrapper::stream_set_option(int $option ,int $arg1 ,int $arg2 )","inheritdoc":0,"modifier":["public"],"return":""},"stream_stat":{"params":[],"docComment":"Retrieve information about a file resource","signature":"public streamWrapper::stream_stat( )","inheritdoc":0,"modifier":["public"],"return":""},"stream_tell":{"params":[],"docComment":"Retrieve the current position of a stream","signature":"public streamWrapper::stream_tell( )","inheritdoc":0,"modifier":["public"],"return":""},"stream_truncate":{"params":{"$new_size":""},"docComment":"Truncate stream","signature":"public streamWrapper::stream_truncate(int $new_size )","inheritdoc":0,"modifier":["public"],"return":""},"stream_write":{"params":{"$data":""},"docComment":"Write to stream","signature":"public streamWrapper::stream_write(string $data )","inheritdoc":0,"modifier":["public"],"return":""},"unlink":{"params":{"$path":""},"docComment":"Delete a file","signature":"public streamWrapper::unlink(string $path )","inheritdoc":0,"modifier":["public"],"return":""},"url_stat":{"params":{"$path":"","$flags":""},"docComment":"Retrieve information about a file","signature":"public streamWrapper::url_stat(string $path ,int $flags )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["context"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","context":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"COM":{"classname":"","docComment":"","methods":{"modifier":{"public":["AddRef","Release"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","AddRef":{"params":[],"docComment":"Increases the components reference counter [deprecated]","signature":"com_addref( )","inheritdoc":0,"modifier":[],"return":""},"Release":{"params":[],"docComment":"Decreases the components reference counter [deprecated]","signature":"com_release( )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOTNET":{"classname":"","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"VARIANT":{"classname":"","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Collator":{"classname":"Collator","docComment":"","methods":{"modifier":{"public":["asort","compare","create","getAttribute","getErrorCode","getErrorMessage","getLocale","getSortKey","getStrength","setAttribute","setStrength","sortWithSortKeys","sort"],"private":[],"protected":[],"final":[],"static":["create"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","asort":{"params":{"&$arr":"","$sort_flag":"","$coll":"Collator"},"docComment":"Sort array maintaining index association","signature":"collator_asort(Collator $coll ,array &$arr ,int $sort_flag )","inheritdoc":0,"modifier":["public"],"return":""},"compare":{"params":{"$str1":"","$str2":"","$coll":"Collator"},"docComment":"Compare two Unicode strings","signature":"collator_compare(Collator $coll ,string $str1 ,string $str2 )","inheritdoc":0,"modifier":["public"],"return":""},"create":{"params":{"$locale":""},"docComment":"Create a collator","signature":"collator_create(string $locale )","inheritdoc":0,"modifier":["public","static"],"return":"Collator"},"getAttribute":{"params":{"$attr":"","$coll":"Collator"},"docComment":"Get collation attribute value","signature":"collator_get_attribute(Collator $coll ,int $attr )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorCode":{"params":{"$coll":"Collator"},"docComment":"Get collator's last error code","signature":"collator_get_error_code(Collator $coll )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorMessage":{"params":{"$coll":"Collator"},"docComment":"Get text for collator's last error code","signature":"collator_get_error_message(Collator $coll )","inheritdoc":0,"modifier":["public"],"return":""},"getLocale":{"params":{"$type":"","$coll":"Collator"},"docComment":"Get the locale name of the collator","signature":"collator_get_locale(Collator $coll ,int $type )","inheritdoc":0,"modifier":["public"],"return":""},"getSortKey":{"params":{"$str":"","$coll":"Collator"},"docComment":"Get sorting key for a string","signature":"collator_get_sort_key(Collator $coll ,string $str )","inheritdoc":0,"modifier":["public"],"return":""},"getStrength":{"params":{"$coll":"Collator"},"docComment":"Get current collation strength","signature":"collator_get_strength(Collator $coll )","inheritdoc":0,"modifier":["public"],"return":""},"setAttribute":{"params":{"$attr":"","$val":"","$coll":"Collator"},"docComment":"Set collation attribute","signature":"collator_set_attribute(Collator $coll ,int $attr ,int $val )","inheritdoc":0,"modifier":["public"],"return":""},"setStrength":{"params":{"$strength":"","$coll":"Collator"},"docComment":"Set collation strength","signature":"collator_set_strength(Collator $coll ,int $strength )","inheritdoc":0,"modifier":["public"],"return":""},"sortWithSortKeys":{"params":{"&$arr":"","$coll":"Collator"},"docComment":"Sort array using specified collator and sort keys","signature":"collator_sort_with_sort_keys(Collator $coll ,array &$arr )","inheritdoc":0,"modifier":["public"],"return":""},"sort":{"params":{"&$arr":"","$sort_flag":"","$coll":"Collator"},"docComment":"Sort array using specified collator","signature":"collator_sort(Collator $coll ,array &$arr ,int $sort_flag )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"NumberFormatter":{"classname":"NumberFormatter","docComment":"","methods":{"modifier":{"public":["create","formatCurrency","format","getAttribute","getErrorCode","getErrorMessage","getLocale","getPattern","getSymbol","getTextAttribute","parseCurrency","parse","setAttribute","setPattern","setSymbol","setTextAttribute"],"private":[],"protected":[],"final":[],"static":["create"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","create":{"params":{"$locale":"","$style":"","$pattern":""},"docComment":"Create a number formatter","signature":"numfmt_create(string $locale ,int $style ,string $pattern )","inheritdoc":0,"modifier":["public","static"],"return":"NumberFormatter"},"formatCurrency":{"params":{"$value":"","$currency":"","$fmt":"NumberFormatter"},"docComment":"Format a currency value","signature":"numfmt_format_currency(NumberFormatter $fmt ,float $value ,string $currency )","inheritdoc":0,"modifier":["public"],"return":""},"format":{"params":{"$value":"","$type":"","$fmt":"NumberFormatter"},"docComment":"Format a number","signature":"numfmt_format(NumberFormatter $fmt ,number $value ,int $type )","inheritdoc":0,"modifier":["public"],"return":""},"getAttribute":{"params":{"$attr":"","$fmt":"NumberFormatter"},"docComment":"Get an attribute","signature":"numfmt_get_attribute(NumberFormatter $fmt ,int $attr )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorCode":{"params":{"$fmt":"NumberFormatter"},"docComment":"Get formatter's last error code.","signature":"numfmt_get_error_code(NumberFormatter $fmt )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorMessage":{"params":{"$fmt":"NumberFormatter"},"docComment":"Get formatter's last error message.","signature":"numfmt_get_error_message(NumberFormatter $fmt )","inheritdoc":0,"modifier":["public"],"return":""},"getLocale":{"params":{"$type":"","$fmt":"NumberFormatter"},"docComment":"Get formatter locale","signature":"numfmt_get_locale(NumberFormatter $fmt ,int $type )","inheritdoc":0,"modifier":["public"],"return":""},"getPattern":{"params":{"$fmt":"NumberFormatter"},"docComment":"Get formatter pattern","signature":"numfmt_get_pattern(NumberFormatter $fmt )","inheritdoc":0,"modifier":["public"],"return":""},"getSymbol":{"params":{"$attr":"","$fmt":"NumberFormatter"},"docComment":"Get a symbol value","signature":"numfmt_get_symbol(NumberFormatter $fmt ,int $attr )","inheritdoc":0,"modifier":["public"],"return":""},"getTextAttribute":{"params":{"$attr":"","$fmt":"NumberFormatter"},"docComment":"Get a text attribute","signature":"numfmt_get_text_attribute(NumberFormatter $fmt ,int $attr )","inheritdoc":0,"modifier":["public"],"return":""},"parseCurrency":{"params":{"$value":"","&$currency":"","&$position":"","$fmt":"NumberFormatter"},"docComment":"Parse a currency number","signature":"numfmt_parse_currency(NumberFormatter $fmt ,string $value ,string &$currency ,int &$position )","inheritdoc":0,"modifier":["public"],"return":""},"parse":{"params":{"$value":"","$type":"","&$position":"","$fmt":"NumberFormatter"},"docComment":"Parse a number","signature":"numfmt_parse(NumberFormatter $fmt ,string $value ,int $type ,int &$position )","inheritdoc":0,"modifier":["public"],"return":""},"setAttribute":{"params":{"$attr":"","$value":"","$fmt":"NumberFormatter"},"docComment":"Set an attribute","signature":"numfmt_set_attribute(NumberFormatter $fmt ,int $attr ,int $value )","inheritdoc":0,"modifier":["public"],"return":""},"setPattern":{"params":{"$pattern":"","$fmt":"NumberFormatter"},"docComment":"Set formatter pattern","signature":"numfmt_set_pattern(NumberFormatter $fmt ,string $pattern )","inheritdoc":0,"modifier":["public"],"return":""},"setSymbol":{"params":{"$attr":"","$value":"","$fmt":"NumberFormatter"},"docComment":"Set a symbol value","signature":"numfmt_set_symbol(NumberFormatter $fmt ,int $attr ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"setTextAttribute":{"params":{"$attr":"","$value":"","$fmt":"NumberFormatter"},"docComment":"Set a text attribute","signature":"numfmt_set_text_attribute(NumberFormatter $fmt ,int $attr ,string $value )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Locale":{"classname":"Locale","docComment":"","methods":{"modifier":{"public":["acceptFromHttp","canonicalize","composeLocale","filterMatches","getAllVariants","getDefault","getDisplayLanguage","getDisplayName","getDisplayRegion","getDisplayScript","getDisplayVariant","getKeywords","getPrimaryLanguage","getRegion","getScript","lookup","parseLocale","setDefault"],"private":[],"protected":[],"final":[],"static":["acceptFromHttp","canonicalize","composeLocale","filterMatches","getAllVariants","getDefault","getDisplayLanguage","getDisplayName","getDisplayRegion","getDisplayScript","getDisplayVariant","getKeywords","getPrimaryLanguage","getRegion","getScript","lookup","parseLocale","setDefault"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","acceptFromHttp":{"params":{"$header":""},"docComment":"Tries to find out best available locale based on HTTP \"Accept-Language\" header","signature":"locale_accept_from_http(string $header )","inheritdoc":0,"modifier":["public","static"],"return":""},"canonicalize":{"params":{"$locale":""},"docComment":"Canonicalize the locale string","signature":"static Locale::canonicalize(string $locale )","inheritdoc":0,"modifier":["public","static"],"return":""},"composeLocale":{"params":{"$subtags":""},"docComment":"Returns a correctly ordered and delimited locale ID","signature":"locale_compose(array $subtags )","inheritdoc":0,"modifier":["public","static"],"return":""},"filterMatches":{"params":{"$langtag":"","$locale":"","$canonicalize":""},"docComment":"Checks if a language tag filter matches with locale","signature":"locale_filter_matches(string $langtag ,string $locale ,[bool $canonicalize] )","inheritdoc":0,"modifier":["public","static"],"return":""},"getAllVariants":{"params":{"$locale":""},"docComment":"Gets the variants for the input locale","signature":"locale_get_all_variants(string $locale )","inheritdoc":0,"modifier":["public","static"],"return":""},"getDefault":{"params":[],"docComment":"Gets the default locale value from the INTL global 'default_locale'","signature":"locale_get_default( )","inheritdoc":0,"modifier":["public","static"],"return":""},"getDisplayLanguage":{"params":{"$locale":"","$in_locale":""},"docComment":"Returns an appropriately localized display name for language of the inputlocale","signature":"locale_get_display_language(string $locale ,string $in_locale )","inheritdoc":0,"modifier":["public","static"],"return":""},"getDisplayName":{"params":{"$locale":"","$in_locale":""},"docComment":"Returns an appropriately localized display name for the input locale","signature":"locale_get_display_name(string $locale ,string $in_locale )","inheritdoc":0,"modifier":["public","static"],"return":""},"getDisplayRegion":{"params":{"$locale":"","$in_locale":""},"docComment":"Returns an appropriately localized display name for region of the input locale","signature":"locale_get_display_region(string $locale ,string $in_locale )","inheritdoc":0,"modifier":["public","static"],"return":""},"getDisplayScript":{"params":{"$locale":"","$in_locale":""},"docComment":"Returns an appropriately localized display name for script of the input locale","signature":"locale_get_display_script(string $locale ,string $in_locale )","inheritdoc":0,"modifier":["public","static"],"return":""},"getDisplayVariant":{"params":{"$locale":"","$in_locale":""},"docComment":"Returns an appropriately localized display name for variants of the input locale","signature":"locale_get_display_variant(string $locale ,string $in_locale )","inheritdoc":0,"modifier":["public","static"],"return":""},"getKeywords":{"params":{"$locale":""},"docComment":"Gets the keywords for the input locale","signature":"locale_get_keywords(string $locale )","inheritdoc":0,"modifier":["public","static"],"return":""},"getPrimaryLanguage":{"params":{"$locale":""},"docComment":"Gets the primary language for the input locale","signature":"locale_get_primary_language(string $locale )","inheritdoc":0,"modifier":["public","static"],"return":""},"getRegion":{"params":{"$locale":""},"docComment":"Gets the region for the input locale","signature":"locale_get_region(string $locale )","inheritdoc":0,"modifier":["public","static"],"return":""},"getScript":{"params":{"$locale":""},"docComment":"Gets the script for the input locale","signature":"locale_get_script(string $locale )","inheritdoc":0,"modifier":["public","static"],"return":""},"lookup":{"params":{"$langtag":"","$locale":"","$canonicalize":"","$default":""},"docComment":"Searches the language tag list for the best match to the language","signature":"locale_lookup(array $langtag ,string $locale ,[bool $canonicalize] ,string $default )","inheritdoc":0,"modifier":["public","static"],"return":""},"parseLocale":{"params":{"$locale":""},"docComment":"Returns a key-value array of locale ID subtag elements.","signature":"locale_parse(string $locale )","inheritdoc":0,"modifier":["public","static"],"return":""},"setDefault":{"params":{"$locale":""},"docComment":"sets the default runtime locale","signature":"locale_set_default(string $locale )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Normalizer":{"classname":"Normalizer","docComment":"","methods":{"modifier":{"public":["isNormalized","normalize"],"private":[],"protected":[],"final":[],"static":["isNormalized","normalize"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","isNormalized":{"params":{"$input":"","$form":""},"docComment":"\n   Checks if the provided string is already in the specified normalization\n   form.\n  ","signature":"normalizer_is_normalized(string $input ,[string $form] )","inheritdoc":0,"modifier":["public","static"],"return":""},"normalize":{"params":{"$input":"","$form":""},"docComment":"\n   Normalizes the input provided and returns the normalized string\n  ","signature":"normalizer_normalize(string $input ,[string $form] )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MessageFormatter":{"classname":"MessageFormatter","docComment":"","methods":{"modifier":{"public":["create","formatMessage","format","getErrorCode","getErrorMessage","getLocale","getPattern","parseMessage","parse","setPattern"],"private":[],"protected":[],"final":[],"static":["create","formatMessage","parseMessage"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","create":{"params":{"$locale":"","$pattern":""},"docComment":"Constructs a new Message Formatter","signature":"msgfmt_create(string $locale ,string $pattern )","inheritdoc":0,"modifier":["public","static"],"return":"MessageFormatter"},"formatMessage":{"params":{"$locale":"","$pattern":"","$args":""},"docComment":"Quick format message","signature":"msgfmt_format_message(string $locale ,string $pattern ,array $args )","inheritdoc":0,"modifier":["public","static"],"return":""},"format":{"params":{"$args":"","$fmt":"MessageFormatter"},"docComment":"Format the message","signature":"msgfmt_format(MessageFormatter $fmt ,array $args )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorCode":{"params":{"$fmt":"MessageFormatter"},"docComment":"Get the error code from last operation","signature":"msgfmt_get_error_code(MessageFormatter $fmt )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorMessage":{"params":{"$fmt":"MessageFormatter"},"docComment":"Get the error text from the last operation","signature":"msgfmt_get_error_message(MessageFormatter $fmt )","inheritdoc":0,"modifier":["public"],"return":""},"getLocale":{"params":{"$formatter":"NumberFormatter"},"docComment":"Get the locale for which the formatter was created.","signature":"msgfmt_get_locale(NumberFormatter $formatter )","inheritdoc":0,"modifier":["public"],"return":""},"getPattern":{"params":{"$fmt":"MessageFormatter"},"docComment":"Get the pattern used by the formatter","signature":"msgfmt_get_pattern(MessageFormatter $fmt )","inheritdoc":0,"modifier":["public"],"return":""},"parseMessage":{"params":{"$locale":"","$pattern":"","$source":"","$value":""},"docComment":"Quick parse input string","signature":"msgfmt_parse_message(string $locale ,string $pattern ,string $value )","inheritdoc":0,"modifier":["public","static"],"return":""},"parse":{"params":{"$value":"","$fmt":"MessageFormatter"},"docComment":"Parse input string according to pattern","signature":"msgfmt_parse(MessageFormatter $fmt ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"setPattern":{"params":{"$pattern":"","$fmt":"MessageFormatter"},"docComment":"Set the pattern used by the formatter","signature":"msgfmt_set_pattern(MessageFormatter $fmt ,string $pattern )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"IntlCalendar":{"classname":"IntlCalendar","docComment":"","methods":{"modifier":{"public":["add","after","before","clear","createInstance","equals","fieldDifference","fromDateTime","get","getActualMaximum","getActualMinimum","getAvailableLocales","getDayOfWeekType","getErrorCode","getErrorMessage","getFirstDayOfWeek","getGreatestMinimum","getKeywordValuesForLocale","getLeastMaximum","getLocale","getMaximum","getMinimalDaysInFirstWeek","getMinimum","getNow","getRepeatedWallTimeOption","getSkippedWallTimeOption","getTime","getTimeZone","getType","getWeekendTransition","inDaylightTime","isEquivalentTo","isLenient","isSet","isWeekend","roll","set","set","set","set","setFirstDayOfWeek","setLenient","setRepeatedWallTimeOption","setSkippedWallTimeOption","setTime","setTimeZone","toDateTime"],"private":["__construct"],"protected":[],"final":[],"static":["createInstance","fromDateTime","getAvailableLocales","getKeywordValuesForLocale","getNow"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$field":"","$amount":""},"docComment":"Add a (signed) amount of time to a field","signature":"public IntlCalendar::add(int $field ,int $amount )","inheritdoc":0,"modifier":["public"],"return":""},"after":{"params":{"$calendar":"IntlCalendar"},"docComment":"Whether this object\u02bcs time is after that of the passed object","signature":"public IntlCalendar::after(IntlCalendar $calendar )","inheritdoc":0,"modifier":["public"],"return":""},"before":{"params":{"$calendar":"IntlCalendar"},"docComment":"Whether this object\u02bcs time is before that of the passed object","signature":"public IntlCalendar::before(IntlCalendar $calendar )","inheritdoc":0,"modifier":["public"],"return":""},"clear":{"params":{"$field":""},"docComment":"Clear a field or all fields","signature":"public IntlCalendar::clear([int $field] )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"Private constructor for disallowing instantiation","signature":"private IntlCalendar::__construct( )","inheritdoc":0,"modifier":["private"],"return":""},"createInstance":{"params":{"$timeZone":"","$locale":""},"docComment":"Create a new IntlCalendar","signature":"static IntlCalendar::createInstance([mixed $timeZone] ,[string $locale] )","inheritdoc":0,"modifier":["public","static"],"return":"IntlCalendar"},"equals":{"params":{"$calendar":"IntlCalendar"},"docComment":"Compare time of two IntlCalendar objects for equality","signature":"public IntlCalendar::equals(IntlCalendar $calendar )","inheritdoc":0,"modifier":["public"],"return":""},"fieldDifference":{"params":{"$when":"","$field":""},"docComment":"Calculate difference between given time and this object\u02bcs time","signature":"public IntlCalendar::fieldDifference(float $when ,int $field )","inheritdoc":0,"modifier":["public"],"return":""},"fromDateTime":{"params":{"$dateTime":""},"docComment":"Create an IntlCalendar from a DateTime object or string","signature":"static IntlCalendar::fromDateTime(mixed $dateTime )","inheritdoc":0,"modifier":["public","static"],"return":"IntlCalendar"},"get":{"params":{"$field":""},"docComment":"Get the value for a field","signature":"public IntlCalendar::get(int $field )","inheritdoc":0,"modifier":["public"],"return":""},"getActualMaximum":{"params":{"$field":""},"docComment":"The maximum value for a field, considering the object\u02bcs current time","signature":"public IntlCalendar::getActualMaximum(int $field )","inheritdoc":0,"modifier":["public"],"return":""},"getActualMinimum":{"params":{"$field":""},"docComment":"The minimum value for a field, considering the object\u02bcs current time","signature":"public IntlCalendar::getActualMinimum(int $field )","inheritdoc":0,"modifier":["public"],"return":""},"getAvailableLocales":{"params":[],"docComment":"Get array of locales for which there is data","signature":"static IntlCalendar::getAvailableLocales( )","inheritdoc":0,"modifier":["public","static"],"return":""},"getDayOfWeekType":{"params":{"$dayOfWeek":""},"docComment":"Tell whether a day is a weekday, weekend or a day that has a transition between the two","signature":"public IntlCalendar::getDayOfWeekType(int $dayOfWeek )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorCode":{"params":{"$calendar":"IntlCalendar"},"docComment":"Get last error code on the object","signature":"intlcal_get_error_code(IntlCalendar $calendar )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorMessage":{"params":{"$calendar":"IntlCalendar"},"docComment":"Get last error message on the object","signature":"intlcal_get_error_message(IntlCalendar $calendar )","inheritdoc":0,"modifier":["public"],"return":""},"getFirstDayOfWeek":{"params":[],"docComment":"Get the first day of the week for the calendar\u02bcs locale","signature":"public IntlCalendar::getFirstDayOfWeek( )","inheritdoc":0,"modifier":["public"],"return":""},"getGreatestMinimum":{"params":{"$field":""},"docComment":"Get the largest local minimum value for a field","signature":"public IntlCalendar::getGreatestMinimum(int $field )","inheritdoc":0,"modifier":["public"],"return":""},"getKeywordValuesForLocale":{"params":{"$key":"","$locale":"","$commonlyUsed":""},"docComment":"Get set of locale keyword values","signature":"static IntlCalendar::getKeywordValuesForLocale(string $key ,string $locale ,boolean $commonlyUsed )","inheritdoc":0,"modifier":["public","static"],"return":"Iterator"},"getLeastMaximum":{"params":{"$field":""},"docComment":"Get the smallest local maximum for a field","signature":"public IntlCalendar::getLeastMaximum(int $field )","inheritdoc":0,"modifier":["public"],"return":""},"getLocale":{"params":{"$localeType":""},"docComment":"Get the locale associated with the object","signature":"public IntlCalendar::getLocale(int $localeType )","inheritdoc":0,"modifier":["public"],"return":""},"getMaximum":{"params":{"$field":""},"docComment":"Get the global maximum value for a field","signature":"public IntlCalendar::getMaximum(int $field )","inheritdoc":0,"modifier":["public"],"return":""},"getMinimalDaysInFirstWeek":{"params":[],"docComment":"Get minimal number of days the first week in a year or month can have","signature":"public IntlCalendar::getMinimalDaysInFirstWeek( )","inheritdoc":0,"modifier":["public"],"return":""},"getMinimum":{"params":{"$field":""},"docComment":"Get the global minimum value for a field","signature":"public IntlCalendar::getMinimum(int $field )","inheritdoc":0,"modifier":["public"],"return":""},"getNow":{"params":[],"docComment":"Get number representing the current time","signature":"static IntlCalendar::getNow( )","inheritdoc":0,"modifier":["public","static"],"return":""},"getRepeatedWallTimeOption":{"params":[],"docComment":"Get behavior for handling repeating wall time","signature":"public IntlCalendar::getRepeatedWallTimeOption( )","inheritdoc":0,"modifier":["public"],"return":""},"getSkippedWallTimeOption":{"params":[],"docComment":"Get behavior for handling skipped wall time","signature":"public IntlCalendar::getSkippedWallTimeOption( )","inheritdoc":0,"modifier":["public"],"return":""},"getTime":{"params":[],"docComment":"Get time currently represented by the object","signature":"public IntlCalendar::getTime( )","inheritdoc":0,"modifier":["public"],"return":""},"getTimeZone":{"params":[],"docComment":"Get the object\u02bcs timezone","signature":"public IntlCalendar::getTimeZone( )","inheritdoc":0,"modifier":["public"],"return":"IntlTimeZone"},"getType":{"params":[],"docComment":"Get the calendar type","signature":"public IntlCalendar::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"getWeekendTransition":{"params":{"$dayOfWeek":""},"docComment":"Get time of the day at which weekend begins or ends","signature":"public IntlCalendar::getWeekendTransition(string $dayOfWeek )","inheritdoc":0,"modifier":["public"],"return":""},"inDaylightTime":{"params":[],"docComment":"Whether the object\u02bcs time is in Daylight Savings Time","signature":"public IntlCalendar::inDaylightTime( )","inheritdoc":0,"modifier":["public"],"return":""},"isEquivalentTo":{"params":{"$calendar":"IntlCalendar"},"docComment":"Whether another calendar is equal but for a different time","signature":"public IntlCalendar::isEquivalentTo(IntlCalendar $calendar )","inheritdoc":0,"modifier":["public"],"return":""},"isLenient":{"params":[],"docComment":"Whether date\/time interpretation is in lenient mode","signature":"public IntlCalendar::isLenient( )","inheritdoc":0,"modifier":["public"],"return":""},"isSet":{"params":{"$field":""},"docComment":"Whether a field is set","signature":"public IntlCalendar::isSet(int $field )","inheritdoc":0,"modifier":["public"],"return":""},"isWeekend":{"params":{"$date":""},"docComment":"Whether a certain date\/time is in the weekend","signature":"public IntlCalendar::isWeekend([float $date] )","inheritdoc":0,"modifier":["public"],"return":""},"roll":{"params":{"$field":"","$amountOrUpOrDown":""},"docComment":"Add value to field without carrying into more significant fields","signature":"public IntlCalendar::roll(int $field ,mixed $amountOrUpOrDown )","inheritdoc":0,"modifier":["public"],"return":""},"set":{"params":{"$field":"","$value":"","$year":"","$month":"","$dayOfMonth":"","$hour":"","$minute":"","$second":""},"docComment":"Set a time field or several common fields at once","signature":"public IntlCalendar::set(int $year ,int $month ,[int $dayOfMonth] ,[int $hour] ,[int $minute] ,[int $second] )","inheritdoc":0,"modifier":["public","public"],"return":""},"setFirstDayOfWeek":{"params":{"$dayOfWeek":""},"docComment":"Set the day on which the week is deemed to start","signature":"public IntlCalendar::setFirstDayOfWeek(int $dayOfWeek )","inheritdoc":0,"modifier":["public"],"return":""},"setLenient":{"params":{"$isLenient":""},"docComment":"Set whether date\/time interpretation is to be lenient","signature":"public IntlCalendar::setLenient(string $isLenient )","inheritdoc":0,"modifier":["public"],"return":""},"setRepeatedWallTimeOption":{"params":{"$wallTimeOption":""},"docComment":"Set behavior for handling repeating wall times at negative timezone offset transitions","signature":"public IntlCalendar::setRepeatedWallTimeOption(int $wallTimeOption )","inheritdoc":0,"modifier":["public"],"return":""},"setSkippedWallTimeOption":{"params":{"$wallTimeOption":""},"docComment":"Set behavior for handling skipped wall times at positive timezone offset transitions","signature":"public IntlCalendar::setSkippedWallTimeOption(int $wallTimeOption )","inheritdoc":0,"modifier":["public"],"return":""},"setTime":{"params":{"$date":""},"docComment":"Set the calendar time in milliseconds since the epoch","signature":"public IntlCalendar::setTime(float $date )","inheritdoc":0,"modifier":["public"],"return":""},"setTimeZone":{"params":{"$timeZone":""},"docComment":"Set the timezone used by this calendar","signature":"public IntlCalendar::setTimeZone(mixed $timeZone )","inheritdoc":0,"modifier":["public"],"return":""},"toDateTime":{"params":[],"docComment":"Convert an IntlCalendar into a DateTime object","signature":"public IntlCalendar::toDateTime( )","inheritdoc":0,"modifier":["public"],"return":"DateTime"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["FIELD_ERA","FIELD_YEAR","FIELD_MONTH","FIELD_WEEK_OF_YEAR","FIELD_WEEK_OF_MONTH","FIELD_DATE","FIELD_DAY_OF_YEAR","FIELD_DAY_OF_WEEK","FIELD_DAY_OF_WEEK_IN_MONTH","FIELD_AM_PM","FIELD_HOUR","FIELD_HOUR_OF_DAY","FIELD_MINUTE","FIELD_SECOND","FIELD_MILLISECOND","FIELD_ZONE_OFFSET","FIELD_DST_OFFSET","FIELD_YEAR_WOY","FIELD_DOW_LOCAL","FIELD_EXTENDED_YEAR","FIELD_JULIAN_DAY","FIELD_MILLISECONDS_IN_DAY","FIELD_IS_LEAP_MONTH","FIELD_FIELD_COUNT ","FIELD_DAY_OF_MONTH","DOW_SUNDAY","DOW_MONDAY","DOW_TUESDAY","DOW_WEDNESDAY","DOW_THURSDAY","DOW_FRIDAY","DOW_SATURDAY","DOW_TYPE_WEEKDAY","DOW_TYPE_WEEKEND","DOW_TYPE_WEEKEND_OFFSET","DOW_TYPE_WEEKEND_CEASE","WALLTIME_FIRST","WALLTIME_LAST","WALLTIME_NEXT_VALID"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","FIELD_ERA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_YEAR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_MONTH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_WEEK_OF_YEAR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_WEEK_OF_MONTH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_DATE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_DAY_OF_YEAR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_DAY_OF_WEEK":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_DAY_OF_WEEK_IN_MONTH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_AM_PM":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_HOUR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_HOUR_OF_DAY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_MINUTE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_SECOND":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_MILLISECOND":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_ZONE_OFFSET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_DST_OFFSET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_YEAR_WOY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_DOW_LOCAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_EXTENDED_YEAR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_JULIAN_DAY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_MILLISECONDS_IN_DAY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_IS_LEAP_MONTH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_FIELD_COUNT ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FIELD_DAY_OF_MONTH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DOW_SUNDAY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DOW_MONDAY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DOW_TUESDAY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DOW_WEDNESDAY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DOW_THURSDAY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DOW_FRIDAY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DOW_SATURDAY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DOW_TYPE_WEEKDAY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DOW_TYPE_WEEKEND":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DOW_TYPE_WEEKEND_OFFSET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DOW_TYPE_WEEKEND_CEASE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WALLTIME_FIRST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WALLTIME_LAST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WALLTIME_NEXT_VALID":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"IntlTimeZone":{"classname":"IntlTimeZone","docComment":"","methods":{"modifier":{"public":["countEquivalentIDs","createDefault","createEnumeration","createTimeZone","fromDateTimeZone","getCanonicalID","getDisplayName","getDSTSavings","getEquivalentID","getErrorCode","getErrorMessage","getGMT","getID","getOffset","getRawOffset","getTZDataVersion","hasSameRules","toDateTimeZone","useDaylightTime"],"private":[],"protected":[],"final":[],"static":["countEquivalentIDs","createDefault","createEnumeration","createTimeZone","fromDateTimeZone","getCanonicalID","getEquivalentID","getGMT","getTZDataVersion"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","countEquivalentIDs":{"params":{"$zoneId":""},"docComment":"Get the number of IDs in the equivalency group that includes the given ID","signature":"static IntlTimeZone::countEquivalentIDs(string $zoneId )","inheritdoc":0,"modifier":["public","static"],"return":""},"createDefault":{"params":[],"docComment":"Create a new copy of the default timezone for this host","signature":"static IntlTimeZone::createDefault( )","inheritdoc":0,"modifier":["public","static"],"return":"IntlTimeZone"},"createEnumeration":{"params":{"$countryOrRawOffset":""},"docComment":"Get an enumeration over time zone IDs associated with the\n  given country or offset","signature":"static IntlTimeZone::createEnumeration(mixed $countryOrRawOffset )","inheritdoc":0,"modifier":["public","static"],"return":"IntlIterator"},"createTimeZone":{"params":{"$zoneId":""},"docComment":"Create a timezone object for the given ID","signature":"static IntlTimeZone::createTimeZone(string $zoneId )","inheritdoc":0,"modifier":["public","static"],"return":"IntlTimeZone"},"fromDateTimeZone":{"params":{"$zoneId":"DateTimeZone"},"docComment":"Create a timezone object from ","signature":"static IntlTimeZone::fromDateTimeZone(DateTimeZone $zoneId )","inheritdoc":0,"modifier":["public","static"],"return":"IntlTimeZone"},"getCanonicalID":{"params":{"$zoneId":"","&$isSystemID":""},"docComment":"Get the canonical system timezone ID or the normalized custom time zone ID for the given time zone ID","signature":"static IntlTimeZone::getCanonicalID(string $zoneId ,bool &$isSystemID )","inheritdoc":0,"modifier":["public","static"],"return":""},"getDisplayName":{"params":{"$isDaylight":"","$style":"","$locale":""},"docComment":"Get a name of this time zone suitable for presentation to the user","signature":"public IntlTimeZone::getDisplayName(bool $isDaylight ,integer $style ,string $locale )","inheritdoc":0,"modifier":["public"],"return":""},"getDSTSavings":{"params":[],"docComment":"Get the amount of time to be added to local standard time to get local wall clock time","signature":"public IntlTimeZone::getDSTSavings( )","inheritdoc":0,"modifier":["public"],"return":""},"getEquivalentID":{"params":{"$zoneId":"","$index":""},"docComment":"Get an ID in the equivalency group that includes the given ID","signature":"static IntlTimeZone::getEquivalentID(string $zoneId ,integer $index )","inheritdoc":0,"modifier":["public","static"],"return":""},"getErrorCode":{"params":[],"docComment":"Get last error code on the object","signature":"intltz_get_error_code( )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorMessage":{"params":[],"docComment":"Get last error message on the object","signature":"intltz_get_error_message( )","inheritdoc":0,"modifier":["public"],"return":""},"getGMT":{"params":[],"docComment":"Create GMT (UTC) timezone","signature":"static IntlTimeZone::getGMT( )","inheritdoc":0,"modifier":["public","static"],"return":"IntlTimeZone"},"getID":{"params":[],"docComment":"Get timezone ID","signature":"public IntlTimeZone::getID( )","inheritdoc":0,"modifier":["public"],"return":""},"getOffset":{"params":{"$date":"","$local":"","&$rawOffset":"","&$dstOffset":""},"docComment":"Get the time zone raw and GMT offset for the given moment in time","signature":"public IntlTimeZone::getOffset(float $date ,bool $local ,integer &$rawOffset ,integer &$dstOffset )","inheritdoc":0,"modifier":["public"],"return":""},"getRawOffset":{"params":[],"docComment":"Get the raw GMT offset (before taking daylight savings time into account","signature":"public IntlTimeZone::getRawOffset( )","inheritdoc":0,"modifier":["public"],"return":""},"getTZDataVersion":{"params":[],"docComment":"Get the timezone data version currently used by ICU","signature":"static IntlTimeZone::getTZDataVersion( )","inheritdoc":0,"modifier":["public","static"],"return":""},"hasSameRules":{"params":{"$otherTimeZone":"IntlTimeZone"},"docComment":"Check if this zone has the same rules and offset as another zone","signature":"public IntlTimeZone::hasSameRules(IntlTimeZone $otherTimeZone )","inheritdoc":0,"modifier":["public"],"return":""},"toDateTimeZone":{"params":[],"docComment":"Convert to  object","signature":"public IntlTimeZone::toDateTimeZone( )","inheritdoc":0,"modifier":["public"],"return":"DateTimeZone"},"useDaylightTime":{"params":[],"docComment":"Check if this time zone uses daylight savings time","signature":"public IntlTimeZone::useDaylightTime( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["DISPLAY_SHORT","DISPLAY_LONG"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","DISPLAY_SHORT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DISPLAY_LONG":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"IntlDateFormatter":{"classname":"IntlDateFormatter","docComment":"","methods":{"modifier":{"public":["create","format","formatObject","formatObject","getCalendar","getDateType","getErrorCode","getErrorMessage","getLocale","getPattern","getTimeType","getTimeZoneId","getCalendarObject","getTimeZone","isLenient","localtime","parse","setCalendar","setLenient","setPattern","setTimeZoneId","setTimeZone"],"private":[],"protected":[],"final":[],"static":["create","formatObject","formatObject"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","create":{"params":{"$locale":"","$datetype":"","$timetype":"","$timezone":"","$calendar":"","$pattern":""},"docComment":"Create a date formatter","signature":"datefmt_create(string $locale ,int $datetype ,int $timetype ,[mixed $timezone] ,[mixed $calendar] ,[string $pattern] )","inheritdoc":0,"modifier":["public","static"],"return":"IntlDateFormatter"},"format":{"params":{"$value":"","$fmt":"IntlDateFormatter"},"docComment":"Format the date\/time value as a string","signature":"datefmt_format(IntlDateFormatter $fmt ,mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"formatObject":{"params":{"$object":"","$format":"","$locale":""},"docComment":"Formats an object","signature":"static datefmt_format_object(object $object ,[mixed $format] ,[string $locale] )","inheritdoc":0,"modifier":["public","static","public","static"],"return":""},"getCalendar":{"params":{"$fmt":"IntlDateFormatter"},"docComment":"Get the calendar type used for the IntlDateFormatter","signature":"datefmt_get_calendar(IntlDateFormatter $fmt )","inheritdoc":0,"modifier":[],"return":""},"getDateType":{"params":{"$fmt":"IntlDateFormatter"},"docComment":"Get the datetype used for the IntlDateFormatter","signature":"datefmt_get_datetype(IntlDateFormatter $fmt )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorCode":{"params":{"$fmt":"IntlDateFormatter"},"docComment":"Get the error code from last operation","signature":"datefmt_get_error_code(IntlDateFormatter $fmt )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorMessage":{"params":{"$fmt":"IntlDateFormatter"},"docComment":"Get the error text from the last operation.","signature":"datefmt_get_error_message(IntlDateFormatter $fmt )","inheritdoc":0,"modifier":["public"],"return":""},"getLocale":{"params":{"$which":"","$fmt":"IntlDateFormatter"},"docComment":"Get the locale used by formatter","signature":"datefmt_get_locale(IntlDateFormatter $fmt ,int $which )","inheritdoc":0,"modifier":["public"],"return":""},"getPattern":{"params":{"$fmt":"IntlDateFormatter"},"docComment":"Get the pattern used for the IntlDateFormatter","signature":"datefmt_get_pattern(IntlDateFormatter $fmt )","inheritdoc":0,"modifier":["public"],"return":""},"getTimeType":{"params":{"$fmt":"IntlDateFormatter"},"docComment":"Get the timetype used for the IntlDateFormatter","signature":"datefmt_get_timetype(IntlDateFormatter $fmt )","inheritdoc":0,"modifier":["public"],"return":""},"getTimeZoneId":{"params":{"$fmt":"IntlDateFormatter"},"docComment":"Get the timezone-id used for the IntlDateFormatter","signature":"datefmt_get_timezone_id(IntlDateFormatter $fmt )","inheritdoc":0,"modifier":["public"],"return":""},"getCalendarObject":{"params":[],"docComment":"Get copy of formatter\u02bcs calendar object","signature":"datefmt_get_calendar_object( )","inheritdoc":0,"modifier":["public"],"return":"IntlCalendar"},"getTimeZone":{"params":[],"docComment":"Get formatter\u02bcs timezone","signature":"datefmt_get_timezone( )","inheritdoc":0,"modifier":["public"],"return":"IntlTimeZone"},"isLenient":{"params":{"$fmt":"IntlDateFormatter"},"docComment":"Get the lenient used for the IntlDateFormatter","signature":"datefmt_is_lenient(IntlDateFormatter $fmt )","inheritdoc":0,"modifier":["public"],"return":""},"localtime":{"params":{"$value":"","&$position":"","$fmt":"IntlDateFormatter"},"docComment":"Parse string to a field-based time value","signature":"datefmt_localtime(IntlDateFormatter $fmt ,string $value ,int &$position )","inheritdoc":0,"modifier":["public"],"return":""},"parse":{"params":{"$value":"","&$position":"","$fmt":"IntlDateFormatter"},"docComment":"Parse string to a timestamp value","signature":"datefmt_parse(IntlDateFormatter $fmt ,string $value ,int &$position )","inheritdoc":0,"modifier":["public"],"return":""},"setCalendar":{"params":{"$which":"","$fmt":"IntlDateFormatter"},"docComment":"Sets the calendar type used by the formatter","signature":"datefmt_set_calendar(IntlDateFormatter $fmt ,mixed $which )","inheritdoc":0,"modifier":[],"return":""},"setLenient":{"params":{"$lenient":"","$fmt":"IntlDateFormatter"},"docComment":"Set the leniency of the parser","signature":"datefmt_set_lenient(IntlDateFormatter $fmt ,bool $lenient )","inheritdoc":0,"modifier":["public"],"return":""},"setPattern":{"params":{"$pattern":"","$fmt":"IntlDateFormatter"},"docComment":"Set the pattern used for the IntlDateFormatter","signature":"datefmt_set_pattern(IntlDateFormatter $fmt ,string $pattern )","inheritdoc":0,"modifier":["public"],"return":""},"setTimeZoneId":{"params":{"$zone":"","$fmt":"IntlDateFormatter"},"docComment":"Sets the time zone to use","signature":"datefmt_set_timezone_id(IntlDateFormatter $fmt ,string $zone )","inheritdoc":0,"modifier":["public"],"return":""},"setTimeZone":{"params":{"$zone":""},"docComment":"Sets formatter\u02bcs timezone","signature":"datefmt_set_timezone(mixed $zone )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ResourceBundle":{"classname":"ResourceBundle","docComment":"","methods":{"modifier":{"public":["count","create","getErrorCode","getErrorMessage","get","getLocales"],"private":[],"protected":[],"final":[],"static":["create"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","count":{"params":{"$r":"ResourceBundle"},"docComment":"Get number of elements in the bundle","signature":"resourcebundle_count(ResourceBundle $r )","inheritdoc":0,"modifier":["public"],"return":""},"create":{"params":{"$locale":"","$bundlename":"","$fallback":""},"docComment":"Create a resource bundle","signature":"resourcebundle_create(string $locale ,string $bundlename ,bool $fallback )","inheritdoc":0,"modifier":["public","static"],"return":"ResourceBundle"},"getErrorCode":{"params":{"$r":"ResourceBundle"},"docComment":"Get bundle's last error code.","signature":"resourcebundle_get_error_code(ResourceBundle $r )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorMessage":{"params":{"$r":"ResourceBundle"},"docComment":"Get bundle's last error message.","signature":"resourcebundle_get_error_message(ResourceBundle $r )","inheritdoc":0,"modifier":["public"],"return":""},"get":{"params":{"$index":"","$r":"ResourceBundle"},"docComment":"Get data from the bundle","signature":"resourcebundle_get(ResourceBundle $r , $index )","inheritdoc":0,"modifier":["public"],"return":""},"getLocales":{"params":{"$bundlename":""},"docComment":"Get supported locales","signature":"resourcebundle_locales(string $bundlename )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Spoofchecker":{"classname":"Spoofchecker","docComment":"","methods":{"modifier":{"public":["areConfusable","__construct","isSuspicious","setAllowedLocales","setChecks"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","areConfusable":{"params":{"$s1":"","$s2":"","&$error":""},"docComment":"Checks if a given text contains any confusable characters","signature":"public Spoofchecker::areConfusable(string $s1 ,string $s2 ,string &$error )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"Constructor","signature":"public Spoofchecker::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"isSuspicious":{"params":{"$text":"","&$error":""},"docComment":"Checks if a given text contains any suspicious characters","signature":"public Spoofchecker::isSuspicious(string $text ,string &$error )","inheritdoc":0,"modifier":["public"],"return":""},"setAllowedLocales":{"params":{"$locale_list":""},"docComment":"Locales to use when running checks","signature":"public Spoofchecker::setAllowedLocales(string $locale_list )","inheritdoc":0,"modifier":["public"],"return":""},"setChecks":{"params":{"$checks":""},"docComment":"Set the checks to run","signature":"public Spoofchecker::setChecks(string $checks )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["SINGLE_SCRIPT_CONFUSABLE","MIXED_SCRIPT_CONFUSABLE","WHOLE_SCRIPT_CONFUSABLE","ANY_CASE","SINGLE_SCRIPT","INVISIBLE","CHAR_LIMIT"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","SINGLE_SCRIPT_CONFUSABLE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"MIXED_SCRIPT_CONFUSABLE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WHOLE_SCRIPT_CONFUSABLE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ANY_CASE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SINGLE_SCRIPT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INVISIBLE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CHAR_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Transliterator":{"classname":"Transliterator","docComment":"","methods":{"modifier":{"public":["create","createFromRules","createInverse","getErrorCode","getErrorMessage","listIDs","transliterate"],"private":[],"protected":[],"final":[],"static":["create","createFromRules","listIDs"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","create":{"params":{"$id":"","$direction":""},"docComment":"Create a transliterator","signature":"transliterator_create(string $id ,int $direction )","inheritdoc":0,"modifier":["public","static"],"return":"Transliterator"},"createFromRules":{"params":{"$rules":"","$direction":"","$id":""},"docComment":"Create transliterator from rules","signature":"transliterator_create_from_rules(string $id ,int $direction )","inheritdoc":0,"modifier":["public","static"],"return":"Transliterator"},"createInverse":{"params":[],"docComment":"Create an inverse transliterator","signature":"transliterator_create_inverse( )","inheritdoc":0,"modifier":["public"],"return":"Transliterator"},"getErrorCode":{"params":[],"docComment":"Get last error code","signature":"transliterator_get_error_code( )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorMessage":{"params":[],"docComment":"Get last error message","signature":"transliterator_get_error_message( )","inheritdoc":0,"modifier":["public"],"return":""},"listIDs":{"params":[],"docComment":"Get transliterator IDs","signature":"transliterator_list_ids( )","inheritdoc":0,"modifier":["public","static"],"return":""},"transliterate":{"params":{"$subject":"","$start":"","$end":"","$transliterator":""},"docComment":"Transliterate a string","signature":"transliterator_transliterate(mixed $transliterator ,string $subject ,int $start ,int $end )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["id"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["FORWARD","REVERSE"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","FORWARD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"REVERSE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"id":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"IntlBreakIterator":{"classname":"IntlBreakIterator","docComment":"","methods":{"modifier":{"public":["createCharacterInstance","createCodePointInstance","createLineInstance","createSentenceInstance","createTitleInstance","createWordInstance","current","first","following","getErrorCode","getErrorMessage","getLocale","getPartsIterator","getText","isBoundary","last","next","preceding","previous","setText"],"private":["__construct"],"protected":[],"final":[],"static":["createCharacterInstance","createCodePointInstance","createLineInstance","createSentenceInstance","createTitleInstance","createWordInstance"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Private constructor for disallowing instantiation","signature":"private IntlBreakIterator::__construct( )","inheritdoc":0,"modifier":["private"],"return":""},"createCharacterInstance":{"params":{"$\"locale\"":""},"docComment":"\n   Create break iterator for boundaries of combining character sequences\n  ","signature":"static IntlBreakIterator::createCharacterInstance(string $\"locale\" )","inheritdoc":0,"modifier":["public","static"],"return":""},"createCodePointInstance":{"params":[],"docComment":"Create break iterator for boundaries of code points","signature":"static IntlBreakIterator::createCodePointInstance( )","inheritdoc":0,"modifier":["public","static"],"return":""},"createLineInstance":{"params":{"$\"locale\"":""},"docComment":"\n   Create break iterator for logically possible line breaks\n  ","signature":"static IntlBreakIterator::createLineInstance(string $\"locale\" )","inheritdoc":0,"modifier":["public","static"],"return":""},"createSentenceInstance":{"params":{"$\"locale\"":""},"docComment":"Create break iterator for sentence breaks","signature":"static IntlBreakIterator::createSentenceInstance(string $\"locale\" )","inheritdoc":0,"modifier":["public","static"],"return":""},"createTitleInstance":{"params":{"$\"locale\"":""},"docComment":"Create break iterator for title-casing breaks","signature":"static IntlBreakIterator::createTitleInstance(string $\"locale\" )","inheritdoc":0,"modifier":["public","static"],"return":""},"createWordInstance":{"params":{"$\"locale\"":""},"docComment":"Create break iterator for word breaks","signature":"static IntlBreakIterator::createWordInstance(string $\"locale\" )","inheritdoc":0,"modifier":["public","static"],"return":""},"current":{"params":[],"docComment":"Get index of current position","signature":"public IntlBreakIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"first":{"params":[],"docComment":"Set position to the first character in the text","signature":"public IntlBreakIterator::first( )","inheritdoc":0,"modifier":["public"],"return":""},"following":{"params":{"$\"offset\"":""},"docComment":"\n   Advance the iterator to the first boundary following specified offset\n  ","signature":"public IntlBreakIterator::following(string $\"offset\" )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorCode":{"params":[],"docComment":"Get last error code on the object","signature":"( )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorMessage":{"params":[],"docComment":"Get last error message on the object","signature":"( )","inheritdoc":0,"modifier":["public"],"return":""},"getLocale":{"params":{"$\"locale_type\"":""},"docComment":"Get the locale associated with the object","signature":"public IntlBreakIterator::getLocale(string $\"locale_type\" )","inheritdoc":0,"modifier":["public"],"return":""},"getPartsIterator":{"params":{"$\"key_type\"":""},"docComment":"Create iterator for navigating fragments between boundaries","signature":"public IntlBreakIterator::getPartsIterator(string $\"key_type\" )","inheritdoc":0,"modifier":["public"],"return":""},"getText":{"params":[],"docComment":"Get the text being scanned","signature":"public IntlBreakIterator::getText( )","inheritdoc":0,"modifier":["public"],"return":""},"isBoundary":{"params":{"$\"offset\"":""},"docComment":"Tell whether an offset is a boundary\u02bcs offset","signature":"public IntlBreakIterator::isBoundary(string $\"offset\" )","inheritdoc":0,"modifier":["public"],"return":""},"last":{"params":[],"docComment":"Set the iterator position to index beyond the last character","signature":"public IntlBreakIterator::last( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":{"$\"offset\"":""},"docComment":"Advance the iterator the next boundary","signature":"public IntlBreakIterator::next(string $\"offset\" )","inheritdoc":0,"modifier":["public"],"return":""},"preceding":{"params":{"$\"offset\"":""},"docComment":"Set the iterator position to the first boundary before an offset","signature":"public IntlBreakIterator::preceding(string $\"offset\" )","inheritdoc":0,"modifier":["public"],"return":""},"previous":{"params":[],"docComment":"Set the iterator position to the boundary immediately before the current","signature":"public IntlBreakIterator::previous( )","inheritdoc":0,"modifier":["public"],"return":""},"setText":{"params":{"$\"text\"":""},"docComment":"Set the text being scanned","signature":"public IntlBreakIterator::setText(string $\"text\" )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["DONE","WORD_NONE","WORD_NONE_LIMIT","WORD_NUMBER","WORD_NUMBER_LIMIT","WORD_LETTER","WORD_LETTER_LIMIT","WORD_KANA","WORD_KANA_LIMIT","WORD_IDEO","WORD_IDEO_LIMIT","LINE_SOFT","LINE_SOFT_LIMIT","LINE_HARD","LINE_HARD_LIMIT","SENTENCE_TERM","SENTENCE_TERM_LIMIT","SENTENCE_SEP","SENTENCE_SEP_LIMIT"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","DONE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_NONE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_NONE_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_NUMBER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_NUMBER_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_LETTER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_LETTER_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_KANA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_KANA_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_IDEO":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_IDEO_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LINE_SOFT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LINE_SOFT_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LINE_HARD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LINE_HARD_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SENTENCE_TERM":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SENTENCE_TERM_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SENTENCE_SEP":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SENTENCE_SEP_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"IntlRuleBasedBreakIterator":{"classname":"IntlRuleBasedBreakIterator","docComment":"","methods":{"modifier":{"public":["__construct","getBinaryRules","getRules","getRuleStatus","getRuleStatusVec","createCharacterInstance","createCodePointInstance","createLineInstance","createSentenceInstance","createTitleInstance","createWordInstance","current","first","following","getErrorCode","getErrorMessage","getLocale","getPartsIterator","getText","isBoundary","last","next","preceding","previous","setText"],"private":["__construct"],"protected":[],"final":[],"static":["createCharacterInstance","createCodePointInstance","createLineInstance","createSentenceInstance","createTitleInstance","createWordInstance"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Private constructor for disallowing instantiation","signature":"private IntlBreakIterator::__construct( )","inheritdoc":0,"modifier":["private"],"return":""},"getBinaryRules":{"params":[],"docComment":"Get the binary form of compiled rules","signature":"public IntlRuleBasedBreakIterator::getBinaryRules( )","inheritdoc":0,"modifier":["public"],"return":""},"getRules":{"params":[],"docComment":"Get the rule set used to create this object","signature":"public IntlRuleBasedBreakIterator::getRules( )","inheritdoc":0,"modifier":["public"],"return":""},"getRuleStatus":{"params":[],"docComment":"Get the largest status value from the break rules that determined the current break position","signature":"public IntlRuleBasedBreakIterator::getRuleStatus( )","inheritdoc":0,"modifier":["public"],"return":""},"getRuleStatusVec":{"params":[],"docComment":"Get the status values from the break rules that determined the current break position","signature":"public IntlRuleBasedBreakIterator::getRuleStatusVec( )","inheritdoc":0,"modifier":["public"],"return":""},"createCharacterInstance":{"params":{"$\"locale\"":""},"docComment":"\n   Create break iterator for boundaries of combining character sequences\n  ","signature":"static IntlBreakIterator::createCharacterInstance(string $\"locale\" )","inheritdoc":0,"modifier":["public","static"],"return":""},"createCodePointInstance":{"params":[],"docComment":"Create break iterator for boundaries of code points","signature":"static IntlBreakIterator::createCodePointInstance( )","inheritdoc":0,"modifier":["public","static"],"return":""},"createLineInstance":{"params":{"$\"locale\"":""},"docComment":"\n   Create break iterator for logically possible line breaks\n  ","signature":"static IntlBreakIterator::createLineInstance(string $\"locale\" )","inheritdoc":0,"modifier":["public","static"],"return":""},"createSentenceInstance":{"params":{"$\"locale\"":""},"docComment":"Create break iterator for sentence breaks","signature":"static IntlBreakIterator::createSentenceInstance(string $\"locale\" )","inheritdoc":0,"modifier":["public","static"],"return":""},"createTitleInstance":{"params":{"$\"locale\"":""},"docComment":"Create break iterator for title-casing breaks","signature":"static IntlBreakIterator::createTitleInstance(string $\"locale\" )","inheritdoc":0,"modifier":["public","static"],"return":""},"createWordInstance":{"params":{"$\"locale\"":""},"docComment":"Create break iterator for word breaks","signature":"static IntlBreakIterator::createWordInstance(string $\"locale\" )","inheritdoc":0,"modifier":["public","static"],"return":""},"current":{"params":[],"docComment":"Get index of current position","signature":"public IntlBreakIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"first":{"params":[],"docComment":"Set position to the first character in the text","signature":"public IntlBreakIterator::first( )","inheritdoc":0,"modifier":["public"],"return":""},"following":{"params":{"$\"offset\"":""},"docComment":"\n   Advance the iterator to the first boundary following specified offset\n  ","signature":"public IntlBreakIterator::following(string $\"offset\" )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorCode":{"params":[],"docComment":"Get last error code on the object","signature":"( )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorMessage":{"params":[],"docComment":"Get last error message on the object","signature":"( )","inheritdoc":0,"modifier":["public"],"return":""},"getLocale":{"params":{"$\"locale_type\"":""},"docComment":"Get the locale associated with the object","signature":"public IntlBreakIterator::getLocale(string $\"locale_type\" )","inheritdoc":0,"modifier":["public"],"return":""},"getPartsIterator":{"params":{"$\"key_type\"":""},"docComment":"Create iterator for navigating fragments between boundaries","signature":"public IntlBreakIterator::getPartsIterator(string $\"key_type\" )","inheritdoc":0,"modifier":["public"],"return":""},"getText":{"params":[],"docComment":"Get the text being scanned","signature":"public IntlBreakIterator::getText( )","inheritdoc":0,"modifier":["public"],"return":""},"isBoundary":{"params":{"$\"offset\"":""},"docComment":"Tell whether an offset is a boundary\u02bcs offset","signature":"public IntlBreakIterator::isBoundary(string $\"offset\" )","inheritdoc":0,"modifier":["public"],"return":""},"last":{"params":[],"docComment":"Set the iterator position to index beyond the last character","signature":"public IntlBreakIterator::last( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":{"$\"offset\"":""},"docComment":"Advance the iterator the next boundary","signature":"public IntlBreakIterator::next(string $\"offset\" )","inheritdoc":0,"modifier":["public"],"return":""},"preceding":{"params":{"$\"offset\"":""},"docComment":"Set the iterator position to the first boundary before an offset","signature":"public IntlBreakIterator::preceding(string $\"offset\" )","inheritdoc":0,"modifier":["public"],"return":""},"previous":{"params":[],"docComment":"Set the iterator position to the boundary immediately before the current","signature":"public IntlBreakIterator::previous( )","inheritdoc":0,"modifier":["public"],"return":""},"setText":{"params":{"$\"text\"":""},"docComment":"Set the text being scanned","signature":"public IntlBreakIterator::setText(string $\"text\" )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["DONE","WORD_NONE","WORD_NONE_LIMIT","WORD_NUMBER","WORD_NUMBER_LIMIT","WORD_LETTER","WORD_LETTER_LIMIT","WORD_KANA","WORD_KANA_LIMIT","WORD_IDEO","WORD_IDEO_LIMIT","LINE_SOFT","LINE_SOFT_LIMIT","LINE_HARD","LINE_HARD_LIMIT","SENTENCE_TERM","SENTENCE_TERM_LIMIT","SENTENCE_SEP","SENTENCE_SEP_LIMIT"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","DONE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_NONE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_NONE_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_NUMBER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_NUMBER_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_LETTER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_LETTER_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_KANA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_KANA_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_IDEO":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_IDEO_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LINE_SOFT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LINE_SOFT_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LINE_HARD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LINE_HARD_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SENTENCE_TERM":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SENTENCE_TERM_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SENTENCE_SEP":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SENTENCE_SEP_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"IntlCodePointBreakIterator":{"classname":"IntlCodePointBreakIterator","docComment":"","methods":{"modifier":{"public":["getLastCodePoint","createCharacterInstance","createCodePointInstance","createLineInstance","createSentenceInstance","createTitleInstance","createWordInstance","current","first","following","getErrorCode","getErrorMessage","getLocale","getPartsIterator","getText","isBoundary","last","next","preceding","previous","setText"],"private":["__construct"],"protected":[],"final":[],"static":["createCharacterInstance","createCodePointInstance","createLineInstance","createSentenceInstance","createTitleInstance","createWordInstance"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getLastCodePoint":{"params":[],"docComment":"Get last code point passed over after advancing or receding the iterator","signature":"public IntlCodePointBreakIterator::getLastCodePoint( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"Private constructor for disallowing instantiation","signature":"private IntlBreakIterator::__construct( )","inheritdoc":0,"modifier":["private"],"return":""},"createCharacterInstance":{"params":{"$\"locale\"":""},"docComment":"\n   Create break iterator for boundaries of combining character sequences\n  ","signature":"static IntlBreakIterator::createCharacterInstance(string $\"locale\" )","inheritdoc":0,"modifier":["public","static"],"return":""},"createCodePointInstance":{"params":[],"docComment":"Create break iterator for boundaries of code points","signature":"static IntlBreakIterator::createCodePointInstance( )","inheritdoc":0,"modifier":["public","static"],"return":""},"createLineInstance":{"params":{"$\"locale\"":""},"docComment":"\n   Create break iterator for logically possible line breaks\n  ","signature":"static IntlBreakIterator::createLineInstance(string $\"locale\" )","inheritdoc":0,"modifier":["public","static"],"return":""},"createSentenceInstance":{"params":{"$\"locale\"":""},"docComment":"Create break iterator for sentence breaks","signature":"static IntlBreakIterator::createSentenceInstance(string $\"locale\" )","inheritdoc":0,"modifier":["public","static"],"return":""},"createTitleInstance":{"params":{"$\"locale\"":""},"docComment":"Create break iterator for title-casing breaks","signature":"static IntlBreakIterator::createTitleInstance(string $\"locale\" )","inheritdoc":0,"modifier":["public","static"],"return":""},"createWordInstance":{"params":{"$\"locale\"":""},"docComment":"Create break iterator for word breaks","signature":"static IntlBreakIterator::createWordInstance(string $\"locale\" )","inheritdoc":0,"modifier":["public","static"],"return":""},"current":{"params":[],"docComment":"Get index of current position","signature":"public IntlBreakIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"first":{"params":[],"docComment":"Set position to the first character in the text","signature":"public IntlBreakIterator::first( )","inheritdoc":0,"modifier":["public"],"return":""},"following":{"params":{"$\"offset\"":""},"docComment":"\n   Advance the iterator to the first boundary following specified offset\n  ","signature":"public IntlBreakIterator::following(string $\"offset\" )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorCode":{"params":[],"docComment":"Get last error code on the object","signature":"( )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorMessage":{"params":[],"docComment":"Get last error message on the object","signature":"( )","inheritdoc":0,"modifier":["public"],"return":""},"getLocale":{"params":{"$\"locale_type\"":""},"docComment":"Get the locale associated with the object","signature":"public IntlBreakIterator::getLocale(string $\"locale_type\" )","inheritdoc":0,"modifier":["public"],"return":""},"getPartsIterator":{"params":{"$\"key_type\"":""},"docComment":"Create iterator for navigating fragments between boundaries","signature":"public IntlBreakIterator::getPartsIterator(string $\"key_type\" )","inheritdoc":0,"modifier":["public"],"return":""},"getText":{"params":[],"docComment":"Get the text being scanned","signature":"public IntlBreakIterator::getText( )","inheritdoc":0,"modifier":["public"],"return":""},"isBoundary":{"params":{"$\"offset\"":""},"docComment":"Tell whether an offset is a boundary\u02bcs offset","signature":"public IntlBreakIterator::isBoundary(string $\"offset\" )","inheritdoc":0,"modifier":["public"],"return":""},"last":{"params":[],"docComment":"Set the iterator position to index beyond the last character","signature":"public IntlBreakIterator::last( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":{"$\"offset\"":""},"docComment":"Advance the iterator the next boundary","signature":"public IntlBreakIterator::next(string $\"offset\" )","inheritdoc":0,"modifier":["public"],"return":""},"preceding":{"params":{"$\"offset\"":""},"docComment":"Set the iterator position to the first boundary before an offset","signature":"public IntlBreakIterator::preceding(string $\"offset\" )","inheritdoc":0,"modifier":["public"],"return":""},"previous":{"params":[],"docComment":"Set the iterator position to the boundary immediately before the current","signature":"public IntlBreakIterator::previous( )","inheritdoc":0,"modifier":["public"],"return":""},"setText":{"params":{"$\"text\"":""},"docComment":"Set the text being scanned","signature":"public IntlBreakIterator::setText(string $\"text\" )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["DONE","WORD_NONE","WORD_NONE_LIMIT","WORD_NUMBER","WORD_NUMBER_LIMIT","WORD_LETTER","WORD_LETTER_LIMIT","WORD_KANA","WORD_KANA_LIMIT","WORD_IDEO","WORD_IDEO_LIMIT","LINE_SOFT","LINE_SOFT_LIMIT","LINE_HARD","LINE_HARD_LIMIT","SENTENCE_TERM","SENTENCE_TERM_LIMIT","SENTENCE_SEP","SENTENCE_SEP_LIMIT"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","DONE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_NONE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_NONE_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_NUMBER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_NUMBER_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_LETTER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_LETTER_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_KANA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_KANA_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_IDEO":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WORD_IDEO_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LINE_SOFT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LINE_SOFT_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LINE_HARD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LINE_HARD_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SENTENCE_TERM":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SENTENCE_TERM_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SENTENCE_SEP":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SENTENCE_SEP_LIMIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"IntlPartsIterator":{"classname":"IntlPartsIterator","docComment":"","methods":{"modifier":{"public":["getBreakIterator","current","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getBreakIterator":{"params":[],"docComment":"Get IntlBreakIterator backing this parts iterator","signature":"public IntlPartsIterator::getBreakIterator( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Get the current element","signature":"public IntlIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Get the current key","signature":"public IntlIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move forward to the next element","signature":"public IntlIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the iterator to the first element","signature":"public IntlIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check if curent position is valid","signature":"public IntlIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["KEY_SEQUENTIAL","KEY_LEFT","KEY_RIGHT"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","KEY_SEQUENTIAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"KEY_LEFT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"KEY_RIGHT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"UConverter":{"classname":"UConverter","docComment":"","methods":{"modifier":{"public":["__construct","convert","fromUCallback","getAliases","getAvailable","getDestinationEncoding","getDestinationType","getErrorCode","getErrorMessage","getSourceEncoding","getSourceType","getStandards","getSubstChars","reasonText","setDestinationEncoding","setSourceEncoding","setSubstChars","toUCallback","transcode"],"private":[],"protected":[],"final":[],"static":["getAliases","getAvailable","getStandards","reasonText","transcode"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$destination_encoding":"","$source_encoding":""},"docComment":"Create UConverter object","signature":"public UConverter::__construct(string $destination_encoding ,string $source_encoding )","inheritdoc":0,"modifier":["public"],"return":""},"convert":{"params":{"$str":"","$reverse":""},"docComment":"Convert string from one charset to another","signature":"public UConverter::convert(string $str ,bool $reverse )","inheritdoc":0,"modifier":["public"],"return":""},"fromUCallback":{"params":{"$reason":"","$source":"","$codePoint":"","&$error":""},"docComment":"Default \"from\" callback function","signature":"public UConverter::fromUCallback(integer $reason ,string $source ,string $codePoint ,integer &$error )","inheritdoc":0,"modifier":["public"],"return":""},"getAliases":{"params":{"$name":""},"docComment":"Get the aliases of the given name","signature":"static UConverter::getAliases(string $name )","inheritdoc":0,"modifier":["public","static"],"return":""},"getAvailable":{"params":[],"docComment":"Get the available canonical converter names","signature":"static UConverter::getAvailable( )","inheritdoc":0,"modifier":["public","static"],"return":""},"getDestinationEncoding":{"params":[],"docComment":"Get the destination encoding","signature":"public UConverter::getDestinationEncoding( )","inheritdoc":0,"modifier":["public"],"return":""},"getDestinationType":{"params":[],"docComment":"Get the destination converter type","signature":"public UConverter::getDestinationType( )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorCode":{"params":[],"docComment":"Get last error code on the object","signature":"public UConverter::getErrorCode( )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorMessage":{"params":[],"docComment":"Get last error message on the object","signature":"public UConverter::getErrorMessage( )","inheritdoc":0,"modifier":["public"],"return":""},"getSourceEncoding":{"params":[],"docComment":"Get the source encoding","signature":"public UConverter::getSourceEncoding( )","inheritdoc":0,"modifier":["public"],"return":""},"getSourceType":{"params":[],"docComment":"Get the source convertor type","signature":"public UConverter::getSourceType( )","inheritdoc":0,"modifier":["public"],"return":""},"getStandards":{"params":[],"docComment":"Get standards associated to converter names","signature":"static UConverter::getStandards( )","inheritdoc":0,"modifier":["public","static"],"return":""},"getSubstChars":{"params":[],"docComment":"Get substitution chars","signature":"public UConverter::getSubstChars( )","inheritdoc":0,"modifier":["public"],"return":""},"reasonText":{"params":{"$reason":""},"docComment":"Get string representation of the callback reason","signature":"static UConverter::reasonText(integer $reason )","inheritdoc":0,"modifier":["public","static"],"return":""},"setDestinationEncoding":{"params":{"$encoding":""},"docComment":"Set the destination encoding","signature":"public UConverter::setDestinationEncoding(string $encoding )","inheritdoc":0,"modifier":["public"],"return":""},"setSourceEncoding":{"params":{"$encoding":""},"docComment":"Set the source encoding","signature":"public UConverter::setSourceEncoding(string $encoding )","inheritdoc":0,"modifier":["public"],"return":""},"setSubstChars":{"params":{"$chars":""},"docComment":"Set the substitution chars","signature":"public UConverter::setSubstChars(string $chars )","inheritdoc":0,"modifier":["public"],"return":""},"toUCallback":{"params":{"$reason":"","$source":"","$codeUnits":"","&$error":""},"docComment":"Default \"to\" callback function","signature":"public UConverter::toUCallback(integer $reason ,string $source ,string $codeUnits ,integer &$error )","inheritdoc":0,"modifier":["public"],"return":""},"transcode":{"params":{"$str":"","$toEncoding":"","$fromEncoding":"","$options":""},"docComment":"Convert string from one charset to another","signature":"static UConverter::transcode(string $str ,string $toEncoding ,string $fromEncoding ,array $options )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["REASON_UNASSIGNED","REASON_ILLEGAL","REASON_IRREGULAR","REASON_RESET","REASON_CLOSE","REASON_CLONE","UNSUPPORTED_CONVERTER","SBCS","DBCS","MBCS","LATIN_1","UTF8","UTF16_BigEndian","UTF16_LittleEndian","UTF32_BigEndian","UTF32_LittleEndian","EBCDIC_STATEFUL","ISO_2022","LMBCS_1","LMBCS_2","LMBCS_3","LMBCS_4","LMBCS_5","LMBCS_6","LMBCS_8","LMBCS_11","LMBCS_16","LMBCS_17","LMBCS_18","LMBCS_19","LMBCS_LAST","HZ","SCSU","ISCII","US_ASCII","UTF7","BOCU1","UTF16","UTF32","CESU8","IMAP_MAILBOX"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","REASON_UNASSIGNED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"REASON_ILLEGAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"REASON_IRREGULAR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"REASON_RESET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"REASON_CLOSE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"REASON_CLONE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"UNSUPPORTED_CONVERTER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SBCS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DBCS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"MBCS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LATIN_1":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"UTF8":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"UTF16_BigEndian":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"UTF16_LittleEndian":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"UTF32_BigEndian":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"UTF32_LittleEndian":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"EBCDIC_STATEFUL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ISO_2022":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LMBCS_1":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LMBCS_2":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LMBCS_3":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LMBCS_4":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LMBCS_5":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LMBCS_6":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LMBCS_8":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LMBCS_11":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LMBCS_16":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LMBCS_17":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LMBCS_18":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LMBCS_19":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LMBCS_LAST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HZ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SCSU":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ISCII":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"US_ASCII":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"UTF7":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BOCU1":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"UTF16":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"UTF32":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CESU8":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IMAP_MAILBOX":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"IntlException":{"classname":"IntlException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"IntlIterator":{"classname":"IntlIterator","docComment":"","methods":{"modifier":{"public":["current","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","current":{"params":[],"docComment":"Get the current element","signature":"public IntlIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Get the current key","signature":"public IntlIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move forward to the next element","signature":"public IntlIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the iterator to the first element","signature":"public IntlIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check if curent position is valid","signature":"public IntlIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"JsonSerializable":{"classname":"JsonSerializable","docComment":"","methods":{"modifier":{"public":["jsonSerialize"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["jsonSerialize"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","jsonSerialize":{"params":[],"docComment":"Specify data which should be serialized to JSON","signature":"public JsonSerializable::jsonSerialize( )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"PDO":{"classname":"PDO","docComment":"","methods":{"modifier":{"public":["beginTransaction","commit","errorCode","errorInfo","exec","getAttribute","getAvailableDrivers","inTransaction","lastInsertId","prepare","query","query","query","query","quote","rollBack","setAttribute"],"private":[],"protected":[],"final":[],"static":["getAvailableDrivers"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","beginTransaction":{"params":[],"docComment":"\n   Initiates a transaction\n  ","signature":"public PDO::beginTransaction( )","inheritdoc":0,"modifier":["public"],"return":""},"commit":{"params":[],"docComment":"\n   Commits a transaction\n  ","signature":"public PDO::commit( )","inheritdoc":0,"modifier":["public"],"return":""},"errorCode":{"params":[],"docComment":"\n   Fetch the SQLSTATE associated with the last operation on the database handle\n  ","signature":"public PDO::errorCode( )","inheritdoc":0,"modifier":["public"],"return":""},"errorInfo":{"params":[],"docComment":"\n   Fetch extended error information associated with the last operation on the database handle\n  ","signature":"public PDO::errorInfo( )","inheritdoc":0,"modifier":["public"],"return":""},"exec":{"params":{"$statement":""},"docComment":"\n   Execute an SQL statement and return the number of affected rows\n  ","signature":"public PDO::exec(string $statement )","inheritdoc":0,"modifier":["public"],"return":""},"getAttribute":{"params":{"$attribute":""},"docComment":"\n   Retrieve a database connection attribute\n  ","signature":"public PDO::getAttribute(int $attribute )","inheritdoc":0,"modifier":["public"],"return":""},"getAvailableDrivers":{"params":[],"docComment":"\n   Return an array of available PDO drivers\n  ","signature":"pdo_drivers( )","inheritdoc":0,"modifier":["public","static"],"return":""},"inTransaction":{"params":[],"docComment":"\n   Checks if inside a transaction\n  ","signature":"public PDO::inTransaction( )","inheritdoc":0,"modifier":["public"],"return":""},"lastInsertId":{"params":{"$name":""},"docComment":"\n   Returns the ID of the last inserted row or sequence value\n  ","signature":"public PDO::lastInsertId([string $name] )","inheritdoc":0,"modifier":["public"],"return":""},"prepare":{"params":{"$statement":"","$driver_options":""},"docComment":"\n   Prepares a statement for execution and returns a statement object\n  ","signature":"public PDO::prepare(string $statement ,[array $driver_options] )","inheritdoc":0,"modifier":["public"],"return":"PDOStatement"},"query":{"params":{"$statement":"","$PDO::FETCH_COLUMN":"","$colno":"","$PDO::FETCH_CLASS":"","$classname":"","$ctorargs":"","$PDO::FETCH_INTO":"","$object":""},"docComment":"\n   Executes an SQL statement, returning a result set as a PDOStatement object\n  ","signature":"public PDO::query(string $statement ,int $PDO::FETCH_INTO ,object $object )","inheritdoc":0,"modifier":["public","public","public","public"],"return":"PDOStatement"},"quote":{"params":{"$string":"","$parameter_type":""},"docComment":"\n   Quotes a string for use in a query.\n  ","signature":"public PDO::quote(string $string ,[int $parameter_type] )","inheritdoc":0,"modifier":["public"],"return":""},"rollBack":{"params":[],"docComment":"\n   Rolls back a transaction\n  ","signature":"public PDO::rollBack( )","inheritdoc":0,"modifier":["public"],"return":""},"setAttribute":{"params":{"$attribute":"","$value":""},"docComment":"\n   Set an attribute\n  ","signature":"public PDO::setAttribute(int $attribute ,mixed $value )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"PDOStatement":{"classname":"PDOStatement","docComment":"","methods":{"modifier":{"public":["bindColumn","bindParam","bindValue","closeCursor","columnCount","debugDumpParams","errorCode","errorInfo","execute","fetch","fetchAll","fetchColumn","fetchObject","getAttribute","getColumnMeta","nextRowset","rowCount","setAttribute","setFetchMode","setFetchMode","setFetchMode","setFetchMode"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","bindColumn":{"params":{"$column":"","&$param":"","$type":"","$maxlen":"","$driverdata":""},"docComment":"\n   Bind a column to a PHP variable\n  ","signature":"public PDOStatement::bindColumn(mixed $column ,mixed &$param ,int $type ,int $maxlen ,mixed $driverdata )","inheritdoc":0,"modifier":["public"],"return":""},"bindParam":{"params":{"$parameter":"","&$variable":"","$data_type":"","$length":"","$driver_options":""},"docComment":"\n   Binds a parameter to the specified variable name\n  ","signature":"public PDOStatement::bindParam(mixed $parameter ,mixed &$variable ,[int $data_type] ,int $length ,mixed $driver_options )","inheritdoc":0,"modifier":["public"],"return":""},"bindValue":{"params":{"$parameter":"","$value":"","$data_type":""},"docComment":"\n   Binds a value to a parameter\n  ","signature":"public PDOStatement::bindValue(mixed $parameter ,mixed $value ,[int $data_type] )","inheritdoc":0,"modifier":["public"],"return":""},"closeCursor":{"params":[],"docComment":"\n   Closes the cursor, enabling the statement to be executed again.\n  ","signature":"public PDOStatement::closeCursor( )","inheritdoc":0,"modifier":["public"],"return":""},"columnCount":{"params":[],"docComment":"\n   Returns the number of columns in the result set\n  ","signature":"public PDOStatement::columnCount( )","inheritdoc":0,"modifier":["public"],"return":""},"debugDumpParams":{"params":[],"docComment":"\n   Dump an SQL prepared command\n  ","signature":"public PDOStatement::debugDumpParams( )","inheritdoc":0,"modifier":["public"],"return":""},"errorCode":{"params":[],"docComment":"\n   Fetch the SQLSTATE associated with the last operation on the statement handle\n  ","signature":"public PDOStatement::errorCode( )","inheritdoc":0,"modifier":["public"],"return":""},"errorInfo":{"params":[],"docComment":"\n   Fetch extended error information associated with the last operation on the statement handle\n  ","signature":"public PDOStatement::errorInfo( )","inheritdoc":0,"modifier":["public"],"return":""},"execute":{"params":{"$input_parameters":""},"docComment":"\n   Executes a prepared statement\n  ","signature":"public PDOStatement::execute(array $input_parameters )","inheritdoc":0,"modifier":["public"],"return":""},"fetch":{"params":{"$fetch_style":"","$cursor_orientation":"","$cursor_offset":""},"docComment":"\n   Fetches the next row from a result set\n  ","signature":"public PDOStatement::fetch(int $fetch_style ,[int $cursor_orientation] ,[int $cursor_offset] )","inheritdoc":0,"modifier":["public"],"return":""},"fetchAll":{"params":{"$fetch_style":"","$fetch_argument":"","$ctor_args":""},"docComment":"\n   Returns an array containing all of the result set rows\n  ","signature":"public PDOStatement::fetchAll(int $fetch_style ,mixed $fetch_argument ,[array $ctor_args] )","inheritdoc":0,"modifier":["public"],"return":""},"fetchColumn":{"params":{"$column_number":""},"docComment":"\n   Returns a single column from the next row of a result set\n  ","signature":"public PDOStatement::fetchColumn([int $column_number] )","inheritdoc":0,"modifier":["public"],"return":""},"fetchObject":{"params":{"$class_name":"","$ctor_args":""},"docComment":"Fetches the next row and returns it as an object.","signature":"public PDOStatement::fetchObject([string $class_name] ,array $ctor_args )","inheritdoc":0,"modifier":["public"],"return":""},"getAttribute":{"params":{"$attribute":""},"docComment":"\n   Retrieve a statement attribute\n  ","signature":"public PDOStatement::getAttribute(int $attribute )","inheritdoc":0,"modifier":["public"],"return":""},"getColumnMeta":{"params":{"$column":""},"docComment":"\n   Returns metadata for a column in a result set\n  ","signature":"public PDOStatement::getColumnMeta(int $column )","inheritdoc":0,"modifier":["public"],"return":""},"nextRowset":{"params":[],"docComment":"\n   Advances to the next rowset in a multi-rowset statement handle\n  ","signature":"public PDOStatement::nextRowset( )","inheritdoc":0,"modifier":["public"],"return":""},"rowCount":{"params":[],"docComment":"\n   Returns the number of rows affected by the last SQL statement\n  ","signature":"public PDOStatement::rowCount( )","inheritdoc":0,"modifier":["public"],"return":""},"setAttribute":{"params":{"$attribute":"","$value":""},"docComment":"\n   Set a statement attribute\n  ","signature":"public PDOStatement::setAttribute(int $attribute ,mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"setFetchMode":{"params":{"$mode":"","$PDO::FETCH_COLUMN":"","$colno":"","$PDO::FETCH_CLASS":"","$classname":"","$ctorargs":"","$PDO::FETCH_INTO":"","$object":""},"docComment":"\n   Set the default fetch mode for this statement\n  ","signature":"public PDOStatement::setFetchMode(int $PDO::FETCH_INTO ,object $object )","inheritdoc":0,"modifier":["public","public","public","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","queryString":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"PDOException":{"classname":"PDOException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":["errorInfo"],"private":[],"protected":["code","message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","errorInfo":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SQLite3":{"classname":"SQLite3","docComment":"","methods":{"modifier":{"public":["busyTimeout","changes","close","__construct","createAggregate","createCollation","createFunction","escapeString","exec","lastErrorCode","lastErrorMsg","lastInsertRowID","loadExtension","open","prepare","query","querySingle","version"],"private":[],"protected":[],"final":[],"static":["escapeString","version"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","busyTimeout":{"params":{"$msecs":""},"docComment":"Sets the busy connection handler","signature":"public SQLite3::busyTimeout(int $msecs )","inheritdoc":0,"modifier":["public"],"return":""},"changes":{"params":[],"docComment":"\n   Returns the number of database rows that were changed (or inserted or\n   deleted) by the most recent SQL statement\n  ","signature":"public SQLite3::changes( )","inheritdoc":0,"modifier":["public"],"return":""},"close":{"params":[],"docComment":"Closes the database connection","signature":"public SQLite3::close( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$filename":"","$flags":"","$encryption_key":""},"docComment":"\n   Instantiates an SQLite3 object and opens an SQLite 3 database\n  ","signature":"public SQLite3::__construct(string $filename ,int $flags ,string $encryption_key )","inheritdoc":0,"modifier":["public"],"return":""},"createAggregate":{"params":{"$name":"","$step_callback":"","$final_callback":"","$argument_count":""},"docComment":"Registers a PHP function for use as an SQL aggregate function","signature":"public SQLite3::createAggregate(string $name ,mixed $step_callback ,mixed $final_callback ,[int $argument_count] )","inheritdoc":0,"modifier":["public"],"return":""},"createCollation":{"params":{"$name":"","$callback":""},"docComment":"Registers a PHP function for use as an SQL collating function","signature":"public SQLite3::createCollation(string $name ,callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"createFunction":{"params":{"$name":"","$callback":"","$argument_count":""},"docComment":"Registers a PHP function for use as an SQL scalar function","signature":"public SQLite3::createFunction(string $name ,mixed $callback ,[int $argument_count] )","inheritdoc":0,"modifier":["public"],"return":""},"escapeString":{"params":{"$value":""},"docComment":"Returns a string that has been properly escaped","signature":"static SQLite3::escapeString(string $value )","inheritdoc":0,"modifier":["public","static"],"return":""},"exec":{"params":{"$query":""},"docComment":"Executes a result-less query against a given database","signature":"public SQLite3::exec(string $query )","inheritdoc":0,"modifier":["public"],"return":""},"lastErrorCode":{"params":[],"docComment":"\n   Returns the numeric result code of the most recent failed SQLite request\n  ","signature":"public SQLite3::lastErrorCode( )","inheritdoc":0,"modifier":["public"],"return":""},"lastErrorMsg":{"params":[],"docComment":"\n   Returns English text describing the most recent failed SQLite request\n  ","signature":"public SQLite3::lastErrorMsg( )","inheritdoc":0,"modifier":["public"],"return":""},"lastInsertRowID":{"params":[],"docComment":"Returns the row ID of the most recent INSERT into the database","signature":"public SQLite3::lastInsertRowID( )","inheritdoc":0,"modifier":["public"],"return":""},"loadExtension":{"params":{"$shared_library":""},"docComment":"Attempts to load an SQLite extension library","signature":"public SQLite3::loadExtension(string $shared_library )","inheritdoc":0,"modifier":["public"],"return":""},"open":{"params":{"$filename":"","$flags":"","$encryption_key":""},"docComment":"Opens an SQLite database","signature":"public SQLite3::open(string $filename ,[int $flags] ,string $encryption_key )","inheritdoc":0,"modifier":["public"],"return":""},"prepare":{"params":{"$query":""},"docComment":"Prepares an SQL statement for execution","signature":"public SQLite3::prepare(string $query )","inheritdoc":0,"modifier":["public"],"return":"SQLite3Stmt"},"query":{"params":{"$query":""},"docComment":"Executes an SQL query","signature":"public SQLite3::query(string $query )","inheritdoc":0,"modifier":["public"],"return":"SQLite3Result"},"querySingle":{"params":{"$query":"","$entire_row":""},"docComment":"Executes a query and returns a single result","signature":"public SQLite3::querySingle(string $query ,[bool $entire_row] )","inheritdoc":0,"modifier":["public"],"return":""},"version":{"params":[],"docComment":"\n   Returns the SQLite3 library version as a string constant and as a number\n  ","signature":"static SQLite3::version( )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SQLite3Stmt":{"classname":"SQLite3Stmt","docComment":"","methods":{"modifier":{"public":["bindParam","bindValue","clear","close","execute","paramCount","reset"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","bindParam":{"params":{"$sql_param":"","&$param":"","$type":""},"docComment":"Binds a parameter to a statement variable","signature":"public SQLite3Stmt::bindParam(string $sql_param ,mixed &$param ,int $type )","inheritdoc":0,"modifier":["public"],"return":""},"bindValue":{"params":{"$sql_param":"","$value":"","$type":""},"docComment":"Binds the value of a parameter to a statement variable","signature":"public SQLite3Stmt::bindValue(string $sql_param ,mixed $value ,int $type )","inheritdoc":0,"modifier":["public"],"return":""},"clear":{"params":[],"docComment":"Clears all current bound parameters","signature":"public SQLite3Stmt::clear( )","inheritdoc":0,"modifier":["public"],"return":""},"close":{"params":[],"docComment":"Closes the prepared statement","signature":"public SQLite3Stmt::close( )","inheritdoc":0,"modifier":["public"],"return":""},"execute":{"params":[],"docComment":"Executes a prepared statement and returns a result set object","signature":"public SQLite3Stmt::execute( )","inheritdoc":0,"modifier":["public"],"return":"SQLite3Result"},"paramCount":{"params":[],"docComment":"Returns the number of parameters within the prepared statement","signature":"public SQLite3Stmt::paramCount( )","inheritdoc":0,"modifier":["public"],"return":""},"reset":{"params":[],"docComment":"Resets the prepared statement","signature":"public SQLite3Stmt::reset( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SQLite3Result":{"classname":"SQLite3Result","docComment":"","methods":{"modifier":{"public":["columnName","columnType","fetchArray","finalize","numColumns","reset"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","columnName":{"params":{"$column_number":""},"docComment":"Returns the name of the nth column","signature":"public SQLite3Result::columnName(int $column_number )","inheritdoc":0,"modifier":["public"],"return":""},"columnType":{"params":{"$column_number":""},"docComment":"Returns the type of the nth column","signature":"public SQLite3Result::columnType(int $column_number )","inheritdoc":0,"modifier":["public"],"return":""},"fetchArray":{"params":{"$mode":""},"docComment":"\n   Fetches a result row as an associative or numerically indexed array or both\n  ","signature":"public SQLite3Result::fetchArray([int $mode] )","inheritdoc":0,"modifier":["public"],"return":""},"finalize":{"params":[],"docComment":"Closes the result set","signature":"public SQLite3Result::finalize( )","inheritdoc":0,"modifier":["public"],"return":""},"numColumns":{"params":[],"docComment":"Returns the number of columns in the result set","signature":"public SQLite3Result::numColumns( )","inheritdoc":0,"modifier":["public"],"return":""},"reset":{"params":[],"docComment":"Resets the result set back to the first row","signature":"public SQLite3Result::reset( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CURLFile":{"classname":"CURLFile","docComment":"","methods":{"modifier":{"public":["__construct","getFilename","getMimeType","getPostFilename","setMimeType","setPostFilename","__wakeup"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$filename":"","$mimetype":"","$postname":""},"docComment":"Create the CURLFile object","signature":"public CURLFile::__construct(string $filename ,string $mimetype ,string $postname )","inheritdoc":0,"modifier":["public"],"return":""},"getFilename":{"params":[],"docComment":"Get file name","signature":"public CURLFile::getFilename( )","inheritdoc":0,"modifier":["public"],"return":""},"getMimeType":{"params":[],"docComment":"Get MIME type","signature":"public CURLFile::getMimeType( )","inheritdoc":0,"modifier":["public"],"return":""},"getPostFilename":{"params":[],"docComment":"Get file name for POST","signature":"public CURLFile::getPostFilename( )","inheritdoc":0,"modifier":["public"],"return":""},"setMimeType":{"params":{"$mime":""},"docComment":"Set MIME type","signature":"public CURLFile::setMimeType(string $mime )","inheritdoc":0,"modifier":["public"],"return":""},"setPostFilename":{"params":{"$postname":""},"docComment":"Set file name for POST","signature":"public CURLFile::setPostFilename(string $postname )","inheritdoc":0,"modifier":["public"],"return":""},"__wakeup":{"params":[],"docComment":"Unserialization handler","signature":"public CURLFile::__wakeup( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["name","mime","postname"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"mime":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"postname":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMAttr":{"classname":"DOMAttr","docComment":"","methods":{"modifier":{"public":["__construct","isId","appendChild","C14N","C14NFile","cloneNode","getLineNo","getNodePath","hasAttributes","hasChildNodes","insertBefore","isDefaultNamespace","isSameNode","isSupported","lookupNamespaceURI","lookupPrefix","normalize","removeChild","replaceChild"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$name":"","$value":""},"docComment":"Creates a new  object","signature":"public DOMAttr::__construct(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"isId":{"params":[],"docComment":"\n   Checks if attribute is a defined ID\n  ","signature":"public DOMAttr::isId( )","inheritdoc":0,"modifier":["public"],"return":""},"appendChild":{"params":{"$newnode":"DOMNode"},"docComment":"\n   Adds new child at the end of the children\n  ","signature":"public DOMNode::appendChild(DOMNode $newnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"C14N":{"params":{"$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a string","signature":"public DOMNode::C14N(bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"C14NFile":{"params":{"$uri":"","$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a file","signature":"public DOMNode::C14NFile(string $uri ,bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"cloneNode":{"params":{"$deep":""},"docComment":"\n   Clones a node\n  ","signature":"public DOMNode::cloneNode(bool $deep )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"getLineNo":{"params":[],"docComment":"Get line number for a node","signature":"public DOMNode::getLineNo( )","inheritdoc":0,"modifier":["public"],"return":""},"getNodePath":{"params":[],"docComment":"Get an XPath for a node","signature":"public DOMNode::getNodePath( )","inheritdoc":0,"modifier":["public"],"return":""},"hasAttributes":{"params":[],"docComment":"\n   Checks if node has attributes\n  ","signature":"public DOMNode::hasAttributes( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildNodes":{"params":[],"docComment":"\n   Checks if node has children\n  ","signature":"public DOMNode::hasChildNodes( )","inheritdoc":0,"modifier":["public"],"return":""},"insertBefore":{"params":{"$newnode":"DOMNode","$refnode":"DOMNode"},"docComment":"\n   Adds a new child before a reference node\n  ","signature":"public DOMNode::insertBefore(DOMNode $newnode ,DOMNode $refnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"isDefaultNamespace":{"params":{"$namespaceURI":""},"docComment":"Checks if the specified namespaceURI is the default namespace or not","signature":"public DOMNode::isDefaultNamespace(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"isSameNode":{"params":{"$node":"DOMNode"},"docComment":"\n   Indicates if two nodes are the same node\n  ","signature":"public DOMNode::isSameNode(DOMNode $node )","inheritdoc":0,"modifier":["public"],"return":""},"isSupported":{"params":{"$feature":"","$version":""},"docComment":"\n   Checks if feature is supported for specified version\n  ","signature":"public DOMNode::isSupported(string $feature ,string $version )","inheritdoc":0,"modifier":["public"],"return":""},"lookupNamespaceURI":{"params":{"$prefix":""},"docComment":"\n   Gets the namespace URI of the node based on the prefix\n  ","signature":"public DOMNode::lookupNamespaceURI(string $prefix )","inheritdoc":0,"modifier":["public"],"return":""},"lookupPrefix":{"params":{"$namespaceURI":""},"docComment":"\n   Gets the namespace prefix of the node based on the namespace URI\n  ","signature":"public DOMNode::lookupPrefix(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"normalize":{"params":[],"docComment":"\n   Normalizes the node\n  ","signature":"public DOMNode::normalize( )","inheritdoc":0,"modifier":["public"],"return":""},"removeChild":{"params":{"$oldnode":"DOMNode"},"docComment":"\n   Removes child from list of children\n  ","signature":"public DOMNode::removeChild(DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"replaceChild":{"params":{"$newnode":"DOMNode","$oldnode":"DOMNode"},"docComment":"\n   Replaces a child\n  ","signature":"public DOMNode::replaceChild(DOMNode $newnode ,DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"}}},"properties":{"modifier":{"public":["name","ownerElement","schemaTypeInfo","specified","value"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"ownerElement":{"type":"DOMElement","Inheritdoc":0,"docComment":"","modifier":["public"]},"schemaTypeInfo":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"specified":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"value":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMCdataSection":{"classname":"DOMCdataSection","docComment":"","methods":{"modifier":{"public":["isWhitespaceInElementContent","splitText"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","isWhitespaceInElementContent":{"params":[],"docComment":"\n   Indicates whether this text node contains whitespace\n  ","signature":"public DOMText::isWhitespaceInElementContent( )","inheritdoc":0,"modifier":["public"],"return":""},"splitText":{"params":{"$offset":""},"docComment":"\n   Breaks this node into two nodes at the specified offset\n  ","signature":"public DOMText::splitText(int $offset )","inheritdoc":0,"modifier":["public"],"return":"DOMText"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMCharacterData":{"classname":"DOMCharacterData","docComment":"","methods":{"modifier":{"public":["appendData","deleteData","insertData","replaceData","substringData","appendChild","C14N","C14NFile","cloneNode","getLineNo","getNodePath","hasAttributes","hasChildNodes","insertBefore","isDefaultNamespace","isSameNode","isSupported","lookupNamespaceURI","lookupPrefix","normalize","removeChild","replaceChild"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","appendData":{"params":{"$data":""},"docComment":"\n   Append the string to the end of the character data of the node\n  ","signature":"DOMCharacterData::appendData(string $data )","inheritdoc":0,"modifier":[],"return":""},"deleteData":{"params":{"$offset":"","$count":""},"docComment":"\n   Remove a range of characters from the node\n  ","signature":"DOMCharacterData::deleteData(int $offset ,int $count )","inheritdoc":0,"modifier":[],"return":""},"insertData":{"params":{"$offset":"","$data":""},"docComment":"\n   Insert a string at the specified 16-bit unit offset\n  ","signature":"DOMCharacterData::insertData(int $offset ,string $data )","inheritdoc":0,"modifier":[],"return":""},"replaceData":{"params":{"$offset":"","$count":"","$data":""},"docComment":"\n   Replace a substring within the DOMCharacterData node\n  ","signature":"DOMCharacterData::replaceData(int $offset ,int $count ,string $data )","inheritdoc":0,"modifier":[],"return":""},"substringData":{"params":{"$offset":"","$count":""},"docComment":"\n   Extracts a range of data from the node\n  ","signature":"DOMCharacterData::substringData(int $offset ,int $count )","inheritdoc":0,"modifier":[],"return":""},"appendChild":{"params":{"$newnode":"DOMNode"},"docComment":"\n   Adds new child at the end of the children\n  ","signature":"public DOMNode::appendChild(DOMNode $newnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"C14N":{"params":{"$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a string","signature":"public DOMNode::C14N(bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"C14NFile":{"params":{"$uri":"","$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a file","signature":"public DOMNode::C14NFile(string $uri ,bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"cloneNode":{"params":{"$deep":""},"docComment":"\n   Clones a node\n  ","signature":"public DOMNode::cloneNode(bool $deep )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"getLineNo":{"params":[],"docComment":"Get line number for a node","signature":"public DOMNode::getLineNo( )","inheritdoc":0,"modifier":["public"],"return":""},"getNodePath":{"params":[],"docComment":"Get an XPath for a node","signature":"public DOMNode::getNodePath( )","inheritdoc":0,"modifier":["public"],"return":""},"hasAttributes":{"params":[],"docComment":"\n   Checks if node has attributes\n  ","signature":"public DOMNode::hasAttributes( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildNodes":{"params":[],"docComment":"\n   Checks if node has children\n  ","signature":"public DOMNode::hasChildNodes( )","inheritdoc":0,"modifier":["public"],"return":""},"insertBefore":{"params":{"$newnode":"DOMNode","$refnode":"DOMNode"},"docComment":"\n   Adds a new child before a reference node\n  ","signature":"public DOMNode::insertBefore(DOMNode $newnode ,DOMNode $refnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"isDefaultNamespace":{"params":{"$namespaceURI":""},"docComment":"Checks if the specified namespaceURI is the default namespace or not","signature":"public DOMNode::isDefaultNamespace(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"isSameNode":{"params":{"$node":"DOMNode"},"docComment":"\n   Indicates if two nodes are the same node\n  ","signature":"public DOMNode::isSameNode(DOMNode $node )","inheritdoc":0,"modifier":["public"],"return":""},"isSupported":{"params":{"$feature":"","$version":""},"docComment":"\n   Checks if feature is supported for specified version\n  ","signature":"public DOMNode::isSupported(string $feature ,string $version )","inheritdoc":0,"modifier":["public"],"return":""},"lookupNamespaceURI":{"params":{"$prefix":""},"docComment":"\n   Gets the namespace URI of the node based on the prefix\n  ","signature":"public DOMNode::lookupNamespaceURI(string $prefix )","inheritdoc":0,"modifier":["public"],"return":""},"lookupPrefix":{"params":{"$namespaceURI":""},"docComment":"\n   Gets the namespace prefix of the node based on the namespace URI\n  ","signature":"public DOMNode::lookupPrefix(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"normalize":{"params":[],"docComment":"\n   Normalizes the node\n  ","signature":"public DOMNode::normalize( )","inheritdoc":0,"modifier":["public"],"return":""},"removeChild":{"params":{"$oldnode":"DOMNode"},"docComment":"\n   Removes child from list of children\n  ","signature":"public DOMNode::removeChild(DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"replaceChild":{"params":{"$newnode":"DOMNode","$oldnode":"DOMNode"},"docComment":"\n   Replaces a child\n  ","signature":"public DOMNode::replaceChild(DOMNode $newnode ,DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"}}},"properties":{"modifier":{"public":["data","length"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","data":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"length":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMComment":{"classname":"DOMComment","docComment":"","methods":{"modifier":{"public":["__construct","appendData","deleteData","insertData","replaceData","substringData","appendChild","C14N","C14NFile","cloneNode","getLineNo","getNodePath","hasAttributes","hasChildNodes","insertBefore","isDefaultNamespace","isSameNode","isSupported","lookupNamespaceURI","lookupPrefix","normalize","removeChild","replaceChild"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$value":""},"docComment":"\n   Creates a new DOMComment object\n  ","signature":"public DOMComment::__construct(string $value )","inheritdoc":0,"modifier":["public"],"return":""},"appendData":{"params":{"$data":""},"docComment":"\n   Append the string to the end of the character data of the node\n  ","signature":"DOMCharacterData::appendData(string $data )","inheritdoc":0,"modifier":[],"return":""},"deleteData":{"params":{"$offset":"","$count":""},"docComment":"\n   Remove a range of characters from the node\n  ","signature":"DOMCharacterData::deleteData(int $offset ,int $count )","inheritdoc":0,"modifier":[],"return":""},"insertData":{"params":{"$offset":"","$data":""},"docComment":"\n   Insert a string at the specified 16-bit unit offset\n  ","signature":"DOMCharacterData::insertData(int $offset ,string $data )","inheritdoc":0,"modifier":[],"return":""},"replaceData":{"params":{"$offset":"","$count":"","$data":""},"docComment":"\n   Replace a substring within the DOMCharacterData node\n  ","signature":"DOMCharacterData::replaceData(int $offset ,int $count ,string $data )","inheritdoc":0,"modifier":[],"return":""},"substringData":{"params":{"$offset":"","$count":""},"docComment":"\n   Extracts a range of data from the node\n  ","signature":"DOMCharacterData::substringData(int $offset ,int $count )","inheritdoc":0,"modifier":[],"return":""},"appendChild":{"params":{"$newnode":"DOMNode"},"docComment":"\n   Adds new child at the end of the children\n  ","signature":"public DOMNode::appendChild(DOMNode $newnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"C14N":{"params":{"$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a string","signature":"public DOMNode::C14N(bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"C14NFile":{"params":{"$uri":"","$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a file","signature":"public DOMNode::C14NFile(string $uri ,bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"cloneNode":{"params":{"$deep":""},"docComment":"\n   Clones a node\n  ","signature":"public DOMNode::cloneNode(bool $deep )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"getLineNo":{"params":[],"docComment":"Get line number for a node","signature":"public DOMNode::getLineNo( )","inheritdoc":0,"modifier":["public"],"return":""},"getNodePath":{"params":[],"docComment":"Get an XPath for a node","signature":"public DOMNode::getNodePath( )","inheritdoc":0,"modifier":["public"],"return":""},"hasAttributes":{"params":[],"docComment":"\n   Checks if node has attributes\n  ","signature":"public DOMNode::hasAttributes( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildNodes":{"params":[],"docComment":"\n   Checks if node has children\n  ","signature":"public DOMNode::hasChildNodes( )","inheritdoc":0,"modifier":["public"],"return":""},"insertBefore":{"params":{"$newnode":"DOMNode","$refnode":"DOMNode"},"docComment":"\n   Adds a new child before a reference node\n  ","signature":"public DOMNode::insertBefore(DOMNode $newnode ,DOMNode $refnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"isDefaultNamespace":{"params":{"$namespaceURI":""},"docComment":"Checks if the specified namespaceURI is the default namespace or not","signature":"public DOMNode::isDefaultNamespace(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"isSameNode":{"params":{"$node":"DOMNode"},"docComment":"\n   Indicates if two nodes are the same node\n  ","signature":"public DOMNode::isSameNode(DOMNode $node )","inheritdoc":0,"modifier":["public"],"return":""},"isSupported":{"params":{"$feature":"","$version":""},"docComment":"\n   Checks if feature is supported for specified version\n  ","signature":"public DOMNode::isSupported(string $feature ,string $version )","inheritdoc":0,"modifier":["public"],"return":""},"lookupNamespaceURI":{"params":{"$prefix":""},"docComment":"\n   Gets the namespace URI of the node based on the prefix\n  ","signature":"public DOMNode::lookupNamespaceURI(string $prefix )","inheritdoc":0,"modifier":["public"],"return":""},"lookupPrefix":{"params":{"$namespaceURI":""},"docComment":"\n   Gets the namespace prefix of the node based on the namespace URI\n  ","signature":"public DOMNode::lookupPrefix(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"normalize":{"params":[],"docComment":"\n   Normalizes the node\n  ","signature":"public DOMNode::normalize( )","inheritdoc":0,"modifier":["public"],"return":""},"removeChild":{"params":{"$oldnode":"DOMNode"},"docComment":"\n   Removes child from list of children\n  ","signature":"public DOMNode::removeChild(DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"replaceChild":{"params":{"$newnode":"DOMNode","$oldnode":"DOMNode"},"docComment":"\n   Replaces a child\n  ","signature":"public DOMNode::replaceChild(DOMNode $newnode ,DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMDocument":{"classname":"DOMDocument","docComment":"","methods":{"modifier":{"public":["__construct","createAttribute","createAttributeNS","createCDATASection","createComment","createDocumentFragment","createElement","createElementNS","createEntityReference","createProcessingInstruction","createTextNode","getElementById","getElementsByTagName","getElementsByTagNameNS","importNode","load","loadHTML","loadHTMLFile","loadXML","normalizeDocument","registerNodeClass","relaxNGValidate","relaxNGValidateSource","save","saveHTML","saveHTMLFile","saveXML","schemaValidate","schemaValidateSource","validate","xinclude","appendChild","C14N","C14NFile","cloneNode","getLineNo","getNodePath","hasAttributes","hasChildNodes","insertBefore","isDefaultNamespace","isSameNode","isSupported","lookupNamespaceURI","lookupPrefix","normalize","removeChild","replaceChild"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$version":"","$encoding":""},"docComment":"\n   Creates a new DOMDocument object\n  ","signature":"public DOMDocument::__construct(string $version ,string $encoding )","inheritdoc":0,"modifier":["public"],"return":""},"createAttribute":{"params":{"$name":""},"docComment":"Create new attribute","signature":"public DOMDocument::createAttribute(string $name )","inheritdoc":0,"modifier":["public"],"return":"DOMAttr"},"createAttributeNS":{"params":{"$namespaceURI":"","$qualifiedName":""},"docComment":"\n   Create new attribute node with an associated namespace\n  ","signature":"public DOMDocument::createAttributeNS(string $namespaceURI ,string $qualifiedName )","inheritdoc":0,"modifier":["public"],"return":"DOMAttr"},"createCDATASection":{"params":{"$data":""},"docComment":"Create new cdata node","signature":"public DOMDocument::createCDATASection(string $data )","inheritdoc":0,"modifier":["public"],"return":"DOMCDATASection"},"createComment":{"params":{"$data":""},"docComment":"Create new comment node","signature":"public DOMDocument::createComment(string $data )","inheritdoc":0,"modifier":["public"],"return":"DOMComment"},"createDocumentFragment":{"params":[],"docComment":"Create new document fragment","signature":"public DOMDocument::createDocumentFragment( )","inheritdoc":0,"modifier":["public"],"return":"DOMDocumentFragment"},"createElement":{"params":{"$name":"","$value":""},"docComment":"Create new element node","signature":"public DOMDocument::createElement(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":"DOMElement"},"createElementNS":{"params":{"$namespaceURI":"","$qualifiedName":"","$value":""},"docComment":"\n   Create new element node with an associated namespace\n  ","signature":"public DOMDocument::createElementNS(string $namespaceURI ,string $qualifiedName ,string $value )","inheritdoc":0,"modifier":["public"],"return":"DOMElement"},"createEntityReference":{"params":{"$name":""},"docComment":"Create new entity reference node","signature":"public DOMDocument::createEntityReference(string $name )","inheritdoc":0,"modifier":["public"],"return":"DOMEntityReference"},"createProcessingInstruction":{"params":{"$target":"","$data":""},"docComment":"Creates new PI node","signature":"public DOMDocument::createProcessingInstruction(string $target ,string $data )","inheritdoc":0,"modifier":["public"],"return":"DOMProcessingInstruction"},"createTextNode":{"params":{"$content":""},"docComment":"Create new text node","signature":"public DOMDocument::createTextNode(string $content )","inheritdoc":0,"modifier":["public"],"return":"DOMText"},"getElementById":{"params":{"$elementId":""},"docComment":"Searches for an element with a certain id","signature":"public DOMDocument::getElementById(string $elementId )","inheritdoc":0,"modifier":["public"],"return":"DOMElement"},"getElementsByTagName":{"params":{"$name":""},"docComment":"Searches for all elements with given local tag name","signature":"public DOMDocument::getElementsByTagName(string $name )","inheritdoc":0,"modifier":["public"],"return":"DOMNodeList"},"getElementsByTagNameNS":{"params":{"$namespaceURI":"","$localName":""},"docComment":"\n   Searches for all elements with given tag name in specified namespace\n  ","signature":"public DOMDocument::getElementsByTagNameNS(string $namespaceURI ,string $localName )","inheritdoc":0,"modifier":["public"],"return":"DOMNodeList"},"importNode":{"params":{"$importedNode":"DOMNode","$deep":""},"docComment":"Import node into current document","signature":"public DOMDocument::importNode(DOMNode $importedNode ,bool $deep )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"load":{"params":{"$filename":"","$options":""},"docComment":"\n   Load XML from a file\n  ","signature":"public DOMDocument::load(string $filename ,[int $options] )","inheritdoc":0,"modifier":["public"],"return":""},"loadHTML":{"params":{"$source":"","$options":""},"docComment":"\n   Load HTML from a string\n  ","signature":"public DOMDocument::loadHTML(string $source ,[int $options] )","inheritdoc":0,"modifier":["public"],"return":""},"loadHTMLFile":{"params":{"$filename":"","$options":""},"docComment":"\n   Load HTML from a file\n  ","signature":"public DOMDocument::loadHTMLFile(string $filename ,[int $options] )","inheritdoc":0,"modifier":["public"],"return":""},"loadXML":{"params":{"$source":"","$options":""},"docComment":"\n   Load XML from a string\n  ","signature":"public DOMDocument::loadXML(string $source ,[int $options] )","inheritdoc":0,"modifier":["public"],"return":""},"normalizeDocument":{"params":[],"docComment":"Normalizes the document","signature":"public DOMDocument::normalizeDocument( )","inheritdoc":0,"modifier":["public"],"return":""},"registerNodeClass":{"params":{"$baseclass":"","$extendedclass":""},"docComment":"Register extended class used to create base node type","signature":"public DOMDocument::registerNodeClass(string $baseclass ,string $extendedclass )","inheritdoc":0,"modifier":["public"],"return":""},"relaxNGValidate":{"params":{"$filename":""},"docComment":"\n   Performs relaxNG validation on the document\n  ","signature":"public DOMDocument::relaxNGValidate(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"relaxNGValidateSource":{"params":{"$source":""},"docComment":"\n   Performs relaxNG validation on the document\n  ","signature":"public DOMDocument::relaxNGValidateSource(string $source )","inheritdoc":0,"modifier":["public"],"return":""},"save":{"params":{"$filename":"","$options":""},"docComment":"\n    Dumps the internal XML tree back into a file\n  ","signature":"public DOMDocument::save(string $filename ,int $options )","inheritdoc":0,"modifier":["public"],"return":""},"saveHTML":{"params":{"$node":"DOMNode"},"docComment":"\n   Dumps the internal document into a string using HTML formatting\n  ","signature":"public DOMDocument::saveHTML([DOMNode $node] )","inheritdoc":0,"modifier":["public"],"return":""},"saveHTMLFile":{"params":{"$filename":""},"docComment":"\n   Dumps the internal document into a file using HTML formatting\n  ","signature":"public DOMDocument::saveHTMLFile(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"saveXML":{"params":{"$node":"DOMNode","$options":""},"docComment":"\n   Dumps the internal XML tree back into a string\n  ","signature":"public DOMDocument::saveXML(DOMNode $node ,int $options )","inheritdoc":0,"modifier":["public"],"return":""},"schemaValidate":{"params":{"$filename":"","$flags":""},"docComment":"\n   Validates a document based on a schema\n  ","signature":"public DOMDocument::schemaValidate(string $filename ,int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"schemaValidateSource":{"params":{"$source":"","$flags":""},"docComment":"\n   Validates a document based on a schema\n  ","signature":"public DOMDocument::schemaValidateSource(string $source ,int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"validate":{"params":[],"docComment":"\n   Validates the document based on its DTD\n  ","signature":"public DOMDocument::validate( )","inheritdoc":0,"modifier":["public"],"return":""},"xinclude":{"params":{"$options":""},"docComment":"\n   Substitutes XIncludes in a DOMDocument Object\n  ","signature":"public DOMDocument::xinclude(int $options )","inheritdoc":0,"modifier":["public"],"return":""},"appendChild":{"params":{"$newnode":"DOMNode"},"docComment":"\n   Adds new child at the end of the children\n  ","signature":"public DOMNode::appendChild(DOMNode $newnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"C14N":{"params":{"$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a string","signature":"public DOMNode::C14N(bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"C14NFile":{"params":{"$uri":"","$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a file","signature":"public DOMNode::C14NFile(string $uri ,bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"cloneNode":{"params":{"$deep":""},"docComment":"\n   Clones a node\n  ","signature":"public DOMNode::cloneNode(bool $deep )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"getLineNo":{"params":[],"docComment":"Get line number for a node","signature":"public DOMNode::getLineNo( )","inheritdoc":0,"modifier":["public"],"return":""},"getNodePath":{"params":[],"docComment":"Get an XPath for a node","signature":"public DOMNode::getNodePath( )","inheritdoc":0,"modifier":["public"],"return":""},"hasAttributes":{"params":[],"docComment":"\n   Checks if node has attributes\n  ","signature":"public DOMNode::hasAttributes( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildNodes":{"params":[],"docComment":"\n   Checks if node has children\n  ","signature":"public DOMNode::hasChildNodes( )","inheritdoc":0,"modifier":["public"],"return":""},"insertBefore":{"params":{"$newnode":"DOMNode","$refnode":"DOMNode"},"docComment":"\n   Adds a new child before a reference node\n  ","signature":"public DOMNode::insertBefore(DOMNode $newnode ,DOMNode $refnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"isDefaultNamespace":{"params":{"$namespaceURI":""},"docComment":"Checks if the specified namespaceURI is the default namespace or not","signature":"public DOMNode::isDefaultNamespace(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"isSameNode":{"params":{"$node":"DOMNode"},"docComment":"\n   Indicates if two nodes are the same node\n  ","signature":"public DOMNode::isSameNode(DOMNode $node )","inheritdoc":0,"modifier":["public"],"return":""},"isSupported":{"params":{"$feature":"","$version":""},"docComment":"\n   Checks if feature is supported for specified version\n  ","signature":"public DOMNode::isSupported(string $feature ,string $version )","inheritdoc":0,"modifier":["public"],"return":""},"lookupNamespaceURI":{"params":{"$prefix":""},"docComment":"\n   Gets the namespace URI of the node based on the prefix\n  ","signature":"public DOMNode::lookupNamespaceURI(string $prefix )","inheritdoc":0,"modifier":["public"],"return":""},"lookupPrefix":{"params":{"$namespaceURI":""},"docComment":"\n   Gets the namespace prefix of the node based on the namespace URI\n  ","signature":"public DOMNode::lookupPrefix(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"normalize":{"params":[],"docComment":"\n   Normalizes the node\n  ","signature":"public DOMNode::normalize( )","inheritdoc":0,"modifier":["public"],"return":""},"removeChild":{"params":{"$oldnode":"DOMNode"},"docComment":"\n   Removes child from list of children\n  ","signature":"public DOMNode::removeChild(DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"replaceChild":{"params":{"$newnode":"DOMNode","$oldnode":"DOMNode"},"docComment":"\n   Replaces a child\n  ","signature":"public DOMNode::replaceChild(DOMNode $newnode ,DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"}}},"properties":{"modifier":{"public":["actualEncoding","config","doctype","documentElement","documentURI","encoding","formatOutput","implementation","preserveWhiteSpace","recover","resolveExternals","standalone","strictErrorChecking","substituteEntities","validateOnParse","version","xmlEncoding","xmlStandalone","xmlVersion"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","actualEncoding":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"config":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"doctype":{"type":"DOMDocumentType","Inheritdoc":0,"docComment":"","modifier":["public"]},"documentElement":{"type":"DOMElement","Inheritdoc":0,"docComment":"","modifier":["public"]},"documentURI":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"encoding":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"formatOutput":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"implementation":{"type":"DOMImplementation","Inheritdoc":0,"docComment":"","modifier":["public"]},"preserveWhiteSpace":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"recover":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"resolveExternals":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"standalone":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"strictErrorChecking":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"substituteEntities":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"validateOnParse":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"version":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"xmlEncoding":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"xmlStandalone":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"xmlVersion":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMDocumentFragment":{"classname":"DOMDocumentFragment","docComment":"","methods":{"modifier":{"public":["appendXML","appendChild","C14N","C14NFile","cloneNode","getLineNo","getNodePath","hasAttributes","hasChildNodes","insertBefore","isDefaultNamespace","isSameNode","isSupported","lookupNamespaceURI","lookupPrefix","normalize","removeChild","replaceChild"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","appendXML":{"params":{"$data":""},"docComment":"Append raw XML data","signature":"public DOMDocumentFragment::appendXML(string $data )","inheritdoc":0,"modifier":["public"],"return":""},"appendChild":{"params":{"$newnode":"DOMNode"},"docComment":"\n   Adds new child at the end of the children\n  ","signature":"public DOMNode::appendChild(DOMNode $newnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"C14N":{"params":{"$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a string","signature":"public DOMNode::C14N(bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"C14NFile":{"params":{"$uri":"","$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a file","signature":"public DOMNode::C14NFile(string $uri ,bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"cloneNode":{"params":{"$deep":""},"docComment":"\n   Clones a node\n  ","signature":"public DOMNode::cloneNode(bool $deep )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"getLineNo":{"params":[],"docComment":"Get line number for a node","signature":"public DOMNode::getLineNo( )","inheritdoc":0,"modifier":["public"],"return":""},"getNodePath":{"params":[],"docComment":"Get an XPath for a node","signature":"public DOMNode::getNodePath( )","inheritdoc":0,"modifier":["public"],"return":""},"hasAttributes":{"params":[],"docComment":"\n   Checks if node has attributes\n  ","signature":"public DOMNode::hasAttributes( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildNodes":{"params":[],"docComment":"\n   Checks if node has children\n  ","signature":"public DOMNode::hasChildNodes( )","inheritdoc":0,"modifier":["public"],"return":""},"insertBefore":{"params":{"$newnode":"DOMNode","$refnode":"DOMNode"},"docComment":"\n   Adds a new child before a reference node\n  ","signature":"public DOMNode::insertBefore(DOMNode $newnode ,DOMNode $refnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"isDefaultNamespace":{"params":{"$namespaceURI":""},"docComment":"Checks if the specified namespaceURI is the default namespace or not","signature":"public DOMNode::isDefaultNamespace(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"isSameNode":{"params":{"$node":"DOMNode"},"docComment":"\n   Indicates if two nodes are the same node\n  ","signature":"public DOMNode::isSameNode(DOMNode $node )","inheritdoc":0,"modifier":["public"],"return":""},"isSupported":{"params":{"$feature":"","$version":""},"docComment":"\n   Checks if feature is supported for specified version\n  ","signature":"public DOMNode::isSupported(string $feature ,string $version )","inheritdoc":0,"modifier":["public"],"return":""},"lookupNamespaceURI":{"params":{"$prefix":""},"docComment":"\n   Gets the namespace URI of the node based on the prefix\n  ","signature":"public DOMNode::lookupNamespaceURI(string $prefix )","inheritdoc":0,"modifier":["public"],"return":""},"lookupPrefix":{"params":{"$namespaceURI":""},"docComment":"\n   Gets the namespace prefix of the node based on the namespace URI\n  ","signature":"public DOMNode::lookupPrefix(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"normalize":{"params":[],"docComment":"\n   Normalizes the node\n  ","signature":"public DOMNode::normalize( )","inheritdoc":0,"modifier":["public"],"return":""},"removeChild":{"params":{"$oldnode":"DOMNode"},"docComment":"\n   Removes child from list of children\n  ","signature":"public DOMNode::removeChild(DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"replaceChild":{"params":{"$newnode":"DOMNode","$oldnode":"DOMNode"},"docComment":"\n   Replaces a child\n  ","signature":"public DOMNode::replaceChild(DOMNode $newnode ,DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMDocumentType":{"classname":"DOMDocumentType","docComment":"","methods":{"modifier":{"public":["appendChild","C14N","C14NFile","cloneNode","getLineNo","getNodePath","hasAttributes","hasChildNodes","insertBefore","isDefaultNamespace","isSameNode","isSupported","lookupNamespaceURI","lookupPrefix","normalize","removeChild","replaceChild"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","appendChild":{"params":{"$newnode":"DOMNode"},"docComment":"\n   Adds new child at the end of the children\n  ","signature":"public DOMNode::appendChild(DOMNode $newnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"C14N":{"params":{"$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a string","signature":"public DOMNode::C14N(bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"C14NFile":{"params":{"$uri":"","$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a file","signature":"public DOMNode::C14NFile(string $uri ,bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"cloneNode":{"params":{"$deep":""},"docComment":"\n   Clones a node\n  ","signature":"public DOMNode::cloneNode(bool $deep )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"getLineNo":{"params":[],"docComment":"Get line number for a node","signature":"public DOMNode::getLineNo( )","inheritdoc":0,"modifier":["public"],"return":""},"getNodePath":{"params":[],"docComment":"Get an XPath for a node","signature":"public DOMNode::getNodePath( )","inheritdoc":0,"modifier":["public"],"return":""},"hasAttributes":{"params":[],"docComment":"\n   Checks if node has attributes\n  ","signature":"public DOMNode::hasAttributes( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildNodes":{"params":[],"docComment":"\n   Checks if node has children\n  ","signature":"public DOMNode::hasChildNodes( )","inheritdoc":0,"modifier":["public"],"return":""},"insertBefore":{"params":{"$newnode":"DOMNode","$refnode":"DOMNode"},"docComment":"\n   Adds a new child before a reference node\n  ","signature":"public DOMNode::insertBefore(DOMNode $newnode ,DOMNode $refnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"isDefaultNamespace":{"params":{"$namespaceURI":""},"docComment":"Checks if the specified namespaceURI is the default namespace or not","signature":"public DOMNode::isDefaultNamespace(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"isSameNode":{"params":{"$node":"DOMNode"},"docComment":"\n   Indicates if two nodes are the same node\n  ","signature":"public DOMNode::isSameNode(DOMNode $node )","inheritdoc":0,"modifier":["public"],"return":""},"isSupported":{"params":{"$feature":"","$version":""},"docComment":"\n   Checks if feature is supported for specified version\n  ","signature":"public DOMNode::isSupported(string $feature ,string $version )","inheritdoc":0,"modifier":["public"],"return":""},"lookupNamespaceURI":{"params":{"$prefix":""},"docComment":"\n   Gets the namespace URI of the node based on the prefix\n  ","signature":"public DOMNode::lookupNamespaceURI(string $prefix )","inheritdoc":0,"modifier":["public"],"return":""},"lookupPrefix":{"params":{"$namespaceURI":""},"docComment":"\n   Gets the namespace prefix of the node based on the namespace URI\n  ","signature":"public DOMNode::lookupPrefix(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"normalize":{"params":[],"docComment":"\n   Normalizes the node\n  ","signature":"public DOMNode::normalize( )","inheritdoc":0,"modifier":["public"],"return":""},"removeChild":{"params":{"$oldnode":"DOMNode"},"docComment":"\n   Removes child from list of children\n  ","signature":"public DOMNode::removeChild(DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"replaceChild":{"params":{"$newnode":"DOMNode","$oldnode":"DOMNode"},"docComment":"\n   Replaces a child\n  ","signature":"public DOMNode::replaceChild(DOMNode $newnode ,DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"}}},"properties":{"modifier":{"public":["publicId","systemId","name","entities","notations","internalSubset"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","publicId":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"systemId":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"entities":{"type":"DOMNamedNodeMap","Inheritdoc":0,"docComment":"","modifier":["public"]},"notations":{"type":"DOMNamedNodeMap","Inheritdoc":0,"docComment":"","modifier":["public"]},"internalSubset":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMElement":{"classname":"DOMElement","docComment":"","methods":{"modifier":{"public":["__construct","getAttribute","getAttributeNode","getAttributeNodeNS","getAttributeNS","getElementsByTagName","getElementsByTagNameNS","hasAttribute","hasAttributeNS","removeAttribute","removeAttributeNode","removeAttributeNS","setAttribute","setAttributeNode","setAttributeNodeNS","setAttributeNS","setIdAttribute","setIdAttributeNode","setIdAttributeNS","appendChild","C14N","C14NFile","cloneNode","getLineNo","getNodePath","hasAttributes","hasChildNodes","insertBefore","isDefaultNamespace","isSameNode","isSupported","lookupNamespaceURI","lookupPrefix","normalize","removeChild","replaceChild"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$name":"","$value":"","$namespaceURI":""},"docComment":"\n   Creates a new DOMElement object\n  ","signature":"public DOMElement::__construct(string $name ,string $value ,string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"getAttribute":{"params":{"$name":""},"docComment":"Returns value of attribute","signature":"public DOMElement::getAttribute(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"getAttributeNode":{"params":{"$name":""},"docComment":"Returns attribute node","signature":"public DOMElement::getAttributeNode(string $name )","inheritdoc":0,"modifier":["public"],"return":"DOMAttr"},"getAttributeNodeNS":{"params":{"$namespaceURI":"","$localName":""},"docComment":"\n   Returns attribute node\n  ","signature":"public DOMElement::getAttributeNodeNS(string $namespaceURI ,string $localName )","inheritdoc":0,"modifier":["public"],"return":"DOMAttr"},"getAttributeNS":{"params":{"$namespaceURI":"","$localName":""},"docComment":"Returns value of attribute","signature":"public DOMElement::getAttributeNS(string $namespaceURI ,string $localName )","inheritdoc":0,"modifier":["public"],"return":""},"getElementsByTagName":{"params":{"$name":""},"docComment":"Gets elements by tagname","signature":"public DOMElement::getElementsByTagName(string $name )","inheritdoc":0,"modifier":["public"],"return":"DOMNodeList"},"getElementsByTagNameNS":{"params":{"$namespaceURI":"","$localName":""},"docComment":"Get elements by namespaceURI and localName","signature":"public DOMElement::getElementsByTagNameNS(string $namespaceURI ,string $localName )","inheritdoc":0,"modifier":["public"],"return":"DOMNodeList"},"hasAttribute":{"params":{"$name":""},"docComment":"Checks to see if attribute exists","signature":"public DOMElement::hasAttribute(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"hasAttributeNS":{"params":{"$namespaceURI":"","$localName":""},"docComment":"\n   Checks to see if attribute exists\n  ","signature":"public DOMElement::hasAttributeNS(string $namespaceURI ,string $localName )","inheritdoc":0,"modifier":["public"],"return":""},"removeAttribute":{"params":{"$name":""},"docComment":"Removes attribute","signature":"public DOMElement::removeAttribute(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"removeAttributeNode":{"params":{"$oldnode":"DOMAttr"},"docComment":"Removes attribute","signature":"public DOMElement::removeAttributeNode(DOMAttr $oldnode )","inheritdoc":0,"modifier":["public"],"return":""},"removeAttributeNS":{"params":{"$namespaceURI":"","$localName":""},"docComment":"Removes attribute","signature":"public DOMElement::removeAttributeNS(string $namespaceURI ,string $localName )","inheritdoc":0,"modifier":["public"],"return":""},"setAttribute":{"params":{"$name":"","$value":""},"docComment":"Adds new attribute","signature":"public DOMElement::setAttribute(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":"DOMAttr"},"setAttributeNode":{"params":{"$attr":"DOMAttr"},"docComment":"Adds new attribute node to element","signature":"public DOMElement::setAttributeNode(DOMAttr $attr )","inheritdoc":0,"modifier":["public"],"return":"DOMAttr"},"setAttributeNodeNS":{"params":{"$attr":"DOMAttr"},"docComment":"Adds new attribute node to element","signature":"public DOMElement::setAttributeNodeNS(DOMAttr $attr )","inheritdoc":0,"modifier":["public"],"return":"DOMAttr"},"setAttributeNS":{"params":{"$namespaceURI":"","$qualifiedName":"","$value":""},"docComment":"Adds new attribute","signature":"public DOMElement::setAttributeNS(string $namespaceURI ,string $qualifiedName ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"setIdAttribute":{"params":{"$name":"","$isId":""},"docComment":"Declares the attribute specified by name to be of type ID","signature":"public DOMElement::setIdAttribute(string $name ,bool $isId )","inheritdoc":0,"modifier":["public"],"return":""},"setIdAttributeNode":{"params":{"$attr":"DOMAttr","$isId":""},"docComment":"Declares the attribute specified by node to be of type ID","signature":"public DOMElement::setIdAttributeNode(DOMAttr $attr ,bool $isId )","inheritdoc":0,"modifier":["public"],"return":""},"setIdAttributeNS":{"params":{"$namespaceURI":"","$localName":"","$isId":""},"docComment":"Declares the attribute specified by local name and namespace URI to be of type ID","signature":"public DOMElement::setIdAttributeNS(string $namespaceURI ,string $localName ,bool $isId )","inheritdoc":0,"modifier":["public"],"return":""},"appendChild":{"params":{"$newnode":"DOMNode"},"docComment":"\n   Adds new child at the end of the children\n  ","signature":"public DOMNode::appendChild(DOMNode $newnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"C14N":{"params":{"$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a string","signature":"public DOMNode::C14N(bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"C14NFile":{"params":{"$uri":"","$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a file","signature":"public DOMNode::C14NFile(string $uri ,bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"cloneNode":{"params":{"$deep":""},"docComment":"\n   Clones a node\n  ","signature":"public DOMNode::cloneNode(bool $deep )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"getLineNo":{"params":[],"docComment":"Get line number for a node","signature":"public DOMNode::getLineNo( )","inheritdoc":0,"modifier":["public"],"return":""},"getNodePath":{"params":[],"docComment":"Get an XPath for a node","signature":"public DOMNode::getNodePath( )","inheritdoc":0,"modifier":["public"],"return":""},"hasAttributes":{"params":[],"docComment":"\n   Checks if node has attributes\n  ","signature":"public DOMNode::hasAttributes( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildNodes":{"params":[],"docComment":"\n   Checks if node has children\n  ","signature":"public DOMNode::hasChildNodes( )","inheritdoc":0,"modifier":["public"],"return":""},"insertBefore":{"params":{"$newnode":"DOMNode","$refnode":"DOMNode"},"docComment":"\n   Adds a new child before a reference node\n  ","signature":"public DOMNode::insertBefore(DOMNode $newnode ,DOMNode $refnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"isDefaultNamespace":{"params":{"$namespaceURI":""},"docComment":"Checks if the specified namespaceURI is the default namespace or not","signature":"public DOMNode::isDefaultNamespace(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"isSameNode":{"params":{"$node":"DOMNode"},"docComment":"\n   Indicates if two nodes are the same node\n  ","signature":"public DOMNode::isSameNode(DOMNode $node )","inheritdoc":0,"modifier":["public"],"return":""},"isSupported":{"params":{"$feature":"","$version":""},"docComment":"\n   Checks if feature is supported for specified version\n  ","signature":"public DOMNode::isSupported(string $feature ,string $version )","inheritdoc":0,"modifier":["public"],"return":""},"lookupNamespaceURI":{"params":{"$prefix":""},"docComment":"\n   Gets the namespace URI of the node based on the prefix\n  ","signature":"public DOMNode::lookupNamespaceURI(string $prefix )","inheritdoc":0,"modifier":["public"],"return":""},"lookupPrefix":{"params":{"$namespaceURI":""},"docComment":"\n   Gets the namespace prefix of the node based on the namespace URI\n  ","signature":"public DOMNode::lookupPrefix(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"normalize":{"params":[],"docComment":"\n   Normalizes the node\n  ","signature":"public DOMNode::normalize( )","inheritdoc":0,"modifier":["public"],"return":""},"removeChild":{"params":{"$oldnode":"DOMNode"},"docComment":"\n   Removes child from list of children\n  ","signature":"public DOMNode::removeChild(DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"replaceChild":{"params":{"$newnode":"DOMNode","$oldnode":"DOMNode"},"docComment":"\n   Replaces a child\n  ","signature":"public DOMNode::replaceChild(DOMNode $newnode ,DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"}}},"properties":{"modifier":{"public":["schemaTypeInfo","tagName"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","schemaTypeInfo":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"tagName":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMEntity":{"classname":"DOMEntity","docComment":"","methods":{"modifier":{"public":["appendChild","C14N","C14NFile","cloneNode","getLineNo","getNodePath","hasAttributes","hasChildNodes","insertBefore","isDefaultNamespace","isSameNode","isSupported","lookupNamespaceURI","lookupPrefix","normalize","removeChild","replaceChild"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","appendChild":{"params":{"$newnode":"DOMNode"},"docComment":"\n   Adds new child at the end of the children\n  ","signature":"public DOMNode::appendChild(DOMNode $newnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"C14N":{"params":{"$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a string","signature":"public DOMNode::C14N(bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"C14NFile":{"params":{"$uri":"","$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a file","signature":"public DOMNode::C14NFile(string $uri ,bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"cloneNode":{"params":{"$deep":""},"docComment":"\n   Clones a node\n  ","signature":"public DOMNode::cloneNode(bool $deep )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"getLineNo":{"params":[],"docComment":"Get line number for a node","signature":"public DOMNode::getLineNo( )","inheritdoc":0,"modifier":["public"],"return":""},"getNodePath":{"params":[],"docComment":"Get an XPath for a node","signature":"public DOMNode::getNodePath( )","inheritdoc":0,"modifier":["public"],"return":""},"hasAttributes":{"params":[],"docComment":"\n   Checks if node has attributes\n  ","signature":"public DOMNode::hasAttributes( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildNodes":{"params":[],"docComment":"\n   Checks if node has children\n  ","signature":"public DOMNode::hasChildNodes( )","inheritdoc":0,"modifier":["public"],"return":""},"insertBefore":{"params":{"$newnode":"DOMNode","$refnode":"DOMNode"},"docComment":"\n   Adds a new child before a reference node\n  ","signature":"public DOMNode::insertBefore(DOMNode $newnode ,DOMNode $refnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"isDefaultNamespace":{"params":{"$namespaceURI":""},"docComment":"Checks if the specified namespaceURI is the default namespace or not","signature":"public DOMNode::isDefaultNamespace(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"isSameNode":{"params":{"$node":"DOMNode"},"docComment":"\n   Indicates if two nodes are the same node\n  ","signature":"public DOMNode::isSameNode(DOMNode $node )","inheritdoc":0,"modifier":["public"],"return":""},"isSupported":{"params":{"$feature":"","$version":""},"docComment":"\n   Checks if feature is supported for specified version\n  ","signature":"public DOMNode::isSupported(string $feature ,string $version )","inheritdoc":0,"modifier":["public"],"return":""},"lookupNamespaceURI":{"params":{"$prefix":""},"docComment":"\n   Gets the namespace URI of the node based on the prefix\n  ","signature":"public DOMNode::lookupNamespaceURI(string $prefix )","inheritdoc":0,"modifier":["public"],"return":""},"lookupPrefix":{"params":{"$namespaceURI":""},"docComment":"\n   Gets the namespace prefix of the node based on the namespace URI\n  ","signature":"public DOMNode::lookupPrefix(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"normalize":{"params":[],"docComment":"\n   Normalizes the node\n  ","signature":"public DOMNode::normalize( )","inheritdoc":0,"modifier":["public"],"return":""},"removeChild":{"params":{"$oldnode":"DOMNode"},"docComment":"\n   Removes child from list of children\n  ","signature":"public DOMNode::removeChild(DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"replaceChild":{"params":{"$newnode":"DOMNode","$oldnode":"DOMNode"},"docComment":"\n   Replaces a child\n  ","signature":"public DOMNode::replaceChild(DOMNode $newnode ,DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"}}},"properties":{"modifier":{"public":["publicId","systemId","notationName","actualEncoding","encoding","version"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","publicId":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"systemId":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"notationName":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"actualEncoding":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"encoding":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"version":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMEntityReference":{"classname":"DOMEntityReference","docComment":"","methods":{"modifier":{"public":["__construct","appendChild","C14N","C14NFile","cloneNode","getLineNo","getNodePath","hasAttributes","hasChildNodes","insertBefore","isDefaultNamespace","isSameNode","isSupported","lookupNamespaceURI","lookupPrefix","normalize","removeChild","replaceChild"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$name":""},"docComment":"\n   Creates a new DOMEntityReference object\n  ","signature":"public DOMEntityReference::__construct(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"appendChild":{"params":{"$newnode":"DOMNode"},"docComment":"\n   Adds new child at the end of the children\n  ","signature":"public DOMNode::appendChild(DOMNode $newnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"C14N":{"params":{"$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a string","signature":"public DOMNode::C14N(bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"C14NFile":{"params":{"$uri":"","$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a file","signature":"public DOMNode::C14NFile(string $uri ,bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"cloneNode":{"params":{"$deep":""},"docComment":"\n   Clones a node\n  ","signature":"public DOMNode::cloneNode(bool $deep )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"getLineNo":{"params":[],"docComment":"Get line number for a node","signature":"public DOMNode::getLineNo( )","inheritdoc":0,"modifier":["public"],"return":""},"getNodePath":{"params":[],"docComment":"Get an XPath for a node","signature":"public DOMNode::getNodePath( )","inheritdoc":0,"modifier":["public"],"return":""},"hasAttributes":{"params":[],"docComment":"\n   Checks if node has attributes\n  ","signature":"public DOMNode::hasAttributes( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildNodes":{"params":[],"docComment":"\n   Checks if node has children\n  ","signature":"public DOMNode::hasChildNodes( )","inheritdoc":0,"modifier":["public"],"return":""},"insertBefore":{"params":{"$newnode":"DOMNode","$refnode":"DOMNode"},"docComment":"\n   Adds a new child before a reference node\n  ","signature":"public DOMNode::insertBefore(DOMNode $newnode ,DOMNode $refnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"isDefaultNamespace":{"params":{"$namespaceURI":""},"docComment":"Checks if the specified namespaceURI is the default namespace or not","signature":"public DOMNode::isDefaultNamespace(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"isSameNode":{"params":{"$node":"DOMNode"},"docComment":"\n   Indicates if two nodes are the same node\n  ","signature":"public DOMNode::isSameNode(DOMNode $node )","inheritdoc":0,"modifier":["public"],"return":""},"isSupported":{"params":{"$feature":"","$version":""},"docComment":"\n   Checks if feature is supported for specified version\n  ","signature":"public DOMNode::isSupported(string $feature ,string $version )","inheritdoc":0,"modifier":["public"],"return":""},"lookupNamespaceURI":{"params":{"$prefix":""},"docComment":"\n   Gets the namespace URI of the node based on the prefix\n  ","signature":"public DOMNode::lookupNamespaceURI(string $prefix )","inheritdoc":0,"modifier":["public"],"return":""},"lookupPrefix":{"params":{"$namespaceURI":""},"docComment":"\n   Gets the namespace prefix of the node based on the namespace URI\n  ","signature":"public DOMNode::lookupPrefix(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"normalize":{"params":[],"docComment":"\n   Normalizes the node\n  ","signature":"public DOMNode::normalize( )","inheritdoc":0,"modifier":["public"],"return":""},"removeChild":{"params":{"$oldnode":"DOMNode"},"docComment":"\n   Removes child from list of children\n  ","signature":"public DOMNode::removeChild(DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"replaceChild":{"params":{"$newnode":"DOMNode","$oldnode":"DOMNode"},"docComment":"\n   Replaces a child\n  ","signature":"public DOMNode::replaceChild(DOMNode $newnode ,DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMException":{"classname":"DOMException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":["code"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMImplementation":{"classname":"DOMImplementation","docComment":"","methods":{"modifier":{"public":["__construct","createDocument","createDocumentType","hasFeature"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"\n   Creates a new DOMImplementation object\n  ","signature":"DOMImplementation::__construct( )","inheritdoc":0,"modifier":[],"return":""},"createDocument":{"params":{"$namespaceURI":"","$qualifiedName":"","$doctype":"DOMDocumentType"},"docComment":"\n   Creates a DOMDocument object of the specified type with its document element\n  ","signature":"public DOMImplementation::createDocument([string $namespaceURI] ,[string $qualifiedName] ,[DOMDocumentType $doctype] )","inheritdoc":0,"modifier":["public"],"return":"DOMDocument"},"createDocumentType":{"params":{"$qualifiedName":"","$publicId":"","$systemId":""},"docComment":"\n   Creates an empty DOMDocumentType object\n  ","signature":"public DOMImplementation::createDocumentType([string $qualifiedName] ,[string $publicId] ,[string $systemId] )","inheritdoc":0,"modifier":["public"],"return":"DOMDocumentType"},"hasFeature":{"params":{"$feature":"","$version":""},"docComment":"\n   Test if the DOM implementation implements a specific feature\n  ","signature":"public DOMImplementation::hasFeature(string $feature ,string $version )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMNamedNodeMap":{"classname":"DOMNamedNodeMap","docComment":"","methods":{"modifier":{"public":["getNamedItem","getNamedItemNS","item"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getNamedItem":{"params":{"$name":""},"docComment":"\n   Retrieves a node specified by name\n  ","signature":"DOMNamedNodeMap::getNamedItem(string $name )","inheritdoc":0,"modifier":[],"return":"DOMNode"},"getNamedItemNS":{"params":{"$namespaceURI":"","$localName":""},"docComment":"\n   Retrieves a node specified by local name and namespace URI\n  ","signature":"DOMNamedNodeMap::getNamedItemNS(string $namespaceURI ,string $localName )","inheritdoc":0,"modifier":[],"return":"DOMNode"},"item":{"params":{"$index":""},"docComment":"Retrieves a node specified by index","signature":"DOMNamedNodeMap::item(int $index )","inheritdoc":0,"modifier":[],"return":"DOMNode"}}},"properties":{"modifier":{"public":["length"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","length":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMNode":{"classname":"DOMNode","docComment":"","methods":{"modifier":{"public":["appendChild","C14N","C14NFile","cloneNode","getLineNo","getNodePath","hasAttributes","hasChildNodes","insertBefore","isDefaultNamespace","isSameNode","isSupported","lookupNamespaceURI","lookupPrefix","normalize","removeChild","replaceChild"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","appendChild":{"params":{"$newnode":"DOMNode"},"docComment":"\n   Adds new child at the end of the children\n  ","signature":"public DOMNode::appendChild(DOMNode $newnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"C14N":{"params":{"$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a string","signature":"public DOMNode::C14N(bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"C14NFile":{"params":{"$uri":"","$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a file","signature":"public DOMNode::C14NFile(string $uri ,bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"cloneNode":{"params":{"$deep":""},"docComment":"\n   Clones a node\n  ","signature":"public DOMNode::cloneNode(bool $deep )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"getLineNo":{"params":[],"docComment":"Get line number for a node","signature":"public DOMNode::getLineNo( )","inheritdoc":0,"modifier":["public"],"return":""},"getNodePath":{"params":[],"docComment":"Get an XPath for a node","signature":"public DOMNode::getNodePath( )","inheritdoc":0,"modifier":["public"],"return":""},"hasAttributes":{"params":[],"docComment":"\n   Checks if node has attributes\n  ","signature":"public DOMNode::hasAttributes( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildNodes":{"params":[],"docComment":"\n   Checks if node has children\n  ","signature":"public DOMNode::hasChildNodes( )","inheritdoc":0,"modifier":["public"],"return":""},"insertBefore":{"params":{"$newnode":"DOMNode","$refnode":"DOMNode"},"docComment":"\n   Adds a new child before a reference node\n  ","signature":"public DOMNode::insertBefore(DOMNode $newnode ,DOMNode $refnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"isDefaultNamespace":{"params":{"$namespaceURI":""},"docComment":"Checks if the specified namespaceURI is the default namespace or not","signature":"public DOMNode::isDefaultNamespace(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"isSameNode":{"params":{"$node":"DOMNode"},"docComment":"\n   Indicates if two nodes are the same node\n  ","signature":"public DOMNode::isSameNode(DOMNode $node )","inheritdoc":0,"modifier":["public"],"return":""},"isSupported":{"params":{"$feature":"","$version":""},"docComment":"\n   Checks if feature is supported for specified version\n  ","signature":"public DOMNode::isSupported(string $feature ,string $version )","inheritdoc":0,"modifier":["public"],"return":""},"lookupNamespaceURI":{"params":{"$prefix":""},"docComment":"\n   Gets the namespace URI of the node based on the prefix\n  ","signature":"public DOMNode::lookupNamespaceURI(string $prefix )","inheritdoc":0,"modifier":["public"],"return":""},"lookupPrefix":{"params":{"$namespaceURI":""},"docComment":"\n   Gets the namespace prefix of the node based on the namespace URI\n  ","signature":"public DOMNode::lookupPrefix(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"normalize":{"params":[],"docComment":"\n   Normalizes the node\n  ","signature":"public DOMNode::normalize( )","inheritdoc":0,"modifier":["public"],"return":""},"removeChild":{"params":{"$oldnode":"DOMNode"},"docComment":"\n   Removes child from list of children\n  ","signature":"public DOMNode::removeChild(DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"replaceChild":{"params":{"$newnode":"DOMNode","$oldnode":"DOMNode"},"docComment":"\n   Replaces a child\n  ","signature":"public DOMNode::replaceChild(DOMNode $newnode ,DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"}}},"properties":{"modifier":{"public":["nodeName","nodeValue","nodeType","parentNode","childNodes","firstChild","lastChild","previousSibling","nextSibling","attributes","ownerDocument","namespaceURI","prefix","localName","baseURI","textContent"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","nodeName":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"nodeValue":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"nodeType":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"parentNode":{"type":"DOMNode","Inheritdoc":0,"docComment":"","modifier":["public"]},"childNodes":{"type":"DOMNodeList","Inheritdoc":0,"docComment":"","modifier":["public"]},"firstChild":{"type":"DOMNode","Inheritdoc":0,"docComment":"","modifier":["public"]},"lastChild":{"type":"DOMNode","Inheritdoc":0,"docComment":"","modifier":["public"]},"previousSibling":{"type":"DOMNode","Inheritdoc":0,"docComment":"","modifier":["public"]},"nextSibling":{"type":"DOMNode","Inheritdoc":0,"docComment":"","modifier":["public"]},"attributes":{"type":"DOMNamedNodeMap","Inheritdoc":0,"docComment":"","modifier":["public"]},"ownerDocument":{"type":"DOMDocument","Inheritdoc":0,"docComment":"","modifier":["public"]},"namespaceURI":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"prefix":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"localName":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"baseURI":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"textContent":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMNodeList":{"classname":"DOMNodeList","docComment":"","methods":{"modifier":{"public":["item"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","item":{"params":{"$index":""},"docComment":"\n   Retrieves a node specified by index\n  ","signature":"DOMNodelist::item(int $index )","inheritdoc":0,"modifier":[],"return":"DOMNode"}}},"properties":{"modifier":{"public":["length"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","length":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMNotation":{"classname":"DOMNotation","docComment":"","methods":{"modifier":{"public":["appendChild","C14N","C14NFile","cloneNode","getLineNo","getNodePath","hasAttributes","hasChildNodes","insertBefore","isDefaultNamespace","isSameNode","isSupported","lookupNamespaceURI","lookupPrefix","normalize","removeChild","replaceChild"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","appendChild":{"params":{"$newnode":"DOMNode"},"docComment":"\n   Adds new child at the end of the children\n  ","signature":"public DOMNode::appendChild(DOMNode $newnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"C14N":{"params":{"$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a string","signature":"public DOMNode::C14N(bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"C14NFile":{"params":{"$uri":"","$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a file","signature":"public DOMNode::C14NFile(string $uri ,bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"cloneNode":{"params":{"$deep":""},"docComment":"\n   Clones a node\n  ","signature":"public DOMNode::cloneNode(bool $deep )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"getLineNo":{"params":[],"docComment":"Get line number for a node","signature":"public DOMNode::getLineNo( )","inheritdoc":0,"modifier":["public"],"return":""},"getNodePath":{"params":[],"docComment":"Get an XPath for a node","signature":"public DOMNode::getNodePath( )","inheritdoc":0,"modifier":["public"],"return":""},"hasAttributes":{"params":[],"docComment":"\n   Checks if node has attributes\n  ","signature":"public DOMNode::hasAttributes( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildNodes":{"params":[],"docComment":"\n   Checks if node has children\n  ","signature":"public DOMNode::hasChildNodes( )","inheritdoc":0,"modifier":["public"],"return":""},"insertBefore":{"params":{"$newnode":"DOMNode","$refnode":"DOMNode"},"docComment":"\n   Adds a new child before a reference node\n  ","signature":"public DOMNode::insertBefore(DOMNode $newnode ,DOMNode $refnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"isDefaultNamespace":{"params":{"$namespaceURI":""},"docComment":"Checks if the specified namespaceURI is the default namespace or not","signature":"public DOMNode::isDefaultNamespace(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"isSameNode":{"params":{"$node":"DOMNode"},"docComment":"\n   Indicates if two nodes are the same node\n  ","signature":"public DOMNode::isSameNode(DOMNode $node )","inheritdoc":0,"modifier":["public"],"return":""},"isSupported":{"params":{"$feature":"","$version":""},"docComment":"\n   Checks if feature is supported for specified version\n  ","signature":"public DOMNode::isSupported(string $feature ,string $version )","inheritdoc":0,"modifier":["public"],"return":""},"lookupNamespaceURI":{"params":{"$prefix":""},"docComment":"\n   Gets the namespace URI of the node based on the prefix\n  ","signature":"public DOMNode::lookupNamespaceURI(string $prefix )","inheritdoc":0,"modifier":["public"],"return":""},"lookupPrefix":{"params":{"$namespaceURI":""},"docComment":"\n   Gets the namespace prefix of the node based on the namespace URI\n  ","signature":"public DOMNode::lookupPrefix(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"normalize":{"params":[],"docComment":"\n   Normalizes the node\n  ","signature":"public DOMNode::normalize( )","inheritdoc":0,"modifier":["public"],"return":""},"removeChild":{"params":{"$oldnode":"DOMNode"},"docComment":"\n   Removes child from list of children\n  ","signature":"public DOMNode::removeChild(DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"replaceChild":{"params":{"$newnode":"DOMNode","$oldnode":"DOMNode"},"docComment":"\n   Replaces a child\n  ","signature":"public DOMNode::replaceChild(DOMNode $newnode ,DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"}}},"properties":{"modifier":{"public":["publicId","systemId"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","publicId":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"systemId":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMProcessingInstruction":{"classname":"DOMProcessingInstruction","docComment":"","methods":{"modifier":{"public":["__construct","appendChild","C14N","C14NFile","cloneNode","getLineNo","getNodePath","hasAttributes","hasChildNodes","insertBefore","isDefaultNamespace","isSameNode","isSupported","lookupNamespaceURI","lookupPrefix","normalize","removeChild","replaceChild"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$name":"","$value":""},"docComment":"\n   Creates a new  object\n  ","signature":"public DOMProcessingInstruction::__construct(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"appendChild":{"params":{"$newnode":"DOMNode"},"docComment":"\n   Adds new child at the end of the children\n  ","signature":"public DOMNode::appendChild(DOMNode $newnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"C14N":{"params":{"$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a string","signature":"public DOMNode::C14N(bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"C14NFile":{"params":{"$uri":"","$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a file","signature":"public DOMNode::C14NFile(string $uri ,bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"cloneNode":{"params":{"$deep":""},"docComment":"\n   Clones a node\n  ","signature":"public DOMNode::cloneNode(bool $deep )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"getLineNo":{"params":[],"docComment":"Get line number for a node","signature":"public DOMNode::getLineNo( )","inheritdoc":0,"modifier":["public"],"return":""},"getNodePath":{"params":[],"docComment":"Get an XPath for a node","signature":"public DOMNode::getNodePath( )","inheritdoc":0,"modifier":["public"],"return":""},"hasAttributes":{"params":[],"docComment":"\n   Checks if node has attributes\n  ","signature":"public DOMNode::hasAttributes( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildNodes":{"params":[],"docComment":"\n   Checks if node has children\n  ","signature":"public DOMNode::hasChildNodes( )","inheritdoc":0,"modifier":["public"],"return":""},"insertBefore":{"params":{"$newnode":"DOMNode","$refnode":"DOMNode"},"docComment":"\n   Adds a new child before a reference node\n  ","signature":"public DOMNode::insertBefore(DOMNode $newnode ,DOMNode $refnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"isDefaultNamespace":{"params":{"$namespaceURI":""},"docComment":"Checks if the specified namespaceURI is the default namespace or not","signature":"public DOMNode::isDefaultNamespace(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"isSameNode":{"params":{"$node":"DOMNode"},"docComment":"\n   Indicates if two nodes are the same node\n  ","signature":"public DOMNode::isSameNode(DOMNode $node )","inheritdoc":0,"modifier":["public"],"return":""},"isSupported":{"params":{"$feature":"","$version":""},"docComment":"\n   Checks if feature is supported for specified version\n  ","signature":"public DOMNode::isSupported(string $feature ,string $version )","inheritdoc":0,"modifier":["public"],"return":""},"lookupNamespaceURI":{"params":{"$prefix":""},"docComment":"\n   Gets the namespace URI of the node based on the prefix\n  ","signature":"public DOMNode::lookupNamespaceURI(string $prefix )","inheritdoc":0,"modifier":["public"],"return":""},"lookupPrefix":{"params":{"$namespaceURI":""},"docComment":"\n   Gets the namespace prefix of the node based on the namespace URI\n  ","signature":"public DOMNode::lookupPrefix(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"normalize":{"params":[],"docComment":"\n   Normalizes the node\n  ","signature":"public DOMNode::normalize( )","inheritdoc":0,"modifier":["public"],"return":""},"removeChild":{"params":{"$oldnode":"DOMNode"},"docComment":"\n   Removes child from list of children\n  ","signature":"public DOMNode::removeChild(DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"replaceChild":{"params":{"$newnode":"DOMNode","$oldnode":"DOMNode"},"docComment":"\n   Replaces a child\n  ","signature":"public DOMNode::replaceChild(DOMNode $newnode ,DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"}}},"properties":{"modifier":{"public":["target","data"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","target":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"data":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMText":{"classname":"DOMText","docComment":"","methods":{"modifier":{"public":["isWhitespaceInElementContent","splitText","appendChild","C14N","C14NFile","cloneNode","getLineNo","getNodePath","hasAttributes","hasChildNodes","insertBefore","isDefaultNamespace","isSameNode","isSupported","lookupNamespaceURI","lookupPrefix","normalize","removeChild","replaceChild"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","isWhitespaceInElementContent":{"params":[],"docComment":"\n   Indicates whether this text node contains whitespace\n  ","signature":"public DOMText::isWhitespaceInElementContent( )","inheritdoc":0,"modifier":["public"],"return":""},"splitText":{"params":{"$offset":""},"docComment":"\n   Breaks this node into two nodes at the specified offset\n  ","signature":"public DOMText::splitText(int $offset )","inheritdoc":0,"modifier":["public"],"return":"DOMText"},"appendChild":{"params":{"$newnode":"DOMNode"},"docComment":"\n   Adds new child at the end of the children\n  ","signature":"public DOMNode::appendChild(DOMNode $newnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"C14N":{"params":{"$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a string","signature":"public DOMNode::C14N(bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"C14NFile":{"params":{"$uri":"","$exclusive":"","$with_comments":"","$xpath":"","$ns_prefixes":""},"docComment":"Canonicalize nodes to a file","signature":"public DOMNode::C14NFile(string $uri ,bool $exclusive ,bool $with_comments ,array $xpath ,array $ns_prefixes )","inheritdoc":0,"modifier":["public"],"return":""},"cloneNode":{"params":{"$deep":""},"docComment":"\n   Clones a node\n  ","signature":"public DOMNode::cloneNode(bool $deep )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"getLineNo":{"params":[],"docComment":"Get line number for a node","signature":"public DOMNode::getLineNo( )","inheritdoc":0,"modifier":["public"],"return":""},"getNodePath":{"params":[],"docComment":"Get an XPath for a node","signature":"public DOMNode::getNodePath( )","inheritdoc":0,"modifier":["public"],"return":""},"hasAttributes":{"params":[],"docComment":"\n   Checks if node has attributes\n  ","signature":"public DOMNode::hasAttributes( )","inheritdoc":0,"modifier":["public"],"return":""},"hasChildNodes":{"params":[],"docComment":"\n   Checks if node has children\n  ","signature":"public DOMNode::hasChildNodes( )","inheritdoc":0,"modifier":["public"],"return":""},"insertBefore":{"params":{"$newnode":"DOMNode","$refnode":"DOMNode"},"docComment":"\n   Adds a new child before a reference node\n  ","signature":"public DOMNode::insertBefore(DOMNode $newnode ,DOMNode $refnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"isDefaultNamespace":{"params":{"$namespaceURI":""},"docComment":"Checks if the specified namespaceURI is the default namespace or not","signature":"public DOMNode::isDefaultNamespace(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"isSameNode":{"params":{"$node":"DOMNode"},"docComment":"\n   Indicates if two nodes are the same node\n  ","signature":"public DOMNode::isSameNode(DOMNode $node )","inheritdoc":0,"modifier":["public"],"return":""},"isSupported":{"params":{"$feature":"","$version":""},"docComment":"\n   Checks if feature is supported for specified version\n  ","signature":"public DOMNode::isSupported(string $feature ,string $version )","inheritdoc":0,"modifier":["public"],"return":""},"lookupNamespaceURI":{"params":{"$prefix":""},"docComment":"\n   Gets the namespace URI of the node based on the prefix\n  ","signature":"public DOMNode::lookupNamespaceURI(string $prefix )","inheritdoc":0,"modifier":["public"],"return":""},"lookupPrefix":{"params":{"$namespaceURI":""},"docComment":"\n   Gets the namespace prefix of the node based on the namespace URI\n  ","signature":"public DOMNode::lookupPrefix(string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"normalize":{"params":[],"docComment":"\n   Normalizes the node\n  ","signature":"public DOMNode::normalize( )","inheritdoc":0,"modifier":["public"],"return":""},"removeChild":{"params":{"$oldnode":"DOMNode"},"docComment":"\n   Removes child from list of children\n  ","signature":"public DOMNode::removeChild(DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"replaceChild":{"params":{"$newnode":"DOMNode","$oldnode":"DOMNode"},"docComment":"\n   Replaces a child\n  ","signature":"public DOMNode::replaceChild(DOMNode $newnode ,DOMNode $oldnode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"}}},"properties":{"modifier":{"public":["wholeText"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","wholeText":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"DOMXPath":{"classname":"DOMXPath","docComment":"","methods":{"modifier":{"public":["__construct","evaluate","query","registerNamespace","registerPhpFunctions"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$doc":"DOMDocument"},"docComment":"\n   Creates a new  object\n  ","signature":"public DOMXPath::__construct(DOMDocument $doc )","inheritdoc":0,"modifier":["public"],"return":""},"evaluate":{"params":{"$expression":"","$contextnode":"DOMNode","$registerNodeNS":""},"docComment":"\n   Evaluates the given XPath expression and returns a typed result if possible\n  ","signature":"public DOMXPath::evaluate(string $expression ,DOMNode $contextnode ,[bool $registerNodeNS] )","inheritdoc":0,"modifier":["public"],"return":""},"query":{"params":{"$expression":"","$contextnode":"DOMNode","$registerNodeNS":""},"docComment":"\n   Evaluates the given XPath expression \n  ","signature":"public DOMXPath::query(string $expression ,DOMNode $contextnode ,[bool $registerNodeNS] )","inheritdoc":0,"modifier":["public"],"return":"DOMNodeList"},"registerNamespace":{"params":{"$prefix":"","$namespaceURI":""},"docComment":"\n   Registers the namespace with the  object\n  ","signature":"public DOMXPath::registerNamespace(string $prefix ,string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"registerPhpFunctions":{"params":{"$restrict":""},"docComment":"Register PHP functions as XPath functions","signature":"public DOMXPath::registerPhpFunctions(mixed $restrict )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["document"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","document":{"type":"DOMDocument","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"libXMLError":{"classname":"libXMLError","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":["level","code","column","message","file","line"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","level":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"column":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"mysqli":{"classname":"mysqli","docComment":"","methods":{"modifier":{"public":["autocommit","change_user","character_set_name","close","commit","debug","dump_debug_info","get_charset","get_client_info","get_connection_stats","get_warnings","init","kill","more_results","multi_query","next_result","options","ping","poll","prepare","query","real_connect","escape_string","real_query","reap_async_query","refresh","rollback","rpl_query_type","select_db","send_query","set_charset","set_local_infile_handler","ssl_set","stat","stmt_init","store_result","use_result"],"private":[],"protected":[],"final":[],"static":["poll"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","autocommit":{"params":{"$mode":"","$link":"mysqli"},"docComment":"Turns on or off auto-committing database modifications","signature":"mysqli_autocommit(mysqli $link ,bool $mode )","inheritdoc":0,"modifier":[],"return":""},"change_user":{"params":{"$user":"","$password":"","$database":"","$link":"mysqli"},"docComment":"Changes the user of the specified database connection","signature":"mysqli_change_user(mysqli $link ,string $user ,string $password ,string $database )","inheritdoc":0,"modifier":[],"return":""},"character_set_name":{"params":{"$link":"mysqli"},"docComment":"Returns the default character set for the database connection","signature":"mysqli_character_set_name(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"close":{"params":{"$link":"mysqli"},"docComment":"Closes a previously opened database connection","signature":"mysqli_close(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"commit":{"params":{"$flags":"","$name":"","$link":"mysqli"},"docComment":"Commits the current transaction","signature":"mysqli_commit(mysqli $link ,int $flags ,string $name )","inheritdoc":0,"modifier":[],"return":""},"debug":{"params":{"$message":""},"docComment":"Performs debugging operations","signature":"mysqli_debug(string $message )","inheritdoc":0,"modifier":[],"return":""},"dump_debug_info":{"params":{"$link":"mysqli"},"docComment":"Dump debugging information into the log","signature":"mysqli_dump_debug_info(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"get_charset":{"params":{"$link":"mysqli"},"docComment":"Returns a character set object","signature":"mysqli_get_charset(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"get_client_info":{"params":{"$link":"mysqli"},"docComment":"Get MySQL client info","signature":"mysqli_get_client_info(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"get_connection_stats":{"params":{"$link":"mysqli"},"docComment":"Returns statistics about the client connection","signature":"mysqli_get_connection_stats(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"get_warnings":{"params":{"$link":"mysqli"},"docComment":"Get result of SHOW WARNINGS","signature":"mysqli_get_warnings(mysqli $link )","inheritdoc":0,"modifier":[],"return":"mysqli_warning"},"init":{"params":[],"docComment":"Initializes MySQLi and returns a resource for use with mysqli_real_connect()","signature":"mysqli_init( )","inheritdoc":0,"modifier":[],"return":"mysqli"},"kill":{"params":{"$processid":"","$link":"mysqli"},"docComment":"Asks the server to kill a MySQL thread","signature":"mysqli_kill(mysqli $link ,int $processid )","inheritdoc":0,"modifier":[],"return":""},"more_results":{"params":{"$link":"mysqli"},"docComment":"Check if there are any more query results from a multi query","signature":"mysqli_more_results(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"multi_query":{"params":{"$query":"","$link":"mysqli"},"docComment":"Performs a query on the database","signature":"mysqli_multi_query(mysqli $link ,string $query )","inheritdoc":0,"modifier":[],"return":""},"next_result":{"params":{"$link":"mysqli"},"docComment":"Prepare next result from multi_query","signature":"mysqli_next_result(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"options":{"params":{"$option":"","$value":"","$link":"mysqli"},"docComment":"Set options","signature":"mysqli_options(mysqli $link ,int $option ,mixed $value )","inheritdoc":0,"modifier":[],"return":""},"ping":{"params":{"$link":"mysqli"},"docComment":"Pings a server connection, or tries to reconnect if the connection has gone down","signature":"mysqli_ping(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"poll":{"params":{"&$read":"","&$error":"","&$reject":"","$sec":"","$usec":""},"docComment":"Poll connections","signature":"mysqli_poll(array &$read ,array &$error ,array &$reject ,int $sec ,int $usec )","inheritdoc":0,"modifier":["public","static"],"return":""},"prepare":{"params":{"$query":"","$link":"mysqli"},"docComment":"Prepare an SQL statement for execution","signature":"mysqli_prepare(mysqli $link ,string $query )","inheritdoc":0,"modifier":[],"return":"mysqli_stmt"},"query":{"params":{"$query":"","$resultmode":"","$link":"mysqli"},"docComment":"Performs a query on the database","signature":"mysqli_query(mysqli $link ,string $query ,[int $resultmode] )","inheritdoc":0,"modifier":[],"return":""},"real_connect":{"params":{"$host":"","$username":"","$passwd":"","$dbname":"","$port":"","$socket":"","$flags":"","$link":"mysqli"},"docComment":"Opens a connection to a mysql server","signature":"mysqli_real_connect(mysqli $link ,string $host ,string $username ,string $passwd ,string $dbname ,int $port ,string $socket ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"escape_string":{"params":{"$escapestr":"","$link":"mysqli"},"docComment":"Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection","signature":"mysqli_real_escape_string(mysqli $link ,string $escapestr )","inheritdoc":0,"modifier":[],"return":""},"real_query":{"params":{"$query":"","$link":"mysqli"},"docComment":"Execute an SQL query","signature":"mysqli_real_query(mysqli $link ,string $query )","inheritdoc":0,"modifier":[],"return":""},"reap_async_query":{"params":{"$link":""},"docComment":"Get result from async query","signature":"mysqli_reap_async_query( $link )","inheritdoc":0,"modifier":["public"],"return":"mysqli_result"},"refresh":{"params":{"$options":"","$link":""},"docComment":"Refreshes","signature":"mysqli_refresh(resource $link ,int $options )","inheritdoc":0,"modifier":["public"],"return":""},"rollback":{"params":{"$flags":"","$name":"","$link":"mysqli"},"docComment":"Rolls back current transaction","signature":"mysqli_rollback(mysqli $link ,int $flags ,string $name )","inheritdoc":0,"modifier":[],"return":""},"rpl_query_type":{"params":{"$query":"","$link":"mysqli"},"docComment":"Returns RPL query type","signature":"mysqli_rpl_query_type(mysqli $link ,string $query )","inheritdoc":0,"modifier":[],"return":""},"select_db":{"params":{"$dbname":"","$link":"mysqli"},"docComment":"Selects the default database for database queries","signature":"mysqli_select_db(mysqli $link ,string $dbname )","inheritdoc":0,"modifier":[],"return":""},"send_query":{"params":{"$query":"","$link":"mysqli"},"docComment":"Send the query and return","signature":"mysqli_send_query(mysqli $link ,string $query )","inheritdoc":0,"modifier":[],"return":""},"set_charset":{"params":{"$charset":"","$link":"mysqli"},"docComment":"Sets the default client character set","signature":"mysqli_set_charset(mysqli $link ,string $charset )","inheritdoc":0,"modifier":[],"return":""},"set_local_infile_handler":{"params":{"$link":"mysqli","$read_func":""},"docComment":"Set callback function for LOAD DATA LOCAL INFILE command","signature":"mysqli_set_local_infile_handler(mysqli $link ,callable $read_func )","inheritdoc":0,"modifier":[],"return":""},"ssl_set":{"params":{"$key":"","$cert":"","$ca":"","$capath":"","$cipher":"","$link":"mysqli"},"docComment":"Used for establishing secure connections using SSL","signature":"mysqli_ssl_set(mysqli $link ,string $key ,string $cert ,string $ca ,string $capath ,string $cipher )","inheritdoc":0,"modifier":[],"return":""},"stat":{"params":{"$link":"mysqli"},"docComment":"Gets the current system status","signature":"mysqli_stat(mysqli $link )","inheritdoc":0,"modifier":[],"return":""},"stmt_init":{"params":{"$link":"mysqli"},"docComment":"Initializes a statement and returns an object for use with mysqli_stmt_prepare","signature":"mysqli_stmt_init(mysqli $link )","inheritdoc":0,"modifier":[],"return":"mysqli_stmt"},"store_result":{"params":{"$link":"mysqli"},"docComment":"Transfers a result set from the last query","signature":"mysqli_store_result(mysqli $link )","inheritdoc":0,"modifier":[],"return":"mysqli_result"},"use_result":{"params":{"$link":"mysqli"},"docComment":"Initiate a result set retrieval","signature":"mysqli_use_result(mysqli $link )","inheritdoc":0,"modifier":[],"return":"mysqli_result"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","affected_rows":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"client_info":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"client_version":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"connect_errno":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"connect_error":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"errno":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"error_list":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"error":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"field_count":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"host_info":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"protocol_version":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"server_info":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"server_version":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"info":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"insert_id":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"sqlstate":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"thread_id":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"warning_count":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"mysqli_stmt":{"classname":"mysqli_stmt","docComment":"","methods":{"modifier":{"public":["attr_get","attr_set","bind_param","bind_result","close","data_seek","execute","fetch","free_result","get_result","get_warnings","prepare","reset","result_metadata","send_long_data","store_result"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","attr_get":{"params":{"$attr":"","$stmt":"mysqli_stmt"},"docComment":"Used to get the current value of a statement attribute","signature":"mysqli_stmt_attr_get(mysqli_stmt $stmt ,int $attr )","inheritdoc":0,"modifier":[],"return":""},"attr_set":{"params":{"$attr":"","$mode":"","$stmt":"mysqli_stmt"},"docComment":"Used to modify the behavior of a prepared statement","signature":"mysqli_stmt_attr_set(mysqli_stmt $stmt ,int $attr ,int $mode )","inheritdoc":0,"modifier":[],"return":""},"bind_param":{"params":{"$types":"","&$var1":"","&$...":"","$stmt":"mysqli_stmt"},"docComment":"Binds variables to a prepared statement as parameters","signature":"mysqli_stmt_bind_param(mysqli_stmt $stmt ,string $types ,mixed &$var1 ,mixed &$... )","inheritdoc":0,"modifier":[],"return":""},"bind_result":{"params":{"&$var1":"","&$...":"","$stmt":"mysqli_stmt"},"docComment":"Binds variables to a prepared statement for result storage","signature":"mysqli_stmt_bind_result(mysqli_stmt $stmt ,mixed &$var1 ,mixed &$... )","inheritdoc":0,"modifier":[],"return":""},"close":{"params":{"$stmt":"mysqli_stmt"},"docComment":"Closes a prepared statement","signature":"mysqli_stmt_close(mysqli_stmt $stmt )","inheritdoc":0,"modifier":[],"return":""},"data_seek":{"params":{"$offset":"","$stmt":"mysqli_stmt"},"docComment":"Seeks to an arbitrary row in statement result set","signature":"mysqli_stmt_data_seek(mysqli_stmt $stmt ,int $offset )","inheritdoc":0,"modifier":[],"return":""},"execute":{"params":{"$stmt":"mysqli_stmt"},"docComment":"Executes a prepared Query","signature":"mysqli_stmt_execute(mysqli_stmt $stmt )","inheritdoc":0,"modifier":[],"return":""},"fetch":{"params":{"$stmt":"mysqli_stmt"},"docComment":"Fetch results from a prepared statement into the bound variables","signature":"mysqli_stmt_fetch(mysqli_stmt $stmt )","inheritdoc":0,"modifier":[],"return":""},"free_result":{"params":{"$stmt":"mysqli_stmt"},"docComment":"Frees stored result memory for the given statement handle","signature":"mysqli_stmt_free_result(mysqli_stmt $stmt )","inheritdoc":0,"modifier":[],"return":""},"get_result":{"params":{"$stmt":"mysqli_stmt"},"docComment":"Gets a result set from a prepared statement","signature":"mysqli_stmt_get_result(mysqli_stmt $stmt )","inheritdoc":0,"modifier":[],"return":"mysqli_result"},"get_warnings":{"params":{"$stmt":"mysqli_stmt"},"docComment":"Get result of SHOW WARNINGS","signature":"mysqli_stmt_get_warnings(mysqli_stmt $stmt )","inheritdoc":0,"modifier":[],"return":""},"prepare":{"params":{"$query":"","$stmt":"mysqli_stmt"},"docComment":"Prepare an SQL statement for execution","signature":"mysqli_stmt_prepare(mysqli_stmt $stmt ,string $query )","inheritdoc":0,"modifier":[],"return":""},"reset":{"params":{"$stmt":"mysqli_stmt"},"docComment":"Resets a prepared statement","signature":"mysqli_stmt_reset(mysqli_stmt $stmt )","inheritdoc":0,"modifier":[],"return":""},"result_metadata":{"params":{"$stmt":"mysqli_stmt"},"docComment":"Returns result set metadata from a prepared statement","signature":"mysqli_stmt_result_metadata(mysqli_stmt $stmt )","inheritdoc":0,"modifier":[],"return":"mysqli_result"},"send_long_data":{"params":{"$param_nr":"","$data":"","$stmt":"mysqli_stmt"},"docComment":"Send data in blocks","signature":"mysqli_stmt_send_long_data(mysqli_stmt $stmt ,int $param_nr ,string $data )","inheritdoc":0,"modifier":[],"return":""},"store_result":{"params":{"$stmt":"mysqli_stmt"},"docComment":"Transfers a result set from a prepared statement","signature":"mysqli_stmt_store_result(mysqli_stmt $stmt )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","affected_rows":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"errno":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"error_list":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"error":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"field_count":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"insert_id":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"num_rows":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"param_count":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"sqlstate":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"mysqli_result":{"classname":"mysqli_result","docComment":"","methods":{"modifier":{"public":["data_seek","fetch_all","fetch_array","fetch_assoc","fetch_field_direct","fetch_field","fetch_fields","fetch_object","fetch_row","field_seek","free"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","data_seek":{"params":{"$offset":"","$result":"mysqli_result"},"docComment":"Adjusts the result pointer to an arbitrary row in the result","signature":"mysqli_data_seek(mysqli_result $result ,int $offset )","inheritdoc":0,"modifier":[],"return":""},"fetch_all":{"params":{"$resulttype":"","$result":"mysqli_result"},"docComment":"Fetches all result rows as an associative array, a numeric array, or both","signature":"mysqli_fetch_all(mysqli_result $result ,[int $resulttype] )","inheritdoc":0,"modifier":[],"return":""},"fetch_array":{"params":{"$resulttype":"","$result":"mysqli_result"},"docComment":"Fetch a result row as an associative, a numeric array, or both","signature":"mysqli_fetch_array(mysqli_result $result ,[int $resulttype] )","inheritdoc":0,"modifier":[],"return":""},"fetch_assoc":{"params":{"$result":"mysqli_result"},"docComment":"Fetch a result row as an associative array","signature":"mysqli_fetch_assoc(mysqli_result $result )","inheritdoc":0,"modifier":[],"return":""},"fetch_field_direct":{"params":{"$fieldnr":"","$result":"mysqli_result"},"docComment":"Fetch meta-data for a single field","signature":"mysqli_fetch_field_direct(mysqli_result $result ,int $fieldnr )","inheritdoc":0,"modifier":[],"return":""},"fetch_field":{"params":{"$result":"mysqli_result"},"docComment":"Returns the next field in the result set","signature":"mysqli_fetch_field(mysqli_result $result )","inheritdoc":0,"modifier":[],"return":""},"fetch_fields":{"params":{"$result":"mysqli_result"},"docComment":"Returns an array of objects representing the fields in a result set","signature":"mysqli_fetch_fields(mysqli_result $result )","inheritdoc":0,"modifier":[],"return":""},"fetch_object":{"params":{"$class_name":"","$params":"","$result":"mysqli_result"},"docComment":"Returns the current row of a result set as an object","signature":"mysqli_fetch_object(mysqli_result $result ,string $class_name ,array $params )","inheritdoc":0,"modifier":[],"return":""},"fetch_row":{"params":{"$result":"mysqli_result"},"docComment":"Get a result row as an enumerated array","signature":"mysqli_fetch_row(mysqli_result $result )","inheritdoc":0,"modifier":[],"return":""},"field_seek":{"params":{"$fieldnr":"","$result":"mysqli_result"},"docComment":"Set result pointer to a specified field offset","signature":"mysqli_field_seek(mysqli_result $result ,int $fieldnr )","inheritdoc":0,"modifier":[],"return":""},"free":{"params":{"$result":"mysqli_result"},"docComment":"Frees the memory associated with a result","signature":"mysqli_free_result(mysqli_result $result )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","current_field":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"field_count":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"lengths":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"num_rows":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"mysqli_driver":{"classname":"mysqli_driver","docComment":"","methods":{"modifier":{"public":["embedded_server_end","embedded_server_start"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","embedded_server_end":{"params":[],"docComment":"Stop embedded server","signature":"mysqli_embedded_server_end( )","inheritdoc":0,"modifier":[],"return":""},"embedded_server_start":{"params":{"$start":"","$arguments":"","$groups":""},"docComment":"Initialize and start embedded server","signature":"mysqli_embedded_server_start(bool $start ,array $arguments ,array $groups )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":["client_info","client_version","driver_version","embedded","reconnect","report_mode"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","client_info":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"client_version":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"driver_version":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"embedded":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"reconnect":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"report_mode":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"mysqli_warning":{"classname":"mysqli_warning","docComment":"","methods":{"modifier":{"public":["__construct","next"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public mysqli_warning::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"The next purpose","signature":"public mysqli_warning::next( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["message","sqlstate","errno"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"sqlstate":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"errno":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"mysqli_sql_exception":{"classname":"mysqli_sql_exception","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":["sqlstate","message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","sqlstate":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SimpleXMLElement":{"classname":"SimpleXMLElement","docComment":"","methods":{"modifier":{"public":["addAttribute","addChild","asXML","attributes","children","count","getDocNamespaces","getName","getNamespaces","registerXPathNamespace","xpath"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addAttribute":{"params":{"$name":"","$value":"","$namespace":""},"docComment":"\n   Adds an attribute to the SimpleXML element\n  ","signature":"public SimpleXMLElement::addAttribute(string $name ,string $value ,string $namespace )","inheritdoc":0,"modifier":["public"],"return":""},"addChild":{"params":{"$name":"","$value":"","$namespace":""},"docComment":"\n   Adds a child element to the XML node\n  ","signature":"public SimpleXMLElement::addChild(string $name ,string $value ,string $namespace )","inheritdoc":0,"modifier":["public"],"return":"SimpleXMLElement"},"asXML":{"params":{"$filename":""},"docComment":"\n   Return a well-formed XML string based on SimpleXML element\n  ","signature":"public SimpleXMLElement::asXML(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"attributes":{"params":{"$ns":"","$is_prefix":""},"docComment":"Identifies an element's attributes","signature":"public SimpleXMLElement::attributes([string $ns] ,[bool $is_prefix] )","inheritdoc":0,"modifier":["public"],"return":"SimpleXMLElement"},"children":{"params":{"$ns":"","$is_prefix":""},"docComment":"Finds children of given node","signature":"public SimpleXMLElement::children(string $ns ,[bool $is_prefix] )","inheritdoc":0,"modifier":["public"],"return":"SimpleXMLElement"},"count":{"params":[],"docComment":"Counts the children of an element","signature":"public SimpleXMLElement::count( )","inheritdoc":0,"modifier":["public"],"return":""},"getDocNamespaces":{"params":{"$recursive":"","$from_root":""},"docComment":"\n   Returns namespaces declared in document\n  ","signature":"public SimpleXMLElement::getDocNamespaces([bool $recursive] ,[bool $from_root] )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":[],"docComment":"Gets the name of the XML element","signature":"public SimpleXMLElement::getName( )","inheritdoc":0,"modifier":["public"],"return":""},"getNamespaces":{"params":{"$recursive":""},"docComment":"\n   Returns namespaces used in document\n  ","signature":"public SimpleXMLElement::getNamespaces([bool $recursive] )","inheritdoc":0,"modifier":["public"],"return":""},"registerXPathNamespace":{"params":{"$prefix":"","$ns":""},"docComment":"\n   Creates a prefix\/ns context for the next XPath query\n  ","signature":"public SimpleXMLElement::registerXPathNamespace(string $prefix ,string $ns )","inheritdoc":0,"modifier":["public"],"return":""},"xpath":{"params":{"$path":""},"docComment":"Runs XPath query on XML data","signature":"public SimpleXMLElement::xpath(string $path )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SimpleXMLIterator":{"classname":"SimpleXMLIterator","docComment":"","methods":{"modifier":{"public":["current","getChildren","hasChildren","key","next","rewind","valid","addAttribute","addChild","asXML","attributes","children","count","getDocNamespaces","getName","getNamespaces","registerXPathNamespace","xpath"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","current":{"params":[],"docComment":"Returns the current element","signature":"public SimpleXMLIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getChildren":{"params":[],"docComment":"Returns the sub-elements of the current element","signature":"public SimpleXMLIterator::getChildren( )","inheritdoc":0,"modifier":["public"],"return":"SimpleXMLIterator"},"hasChildren":{"params":[],"docComment":"Checks whether the current element has sub elements.","signature":"public SimpleXMLIterator::hasChildren( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Return current key","signature":"public SimpleXMLIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move to next element","signature":"public SimpleXMLIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind to the first element","signature":"public SimpleXMLIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check whether the current element is valid","signature":"public SimpleXMLIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""},"addAttribute":{"params":{"$name":"","$value":"","$namespace":""},"docComment":"\n   Adds an attribute to the SimpleXML element\n  ","signature":"public SimpleXMLElement::addAttribute(string $name ,string $value ,string $namespace )","inheritdoc":0,"modifier":["public"],"return":""},"addChild":{"params":{"$name":"","$value":"","$namespace":""},"docComment":"\n   Adds a child element to the XML node\n  ","signature":"public SimpleXMLElement::addChild(string $name ,string $value ,string $namespace )","inheritdoc":0,"modifier":["public"],"return":"SimpleXMLElement"},"asXML":{"params":{"$filename":""},"docComment":"\n   Return a well-formed XML string based on SimpleXML element\n  ","signature":"public SimpleXMLElement::asXML(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"attributes":{"params":{"$ns":"","$is_prefix":""},"docComment":"Identifies an element's attributes","signature":"public SimpleXMLElement::attributes([string $ns] ,[bool $is_prefix] )","inheritdoc":0,"modifier":["public"],"return":"SimpleXMLElement"},"children":{"params":{"$ns":"","$is_prefix":""},"docComment":"Finds children of given node","signature":"public SimpleXMLElement::children(string $ns ,[bool $is_prefix] )","inheritdoc":0,"modifier":["public"],"return":"SimpleXMLElement"},"count":{"params":[],"docComment":"Counts the children of an element","signature":"public SimpleXMLElement::count( )","inheritdoc":0,"modifier":["public"],"return":""},"getDocNamespaces":{"params":{"$recursive":"","$from_root":""},"docComment":"\n   Returns namespaces declared in document\n  ","signature":"public SimpleXMLElement::getDocNamespaces([bool $recursive] ,[bool $from_root] )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":[],"docComment":"Gets the name of the XML element","signature":"public SimpleXMLElement::getName( )","inheritdoc":0,"modifier":["public"],"return":""},"getNamespaces":{"params":{"$recursive":""},"docComment":"\n   Returns namespaces used in document\n  ","signature":"public SimpleXMLElement::getNamespaces([bool $recursive] )","inheritdoc":0,"modifier":["public"],"return":""},"registerXPathNamespace":{"params":{"$prefix":"","$ns":""},"docComment":"\n   Creates a prefix\/ns context for the next XPath query\n  ","signature":"public SimpleXMLElement::registerXPathNamespace(string $prefix ,string $ns )","inheritdoc":0,"modifier":["public"],"return":""},"xpath":{"params":{"$path":""},"docComment":"Runs XPath query on XML data","signature":"public SimpleXMLElement::xpath(string $path )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SNMP":{"classname":"SNMP","docComment":"","methods":{"modifier":{"public":["close","get","getErrno","getError","getnext","set","setSecurity","walk"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","close":{"params":[],"docComment":"Close  session","signature":"public SNMP::close( )","inheritdoc":0,"modifier":["public"],"return":""},"get":{"params":{"$object_id":"","$preserve_keys":""},"docComment":"Fetch an  object","signature":"public SNMP::get(mixed $object_id ,[bool $preserve_keys] )","inheritdoc":0,"modifier":["public"],"return":""},"getErrno":{"params":[],"docComment":"Get last error code","signature":"public SNMP::getErrno( )","inheritdoc":0,"modifier":["public"],"return":""},"getError":{"params":[],"docComment":"Get last error message","signature":"public SNMP::getError( )","inheritdoc":0,"modifier":["public"],"return":""},"getnext":{"params":{"$object_id":""},"docComment":"Fetch an  object which\n  follows the given object id\n  ","signature":"public SNMP::getnext(mixed $object_id )","inheritdoc":0,"modifier":["public"],"return":""},"set":{"params":{"$object_id":"","$type":"","$value":""},"docComment":"Set the value of an SNMP object","signature":"public SNMP::set(mixed $object_id ,mixed $type ,mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"setSecurity":{"params":{"$sec_level":"","$auth_protocol":""},"docComment":"Configures security-related v3 session parameters","signature":"public SNMP::setSecurity(string $sec_level ,[string $auth_protocol] )","inheritdoc":0,"modifier":["public"],"return":""},"walk":{"params":{"$object_id":"","$suffix_as_key":"","$max_repetitions":"","$non_repeaters":""},"docComment":"Fetch  object subtree","signature":"public SNMP::walk(string $object_id ,[bool $suffix_as_key] ,int $max_repetitions ,int $non_repeaters )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["max_oids","valueretrieval","quick_print","enum_print","oid_output_format","oid_increasing_check","exceptions_enabled","info"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["ERRNO_NOERROR","ERRNO_GENERIC","ERRNO_TIMEOUT","ERRNO_ERROR_IN_REPLY","ERRNO_OID_NOT_INCREASING","ERRNO_OID_PARSING_ERROR","ERRNO_MULTIPLE_SET_QUERIES","ERRNO_ANY","VERSION_1","VERSION_2C","VERSION_2c","VERSION_3"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","max_oids":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"valueretrieval":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"quick_print":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"enum_print":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"oid_output_format":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"oid_increasing_check":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"exceptions_enabled":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"info":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"ERRNO_NOERROR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ERRNO_GENERIC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ERRNO_TIMEOUT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ERRNO_ERROR_IN_REPLY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ERRNO_OID_NOT_INCREASING":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ERRNO_OID_PARSING_ERROR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ERRNO_MULTIPLE_SET_QUERIES":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ERRNO_ANY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"VERSION_1":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"VERSION_2C":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"VERSION_2c":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"VERSION_3":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SNMPException":{"classname":"SNMPException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["code","message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SoapClient":{"classname":"SoapClient","docComment":"","methods":{"modifier":{"public":["__call","SoapClient","__doRequest","__getFunctions","__getLastRequest","__getLastRequestHeaders","__getLastResponse","__getLastResponseHeaders","__getTypes","__setCookie","__setLocation","__setSoapHeaders","__soapCall","SoapClient"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__call":{"params":{"$function_name":"","$arguments":""},"docComment":"Calls a SOAP function (deprecated)","signature":"public SoapClient::__call(string $function_name ,string $arguments )","inheritdoc":0,"modifier":["public"],"return":""},"SoapClient":{"params":{"$wsdl":"","$options":""},"docComment":"SoapClient constructor","signature":"public SoapClient::SoapClient(mixed $wsdl ,array $options )","inheritdoc":0,"modifier":["public"],"return":""},"__doRequest":{"params":{"$request":"","$location":"","$action":"","$version":"","$one_way":""},"docComment":"Performs a SOAP request","signature":"public SoapClient::__doRequest(string $request ,string $location ,string $action ,int $version ,[int $one_way] )","inheritdoc":0,"modifier":["public"],"return":""},"__getFunctions":{"params":[],"docComment":"Returns list of available SOAP functions","signature":"public SoapClient::__getFunctions( )","inheritdoc":0,"modifier":["public"],"return":""},"__getLastRequest":{"params":[],"docComment":"Returns last SOAP request","signature":"public SoapClient::__getLastRequest( )","inheritdoc":0,"modifier":["public"],"return":""},"__getLastRequestHeaders":{"params":[],"docComment":"Returns the SOAP headers from the last request","signature":"public SoapClient::__getLastRequestHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"__getLastResponse":{"params":[],"docComment":"Returns last SOAP response","signature":"public SoapClient::__getLastResponse( )","inheritdoc":0,"modifier":["public"],"return":""},"__getLastResponseHeaders":{"params":[],"docComment":"Returns the SOAP headers from the last response","signature":"public SoapClient::__getLastResponseHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"__getTypes":{"params":[],"docComment":"Returns a list of SOAP types","signature":"public SoapClient::__getTypes( )","inheritdoc":0,"modifier":["public"],"return":""},"__setCookie":{"params":{"$name":"","$value":""},"docComment":"The __setCookie purpose","signature":"public SoapClient::__setCookie(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"__setLocation":{"params":{"$new_location":""},"docComment":"Sets the location of the Web service to use","signature":"public SoapClient::__setLocation(string $new_location )","inheritdoc":0,"modifier":["public"],"return":""},"__setSoapHeaders":{"params":{"$soapheaders":""},"docComment":"Sets SOAP headers for subsequent calls","signature":"public SoapClient::__setSoapHeaders(mixed $soapheaders )","inheritdoc":0,"modifier":["public"],"return":""},"__soapCall":{"params":{"$function_name":"","$arguments":"","$options":"","$input_headers":"","&$output_headers":""},"docComment":"Calls a SOAP function","signature":"public SoapClient::__soapCall(string $function_name ,array $arguments ,array $options ,mixed $input_headers ,array &$output_headers )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SoapServer":{"classname":"SoapServer","docComment":"","methods":{"modifier":{"public":["addFunction","addSoapHeader","__construct","fault","getFunctions","handle","setClass","setObject","setPersistence","SoapServer"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addFunction":{"params":{"$functions":""},"docComment":"Adds one or more functions to handle SOAP requests","signature":"public SoapServer::addFunction(mixed $functions )","inheritdoc":0,"modifier":["public"],"return":""},"addSoapHeader":{"params":{"$object":"SoapHeader"},"docComment":"Add a SOAP header to the response","signature":"public SoapServer::addSoapHeader(SoapHeader $object )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$wsdl":"","$options":""},"docComment":"SoapServer constructor","signature":"public SoapServer::__construct(mixed $wsdl ,array $options )","inheritdoc":0,"modifier":["public"],"return":""},"fault":{"params":{"$code":"","$string":"","$actor":"","$details":"","$name":""},"docComment":"Issue SoapServer fault indicating an error","signature":"public SoapServer::fault(string $code ,string $string ,string $actor ,string $details ,string $name )","inheritdoc":0,"modifier":["public"],"return":""},"getFunctions":{"params":[],"docComment":"Returns list of defined functions","signature":"public SoapServer::getFunctions( )","inheritdoc":0,"modifier":["public"],"return":""},"handle":{"params":{"$soap_request":""},"docComment":"Handles a SOAP request","signature":"public SoapServer::handle(string $soap_request )","inheritdoc":0,"modifier":["public"],"return":""},"setClass":{"params":{"$class_name":"","$args":"","$...":""},"docComment":"Sets the class which handles SOAP requests","signature":"public SoapServer::setClass(string $class_name ,mixed $args ,mixed $... )","inheritdoc":0,"modifier":["public"],"return":""},"setObject":{"params":{"$object":""},"docComment":"Sets the object which will be used to handle SOAP requests","signature":"public SoapServer::setObject(object $object )","inheritdoc":0,"modifier":["public"],"return":""},"setPersistence":{"params":{"$mode":""},"docComment":"Sets SoapServer persistence mode","signature":"public SoapServer::setPersistence(int $mode )","inheritdoc":0,"modifier":["public"],"return":""},"SoapServer":{"params":{"$wsdl":"","$options":""},"docComment":"SoapServer constructor","signature":"public SoapServer::SoapServer(mixed $wsdl ,array $options )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SoapFault":{"classname":"SoapFault","docComment":"","methods":{"modifier":{"public":["__construct","SoapFault","__toString","getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$faultcode":"","$faultstring":"","$faultactor":"","$detail":"","$faultname":"","$headerfault":""},"docComment":"SoapFault constructor","signature":"SoapFault::__construct(string $faultcode ,string $faultstring ,string $faultactor ,string $detail ,string $faultname ,string $headerfault )","inheritdoc":0,"modifier":[],"return":""},"SoapFault":{"params":{"$faultcode":"","$faultstring":"","$faultactor":"","$detail":"","$faultname":"","$headerfault":""},"docComment":"SoapFault constructor","signature":"SoapFault::SoapFault(string $faultcode ,string $faultstring ,string $faultactor ,string $detail ,string $faultname ,string $headerfault )","inheritdoc":0,"modifier":[],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SoapHeader":{"classname":"SoapHeader","docComment":"","methods":{"modifier":{"public":["__construct","SoapHeader"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$namespace":"","$name":"","$data":"","$mustunderstand":"","$actor":""},"docComment":"SoapHeader constructor","signature":"SoapHeader::__construct(string $namespace ,string $name ,mixed $data ,bool $mustunderstand ,string $actor )","inheritdoc":0,"modifier":[],"return":""},"SoapHeader":{"params":{"$namespace":"","$name":"","$data":"","$mustunderstand":"","$actor":""},"docComment":"SoapHeader constructor","signature":"SoapHeader::SoapHeader(string $namespace ,string $name ,mixed $data ,[bool $mustunderstand] ,string $actor )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SoapParam":{"classname":"SoapParam","docComment":"","methods":{"modifier":{"public":["__construct","SoapParam"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$data":"","$name":""},"docComment":"SoapParam constructor","signature":"SoapParam::__construct(mixed $data ,string $name )","inheritdoc":0,"modifier":[],"return":""},"SoapParam":{"params":{"$data":"","$name":""},"docComment":"SoapParam constructor","signature":"SoapParam::SoapParam(mixed $data ,string $name )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SoapVar":{"classname":"SoapVar","docComment":"","methods":{"modifier":{"public":["__construct","SoapVar"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$data":"","$encoding":"","$type_name":"","$type_namespace":"","$node_name":"","$node_namespace":""},"docComment":"SoapVar constructor","signature":"SoapVar::__construct(string $data ,string $encoding ,string $type_name ,string $type_namespace ,string $node_name ,string $node_namespace )","inheritdoc":0,"modifier":[],"return":""},"SoapVar":{"params":{"$data":"","$encoding":"","$type_name":"","$type_namespace":"","$node_name":"","$node_namespace":""},"docComment":"SoapVar constructor","signature":"SoapVar::SoapVar(mixed $data ,string $encoding ,string $type_name ,string $type_namespace ,string $node_name ,string $node_namespace )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"tidy":{"classname":"tidy","docComment":"","methods":{"modifier":{"public":["body","cleanRepair","__construct","diagnose","getConfig","getHtmlVer","getOpt","getOptDoc","getRelease","getStatus","head","html","isXhtml","isXml","parseFile","parseString","repairFile","repairString","root"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","body":{"params":{"$object":"tidy"},"docComment":"Returns a  object starting from the <body> tag of the tidy parse tree","signature":"tidy_get_body(tidy $object )","inheritdoc":0,"modifier":[],"return":"tidyNode"},"cleanRepair":{"params":{"$object":"tidy"},"docComment":"Execute configured cleanup and repair operations on parsed markup","signature":"tidy_clean_repair(tidy $object )","inheritdoc":0,"modifier":[],"return":""},"__construct":{"params":{"$filename":"","$config":"","$encoding":"","$use_include_path":""},"docComment":"Constructs a new  object","signature":"tidy::__construct(string $filename ,mixed $config ,string $encoding ,bool $use_include_path )","inheritdoc":0,"modifier":[],"return":""},"diagnose":{"params":{"$object":"tidy"},"docComment":"Run configured diagnostics on parsed and repaired markup","signature":"tidy_diagnose(tidy $object )","inheritdoc":0,"modifier":[],"return":""},"getConfig":{"params":{"$object":"tidy"},"docComment":"Get current Tidy configuration","signature":"tidy_get_config(tidy $object )","inheritdoc":0,"modifier":[],"return":""},"getHtmlVer":{"params":{"$object":"tidy"},"docComment":"Get the Detected HTML version for the specified document","signature":"tidy_get_html_ver(tidy $object )","inheritdoc":0,"modifier":[],"return":""},"getOpt":{"params":{"$option":"","$object":"tidy"},"docComment":"Returns the value of the specified configuration option for the tidy document","signature":"tidy_getopt(tidy $object ,string $option )","inheritdoc":0,"modifier":[],"return":""},"getOptDoc":{"params":{"$optname":"","$object":"tidy"},"docComment":"\n   Returns the documentation for the given option name\n  ","signature":"tidy_get_opt_doc(tidy $object ,string $optname )","inheritdoc":0,"modifier":[],"return":""},"getRelease":{"params":[],"docComment":"Get release date (version) for Tidy library","signature":"tidy_get_release( )","inheritdoc":0,"modifier":[],"return":""},"getStatus":{"params":{"$object":"tidy"},"docComment":"Get status of specified document","signature":"tidy_get_status(tidy $object )","inheritdoc":0,"modifier":[],"return":""},"head":{"params":{"$object":"tidy"},"docComment":"Returns a  object starting from the <head> tag of the tidy parse tree","signature":"tidy_get_head(tidy $object )","inheritdoc":0,"modifier":[],"return":"tidyNode"},"html":{"params":{"$object":"tidy"},"docComment":"Returns a  object starting from the <html> tag of the tidy parse tree","signature":"tidy_get_html(tidy $object )","inheritdoc":0,"modifier":[],"return":"tidyNode"},"isXhtml":{"params":{"$object":"tidy"},"docComment":"Indicates if the document is a XHTML document","signature":"tidy_is_xhtml(tidy $object )","inheritdoc":0,"modifier":[],"return":""},"isXml":{"params":{"$object":"tidy"},"docComment":"Indicates if the document is a generic (non HTML\/XHTML) XML document","signature":"tidy_is_xml(tidy $object )","inheritdoc":0,"modifier":[],"return":""},"parseFile":{"params":{"$filename":"","$config":"","$encoding":"","$use_include_path":""},"docComment":"Parse markup in file or URI","signature":"tidy_parse_file(string $filename ,mixed $config ,string $encoding ,[bool $use_include_path] )","inheritdoc":0,"modifier":[],"return":"tidy"},"parseString":{"params":{"$input":"","$config":"","$encoding":""},"docComment":"Parse a document stored in a string","signature":"tidy_parse_string(string $input ,mixed $config ,string $encoding )","inheritdoc":0,"modifier":[],"return":"tidy"},"repairFile":{"params":{"$filename":"","$config":"","$encoding":"","$use_include_path":""},"docComment":"Repair a file and return it as a string","signature":"tidy_repair_file(string $filename ,mixed $config ,string $encoding ,[bool $use_include_path] )","inheritdoc":0,"modifier":[],"return":""},"repairString":{"params":{"$data":"","$config":"","$encoding":""},"docComment":"Repair a string using an optionally provided configuration file","signature":"tidy_repair_string(string $data ,mixed $config ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"root":{"params":{"$object":"tidy"},"docComment":"Returns a  object representing the root of the tidy parse tree","signature":"tidy_get_root(tidy $object )","inheritdoc":0,"modifier":[],"return":"tidyNode"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","errorBuffer":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"tidyNode":{"classname":"tidyNode","docComment":"","methods":{"modifier":{"public":["getParent","hasChildren","hasSiblings","isAsp","isComment","isHtml","isJste","isPhp","isText"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getParent":{"params":[],"docComment":"Returns the parent node of the current node","signature":"tidyNode::getParent( )","inheritdoc":0,"modifier":[],"return":"tidyNode"},"hasChildren":{"params":[],"docComment":"Checks if a node has children","signature":"tidyNode::hasChildren( )","inheritdoc":0,"modifier":[],"return":""},"hasSiblings":{"params":[],"docComment":"Checks if a node has siblings","signature":"tidyNode::hasSiblings( )","inheritdoc":0,"modifier":[],"return":""},"isAsp":{"params":[],"docComment":"Checks if this node is ASP","signature":"tidyNode::isAsp( )","inheritdoc":0,"modifier":[],"return":""},"isComment":{"params":[],"docComment":"Checks if a node represents a comment","signature":"tidyNode::isComment( )","inheritdoc":0,"modifier":[],"return":""},"isHtml":{"params":[],"docComment":"Checks if a node is part of a HTML document","signature":"tidyNode::isHtml( )","inheritdoc":0,"modifier":[],"return":""},"isJste":{"params":[],"docComment":"Checks if this node is JSTE","signature":"tidyNode::isJste( )","inheritdoc":0,"modifier":[],"return":""},"isPhp":{"params":[],"docComment":"Checks if a node is PHP","signature":"tidyNode::isPhp( )","inheritdoc":0,"modifier":[],"return":""},"isText":{"params":[],"docComment":"Checks if a node represents text (no markup)","signature":"tidyNode::isText( )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","value":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"name":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"type":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"column":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"proprietary":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"id":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"attribute":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"child":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"XMLReader":{"classname":"XMLReader","docComment":"","methods":{"modifier":{"public":["close","expand","getAttribute","getAttributeNo","getAttributeNs","getParserProperty","isValid","lookupNamespace","moveToAttribute","moveToAttributeNo","moveToAttributeNs","moveToElement","moveToFirstAttribute","moveToNextAttribute","next","open","read","readInnerXML","readOuterXML","readString","setParserProperty","setRelaxNGSchema","setRelaxNGSchemaSource","setSchema","xml"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","close":{"params":[],"docComment":"Close the XMLReader input","signature":"public XMLReader::close( )","inheritdoc":0,"modifier":["public"],"return":""},"expand":{"params":{"$basenode":"DOMNode"},"docComment":"Returns a copy of the current node as a DOM object","signature":"public XMLReader::expand(DOMNode $basenode )","inheritdoc":0,"modifier":["public"],"return":"DOMNode"},"getAttribute":{"params":{"$name":""},"docComment":"Get the value of a named attribute","signature":"public XMLReader::getAttribute(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"getAttributeNo":{"params":{"$index":""},"docComment":"Get the value of an attribute by index","signature":"public XMLReader::getAttributeNo(int $index )","inheritdoc":0,"modifier":["public"],"return":""},"getAttributeNs":{"params":{"$localName":"","$namespaceURI":""},"docComment":"Get the value of an attribute by localname and URI","signature":"public XMLReader::getAttributeNs(string $localName ,string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"getParserProperty":{"params":{"$property":""},"docComment":"\n   Indicates if specified property has been set\n  ","signature":"public XMLReader::getParserProperty(int $property )","inheritdoc":0,"modifier":["public"],"return":""},"isValid":{"params":[],"docComment":"Indicates if the parsed document is valid","signature":"public XMLReader::isValid( )","inheritdoc":0,"modifier":["public"],"return":""},"lookupNamespace":{"params":{"$prefix":""},"docComment":"Lookup namespace for a prefix","signature":"public XMLReader::lookupNamespace(string $prefix )","inheritdoc":0,"modifier":["public"],"return":""},"moveToAttribute":{"params":{"$name":""},"docComment":"Move cursor to a named attribute","signature":"public XMLReader::moveToAttribute(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"moveToAttributeNo":{"params":{"$index":""},"docComment":"Move cursor to an attribute by index","signature":"public XMLReader::moveToAttributeNo(int $index )","inheritdoc":0,"modifier":["public"],"return":""},"moveToAttributeNs":{"params":{"$localName":"","$namespaceURI":""},"docComment":"Move cursor to a named attribute","signature":"public XMLReader::moveToAttributeNs(string $localName ,string $namespaceURI )","inheritdoc":0,"modifier":["public"],"return":""},"moveToElement":{"params":[],"docComment":"Position cursor on the parent Element of current Attribute","signature":"public XMLReader::moveToElement( )","inheritdoc":0,"modifier":["public"],"return":""},"moveToFirstAttribute":{"params":[],"docComment":"Position cursor on the first Attribute","signature":"public XMLReader::moveToFirstAttribute( )","inheritdoc":0,"modifier":["public"],"return":""},"moveToNextAttribute":{"params":[],"docComment":"Position cursor on the next Attribute","signature":"public XMLReader::moveToNextAttribute( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":{"$localname":""},"docComment":"Move cursor to next node skipping all subtrees","signature":"public XMLReader::next(string $localname )","inheritdoc":0,"modifier":["public"],"return":""},"open":{"params":{"$URI":"","$encoding":"","$options":""},"docComment":"Set the URI containing the XML to parse","signature":"public XMLReader::open(string $URI ,string $encoding ,[int $options] )","inheritdoc":0,"modifier":["public"],"return":""},"read":{"params":[],"docComment":"Move to next node in document","signature":"public XMLReader::read( )","inheritdoc":0,"modifier":["public"],"return":""},"readInnerXML":{"params":[],"docComment":"Retrieve XML from current node","signature":"public XMLReader::readInnerXML( )","inheritdoc":0,"modifier":["public"],"return":""},"readOuterXML":{"params":[],"docComment":"Retrieve XML from current node, including it self","signature":"public XMLReader::readOuterXML( )","inheritdoc":0,"modifier":["public"],"return":""},"readString":{"params":[],"docComment":"Reads the contents of the current node as a string","signature":"public XMLReader::readString( )","inheritdoc":0,"modifier":["public"],"return":""},"setParserProperty":{"params":{"$property":"","$value":""},"docComment":"Set parser options","signature":"public XMLReader::setParserProperty(int $property ,bool $value )","inheritdoc":0,"modifier":["public"],"return":""},"setRelaxNGSchema":{"params":{"$filename":""},"docComment":"Set the filename or URI for a RelaxNG Schema","signature":"public XMLReader::setRelaxNGSchema(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"setRelaxNGSchemaSource":{"params":{"$source":""},"docComment":"Set the data containing a RelaxNG Schema","signature":"public XMLReader::setRelaxNGSchemaSource(string $source )","inheritdoc":0,"modifier":["public"],"return":""},"setSchema":{"params":{"$filename":""},"docComment":"Validate document against XSD","signature":"public XMLReader::setSchema(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"xml":{"params":{"$source":"","$encoding":"","$options":""},"docComment":"Set the data containing the XML to parse","signature":"public XMLReader::xml(string $source ,string $encoding ,[int $options] )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["attributeCount","baseURI","depth","hasAttributes","hasValue","isDefault","isEmptyElement","localName","name","namespaceURI","nodeType","prefix","value","xmlLang"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["NONE","ELEMENT","ATTRIBUTE","TEXT","CDATA","ENTITY_REF","ENTITY","PI","COMMENT","DOC","DOC_TYPE","DOC_FRAGMENT","NOTATION","WHITESPACE","SIGNIFICANT_WHITESPACE","END_ELEMENT","END_ENTITY","XML_DECLARATION","LOADDTD","DEFAULTATTRS","VALIDATE","SUBST_ENTITIES"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","NONE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ELEMENT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TEXT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CDATA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ENTITY_REF":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ENTITY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PI":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"COMMENT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DOC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DOC_TYPE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DOC_FRAGMENT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"NOTATION":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WHITESPACE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SIGNIFICANT_WHITESPACE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"END_ELEMENT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"END_ENTITY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"XML_DECLARATION":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LOADDTD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DEFAULTATTRS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"VALIDATE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SUBST_ENTITIES":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"attributeCount":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"baseURI":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"depth":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"hasAttributes":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"hasValue":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"isDefault":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"isEmptyElement":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"localName":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"namespaceURI":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"nodeType":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"prefix":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"value":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"xmlLang":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"XSLTProcessor":{"classname":"XSLTProcessor","docComment":"","methods":{"modifier":{"public":["getParameter","getSecurityPrefs","hasExsltSupport","importStylesheet","registerPHPFunctions","removeParameter","setParameter","setProfiling","setSecurityPrefs","transformToDoc","transformToURI","transformToXML"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getParameter":{"params":{"$namespaceURI":"","$localName":""},"docComment":"Get value of a parameter","signature":"XSLTProcessor::getParameter(string $namespaceURI ,string $localName )","inheritdoc":0,"modifier":[],"return":""},"getSecurityPrefs":{"params":[],"docComment":"Get security preferences","signature":"public XsltProcessor::getSecurityPrefs( )","inheritdoc":0,"modifier":["public"],"return":""},"hasExsltSupport":{"params":[],"docComment":"Determine if PHP has EXSLT support","signature":"XSLTProcessor::hasExsltSupport( )","inheritdoc":0,"modifier":[],"return":""},"importStylesheet":{"params":{"$stylesheet":""},"docComment":"Import stylesheet","signature":"XSLTProcessor::importStylesheet(object $stylesheet )","inheritdoc":0,"modifier":[],"return":""},"registerPHPFunctions":{"params":{"$restrict":""},"docComment":"Enables the ability to use PHP functions as XSLT functions","signature":"XSLTProcessor::registerPHPFunctions(mixed $restrict )","inheritdoc":0,"modifier":[],"return":""},"removeParameter":{"params":{"$namespaceURI":"","$localName":""},"docComment":"Remove parameter","signature":"XSLTProcessor::removeParameter(string $namespaceURI ,string $localName )","inheritdoc":0,"modifier":[],"return":""},"setParameter":{"params":{"$namespace":"","$name":"","$value":"","$options":""},"docComment":"Set value for a parameter","signature":"XSLTProcessor::setParameter(string $namespace ,array $options )","inheritdoc":0,"modifier":[],"return":""},"setProfiling":{"params":{"$filename":""},"docComment":"Sets profiling output file","signature":"XSLTProcessor::setProfiling(string $filename )","inheritdoc":0,"modifier":[],"return":""},"setSecurityPrefs":{"params":{"$securityPrefs":""},"docComment":"Set security preferences","signature":"public XsltProcessor::setSecurityPrefs(int $securityPrefs )","inheritdoc":0,"modifier":["public"],"return":""},"transformToDoc":{"params":{"$doc":"DOMNode"},"docComment":"Transform to a DOMDocument","signature":"XSLTProcessor::transformToDoc(DOMNode $doc )","inheritdoc":0,"modifier":[],"return":"DOMDocument"},"transformToURI":{"params":{"$doc":"DOMDocument","$uri":""},"docComment":"Transform to URI","signature":"XSLTProcessor::transformToURI(DOMDocument $doc ,string $uri )","inheritdoc":0,"modifier":[],"return":""},"transformToXML":{"params":{"$doc":"DOMDocument"},"docComment":"Transform to XML","signature":"XSLTProcessor::transformToXML(DOMDocument $doc )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ZipArchive":{"classname":"ZipArchive","docComment":"","methods":{"modifier":{"public":["addEmptyDir","addFile","addFromString","addGlob","addPattern","close","deleteIndex","deleteName","extractTo","getArchiveComment","getCommentIndex","getCommentName","getFromIndex","getFromName","getNameIndex","getStatusString","getStream","locateName","open","renameIndex","renameName","setArchiveComment","setCommentIndex","setCommentName","statIndex","statName","unchangeAll","unchangeArchive","unchangeIndex","unchangeName"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addEmptyDir":{"params":{"$dirname":""},"docComment":"Add a new directory","signature":"ZipArchive::addEmptyDir(string $dirname )","inheritdoc":0,"modifier":[],"return":""},"addFile":{"params":{"$filename":"","$localname":"","$start":"","$length":""},"docComment":"Adds a file to a ZIP archive from the given path","signature":"ZipArchive::addFile(string $filename ,[string $localname] ,[int $start] ,[int $length] )","inheritdoc":0,"modifier":[],"return":""},"addFromString":{"params":{"$localname":"","$contents":""},"docComment":"Add a file to a ZIP archive using its contents","signature":"ZipArchive::addFromString(string $localname ,string $contents )","inheritdoc":0,"modifier":[],"return":""},"addGlob":{"params":{"$pattern":"","$flags":"","$options":""},"docComment":"Add files from a directory by glob pattern","signature":"ZipArchive::addGlob(string $pattern ,[int $flags] ,[array $options] )","inheritdoc":0,"modifier":[],"return":""},"addPattern":{"params":{"$pattern":"","$path":"","$options":""},"docComment":"Add files from a directory by PCRE pattern","signature":"ZipArchive::addPattern(string $pattern ,[string $path] ,[array $options] )","inheritdoc":0,"modifier":[],"return":""},"close":{"params":[],"docComment":"Close the active archive (opened or newly created)","signature":"ZipArchive::close( )","inheritdoc":0,"modifier":[],"return":""},"deleteIndex":{"params":{"$index":""},"docComment":"delete an entry in the archive using its index","signature":"ZipArchive::deleteIndex(int $index )","inheritdoc":0,"modifier":[],"return":""},"deleteName":{"params":{"$name":""},"docComment":"delete an entry in the archive using its name","signature":"ZipArchive::deleteName(string $name )","inheritdoc":0,"modifier":[],"return":""},"extractTo":{"params":{"$destination":"","$entries":""},"docComment":"Extract the archive contents","signature":"ZipArchive::extractTo(string $destination ,mixed $entries )","inheritdoc":0,"modifier":[],"return":""},"getArchiveComment":{"params":{"$flags":""},"docComment":"Returns the Zip archive comment","signature":"ZipArchive::getArchiveComment(int $flags )","inheritdoc":0,"modifier":[],"return":""},"getCommentIndex":{"params":{"$index":"","$flags":""},"docComment":"Returns the comment of an entry using the entry index","signature":"ZipArchive::getCommentIndex(int $index ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"getCommentName":{"params":{"$name":"","$flags":""},"docComment":"Returns the comment of an entry using the entry name","signature":"ZipArchive::getCommentName(string $name ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"getFromIndex":{"params":{"$index":"","$length":"","$flags":""},"docComment":"Returns the entry contents using its index","signature":"ZipArchive::getFromIndex(int $index ,[int $length] ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"getFromName":{"params":{"$name":"","$length":"","$flags":""},"docComment":"Returns the entry contents using its name","signature":"ZipArchive::getFromName(string $name ,[int $length] ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"getNameIndex":{"params":{"$index":"","$flags":""},"docComment":"Returns the name of an entry using its index","signature":"ZipArchive::getNameIndex(int $index ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"getStatusString":{"params":[],"docComment":"Returns the status error message, system and\/or zip messages","signature":"ZipArchive::getStatusString( )","inheritdoc":0,"modifier":[],"return":""},"getStream":{"params":{"$name":""},"docComment":"Get a file handler to the entry defined by its name (read only).","signature":"ZipArchive::getStream(string $name )","inheritdoc":0,"modifier":[],"return":""},"locateName":{"params":{"$name":"","$flags":""},"docComment":"Returns the index of the entry in the archive","signature":"ZipArchive::locateName(string $name ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"open":{"params":{"$filename":"","$flags":""},"docComment":"Open a ZIP file archive","signature":"ZipArchive::open(string $filename ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"renameIndex":{"params":{"$index":"","$newname":""},"docComment":"Renames an entry defined by its index","signature":"ZipArchive::renameIndex(int $index ,string $newname )","inheritdoc":0,"modifier":[],"return":""},"renameName":{"params":{"$name":"","$newname":""},"docComment":"Renames an entry defined by its name","signature":"ZipArchive::renameName(string $name ,string $newname )","inheritdoc":0,"modifier":[],"return":""},"setArchiveComment":{"params":{"$comment":""},"docComment":"Set the comment of a ZIP archive","signature":"ZipArchive::setArchiveComment(string $comment )","inheritdoc":0,"modifier":[],"return":""},"setCommentIndex":{"params":{"$index":"","$comment":""},"docComment":"Set the comment of an entry defined by its index","signature":"ZipArchive::setCommentIndex(int $index ,string $comment )","inheritdoc":0,"modifier":[],"return":""},"setCommentName":{"params":{"$name":"","$comment":""},"docComment":"Set the comment of an entry defined by its name","signature":"ZipArchive::setCommentName(string $name ,string $comment )","inheritdoc":0,"modifier":[],"return":""},"statIndex":{"params":{"$index":"","$flags":""},"docComment":"Get the details of an entry defined by its index.","signature":"ZipArchive::statIndex(int $index ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"statName":{"params":{"$name":"","$flags":""},"docComment":"Get the details of an entry defined by its name.","signature":"ZipArchive::statName(string $name ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"unchangeAll":{"params":[],"docComment":"Undo all changes done in the archive","signature":"ZipArchive::unchangeAll( )","inheritdoc":0,"modifier":[],"return":""},"unchangeArchive":{"params":[],"docComment":"Revert all global changes done in the archive.","signature":"ZipArchive::unchangeArchive( )","inheritdoc":0,"modifier":[],"return":""},"unchangeIndex":{"params":{"$index":""},"docComment":"Revert all changes done to an entry at the given index","signature":"ZipArchive::unchangeIndex(int $index )","inheritdoc":0,"modifier":[],"return":""},"unchangeName":{"params":{"$name":""},"docComment":"Revert all changes done to an entry with the given name.","signature":"ZipArchive::unchangeName(string $name )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","status":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"statusSys":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"numFiles":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"filename":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]},"comment":{"type":"","Inheritdoc":0,"docComment":"","modifier":[]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"AMQPConnection":{"classname":"AMQPConnection","docComment":"","methods":{"modifier":{"public":["connect","__construct","disconnect","getHost","getLogin","getPassword","getPort","getTimeout","getVhost","isConnected","reconnect","setHost","setLogin","setPassword","setPort","setTimeout","setVhost"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","connect":{"params":[],"docComment":"Establish a connection with the AMQP broker.","signature":"public AMQPConnection::connect( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$credentials":""},"docComment":"Create an instance of AMQPConnection","signature":"public AMQPConnection::__construct([array $credentials] )","inheritdoc":0,"modifier":["public"],"return":""},"disconnect":{"params":[],"docComment":"Closes the connection with the AMQP broker.","signature":"public AMQPConnection::disconnect( )","inheritdoc":0,"modifier":["public"],"return":""},"getHost":{"params":[],"docComment":"Get the configured host","signature":"public AMQPConnection::getHost( )","inheritdoc":0,"modifier":["public"],"return":""},"getLogin":{"params":[],"docComment":"Get the configured login","signature":"public AMQPConnection::getLogin( )","inheritdoc":0,"modifier":["public"],"return":""},"getPassword":{"params":[],"docComment":"Get the configured password","signature":"public AMQPConnection::getPassword( )","inheritdoc":0,"modifier":["public"],"return":""},"getPort":{"params":[],"docComment":"Get the configured port","signature":"public AMQPConnection::getPort( )","inheritdoc":0,"modifier":["public"],"return":""},"getTimeout":{"params":[],"docComment":"Get the configured timeout","signature":"public AMQPConnection::getTimeout( )","inheritdoc":0,"modifier":["public"],"return":""},"getVhost":{"params":[],"docComment":"Get the configured vhost","signature":"public AMQPConnection::getVhost( )","inheritdoc":0,"modifier":["public"],"return":""},"isConnected":{"params":[],"docComment":"Determine if the AMQPConnection object is connected to the broker.","signature":"public AMQPConnection::isConnected( )","inheritdoc":0,"modifier":["public"],"return":""},"reconnect":{"params":[],"docComment":"Closes any open connection and creates a new connection with the AMQP broker.","signature":"public AMQPConnection::reconnect( )","inheritdoc":0,"modifier":["public"],"return":""},"setHost":{"params":{"$host":""},"docComment":"Set the amqp host.","signature":"public AMQPConnection::setHost(string $host )","inheritdoc":0,"modifier":["public"],"return":""},"setLogin":{"params":{"$login":""},"docComment":"Set the login.","signature":"public AMQPConnection::setLogin(string $login )","inheritdoc":0,"modifier":["public"],"return":""},"setPassword":{"params":{"$password":""},"docComment":"Set the password.","signature":"public AMQPConnection::setPassword(string $password )","inheritdoc":0,"modifier":["public"],"return":""},"setPort":{"params":{"$port":""},"docComment":"Set the port.","signature":"public AMQPConnection::setPort(int $port )","inheritdoc":0,"modifier":["public"],"return":""},"setTimeout":{"params":{"$timeout":""},"docComment":"Set the timeout.","signature":"public AMQPConnection::setTimeout(float $timeout )","inheritdoc":0,"modifier":["public"],"return":""},"setVhost":{"params":{"$vhost":""},"docComment":"Set the amqp virtual host","signature":"public AMQPConnection::setVhost(string $vhost )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"AMQPChannel":{"classname":"AMQPChannel","docComment":"","methods":{"modifier":{"public":["commitTransaction","__construct","isConnected","qos","rollbackTransaction","setPrefetchCount","setPrefetchSize","startTransaction"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","commitTransaction":{"params":[],"docComment":"Commit a pending transaction","signature":"public AMQPChannel::commitTransaction( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$amqp_connection":"AMQPConnection"},"docComment":"Create an instance of an AMQPChannel object","signature":"AMQPChannel::__construct(AMQPConnection $amqp_connection )","inheritdoc":0,"modifier":[],"return":""},"isConnected":{"params":[],"docComment":"Check the channel connection","signature":"public AMQPChannel::isConnected( )","inheritdoc":0,"modifier":["public"],"return":""},"qos":{"params":{"$size":"","$count":""},"docComment":"Set the Quality Of Service settings for the given channel","signature":"public AMQPChannel::qos(int $size ,int $count )","inheritdoc":0,"modifier":["public"],"return":""},"rollbackTransaction":{"params":[],"docComment":"Rollback a transaction","signature":"public AMQPChannel::rollbackTransaction( )","inheritdoc":0,"modifier":["public"],"return":""},"setPrefetchCount":{"params":{"$count":""},"docComment":"Set the number of messages to prefetch from the broker","signature":"public AMQPChannel::setPrefetchCount(int $count )","inheritdoc":0,"modifier":["public"],"return":""},"setPrefetchSize":{"params":{"$size":""},"docComment":"Set the window size to prefetch from the broker","signature":"public AMQPChannel::setPrefetchSize(int $size )","inheritdoc":0,"modifier":["public"],"return":""},"startTransaction":{"params":[],"docComment":"Start a transaction","signature":"public AMQPChannel::startTransaction( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"AMQPExchange":{"classname":"AMQPExchange","docComment":"","methods":{"modifier":{"public":["bind","__construct","declare","delete","getArgument","getArguments","getFlags","getName","getType","publish","setArgument","setArguments","setFlags","setName","setType"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","bind":{"params":{"$destination_exchange_name":"","$source_exchange_name":"","$routing_key":""},"docComment":"Bind to another exchange","signature":"public AMQPExchange::bind(string $destination_exchange_name ,string $source_exchange_name ,string $routing_key )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$amqp_channel":"AMQPChannel"},"docComment":"Create an instance of AMQPExchange","signature":"public AMQPExchange::__construct(AMQPChannel $amqp_channel )","inheritdoc":0,"modifier":["public"],"return":""},"declare":{"params":[],"docComment":"Declare a new exchange on the broker.","signature":"public AMQPExchange::declare( )","inheritdoc":0,"modifier":["public"],"return":""},"delete":{"params":{"$flags":""},"docComment":"Delete the exchange from the broker.","signature":"public AMQPExchange::delete([int $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"getArgument":{"params":{"$key":""},"docComment":"Get the argument associated with the given key","signature":"public AMQPExchange::getArgument(string $key )","inheritdoc":0,"modifier":["public"],"return":""},"getArguments":{"params":[],"docComment":"Get all arguments set on the given exchange","signature":"public AMQPExchange::getArguments( )","inheritdoc":0,"modifier":["public"],"return":""},"getFlags":{"params":[],"docComment":"Get the flag bitmask","signature":"public AMQPExchange::getFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":[],"docComment":"Get the configured name","signature":"public AMQPExchange::getName( )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"Get the configured type","signature":"public AMQPExchange::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"publish":{"params":{"$message":"","$routing_key":"","$flags":"","$attributes":""},"docComment":"Publish a message to an exchange.","signature":"public AMQPExchange::publish(string $message ,string $routing_key ,[int $flags] ,[array $attributes] )","inheritdoc":0,"modifier":["public"],"return":""},"setArgument":{"params":{"$key":"","$value":""},"docComment":"Set the value for the given key","signature":"public AMQPExchange::setArgument(string $key ,mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"setArguments":{"params":{"$arguments":""},"docComment":"Set all arguments on the exchange","signature":"public AMQPExchange::setArguments(array $arguments )","inheritdoc":0,"modifier":["public"],"return":""},"setFlags":{"params":{"$flags":""},"docComment":"Set the flags on an exchange","signature":"public AMQPExchange::setFlags(int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"setName":{"params":{"$exchange_name":""},"docComment":"Set the name of the exchange","signature":"public AMQPExchange::setName(string $exchange_name )","inheritdoc":0,"modifier":["public"],"return":""},"setType":{"params":{"$exchange_type":""},"docComment":"Set the type of the exchange","signature":"public AMQPExchange::setType(string $exchange_type )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"AMQPQueue":{"classname":"AMQPQueue","docComment":"","methods":{"modifier":{"public":["ack","bind","cancel","__construct","consume","declare","delete","get","getArgument","getArguments","getFlags","getName","nack","purge","setArgument","setArguments","setFlags","setName","unbind"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","ack":{"params":{"$delivery_tag":"","$flags":""},"docComment":"Acknowledge the receipt of a message","signature":"public AMQPQueue::ack(int $delivery_tag ,[int $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"bind":{"params":{"$exchange_name":"","$routing_key":""},"docComment":"Bind the given queue to a routing key on an exchange.","signature":"public AMQPQueue::bind(string $exchange_name ,string $routing_key )","inheritdoc":0,"modifier":["public"],"return":""},"cancel":{"params":{"$consumer_tag":""},"docComment":"Cancel a queue binding.","signature":"public AMQPQueue::cancel([string $consumer_tag] )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$amqp_channel":"AMQPChannel"},"docComment":"Create an instance of an AMQPQueue object","signature":"public AMQPQueue::__construct(AMQPChannel $amqp_channel )","inheritdoc":0,"modifier":["public"],"return":""},"consume":{"params":{"$callback":"","$flags":""},"docComment":"Consume messages from a queue","signature":"public AMQPQueue::consume(callable $callback ,[int $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"declare":{"params":[],"docComment":"Declare a new queue","signature":"public AMQPQueue::declare( )","inheritdoc":0,"modifier":["public"],"return":""},"delete":{"params":[],"docComment":"Delete a queue and its contents.","signature":"public AMQPQueue::delete( )","inheritdoc":0,"modifier":["public"],"return":""},"get":{"params":{"$flags":""},"docComment":"Retrieve the next message from the queue.","signature":"public AMQPQueue::get(int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"getArgument":{"params":{"$key":""},"docComment":"Get the argument associated with the given key","signature":"public AMQPQueue::getArgument(string $key )","inheritdoc":0,"modifier":["public"],"return":""},"getArguments":{"params":[],"docComment":"Get all arguments set on the given queue","signature":"public AMQPQueue::getArguments( )","inheritdoc":0,"modifier":["public"],"return":""},"getFlags":{"params":[],"docComment":"Get the flag bitmask","signature":"public AMQPQueue::getFlags( )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":[],"docComment":"Get the configured name","signature":"public AMQPQueue::getName( )","inheritdoc":0,"modifier":["public"],"return":""},"nack":{"params":{"$delivery_tag":"","$flags":""},"docComment":"Mark a message as explicitly not acknowledged.","signature":"public AMQPQueue::nack(string $delivery_tag ,[string $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"purge":{"params":[],"docComment":"Purge the contents of a queue","signature":"public AMQPQueue::purge( )","inheritdoc":0,"modifier":["public"],"return":""},"setArgument":{"params":{"$key":"","$value":""},"docComment":"Set the value for the given key","signature":"public AMQPQueue::setArgument(string $key ,mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"setArguments":{"params":{"$arguments":""},"docComment":"Set all arguments on the queue","signature":"public AMQPQueue::setArguments(array $arguments )","inheritdoc":0,"modifier":["public"],"return":""},"setFlags":{"params":{"$flags":""},"docComment":"Set the queue flags","signature":"public AMQPQueue::setFlags(int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"setName":{"params":{"$queue_name":""},"docComment":"Set the queue name","signature":"public AMQPQueue::setName(string $queue_name )","inheritdoc":0,"modifier":["public"],"return":""},"unbind":{"params":{"$exchange_name":"","$routing_key":""},"docComment":"Unbind the queue from a routing key.","signature":"public AMQPQueue::unbind(string $exchange_name ,string $routing_key )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"AMQPEnvelope":{"classname":"AMQPEnvelope","docComment":"","methods":{"modifier":{"public":["getAppId","getBody","getContentEncoding","getContentType","getCorrelationId","getDeliveryTag","getExchange","getExpiration","getHeader","getHeaders","getMessageId","getPriority","getReplyTo","getRoutingKey","getTimeStamp","getType","getUserId","isRedelivery"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getAppId":{"params":[],"docComment":"Get the message appid","signature":"public AMQPEnvelope::getAppId( )","inheritdoc":0,"modifier":["public"],"return":""},"getBody":{"params":[],"docComment":"Get the message body","signature":"public AMQPEnvelope::getBody( )","inheritdoc":0,"modifier":["public"],"return":""},"getContentEncoding":{"params":[],"docComment":"Get the message contentencoding","signature":"public AMQPEnvelope::getContentEncoding( )","inheritdoc":0,"modifier":["public"],"return":""},"getContentType":{"params":[],"docComment":"Get the message contenttype","signature":"public AMQPEnvelope::getContentType( )","inheritdoc":0,"modifier":["public"],"return":""},"getCorrelationId":{"params":[],"docComment":"Get the message correlation id","signature":"public AMQPEnvelope::getCorrelationId( )","inheritdoc":0,"modifier":["public"],"return":""},"getDeliveryTag":{"params":[],"docComment":"Get the message delivery tag","signature":"public AMQPEnvelope::getDeliveryTag( )","inheritdoc":0,"modifier":["public"],"return":""},"getExchange":{"params":[],"docComment":"Get the message exchange","signature":"public AMQPEnvelope::getExchange( )","inheritdoc":0,"modifier":["public"],"return":""},"getExpiration":{"params":[],"docComment":"Get the message expiration","signature":"public AMQPEnvelope::getExpiration( )","inheritdoc":0,"modifier":["public"],"return":""},"getHeader":{"params":{"$header_key":""},"docComment":"Get a specific message header","signature":"public AMQPEnvelope::getHeader(string $header_key )","inheritdoc":0,"modifier":["public"],"return":""},"getHeaders":{"params":[],"docComment":"Get the message headers","signature":"public AMQPEnvelope::getHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getMessageId":{"params":[],"docComment":"Get the message id","signature":"public AMQPEnvelope::getMessageId( )","inheritdoc":0,"modifier":["public"],"return":""},"getPriority":{"params":[],"docComment":"Get the message priority","signature":"public AMQPEnvelope::getPriority( )","inheritdoc":0,"modifier":["public"],"return":""},"getReplyTo":{"params":[],"docComment":"Get the message replyto","signature":"public AMQPEnvelope::getReplyTo( )","inheritdoc":0,"modifier":["public"],"return":""},"getRoutingKey":{"params":[],"docComment":"Get the message routing key","signature":"public AMQPEnvelope::getRoutingKey( )","inheritdoc":0,"modifier":["public"],"return":""},"getTimeStamp":{"params":[],"docComment":"Get the message timestamp","signature":"public AMQPEnvelope::getTimeStamp( )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"Get the message type","signature":"public AMQPEnvelope::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"getUserId":{"params":[],"docComment":"Get the message user id","signature":"public AMQPEnvelope::getUserId( )","inheritdoc":0,"modifier":["public"],"return":""},"isRedelivery":{"params":[],"docComment":"Whether this is a redelivery of the message","signature":"public AMQPEnvelope::isRedelivery( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"APCIterator":{"classname":"APCIterator","docComment":"","methods":{"modifier":{"public":["__construct","current","getTotalCount","getTotalHits","getTotalSize","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$cache":"","$search":"","$format":"","$chunk_size":"","$list":""},"docComment":"Constructs an APCIterator iterator object","signature":"public APCIterator::__construct(string $cache ,[mixed $search] ,int $format ,[int $chunk_size] ,int $list )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Get current item","signature":"public APCIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"getTotalCount":{"params":[],"docComment":"Get total count","signature":"public APCIterator::getTotalCount( )","inheritdoc":0,"modifier":["public"],"return":""},"getTotalHits":{"params":[],"docComment":"Get total cache hits","signature":"public APCIterator::getTotalHits( )","inheritdoc":0,"modifier":["public"],"return":""},"getTotalSize":{"params":[],"docComment":"Get total cache size","signature":"public APCIterator::getTotalSize( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Get iterator key","signature":"public APCIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move pointer to next item","signature":"public APCIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewinds iterator","signature":"public APCIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Checks if current position is valid","signature":"public APCIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Cairo":{"classname":"Cairo","docComment":"","methods":{"modifier":{"public":["availableFonts","availableSurfaces","statusToString","version","versionString"],"private":[],"protected":[],"final":[],"static":["availableFonts","availableSurfaces","statusToString","version","versionString"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","availableFonts":{"params":[],"docComment":"Retrieves the availables font types","signature":"cairo_available_fonts( )","inheritdoc":0,"modifier":["public","static"],"return":""},"availableSurfaces":{"params":[],"docComment":"Retrieves all available surfaces","signature":"cairo_available_surfaces( )","inheritdoc":0,"modifier":["public","static"],"return":""},"statusToString":{"params":{"$status":""},"docComment":"Retrieves the current status as string","signature":"cairo_status_to_string(int $status )","inheritdoc":0,"modifier":["public","static"],"return":""},"version":{"params":[],"docComment":"Retrives cairo's library version","signature":"cairo_version( )","inheritdoc":0,"modifier":["public","static"],"return":""},"versionString":{"params":[],"docComment":"Retrieves cairo version as string","signature":"cairo_version_string( )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoContext":{"classname":"CairoContext","docComment":"","methods":{"modifier":{"public":["appendPath","arc","arcNegative","clip","clipExtents","clipPreserve","clipRectangleList","closePath","__construct","copyPage","copyPath","copyPathFlat","curveTo","deviceToUser","deviceToUserDistance","fill","fillExtents","fillPreserve","fontExtents","getAntialias","getCurrentPoint","getDash","getDashCount","getFillRule","getFontFace","getFontMatrix","getFontOptions","getGroupTarget","getLineCap","getLineJoin","getLineWidth","getMatrix","getMiterLimit","getOperator","getScaledFont","getSource","getTarget","getTolerance","glyphPath","hasCurrentPoint","identityMatrix","inFill","inStroke","lineTo","mask","maskSurface","moveTo","newPath","newSubPath","paint","paintWithAlpha","pathExtents","popGroup","popGroupToSource","pushGroup","pushGroupWithContent","rectangle","relCurveTo","relLineTo","relMoveTo","resetClip","restore","rotate","save","scale","selectFontFace","setAntialias","setDash","setFillRule","setFontFace","setFontMatrix","setFontOptions","setFontSize","setLineCap","setLineJoin","setLineWidth","setMatrix","setMiterLimit","setOperator","setScaledFont","setSource","setSourceRGB","setSourceRGBA","setSourceSurface","setTolerance","showPage","showText","status","stroke","strokeExtents","strokePreserve","textExtents","textPath","transform","translate","userToDevice","userToDeviceDistance"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","appendPath":{"params":{"$path":"CairoPath","$context":"CairoContext"},"docComment":"Appends a path to current path","signature":"cairo_append_path(CairoContext $context ,CairoPath $path )","inheritdoc":0,"modifier":["public"],"return":""},"arc":{"params":{"$x":"","$y":"","$radius":"","$angle1":"","$angle2":"","$context":"CairoContext"},"docComment":"Adds a circular arc","signature":"cairo_arc(CairoContext $context ,float $x ,float $y ,float $radius ,float $angle1 ,float $angle2 )","inheritdoc":0,"modifier":["public"],"return":""},"arcNegative":{"params":{"$x":"","$y":"","$radius":"","$angle1":"","$angle2":"","$context":"CairoContext"},"docComment":"Adds a negative arc","signature":"cairo_arc_negative(CairoContext $context ,float $x ,float $y ,float $radius ,float $angle1 ,float $angle2 )","inheritdoc":0,"modifier":["public"],"return":""},"clip":{"params":{"$context":"CairoContext"},"docComment":"Establishes a new clip region","signature":"cairo_clip(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"clipExtents":{"params":{"$context":"CairoContext"},"docComment":"Computes the area inside the current clip","signature":"cairo_clip_extents(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"clipPreserve":{"params":{"$context":"CairoContext"},"docComment":"Establishes a new clip region from the current clip","signature":"cairo_clip_preserve(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"clipRectangleList":{"params":{"$context":"CairoContext"},"docComment":"Retrieves the current clip as a list of rectangles","signature":"cairo_clip_rectangle_list(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"closePath":{"params":{"$context":"CairoContext"},"docComment":"Closes the current path","signature":"cairo_close_path(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$surface":"CairoSurface"},"docComment":"Creates a new CairoContext","signature":"public CairoContext::__construct(CairoSurface $surface )","inheritdoc":0,"modifier":["public"],"return":""},"copyPage":{"params":{"$context":"CairoContext"},"docComment":"Emits the current page","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"copyPath":{"params":{"$context":"CairoContext"},"docComment":"Creates a copy of the current path","signature":"cairo_copy_path(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":"CairoPath"},"copyPathFlat":{"params":{"$context":"CairoContext"},"docComment":"Gets a flattened copy of the current path","signature":"cairo_copy_path_flat(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":"CairoPath"},"curveTo":{"params":{"$x1":"","$y1":"","$x2":"","$y2":"","$x3":"","$y3":"","$context":"CairoContext"},"docComment":"Adds a curve","signature":"cairo_curve_to(CairoContext $context ,float $x1 ,float $y1 ,float $x2 ,float $y2 ,float $x3 ,float $y3 )","inheritdoc":0,"modifier":["public"],"return":""},"deviceToUser":{"params":{"$x":"","$y":"","$context":"CairoContext"},"docComment":"Transform a coordinate","signature":"cairo_device_to_user(CairoContext $context ,float $x ,float $y )","inheritdoc":0,"modifier":["public"],"return":""},"deviceToUserDistance":{"params":{"$x":"","$y":"","$context":"CairoContext"},"docComment":"Transform a distance","signature":"cairo_device_to_user_distance(CairoContext $context ,float $x ,float $y )","inheritdoc":0,"modifier":["public"],"return":""},"fill":{"params":{"$context":"CairoContext"},"docComment":"Fills the current path","signature":"cairo_fill(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"fillExtents":{"params":{"$context":"CairoContext"},"docComment":"Computes the filled area","signature":"cairo_fill_extents(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"fillPreserve":{"params":{"$context":"CairoContext"},"docComment":"Fills and preserve the current path","signature":"cairo_fill_preserve(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"fontExtents":{"params":{"$context":"CairoContext"},"docComment":"Get the font extents","signature":"cairo_font_extents(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getAntialias":{"params":{"$context":"CairoContext"},"docComment":"Retrives the current antialias mode","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getCurrentPoint":{"params":{"$context":"CairoContext"},"docComment":"The getCurrentPoint purpose","signature":"cairo_get_current_point(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getDash":{"params":{"$context":"CairoContext"},"docComment":"The getDash purpose","signature":"cairo_get_dash(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getDashCount":{"params":{"$context":"CairoContext"},"docComment":"The getDashCount purpose","signature":"cairo_get_dash_count(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getFillRule":{"params":{"$context":"CairoContext"},"docComment":"The getFillRule purpose","signature":"cairo_get_fill_rule(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getFontFace":{"params":{"$context":"CairoContext"},"docComment":"The getFontFace purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getFontMatrix":{"params":{"$context":"CairoContext"},"docComment":"The getFontMatrix purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getFontOptions":{"params":{"$context":"CairoContext"},"docComment":"The getFontOptions purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getGroupTarget":{"params":{"$context":"CairoContext"},"docComment":"The getGroupTarget purpose","signature":"cairo_get_group_target(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getLineCap":{"params":{"$context":"CairoContext"},"docComment":"The getLineCap purpose","signature":"cairo_get_line_cap(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getLineJoin":{"params":{"$context":"CairoContext"},"docComment":"The getLineJoin purpose","signature":"cairo_get_line_join(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getLineWidth":{"params":{"$context":"CairoContext"},"docComment":"The getLineWidth purpose","signature":"cairo_get_line_width(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getMatrix":{"params":{"$context":"CairoContext"},"docComment":"The getMatrix purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getMiterLimit":{"params":{"$context":"CairoContext"},"docComment":"The getMiterLimit purpose","signature":"cairo_get_miter_limit(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getOperator":{"params":{"$context":"CairoContext"},"docComment":"The getOperator purpose","signature":"cairo_get_operator(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getScaledFont":{"params":{"$context":"CairoContext"},"docComment":"The getScaledFont purpose","signature":"cairo_get_scaled_font(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getSource":{"params":{"$context":"CairoContext"},"docComment":"The getSource purpose","signature":"cairo_get_source(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getTarget":{"params":{"$context":"CairoContext"},"docComment":"The getTarget purpose","signature":"cairo_get_target(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getTolerance":{"params":{"$context":"CairoContext"},"docComment":"The getTolerance purpose","signature":"cairo_get_tolerance(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"glyphPath":{"params":{"$glyphs":"","$context":"CairoContext"},"docComment":"The glyphPath purpose","signature":"cairo_glyph_path(CairoContext $context ,array $glyphs )","inheritdoc":0,"modifier":["public"],"return":""},"hasCurrentPoint":{"params":{"$context":"CairoContext"},"docComment":"The hasCurrentPoint purpose","signature":"cairo_has_current_point(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"identityMatrix":{"params":{"$context":"CairoContext"},"docComment":"The identityMatrix purpose","signature":"cairo_identity_matrix(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"inFill":{"params":{"$x":"","$y":"","$context":"CairoContext"},"docComment":"The inFill purpose","signature":"cairo_in_fill(CairoContext $context ,string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"inStroke":{"params":{"$x":"","$y":"","$context":"CairoContext"},"docComment":"The inStroke purpose","signature":"cairo_in_stroke(CairoContext $context ,string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"lineTo":{"params":{"$x":"","$y":"","$context":"CairoContext"},"docComment":"The lineTo purpose","signature":"cairo_line_to(CairoContext $context ,string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"mask":{"params":{"$pattern":"CairoPattern","$context":"CairoContext"},"docComment":"The mask purpose","signature":"cairo_mask(CairoContext $context ,CairoPattern $pattern )","inheritdoc":0,"modifier":["public"],"return":""},"maskSurface":{"params":{"$surface":"CairoSurface","$x":"","$y":"","$context":"CairoContext"},"docComment":"The maskSurface purpose","signature":"cairo_mask_surface(CairoContext $context ,CairoSurface $surface ,string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"moveTo":{"params":{"$x":"","$y":"","$context":"CairoContext"},"docComment":"The moveTo purpose","signature":"cairo_move_to(CairoContext $context ,string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"newPath":{"params":{"$context":"CairoContext"},"docComment":"The newPath purpose","signature":"cairo_new_path(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"newSubPath":{"params":{"$context":"CairoContext"},"docComment":"The newSubPath purpose","signature":"cairo_new_sub_path(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"paint":{"params":{"$context":"CairoContext"},"docComment":"The paint purpose","signature":"cairo_paint(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"paintWithAlpha":{"params":{"$alpha":"","$context":"CairoContext"},"docComment":"The paintWithAlpha purpose","signature":"cairo_paint_with_alpha(CairoContext $context ,string $alpha )","inheritdoc":0,"modifier":["public"],"return":""},"pathExtents":{"params":{"$context":"CairoContext"},"docComment":"The pathExtents purpose","signature":"cairo_path_extents(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"popGroup":{"params":{"$context":"CairoContext"},"docComment":"The popGroup purpose","signature":"cairo_pop_group(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"popGroupToSource":{"params":{"$context":"CairoContext"},"docComment":"The popGroupToSource purpose","signature":"cairo_pop_group_to_source(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"pushGroup":{"params":{"$context":"CairoContext"},"docComment":"The pushGroup purpose","signature":"cairo_push_group(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"pushGroupWithContent":{"params":{"$content":"","$context":"CairoContext"},"docComment":"The pushGroupWithContent purpose","signature":"cairo_push_group_with_content(CairoContext $context ,string $content )","inheritdoc":0,"modifier":["public"],"return":""},"rectangle":{"params":{"$x":"","$y":"","$width":"","$height":"","$context":"CairoContext"},"docComment":"The rectangle purpose","signature":"cairo_rectangle(CairoContext $context ,string $x ,string $y ,string $width ,string $height )","inheritdoc":0,"modifier":["public"],"return":""},"relCurveTo":{"params":{"$x1":"","$y1":"","$x2":"","$y2":"","$x3":"","$y3":"","$context":"CairoContext"},"docComment":"The relCurveTo purpose","signature":"cairo_rel_curve_to(CairoContext $context ,string $x1 ,string $y1 ,string $x2 ,string $y2 ,string $x3 ,string $y3 )","inheritdoc":0,"modifier":["public"],"return":""},"relLineTo":{"params":{"$x":"","$y":"","$context":"CairoContext"},"docComment":"The relLineTo purpose","signature":"cairo_rel_line_to(CairoContext $context ,string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"relMoveTo":{"params":{"$x":"","$y":"","$context":"CairoContext"},"docComment":"The relMoveTo purpose","signature":"cairo_rel_move_to(CairoContext $context ,string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"resetClip":{"params":{"$context":"CairoContext"},"docComment":"The resetClip purpose","signature":"cairo_reset_clip(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"restore":{"params":{"$context":"CairoContext"},"docComment":"The restore purpose","signature":"cairo_restore(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"rotate":{"params":{"$angle":"","$context":"CairoContext"},"docComment":"The rotate purpose","signature":"(CairoContext $context ,string $angle )","inheritdoc":0,"modifier":["public"],"return":""},"save":{"params":{"$context":"CairoContext"},"docComment":"The save purpose","signature":"cairo_save(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"scale":{"params":{"$x":"","$y":"","$context":"CairoContext"},"docComment":"The scale purpose","signature":"cairo_scale(CairoContext $context ,string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"selectFontFace":{"params":{"$family":"","$slant":"","$weight":"","$context":"CairoContext"},"docComment":"The selectFontFace purpose","signature":"cairo_select_font_face(CairoContext $context ,string $family ,string $slant ,string $weight )","inheritdoc":0,"modifier":["public"],"return":""},"setAntialias":{"params":{"$antialias":"","$context":"CairoContext"},"docComment":"The setAntialias purpose","signature":"(CairoContext $context ,string $antialias )","inheritdoc":0,"modifier":["public"],"return":""},"setDash":{"params":{"$dashes":"","$offset":"","$context":"CairoContext"},"docComment":"The setDash purpose","signature":"cairo_set_dash(CairoContext $context ,array $dashes ,string $offset )","inheritdoc":0,"modifier":["public"],"return":""},"setFillRule":{"params":{"$setting":"","$context":"CairoContext"},"docComment":"The setFillRule purpose","signature":"cairo_set_fill_rule(CairoContext $context ,string $setting )","inheritdoc":0,"modifier":["public"],"return":""},"setFontFace":{"params":{"$fontface":"CairoFontFace","$context":"CairoContext"},"docComment":"The setFontFace purpose","signature":"cairo_set_font_face(CairoContext $context ,CairoFontFace $fontface )","inheritdoc":0,"modifier":["public"],"return":""},"setFontMatrix":{"params":{"$matrix":"CairoMatrix","$context":"CairoContext"},"docComment":"The setFontMatrix purpose","signature":"cairo_set_font_matrix(CairoContext $context ,CairoMatrix $matrix )","inheritdoc":0,"modifier":["public"],"return":""},"setFontOptions":{"params":{"$fontoptions":"CairoFontOptions","$context":"CairoContext"},"docComment":"The setFontOptions purpose","signature":"cairo_set_font_options(CairoContext $context ,CairoFontOptions $fontoptions )","inheritdoc":0,"modifier":["public"],"return":""},"setFontSize":{"params":{"$size":"","$context":"CairoContext"},"docComment":"The setFontSize purpose","signature":"cairo_set_font_size(CairoContext $context ,string $size )","inheritdoc":0,"modifier":["public"],"return":""},"setLineCap":{"params":{"$setting":"","$context":"CairoContext"},"docComment":"The setLineCap purpose","signature":"cairo_set_line_cap(CairoContext $context ,string $setting )","inheritdoc":0,"modifier":["public"],"return":""},"setLineJoin":{"params":{"$setting":"","$context":"CairoContext"},"docComment":"The setLineJoin purpose","signature":"cairo_set_line_join(CairoContext $context ,string $setting )","inheritdoc":0,"modifier":["public"],"return":""},"setLineWidth":{"params":{"$width":"","$context":"CairoContext"},"docComment":"The setLineWidth purpose","signature":"cairo_set_line_width(CairoContext $context ,string $width )","inheritdoc":0,"modifier":["public"],"return":""},"setMatrix":{"params":{"$matrix":"CairoMatrix","$context":"CairoContext"},"docComment":"The setMatrix purpose","signature":"(CairoContext $context ,CairoMatrix $matrix )","inheritdoc":0,"modifier":["public"],"return":""},"setMiterLimit":{"params":{"$limit":"","$context":"CairoContext"},"docComment":"The setMiterLimit purpose","signature":"cairo_set_miter_limit(CairoContext $context ,string $limit )","inheritdoc":0,"modifier":["public"],"return":""},"setOperator":{"params":{"$setting":"","$context":"CairoContext"},"docComment":"The setOperator purpose","signature":"cairo_set_operator(CairoContext $context ,string $setting )","inheritdoc":0,"modifier":["public"],"return":""},"setScaledFont":{"params":{"$scaledfont":"CairoScaledFont","$context":"CairoContext"},"docComment":"The setScaledFont purpose","signature":"cairo_set_scaled_font(CairoContext $context ,CairoScaledFont $scaledfont )","inheritdoc":0,"modifier":["public"],"return":""},"setSource":{"params":{"$pattern":"CairoPattern","$context":"CairoContext"},"docComment":"The setSource purpose","signature":"(CairoContext $context ,CairoPattern $pattern )","inheritdoc":0,"modifier":["public"],"return":""},"setSourceRGB":{"params":{"$red":"","$green":"","$blue":"","$context":"CairoContext","$pattern":"CairoPattern"},"docComment":"The setSourceRGB purpose","signature":"(CairoContext $context ,CairoPattern $pattern )","inheritdoc":0,"modifier":["public"],"return":""},"setSourceRGBA":{"params":{"$red":"","$green":"","$blue":"","$alpha":"","$context":"CairoContext","$pattern":"CairoPattern"},"docComment":"The setSourceRGBA purpose","signature":"cairo_set_source(CairoContext $context ,CairoPattern $pattern )","inheritdoc":0,"modifier":["public"],"return":""},"setSourceSurface":{"params":{"$surface":"CairoSurface","$x":"","$y":"","$context":"CairoContext"},"docComment":"The setSourceSurface purpose","signature":"cairo_set_source_surface(CairoContext $context ,CairoSurface $surface ,string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"setTolerance":{"params":{"$tolerance":"","$context":"CairoContext"},"docComment":"The setTolerance purpose","signature":"cairo_set_tolerance(CairoContext $context ,string $tolerance )","inheritdoc":0,"modifier":["public"],"return":""},"showPage":{"params":{"$context":"CairoContext"},"docComment":"The showPage purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"showText":{"params":{"$text":"","$context":"CairoContext"},"docComment":"The showText purpose","signature":"cairo_show_text(CairoContext $context ,string $text )","inheritdoc":0,"modifier":["public"],"return":""},"status":{"params":{"$context":"CairoContext"},"docComment":"The status purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"stroke":{"params":{"$context":"CairoContext"},"docComment":"The stroke purpose","signature":"cairo_stroke(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"strokeExtents":{"params":{"$context":"CairoContext"},"docComment":"The strokeExtents purpose","signature":"cairo_stroke_extents(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"strokePreserve":{"params":{"$context":"CairoContext"},"docComment":"The strokePreserve purpose","signature":"cairo_stroke_preserve(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"textExtents":{"params":{"$text":"","$context":"CairoContext"},"docComment":"The textExtents purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"textPath":{"params":{"$string":"","$context":"CairoContext","$text":""},"docComment":"The textPath purpose","signature":"cairo_text_path(CairoContext $context ,string $text )","inheritdoc":0,"modifier":["public"],"return":""},"transform":{"params":{"$matrix":"CairoMatrix","$context":"CairoContext"},"docComment":"The transform purpose","signature":"cairo_transform(CairoContext $context ,CairoMatrix $matrix )","inheritdoc":0,"modifier":["public"],"return":""},"translate":{"params":{"$x":"","$y":"","$context":"CairoContext"},"docComment":"The translate purpose","signature":"(CairoContext $context ,string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"userToDevice":{"params":{"$x":"","$y":"","$context":"CairoContext"},"docComment":"The userToDevice purpose","signature":"cairo_user_to_device(CairoContext $context ,string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"userToDeviceDistance":{"params":{"$x":"","$y":"","$context":"CairoContext"},"docComment":"The userToDeviceDistance purpose","signature":"cairo_user_to_device_distance(CairoContext $context ,string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoException":{"classname":"CairoException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoStatus":{"classname":"CairoStatus","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["SUCCESS","NO_MEMORY","INVALID_RESTORE","INVALID_POP_GROUP","NO_CURRENT_POINT","INVALID_MATRIX","INVALID_STATUS","NULL_POINTER","INVALID_STRING","INVALID_PATH_DATA","READ_ERROR","WRITE_ERROR","SURFACE_FINISHED","SURFACE_TYPE_MISMATCH","PATTERN_TYPE_MISMATCH","INVALID_CONTENT","INVALID_FORMAT","INVALID_VISUAL","FILE_NOT_FOUND","INVALID_DASH","INVALID_DSC_COMMENT","INVALID_INDEX","CLIP_NOT_REPRESENTABLE","TEMP_FILE_ERROR","INVALID_STRIDE"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","SUCCESS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"NO_MEMORY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INVALID_RESTORE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INVALID_POP_GROUP":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"NO_CURRENT_POINT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INVALID_MATRIX":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INVALID_STATUS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"NULL_POINTER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INVALID_STRING":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INVALID_PATH_DATA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"READ_ERROR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WRITE_ERROR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SURFACE_FINISHED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SURFACE_TYPE_MISMATCH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PATTERN_TYPE_MISMATCH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INVALID_CONTENT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INVALID_FORMAT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INVALID_VISUAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FILE_NOT_FOUND":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INVALID_DASH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INVALID_DSC_COMMENT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INVALID_INDEX":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CLIP_NOT_REPRESENTABLE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TEMP_FILE_ERROR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INVALID_STRIDE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoSurface":{"classname":"CairoSurface","docComment":"","methods":{"modifier":{"public":["__construct","copyPage","createSimilar","finish","flush","getContent","getDeviceOffset","getFontOptions","getType","markDirty","markDirtyRectangle","setDeviceOffset","setFallbackResolution","showPage","status","writeToPng"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public CairoSurface::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"copyPage":{"params":{"$context":"CairoContext"},"docComment":"The copyPage purpose","signature":"cairo_copy_page(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"createSimilar":{"params":{"$other":"CairoSurface","$content":"","$width":"","$height":""},"docComment":"The createSimilar purpose","signature":"public CairoSurface::createSimilar(CairoSurface $other ,int $content ,string $width ,string $height )","inheritdoc":0,"modifier":["public"],"return":""},"finish":{"params":[],"docComment":"The finish purpose","signature":"public CairoSurface::finish( )","inheritdoc":0,"modifier":["public"],"return":""},"flush":{"params":[],"docComment":"The flush purpose","signature":"public CairoSurface::flush( )","inheritdoc":0,"modifier":["public"],"return":""},"getContent":{"params":[],"docComment":"The getContent purpose","signature":"public CairoSurface::getContent( )","inheritdoc":0,"modifier":["public"],"return":""},"getDeviceOffset":{"params":[],"docComment":"The getDeviceOffset purpose","signature":"public CairoSurface::getDeviceOffset( )","inheritdoc":0,"modifier":["public"],"return":""},"getFontOptions":{"params":{"$context":"CairoContext"},"docComment":"The getFontOptions purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"The getType purpose","signature":"public CairoSurface::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"markDirty":{"params":[],"docComment":"The markDirty purpose","signature":"public CairoSurface::markDirty( )","inheritdoc":0,"modifier":["public"],"return":""},"markDirtyRectangle":{"params":{"$x":"","$y":"","$width":"","$height":""},"docComment":"The markDirtyRectangle purpose","signature":"public CairoSurface::markDirtyRectangle(string $x ,string $y ,string $width ,string $height )","inheritdoc":0,"modifier":["public"],"return":""},"setDeviceOffset":{"params":{"$x":"","$y":""},"docComment":"The setDeviceOffset purpose","signature":"public CairoSurface::setDeviceOffset(string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"setFallbackResolution":{"params":{"$x":"","$y":""},"docComment":"The setFallbackResolution purpose","signature":"public CairoSurface::setFallbackResolution(string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"showPage":{"params":{"$context":"CairoContext"},"docComment":"The showPage purpose","signature":"cairo_show_page(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"status":{"params":{"$context":"CairoContext"},"docComment":"The status purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"writeToPng":{"params":{"$file":""},"docComment":"The writeToPng purpose","signature":"public CairoSurface::writeToPng(string $file )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoSvgSurface":{"classname":"CairoSvgSurface","docComment":"","methods":{"modifier":{"public":["__construct","getVersions","restrictToVersion","versionToString","__construct","copyPage","createSimilar","finish","flush","getContent","getDeviceOffset","getFontOptions","getType","markDirty","markDirtyRectangle","setDeviceOffset","setFallbackResolution","showPage","status","writeToPng"],"private":[],"protected":[],"final":[],"static":["getVersions","versionToString"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public CairoSurface::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getVersions":{"params":[],"docComment":"Used to retrieve a list of supported SVG versions","signature":"cairo_svg_get_versions( )","inheritdoc":0,"modifier":["public","static"],"return":""},"restrictToVersion":{"params":{"$version":""},"docComment":"The restrictToVersion purpose","signature":"public CairoSvgSurface::restrictToVersion(string $version )","inheritdoc":0,"modifier":["public"],"return":""},"versionToString":{"params":{"$version":""},"docComment":"The versionToString purpose","signature":"static CairoSvgSurface::versionToString(int $version )","inheritdoc":0,"modifier":["public","static"],"return":""},"copyPage":{"params":{"$context":"CairoContext"},"docComment":"The copyPage purpose","signature":"cairo_copy_page(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"createSimilar":{"params":{"$other":"CairoSurface","$content":"","$width":"","$height":""},"docComment":"The createSimilar purpose","signature":"public CairoSurface::createSimilar(CairoSurface $other ,int $content ,string $width ,string $height )","inheritdoc":0,"modifier":["public"],"return":""},"finish":{"params":[],"docComment":"The finish purpose","signature":"public CairoSurface::finish( )","inheritdoc":0,"modifier":["public"],"return":""},"flush":{"params":[],"docComment":"The flush purpose","signature":"public CairoSurface::flush( )","inheritdoc":0,"modifier":["public"],"return":""},"getContent":{"params":[],"docComment":"The getContent purpose","signature":"public CairoSurface::getContent( )","inheritdoc":0,"modifier":["public"],"return":""},"getDeviceOffset":{"params":[],"docComment":"The getDeviceOffset purpose","signature":"public CairoSurface::getDeviceOffset( )","inheritdoc":0,"modifier":["public"],"return":""},"getFontOptions":{"params":{"$context":"CairoContext"},"docComment":"The getFontOptions purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"The getType purpose","signature":"public CairoSurface::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"markDirty":{"params":[],"docComment":"The markDirty purpose","signature":"public CairoSurface::markDirty( )","inheritdoc":0,"modifier":["public"],"return":""},"markDirtyRectangle":{"params":{"$x":"","$y":"","$width":"","$height":""},"docComment":"The markDirtyRectangle purpose","signature":"public CairoSurface::markDirtyRectangle(string $x ,string $y ,string $width ,string $height )","inheritdoc":0,"modifier":["public"],"return":""},"setDeviceOffset":{"params":{"$x":"","$y":""},"docComment":"The setDeviceOffset purpose","signature":"public CairoSurface::setDeviceOffset(string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"setFallbackResolution":{"params":{"$x":"","$y":""},"docComment":"The setFallbackResolution purpose","signature":"public CairoSurface::setFallbackResolution(string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"showPage":{"params":{"$context":"CairoContext"},"docComment":"The showPage purpose","signature":"cairo_show_page(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"status":{"params":{"$context":"CairoContext"},"docComment":"The status purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"writeToPng":{"params":{"$file":""},"docComment":"The writeToPng purpose","signature":"public CairoSurface::writeToPng(string $file )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoImageSurface":{"classname":"CairoImageSurface","docComment":"","methods":{"modifier":{"public":["__construct","createForData","createFromPng","getData","getFormat","getHeight","getStride","getWidth","__construct","copyPage","createSimilar","finish","flush","getContent","getDeviceOffset","getFontOptions","getType","markDirty","markDirtyRectangle","setDeviceOffset","setFallbackResolution","showPage","status","writeToPng"],"private":[],"protected":[],"final":[],"static":["createForData","createFromPng"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public CairoSurface::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"createForData":{"params":{"$data":"","$format":"","$width":"","$height":"","$stride":""},"docComment":"The createForData purpose","signature":"static CairoImageSurface::createForData(string $data ,int $format ,int $width ,int $height ,[int $stride] )","inheritdoc":0,"modifier":["public","static"],"return":""},"createFromPng":{"params":{"$file":""},"docComment":"Creates a new CairoImageSurface form a png image file","signature":"static CairoImageSurface::createFromPng(string $file )","inheritdoc":0,"modifier":["public","static"],"return":"CairoImageSurface"},"getData":{"params":[],"docComment":"Gets the image data as string","signature":"public CairoImageSurface::getData( )","inheritdoc":0,"modifier":["public"],"return":""},"getFormat":{"params":[],"docComment":"Get the image format","signature":"public CairoImageSurface::getFormat( )","inheritdoc":0,"modifier":["public"],"return":""},"getHeight":{"params":[],"docComment":"Retrieves the height of the CairoImageSurface","signature":"public CairoImageSurface::getHeight( )","inheritdoc":0,"modifier":["public"],"return":""},"getStride":{"params":[],"docComment":"The getStride purpose","signature":"public CairoImageSurface::getStride( )","inheritdoc":0,"modifier":["public"],"return":""},"getWidth":{"params":[],"docComment":"Retrieves the width of the CairoImageSurface","signature":"public CairoImageSurface::getWidth( )","inheritdoc":0,"modifier":["public"],"return":""},"copyPage":{"params":{"$context":"CairoContext"},"docComment":"The copyPage purpose","signature":"cairo_copy_page(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"createSimilar":{"params":{"$other":"CairoSurface","$content":"","$width":"","$height":""},"docComment":"The createSimilar purpose","signature":"public CairoSurface::createSimilar(CairoSurface $other ,int $content ,string $width ,string $height )","inheritdoc":0,"modifier":["public"],"return":""},"finish":{"params":[],"docComment":"The finish purpose","signature":"public CairoSurface::finish( )","inheritdoc":0,"modifier":["public"],"return":""},"flush":{"params":[],"docComment":"The flush purpose","signature":"public CairoSurface::flush( )","inheritdoc":0,"modifier":["public"],"return":""},"getContent":{"params":[],"docComment":"The getContent purpose","signature":"public CairoSurface::getContent( )","inheritdoc":0,"modifier":["public"],"return":""},"getDeviceOffset":{"params":[],"docComment":"The getDeviceOffset purpose","signature":"public CairoSurface::getDeviceOffset( )","inheritdoc":0,"modifier":["public"],"return":""},"getFontOptions":{"params":{"$context":"CairoContext"},"docComment":"The getFontOptions purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"The getType purpose","signature":"public CairoSurface::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"markDirty":{"params":[],"docComment":"The markDirty purpose","signature":"public CairoSurface::markDirty( )","inheritdoc":0,"modifier":["public"],"return":""},"markDirtyRectangle":{"params":{"$x":"","$y":"","$width":"","$height":""},"docComment":"The markDirtyRectangle purpose","signature":"public CairoSurface::markDirtyRectangle(string $x ,string $y ,string $width ,string $height )","inheritdoc":0,"modifier":["public"],"return":""},"setDeviceOffset":{"params":{"$x":"","$y":""},"docComment":"The setDeviceOffset purpose","signature":"public CairoSurface::setDeviceOffset(string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"setFallbackResolution":{"params":{"$x":"","$y":""},"docComment":"The setFallbackResolution purpose","signature":"public CairoSurface::setFallbackResolution(string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"showPage":{"params":{"$context":"CairoContext"},"docComment":"The showPage purpose","signature":"cairo_show_page(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"status":{"params":{"$context":"CairoContext"},"docComment":"The status purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"writeToPng":{"params":{"$file":""},"docComment":"The writeToPng purpose","signature":"public CairoSurface::writeToPng(string $file )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoPdfSurface":{"classname":"CairoPdfSurface","docComment":"","methods":{"modifier":{"public":["__construct","setSize","__construct","copyPage","createSimilar","finish","flush","getContent","getDeviceOffset","getFontOptions","getType","markDirty","markDirtyRectangle","setDeviceOffset","setFallbackResolution","showPage","status","writeToPng"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public CairoSurface::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"setSize":{"params":{"$width":"","$height":""},"docComment":"The setSize purpose","signature":"public CairoPdfSurface::setSize(string $width ,string $height )","inheritdoc":0,"modifier":["public"],"return":""},"copyPage":{"params":{"$context":"CairoContext"},"docComment":"The copyPage purpose","signature":"cairo_copy_page(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"createSimilar":{"params":{"$other":"CairoSurface","$content":"","$width":"","$height":""},"docComment":"The createSimilar purpose","signature":"public CairoSurface::createSimilar(CairoSurface $other ,int $content ,string $width ,string $height )","inheritdoc":0,"modifier":["public"],"return":""},"finish":{"params":[],"docComment":"The finish purpose","signature":"public CairoSurface::finish( )","inheritdoc":0,"modifier":["public"],"return":""},"flush":{"params":[],"docComment":"The flush purpose","signature":"public CairoSurface::flush( )","inheritdoc":0,"modifier":["public"],"return":""},"getContent":{"params":[],"docComment":"The getContent purpose","signature":"public CairoSurface::getContent( )","inheritdoc":0,"modifier":["public"],"return":""},"getDeviceOffset":{"params":[],"docComment":"The getDeviceOffset purpose","signature":"public CairoSurface::getDeviceOffset( )","inheritdoc":0,"modifier":["public"],"return":""},"getFontOptions":{"params":{"$context":"CairoContext"},"docComment":"The getFontOptions purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"The getType purpose","signature":"public CairoSurface::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"markDirty":{"params":[],"docComment":"The markDirty purpose","signature":"public CairoSurface::markDirty( )","inheritdoc":0,"modifier":["public"],"return":""},"markDirtyRectangle":{"params":{"$x":"","$y":"","$width":"","$height":""},"docComment":"The markDirtyRectangle purpose","signature":"public CairoSurface::markDirtyRectangle(string $x ,string $y ,string $width ,string $height )","inheritdoc":0,"modifier":["public"],"return":""},"setDeviceOffset":{"params":{"$x":"","$y":""},"docComment":"The setDeviceOffset purpose","signature":"public CairoSurface::setDeviceOffset(string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"setFallbackResolution":{"params":{"$x":"","$y":""},"docComment":"The setFallbackResolution purpose","signature":"public CairoSurface::setFallbackResolution(string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"showPage":{"params":{"$context":"CairoContext"},"docComment":"The showPage purpose","signature":"cairo_show_page(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"status":{"params":{"$context":"CairoContext"},"docComment":"The status purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"writeToPng":{"params":{"$file":""},"docComment":"The writeToPng purpose","signature":"public CairoSurface::writeToPng(string $file )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoPsSurface":{"classname":"CairoPsSurface","docComment":"","methods":{"modifier":{"public":["__construct","dscBeginPageSetup","dscBeginSetup","dscComment","getEps","getLevels","levelToString","restrictToLevel","setEps","setSize","__construct","copyPage","createSimilar","finish","flush","getContent","getDeviceOffset","getFontOptions","getType","markDirty","markDirtyRectangle","setDeviceOffset","setFallbackResolution","showPage","status","writeToPng"],"private":[],"protected":[],"final":[],"static":["getLevels","levelToString"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public CairoSurface::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"dscBeginPageSetup":{"params":[],"docComment":"The dscBeginPageSetup purpose","signature":"public CairoPsSurface::dscBeginPageSetup( )","inheritdoc":0,"modifier":["public"],"return":""},"dscBeginSetup":{"params":[],"docComment":"The dscBeginSetup purpose","signature":"public CairoPsSurface::dscBeginSetup( )","inheritdoc":0,"modifier":["public"],"return":""},"dscComment":{"params":{"$comment":""},"docComment":"The dscComment purpose","signature":"public CairoPsSurface::dscComment(string $comment )","inheritdoc":0,"modifier":["public"],"return":""},"getEps":{"params":[],"docComment":"The getEps purpose","signature":"public CairoPsSurface::getEps( )","inheritdoc":0,"modifier":["public"],"return":""},"getLevels":{"params":[],"docComment":"The getLevels purpose","signature":"static CairoPsSurface::getLevels( )","inheritdoc":0,"modifier":["public","static"],"return":""},"levelToString":{"params":{"$level":""},"docComment":"The levelToString purpose","signature":"static CairoPsSurface::levelToString(int $level )","inheritdoc":0,"modifier":["public","static"],"return":""},"restrictToLevel":{"params":{"$level":""},"docComment":"The restrictToLevel purpose","signature":"public CairoPsSurface::restrictToLevel(string $level )","inheritdoc":0,"modifier":["public"],"return":""},"setEps":{"params":{"$level":""},"docComment":"The setEps purpose","signature":"public CairoPsSurface::setEps(string $level )","inheritdoc":0,"modifier":["public"],"return":""},"setSize":{"params":{"$width":"","$height":""},"docComment":"The setSize purpose","signature":"public CairoPsSurface::setSize(string $width ,string $height )","inheritdoc":0,"modifier":["public"],"return":""},"copyPage":{"params":{"$context":"CairoContext"},"docComment":"The copyPage purpose","signature":"cairo_copy_page(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"createSimilar":{"params":{"$other":"CairoSurface","$content":"","$width":"","$height":""},"docComment":"The createSimilar purpose","signature":"public CairoSurface::createSimilar(CairoSurface $other ,int $content ,string $width ,string $height )","inheritdoc":0,"modifier":["public"],"return":""},"finish":{"params":[],"docComment":"The finish purpose","signature":"public CairoSurface::finish( )","inheritdoc":0,"modifier":["public"],"return":""},"flush":{"params":[],"docComment":"The flush purpose","signature":"public CairoSurface::flush( )","inheritdoc":0,"modifier":["public"],"return":""},"getContent":{"params":[],"docComment":"The getContent purpose","signature":"public CairoSurface::getContent( )","inheritdoc":0,"modifier":["public"],"return":""},"getDeviceOffset":{"params":[],"docComment":"The getDeviceOffset purpose","signature":"public CairoSurface::getDeviceOffset( )","inheritdoc":0,"modifier":["public"],"return":""},"getFontOptions":{"params":{"$context":"CairoContext"},"docComment":"The getFontOptions purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"The getType purpose","signature":"public CairoSurface::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"markDirty":{"params":[],"docComment":"The markDirty purpose","signature":"public CairoSurface::markDirty( )","inheritdoc":0,"modifier":["public"],"return":""},"markDirtyRectangle":{"params":{"$x":"","$y":"","$width":"","$height":""},"docComment":"The markDirtyRectangle purpose","signature":"public CairoSurface::markDirtyRectangle(string $x ,string $y ,string $width ,string $height )","inheritdoc":0,"modifier":["public"],"return":""},"setDeviceOffset":{"params":{"$x":"","$y":""},"docComment":"The setDeviceOffset purpose","signature":"public CairoSurface::setDeviceOffset(string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"setFallbackResolution":{"params":{"$x":"","$y":""},"docComment":"The setFallbackResolution purpose","signature":"public CairoSurface::setFallbackResolution(string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""},"showPage":{"params":{"$context":"CairoContext"},"docComment":"The showPage purpose","signature":"cairo_show_page(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"status":{"params":{"$context":"CairoContext"},"docComment":"The status purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"writeToPng":{"params":{"$file":""},"docComment":"The writeToPng purpose","signature":"public CairoSurface::writeToPng(string $file )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoSurfaceType":{"classname":"CairoSurfaceType","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["IMAGE","PDF","PS","XLIB","XCB","GLITZ","QUARTZ","WIN32","BEOS","DIRECTFB","SVG","OS2","WIN32_PRINTING","QUARTZ_IMAGE"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","IMAGE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PDF":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"XLIB":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"XCB":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"GLITZ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"QUARTZ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WIN32":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BEOS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DIRECTFB":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SVG":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OS2":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WIN32_PRINTING":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"QUARTZ_IMAGE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoFontFace":{"classname":"CairoFontFace","docComment":"","methods":{"modifier":{"public":["__construct","getType","status"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Creates a new CairoFontFace object","signature":"public CairoFontFace::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"Retrieves the font face type","signature":"public CairoFontFace::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"status":{"params":{"$fontface":"CairoFontFace"},"docComment":"Check for CairoFontFace errors","signature":"cairo_font_face_status(CairoFontFace $fontface )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoFontOptions":{"classname":"CairoFontOptions","docComment":"","methods":{"modifier":{"public":["__construct","equal","getAntialias","getHintMetrics","getHintStyle","getSubpixelOrder","hash","merge","setAntialias","setHintMetrics","setHintStyle","setSubpixelOrder","status"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public CairoFontOptions::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"equal":{"params":{"$other":""},"docComment":"The equal purpose","signature":"public CairoFontOptions::equal(string $other )","inheritdoc":0,"modifier":["public"],"return":""},"getAntialias":{"params":{"$context":"CairoContext"},"docComment":"The getAntialias purpose","signature":"cairo_get_antialias(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getHintMetrics":{"params":[],"docComment":"The getHintMetrics purpose","signature":"public CairoFontOptions::getHintMetrics( )","inheritdoc":0,"modifier":["public"],"return":""},"getHintStyle":{"params":[],"docComment":"The getHintStyle purpose","signature":"public CairoFontOptions::getHintStyle( )","inheritdoc":0,"modifier":["public"],"return":""},"getSubpixelOrder":{"params":[],"docComment":"The getSubpixelOrder purpose","signature":"public CairoFontOptions::getSubpixelOrder( )","inheritdoc":0,"modifier":["public"],"return":""},"hash":{"params":[],"docComment":"The hash purpose","signature":"public CairoFontOptions::hash( )","inheritdoc":0,"modifier":["public"],"return":""},"merge":{"params":{"$other":""},"docComment":"The merge purpose","signature":"public CairoFontOptions::merge(string $other )","inheritdoc":0,"modifier":["public"],"return":""},"setAntialias":{"params":{"$antialias":"","$context":"CairoContext"},"docComment":"The setAntialias purpose","signature":"cairo_set_antialias(CairoContext $context ,string $antialias )","inheritdoc":0,"modifier":["public"],"return":""},"setHintMetrics":{"params":{"$hint_metrics":""},"docComment":"The setHintMetrics purpose","signature":"public CairoFontOptions::setHintMetrics(string $hint_metrics )","inheritdoc":0,"modifier":["public"],"return":""},"setHintStyle":{"params":{"$hint_style":""},"docComment":"The setHintStyle purpose","signature":"public CairoFontOptions::setHintStyle(string $hint_style )","inheritdoc":0,"modifier":["public"],"return":""},"setSubpixelOrder":{"params":{"$subpixel_order":""},"docComment":"The setSubpixelOrder purpose","signature":"public CairoFontOptions::setSubpixelOrder(string $subpixel_order )","inheritdoc":0,"modifier":["public"],"return":""},"status":{"params":{"$context":"CairoContext"},"docComment":"The status purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoFontSlant":{"classname":"CairoFontSlant","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["NORMAL","ITALIC","OBLIQUE"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","NORMAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ITALIC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OBLIQUE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoFontType":{"classname":"CairoFontType","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["TOY","FT","WIN32","QUARTZ"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","TOY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WIN32":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"QUARTZ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoFontWeight":{"classname":"CairoFontWeight","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["NORMAL","BOLD"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","NORMAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BOLD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoScaledFont":{"classname":"CairoScaledFont","docComment":"","methods":{"modifier":{"public":["__construct","extents","getCtm","getFontFace","getFontMatrix","getFontOptions","getScaleMatrix","getType","glyphExtents","status","textExtents"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$font_face":"CairoFontFace","$matrix":"CairoMatrix","$ctm":"CairoMatrix","$options":"CairoFontOptions"},"docComment":"The __construct purpose","signature":"public CairoScaledFont::__construct(CairoFontFace $font_face ,CairoMatrix $matrix ,CairoMatrix $ctm ,CairoFontOptions $options )","inheritdoc":0,"modifier":["public"],"return":""},"extents":{"params":[],"docComment":"The extents purpose","signature":"public CairoScaledFont::extents( )","inheritdoc":0,"modifier":["public"],"return":""},"getCtm":{"params":[],"docComment":"The getCtm purpose","signature":"public CairoScaledFont::getCtm( )","inheritdoc":0,"modifier":["public"],"return":"CairoMatrix"},"getFontFace":{"params":{"$context":"CairoContext"},"docComment":"The getFontFace purpose","signature":"cairo_get_font_face(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getFontMatrix":{"params":{"$context":"CairoContext"},"docComment":"The getFontMatrix purpose","signature":"cairo_get_font_matrix(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getFontOptions":{"params":{"$context":"CairoContext"},"docComment":"The getFontOptions purpose","signature":"cairo_get_font_options(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getScaleMatrix":{"params":[],"docComment":"The getScaleMatrix purpose","signature":"public CairoScaledFont::getScaleMatrix( )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"The getType purpose","signature":"public CairoScaledFont::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"glyphExtents":{"params":{"$glyphs":""},"docComment":"The glyphExtents purpose","signature":"public CairoScaledFont::glyphExtents(string $glyphs )","inheritdoc":0,"modifier":["public"],"return":""},"status":{"params":{"$context":"CairoContext"},"docComment":"The status purpose","signature":"(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"textExtents":{"params":{"$text":"","$context":"CairoContext"},"docComment":"The textExtents purpose","signature":"cairo_text_extents(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoToyFontFace":{"classname":"CairoToyFontFace","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoPatternType":{"classname":"CairoPatternType","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["SOLID","SURFACE","LINEAR","RADIAL"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","SOLID":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SURFACE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LINEAR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RADIAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoPattern":{"classname":"CairoPattern","docComment":"","methods":{"modifier":{"public":["__construct","getMatrix","getType","setMatrix","status"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public CairoPattern::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getMatrix":{"params":{"$context":"CairoContext"},"docComment":"The getMatrix purpose","signature":"cairo_get_matrix(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"The getType purpose","signature":"public CairoPattern::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"setMatrix":{"params":{"$matrix":"CairoMatrix","$context":"CairoContext"},"docComment":"The setMatrix purpose","signature":"cairo_set_matrix(CairoContext $context ,CairoMatrix $matrix )","inheritdoc":0,"modifier":["public"],"return":""},"status":{"params":{"$context":"CairoContext"},"docComment":"The status purpose","signature":"cairo_status(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoGradientPattern":{"classname":"CairoGradientPattern","docComment":"","methods":{"modifier":{"public":["addColorStopRgb","addColorStopRgba","getColorStopCount","getColorStopRgba","getExtend","setExtend","__construct","getMatrix","getType","setMatrix","status"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addColorStopRgb":{"params":{"$offset":"","$red":"","$green":"","$blue":""},"docComment":"The addColorStopRgb purpose","signature":"public CairoGradientPattern::addColorStopRgb(string $offset ,string $red ,string $green ,string $blue )","inheritdoc":0,"modifier":["public"],"return":""},"addColorStopRgba":{"params":{"$offset":"","$red":"","$green":"","$blue":"","$alpha":""},"docComment":"The addColorStopRgba purpose","signature":"public CairoGradientPattern::addColorStopRgba(string $offset ,string $red ,string $green ,string $blue ,string $alpha )","inheritdoc":0,"modifier":["public"],"return":""},"getColorStopCount":{"params":[],"docComment":"The getColorStopCount purpose","signature":"public CairoGradientPattern::getColorStopCount( )","inheritdoc":0,"modifier":["public"],"return":""},"getColorStopRgba":{"params":{"$index":""},"docComment":"The getColorStopRgba purpose","signature":"public CairoGradientPattern::getColorStopRgba(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"getExtend":{"params":[],"docComment":"The getExtend purpose","signature":"public CairoGradientPattern::getExtend( )","inheritdoc":0,"modifier":["public"],"return":""},"setExtend":{"params":{"$extend":""},"docComment":"The setExtend purpose","signature":"public CairoGradientPattern::setExtend(int $extend )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"The __construct purpose","signature":"public CairoPattern::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getMatrix":{"params":{"$context":"CairoContext"},"docComment":"The getMatrix purpose","signature":"cairo_get_matrix(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"The getType purpose","signature":"public CairoPattern::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"setMatrix":{"params":{"$matrix":"CairoMatrix","$context":"CairoContext"},"docComment":"The setMatrix purpose","signature":"cairo_set_matrix(CairoContext $context ,CairoMatrix $matrix )","inheritdoc":0,"modifier":["public"],"return":""},"status":{"params":{"$context":"CairoContext"},"docComment":"The status purpose","signature":"cairo_status(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoSolidPattern":{"classname":"CairoSolidPattern","docComment":"","methods":{"modifier":{"public":["__construct","getRgba","__construct","getMatrix","getType","setMatrix","status"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public CairoPattern::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getRgba":{"params":[],"docComment":"The getRgba purpose","signature":"public CairoSolidPattern::getRgba( )","inheritdoc":0,"modifier":["public"],"return":""},"getMatrix":{"params":{"$context":"CairoContext"},"docComment":"The getMatrix purpose","signature":"cairo_get_matrix(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"The getType purpose","signature":"public CairoPattern::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"setMatrix":{"params":{"$matrix":"CairoMatrix","$context":"CairoContext"},"docComment":"The setMatrix purpose","signature":"cairo_set_matrix(CairoContext $context ,CairoMatrix $matrix )","inheritdoc":0,"modifier":["public"],"return":""},"status":{"params":{"$context":"CairoContext"},"docComment":"The status purpose","signature":"cairo_status(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoSurfacePattern":{"classname":"CairoSurfacePattern","docComment":"","methods":{"modifier":{"public":["__construct","getExtend","getFilter","getSurface","setExtend","setFilter","__construct","getMatrix","getType","setMatrix","status"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public CairoPattern::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getExtend":{"params":[],"docComment":"The getExtend purpose","signature":"public CairoSurfacePattern::getExtend( )","inheritdoc":0,"modifier":["public"],"return":""},"getFilter":{"params":[],"docComment":"The getFilter purpose","signature":"public CairoSurfacePattern::getFilter( )","inheritdoc":0,"modifier":["public"],"return":""},"getSurface":{"params":[],"docComment":"The getSurface purpose","signature":"public CairoSurfacePattern::getSurface( )","inheritdoc":0,"modifier":["public"],"return":""},"setExtend":{"params":{"$extend":""},"docComment":"The setExtend purpose","signature":"public CairoSurfacePattern::setExtend(int $extend )","inheritdoc":0,"modifier":["public"],"return":""},"setFilter":{"params":{"$filter":""},"docComment":"The setFilter purpose","signature":"public CairoSurfacePattern::setFilter(string $filter )","inheritdoc":0,"modifier":["public"],"return":""},"getMatrix":{"params":{"$context":"CairoContext"},"docComment":"The getMatrix purpose","signature":"cairo_get_matrix(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"The getType purpose","signature":"public CairoPattern::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"setMatrix":{"params":{"$matrix":"CairoMatrix","$context":"CairoContext"},"docComment":"The setMatrix purpose","signature":"cairo_set_matrix(CairoContext $context ,CairoMatrix $matrix )","inheritdoc":0,"modifier":["public"],"return":""},"status":{"params":{"$context":"CairoContext"},"docComment":"The status purpose","signature":"cairo_status(CairoContext $context )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoLinearGradient":{"classname":"CairoLinearGradient","docComment":"","methods":{"modifier":{"public":["__construct","getPoints","addColorStopRgb","addColorStopRgba","getColorStopCount","getColorStopRgba","getExtend","setExtend"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$x0":"","$y0":"","$x1":"","$y1":""},"docComment":"The __construct purpose","signature":"public CairoLinearGradient::__construct(float $x0 ,float $y0 ,float $x1 ,float $y1 )","inheritdoc":0,"modifier":["public"],"return":""},"getPoints":{"params":[],"docComment":"The getPoints purpose","signature":"public CairoLinearGradient::getPoints( )","inheritdoc":0,"modifier":["public"],"return":""},"addColorStopRgb":{"params":{"$offset":"","$red":"","$green":"","$blue":""},"docComment":"The addColorStopRgb purpose","signature":"public CairoGradientPattern::addColorStopRgb(string $offset ,string $red ,string $green ,string $blue )","inheritdoc":0,"modifier":["public"],"return":""},"addColorStopRgba":{"params":{"$offset":"","$red":"","$green":"","$blue":"","$alpha":""},"docComment":"The addColorStopRgba purpose","signature":"public CairoGradientPattern::addColorStopRgba(string $offset ,string $red ,string $green ,string $blue ,string $alpha )","inheritdoc":0,"modifier":["public"],"return":""},"getColorStopCount":{"params":[],"docComment":"The getColorStopCount purpose","signature":"public CairoGradientPattern::getColorStopCount( )","inheritdoc":0,"modifier":["public"],"return":""},"getColorStopRgba":{"params":{"$index":""},"docComment":"The getColorStopRgba purpose","signature":"public CairoGradientPattern::getColorStopRgba(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"getExtend":{"params":[],"docComment":"The getExtend purpose","signature":"public CairoGradientPattern::getExtend( )","inheritdoc":0,"modifier":["public"],"return":""},"setExtend":{"params":{"$extend":""},"docComment":"The setExtend purpose","signature":"public CairoGradientPattern::setExtend(int $extend )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoRadialGradient":{"classname":"CairoRadialGradient","docComment":"","methods":{"modifier":{"public":["__construct","getCircles","addColorStopRgb","addColorStopRgba","getColorStopCount","getColorStopRgba","getExtend","setExtend"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$x0":"","$y0":"","$r0":"","$x1":"","$y1":"","$r1":""},"docComment":"The __construct purpose","signature":"public CairoRadialGradient::__construct(float $x0 ,float $y0 ,float $r0 ,float $x1 ,float $y1 ,float $r1 )","inheritdoc":0,"modifier":["public"],"return":""},"getCircles":{"params":[],"docComment":"The getCircles purpose","signature":"public CairoRadialGradient::getCircles( )","inheritdoc":0,"modifier":["public"],"return":""},"addColorStopRgb":{"params":{"$offset":"","$red":"","$green":"","$blue":""},"docComment":"The addColorStopRgb purpose","signature":"public CairoGradientPattern::addColorStopRgb(string $offset ,string $red ,string $green ,string $blue )","inheritdoc":0,"modifier":["public"],"return":""},"addColorStopRgba":{"params":{"$offset":"","$red":"","$green":"","$blue":"","$alpha":""},"docComment":"The addColorStopRgba purpose","signature":"public CairoGradientPattern::addColorStopRgba(string $offset ,string $red ,string $green ,string $blue ,string $alpha )","inheritdoc":0,"modifier":["public"],"return":""},"getColorStopCount":{"params":[],"docComment":"The getColorStopCount purpose","signature":"public CairoGradientPattern::getColorStopCount( )","inheritdoc":0,"modifier":["public"],"return":""},"getColorStopRgba":{"params":{"$index":""},"docComment":"The getColorStopRgba purpose","signature":"public CairoGradientPattern::getColorStopRgba(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"getExtend":{"params":[],"docComment":"The getExtend purpose","signature":"public CairoGradientPattern::getExtend( )","inheritdoc":0,"modifier":["public"],"return":""},"setExtend":{"params":{"$extend":""},"docComment":"The setExtend purpose","signature":"public CairoGradientPattern::setExtend(int $extend )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoAntialias":{"classname":"CairoAntialias","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["MODE_DEFAULT","MODE_NONE","MODE_GRAY","MODE_SUBPIXEL"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","MODE_DEFAULT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"MODE_NONE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"MODE_GRAY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"MODE_SUBPIXEL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoContent":{"classname":"CairoContent","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["COLOR","ALPHA","COLOR_ALPHA"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","COLOR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ALPHA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"COLOR_ALPHA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoExtend":{"classname":"CairoExtend","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["NONE","REPEAT","REFLECT","PAD"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","NONE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"REPEAT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"REFLECT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PAD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoFormat":{"classname":"CairoFormat","docComment":"","methods":{"modifier":{"public":["strideForWidth"],"private":[],"protected":[],"final":[],"static":["strideForWidth"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","strideForWidth":{"params":{"$format":"","$width":""},"docComment":"Provides an appropiate stride to use","signature":"static CairoFormat::strideForWidth(int $format ,int $width )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["ARGB32","RGB24","A8","A1"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","ARGB32":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RGB24":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"A8":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"A1":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoFillRule":{"classname":"CairoFillRule","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["WINDING","EVEN_ODD"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","WINDING":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"EVEN_ODD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoFilter":{"classname":"CairoFilter","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["FAST","GOOD","BEST","NEAREST","BILINEAR","GAUSSIAN"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","FAST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"GOOD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BEST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"NEAREST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BILINEAR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"GAUSSIAN":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoHintMetrics":{"classname":"CairoHintMetrics","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["METRICS_DEFAULT","METRICS_OFF","METRICS_ON"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","METRICS_DEFAULT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"METRICS_OFF":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"METRICS_ON":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoHintStyle":{"classname":"CairoHintStyle","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["STYLE_DEFAULT","STYLE_NONE","STYLE_SLIGHT","STYLE_MEDIUM","STYLE_FULL"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","STYLE_DEFAULT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"STYLE_NONE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"STYLE_SLIGHT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"STYLE_MEDIUM":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"STYLE_FULL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoLineCap":{"classname":"CairoLineCap","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["BUTT","ROUND","SQUARE"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","BUTT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ROUND":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SQUARE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoLineJoin":{"classname":"CairoLineJoin","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["MITER","ROUND","BEVEL"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","MITER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ROUND":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BEVEL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoMatrix":{"classname":"CairoMatrix","docComment":"","methods":{"modifier":{"public":["__construct","initIdentity","initRotate","initScale","initTranslate","invert","multiply","rotate","scale","transformDistance","transformPoint","translate"],"private":[],"protected":[],"final":[],"static":["initIdentity","initRotate","initScale","initTranslate","multiply"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$xx":"","$yx":"","$xy":"","$yy":"","$x0":"","$y0":""},"docComment":"Creates a new CairoMatrix object","signature":"cairo_matrix_init([float $xx] ,[float $yx] ,[float $xy] ,[float $yy] ,[float $x0] ,[float $y0] )","inheritdoc":0,"modifier":["public"],"return":""},"initIdentity":{"params":[],"docComment":"Creates a new identity matrix","signature":"cairo_matrix_init_identity( )","inheritdoc":0,"modifier":["public","static"],"return":""},"initRotate":{"params":{"$radians":""},"docComment":"Creates a new rotated matrix","signature":"cairo_matrix_init_rotate(float $radians )","inheritdoc":0,"modifier":["public","static"],"return":""},"initScale":{"params":{"$sx":"","$sy":""},"docComment":"Creates a new scaling matrix","signature":"cairo_matrix_init_scale(float $sx ,float $sy )","inheritdoc":0,"modifier":["public","static"],"return":""},"initTranslate":{"params":{"$tx":"","$ty":""},"docComment":"Creates a new translation matrix","signature":"cairo_matrix_init_translate(float $tx ,float $ty )","inheritdoc":0,"modifier":["public","static"],"return":""},"invert":{"params":[],"docComment":"The invert purpose","signature":"public CairoMatrix::invert( )","inheritdoc":0,"modifier":["public"],"return":""},"multiply":{"params":{"$matrix1":"CairoMatrix","$matrix2":"CairoMatrix"},"docComment":"The multiply purpose","signature":"static CairoMatrix::multiply(CairoMatrix $matrix1 ,CairoMatrix $matrix2 )","inheritdoc":0,"modifier":["public","static"],"return":"CairoMatrix"},"rotate":{"params":{"$sx":"","$sy":"","$context":"CairoContext","$angle":""},"docComment":"The rotate purpose","signature":"cairo_rotate(CairoContext $context ,string $angle )","inheritdoc":0,"modifier":["public"],"return":""},"scale":{"params":{"$sx":"","$sy":"","$context":"CairoContext"},"docComment":"Applies scaling to a matrix","signature":"cairo_matrix_scale(CairoContext $context ,float $sx ,float $sy )","inheritdoc":0,"modifier":["public"],"return":""},"transformDistance":{"params":{"$dx":"","$dy":""},"docComment":"The transformDistance purpose","signature":"public CairoMatrix::transformDistance(string $dx ,string $dy )","inheritdoc":0,"modifier":["public"],"return":""},"transformPoint":{"params":{"$dx":"","$dy":""},"docComment":"The transformPoint purpose","signature":"public CairoMatrix::transformPoint(string $dx ,string $dy )","inheritdoc":0,"modifier":["public"],"return":""},"translate":{"params":{"$tx":"","$ty":"","$context":"CairoContext","$x":"","$y":""},"docComment":"The translate purpose","signature":"cairo_translate(CairoContext $context ,string $x ,string $y )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoOperator":{"classname":"CairoOperator","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["CLEAR","SOURCE","OVER","IN","OUT","ATOP","DEST","DEST_OVER","DEST_IN","DEST_OUT","DEST_ATOP","XOR","ADD","SATURATE"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","CLEAR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SOURCE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OVER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IN":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OUT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATOP":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DEST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DEST_OVER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DEST_IN":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DEST_OUT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DEST_ATOP":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"XOR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ADD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SATURATE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoPath":{"classname":"CairoPath","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoPsLevel":{"classname":"CairoPsLevel","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["LEVEL_2","LEVEL_3"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","LEVEL_2":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LEVEL_3":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoSubpixelOrder":{"classname":"CairoSubpixelOrder","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["ORDER_DEFAULT","ORDER_RGB","ORDER_BGR","ORDER_VRGB","ORDER_VBGR"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","ORDER_DEFAULT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ORDER_RGB":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ORDER_BGR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ORDER_VRGB":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ORDER_VBGR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"CairoSvgVersion":{"classname":"CairoSvgVersion","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["VERSION_1_1","VERSION_1_2"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","VERSION_1_1":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"VERSION_1_2":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"chdb":{"classname":"chdb","docComment":"","methods":{"modifier":{"public":["__construct","get"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$pathname":""},"docComment":"Creates a  instance","signature":"public chdb::__construct(string $pathname )","inheritdoc":0,"modifier":["public"],"return":""},"get":{"params":{"$key":""},"docComment":"Gets the value associated with a key","signature":"public chdb::get(string $key )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Ev":{"classname":"Ev","docComment":"","methods":{"modifier":{"public":["backend","depth","embeddableBackends","feedSignal","feedSignalEvent","iteration","now","nowUpdate","recommendedBackends","resume","run","sleep","stop","supportedBackends","suspend","time","verify"],"private":[],"protected":[],"final":["backend","depth","embeddableBackends","feedSignal","feedSignalEvent","iteration","now","nowUpdate","recommendedBackends","resume","run","sleep","stop","supportedBackends","suspend","time","verify"],"static":["backend","depth","embeddableBackends","feedSignal","feedSignalEvent","iteration","now","nowUpdate","recommendedBackends","resume","run","sleep","stop","supportedBackends","suspend","time","verify"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","backend":{"params":[],"docComment":"Returns an integer describing the backend used by libev.","signature":"static Ev::backend( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"depth":{"params":[],"docComment":"Returns recursion depth","signature":"static Ev::depth( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"embeddableBackends":{"params":[],"docComment":"Returns the set of backends that are embeddable in other event loops.","signature":"static Ev::embeddableBackends( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"feedSignal":{"params":{"$signum":""},"docComment":"Feed a signal event info Ev","signature":"static Ev::feedSignal(int $signum )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"feedSignalEvent":{"params":{"$signum":""},"docComment":"Feed signal event into the default loop","signature":"static Ev::feedSignalEvent(int $signum )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"iteration":{"params":[],"docComment":"Return the number of times the default event loop has polled for new\n  events.","signature":"static Ev::iteration( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"now":{"params":[],"docComment":"Returns the time when the last iteration of the default event\n  loop has started.","signature":"static Ev::now( )","inheritdoc":0,"modifier":["final","public","static"],"return":"double"},"nowUpdate":{"params":[],"docComment":"Establishes the current time by querying the kernel, updating the time\n    returned by Ev::now in the progress.","signature":"static Ev::nowUpdate( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"recommendedBackends":{"params":[],"docComment":"Returns a bit mask of recommended backends for current\n  platform.","signature":"static Ev::recommendedBackends( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"resume":{"params":[],"docComment":"Resume previously suspended default event loop","signature":"static Ev::resume( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"run":{"params":{"$flags":""},"docComment":"Begin checking for events and calling callbacks for the default\n  loop","signature":"static Ev::run(int $flags )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"sleep":{"params":{"$seconds":"double"},"docComment":"Block the process for the given number of seconds.","signature":"static Ev::sleep(double $seconds )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"stop":{"params":{"$how":""},"docComment":"Stops the default event loop","signature":"static Ev::stop(int $how )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"supportedBackends":{"params":[],"docComment":"Returns the set of backends supported by current libev\n  configuration.","signature":"static Ev::supportedBackends( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"suspend":{"params":[],"docComment":"Suspend the default event loop","signature":"static Ev::suspend( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"time":{"params":[],"docComment":"Returns the current time in fractional seconds since the epoch.","signature":"static Ev::time( )","inheritdoc":0,"modifier":["final","public","static"],"return":"double"},"verify":{"params":[],"docComment":"Performs internal consistency checks(for debugging)","signature":"static Ev::verify( )","inheritdoc":0,"modifier":["final","public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["FLAG_AUTO","FLAG_NOENV","FLAG_FORKCHECK","FLAG_NOINOTIFY","FLAG_SIGNALFD","FLAG_NOSIGMASK","RUN_NOWAIT","RUN_ONCE","BREAK_CANCEL","BREAK_ONE","BREAK_ALL","MINPRI","MAXPRI","READ","WRITE","TIMER","PERIODIC","SIGNAL","CHILD","STAT","IDLE","PREPARE","CHECK","EMBED","CUSTOM","ERROR","BACKEND_SELECT","BACKEND_POLL","BACKEND_EPOLL","BACKEND_KQUEUE","BACKEND_DEVPOLL","BACKEND_PORT","BACKEND_ALL","BACKEND_MASK"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","FLAG_AUTO":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FLAG_NOENV":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FLAG_FORKCHECK":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FLAG_NOINOTIFY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FLAG_SIGNALFD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FLAG_NOSIGMASK":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RUN_NOWAIT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RUN_ONCE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BREAK_CANCEL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BREAK_ONE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BREAK_ALL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"MINPRI":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"MAXPRI":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"READ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WRITE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TIMER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PERIODIC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SIGNAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CHILD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"STAT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IDLE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PREPARE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CHECK":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"EMBED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CUSTOM":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ERROR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BACKEND_SELECT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BACKEND_POLL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BACKEND_EPOLL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BACKEND_KQUEUE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BACKEND_DEVPOLL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BACKEND_PORT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BACKEND_ALL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BACKEND_MASK":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EvCheck":{"classname":"EvCheck","docComment":"","methods":{"modifier":{"public":["__construct","createStopped","clear","__construct","feed","getLoop","invoke","keepalive","setCallback","start","stop"],"private":[],"protected":[],"final":["createStopped"],"static":["createStopped"],"interface":[],"abstract":["__construct"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Abstract constructor of a watcher object","signature":"public EvWatcher::__construct( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"createStopped":{"params":{"$callback":"","$data":"","$priority":""},"docComment":"Create instance of a stopped EvCheck watcher","signature":"static EvCheck::createStopped(string $callback ,string $data ,string $priority )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"clear":{"params":[],"docComment":"Clear watcher pending status","signature":"public EvWatcher::clear( )","inheritdoc":0,"modifier":["public"],"return":""},"feed":{"params":{"$revents":""},"docComment":"Feeds the given revents set into the event loop","signature":"public EvWatcher::feed(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"getLoop":{"params":[],"docComment":"Returns the loop responsible for the watcher","signature":"public EvWatcher::getLoop( )","inheritdoc":0,"modifier":["public"],"return":"EvLoop"},"invoke":{"params":{"$revents":""},"docComment":"Invokes the watcher callback with the given received events bit\n  mask","signature":"public EvWatcher::invoke(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"keepalive":{"params":{"$value":""},"docComment":"Configures whether to keep the loop from returning","signature":"public EvWatcher::keepalive(bool $value )","inheritdoc":0,"modifier":["public"],"return":""},"setCallback":{"params":{"$callback":""},"docComment":"Sets new callback for the watcher","signature":"public EvWatcher::setCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"start":{"params":[],"docComment":"Starts the watcher","signature":"public EvWatcher::start( )","inheritdoc":0,"modifier":["public"],"return":""},"stop":{"params":[],"docComment":"Stops the watcher","signature":"public EvWatcher::stop( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["is_active","data","is_pending","priority"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","is_active":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"data":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_pending":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"priority":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EvChild":{"classname":"EvChild","docComment":"","methods":{"modifier":{"public":["__construct","createStopped","set","clear","__construct","feed","getLoop","invoke","keepalive","setCallback","start","stop"],"private":[],"protected":[],"final":["createStopped"],"static":["createStopped"],"interface":[],"abstract":["__construct"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Abstract constructor of a watcher object","signature":"public EvWatcher::__construct( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"createStopped":{"params":{"$pid":"","$trace":"","$callback":"","$data":"","$priority":""},"docComment":"Create instance of a stopped EvCheck watcher","signature":"static EvChild::createStopped(int $pid ,bool $trace ,callable $callback ,mixed $data ,int $priority )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"set":{"params":{"$pid":"","$trace":""},"docComment":"Configures the watcher","signature":"public EvChild::set(int $pid ,bool $trace )","inheritdoc":0,"modifier":["public"],"return":""},"clear":{"params":[],"docComment":"Clear watcher pending status","signature":"public EvWatcher::clear( )","inheritdoc":0,"modifier":["public"],"return":""},"feed":{"params":{"$revents":""},"docComment":"Feeds the given revents set into the event loop","signature":"public EvWatcher::feed(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"getLoop":{"params":[],"docComment":"Returns the loop responsible for the watcher","signature":"public EvWatcher::getLoop( )","inheritdoc":0,"modifier":["public"],"return":"EvLoop"},"invoke":{"params":{"$revents":""},"docComment":"Invokes the watcher callback with the given received events bit\n  mask","signature":"public EvWatcher::invoke(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"keepalive":{"params":{"$value":""},"docComment":"Configures whether to keep the loop from returning","signature":"public EvWatcher::keepalive(bool $value )","inheritdoc":0,"modifier":["public"],"return":""},"setCallback":{"params":{"$callback":""},"docComment":"Sets new callback for the watcher","signature":"public EvWatcher::setCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"start":{"params":[],"docComment":"Starts the watcher","signature":"public EvWatcher::start( )","inheritdoc":0,"modifier":["public"],"return":""},"stop":{"params":[],"docComment":"Stops the watcher","signature":"public EvWatcher::stop( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["pid","rpid","rstatus","is_active","data","is_pending","priority"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","pid":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"rpid":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"rstatus":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_active":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"data":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_pending":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"priority":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EvEmbed":{"classname":"EvEmbed","docComment":"","methods":{"modifier":{"public":["__construct","createStopped","set","sweep","clear","__construct","feed","getLoop","invoke","keepalive","setCallback","start","stop"],"private":[],"protected":[],"final":["createStopped"],"static":["createStopped"],"interface":[],"abstract":["__construct"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Abstract constructor of a watcher object","signature":"public EvWatcher::__construct( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"createStopped":{"params":{"$other":"","$callback":"","$data":"","$priority":""},"docComment":"Create stopped EvEmbed watcher object","signature":"static EvEmbed::createStopped(object $other ,callable $callback ,mixed $data ,int $priority )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"set":{"params":{"$other":""},"docComment":"Configures the watcher","signature":"public EvEmbed::set(object $other )","inheritdoc":0,"modifier":["public"],"return":""},"sweep":{"params":[],"docComment":"Make a single, non-blocking sweep over the embedded loop.","signature":"public EvEmbed::sweep( )","inheritdoc":0,"modifier":["public"],"return":""},"clear":{"params":[],"docComment":"Clear watcher pending status","signature":"public EvWatcher::clear( )","inheritdoc":0,"modifier":["public"],"return":""},"feed":{"params":{"$revents":""},"docComment":"Feeds the given revents set into the event loop","signature":"public EvWatcher::feed(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"getLoop":{"params":[],"docComment":"Returns the loop responsible for the watcher","signature":"public EvWatcher::getLoop( )","inheritdoc":0,"modifier":["public"],"return":"EvLoop"},"invoke":{"params":{"$revents":""},"docComment":"Invokes the watcher callback with the given received events bit\n  mask","signature":"public EvWatcher::invoke(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"keepalive":{"params":{"$value":""},"docComment":"Configures whether to keep the loop from returning","signature":"public EvWatcher::keepalive(bool $value )","inheritdoc":0,"modifier":["public"],"return":""},"setCallback":{"params":{"$callback":""},"docComment":"Sets new callback for the watcher","signature":"public EvWatcher::setCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"start":{"params":[],"docComment":"Starts the watcher","signature":"public EvWatcher::start( )","inheritdoc":0,"modifier":["public"],"return":""},"stop":{"params":[],"docComment":"Stops the watcher","signature":"public EvWatcher::stop( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["embed"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","embed":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EvFork":{"classname":"EvFork","docComment":"","methods":{"modifier":{"public":["__construct","createStopped","clear","__construct","feed","getLoop","invoke","keepalive","setCallback","start","stop"],"private":[],"protected":[],"final":["createStopped"],"static":["createStopped"],"interface":[],"abstract":["__construct"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Abstract constructor of a watcher object","signature":"public EvWatcher::__construct( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"createStopped":{"params":{"$callback":"","$data":"","$priority":""},"docComment":"Creates a stopped instance of EvFork watcher class","signature":"static EvFork::createStopped(string $callback ,string $data ,string $priority )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"clear":{"params":[],"docComment":"Clear watcher pending status","signature":"public EvWatcher::clear( )","inheritdoc":0,"modifier":["public"],"return":""},"feed":{"params":{"$revents":""},"docComment":"Feeds the given revents set into the event loop","signature":"public EvWatcher::feed(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"getLoop":{"params":[],"docComment":"Returns the loop responsible for the watcher","signature":"public EvWatcher::getLoop( )","inheritdoc":0,"modifier":["public"],"return":"EvLoop"},"invoke":{"params":{"$revents":""},"docComment":"Invokes the watcher callback with the given received events bit\n  mask","signature":"public EvWatcher::invoke(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"keepalive":{"params":{"$value":""},"docComment":"Configures whether to keep the loop from returning","signature":"public EvWatcher::keepalive(bool $value )","inheritdoc":0,"modifier":["public"],"return":""},"setCallback":{"params":{"$callback":""},"docComment":"Sets new callback for the watcher","signature":"public EvWatcher::setCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"start":{"params":[],"docComment":"Starts the watcher","signature":"public EvWatcher::start( )","inheritdoc":0,"modifier":["public"],"return":""},"stop":{"params":[],"docComment":"Stops the watcher","signature":"public EvWatcher::stop( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["is_active","data","is_pending","priority"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","is_active":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"data":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_pending":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"priority":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EvIdle":{"classname":"EvIdle","docComment":"","methods":{"modifier":{"public":["__construct","createStopped","clear","__construct","feed","getLoop","invoke","keepalive","setCallback","start","stop"],"private":[],"protected":[],"final":["createStopped"],"static":["createStopped"],"interface":[],"abstract":["__construct"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Abstract constructor of a watcher object","signature":"public EvWatcher::__construct( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"createStopped":{"params":{"$callback":"","$data":"","$priority":""},"docComment":"Creates instance of a stopped EvIdle watcher object","signature":"static EvIdle::createStopped(string $callback ,mixed $data ,int $priority )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"clear":{"params":[],"docComment":"Clear watcher pending status","signature":"public EvWatcher::clear( )","inheritdoc":0,"modifier":["public"],"return":""},"feed":{"params":{"$revents":""},"docComment":"Feeds the given revents set into the event loop","signature":"public EvWatcher::feed(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"getLoop":{"params":[],"docComment":"Returns the loop responsible for the watcher","signature":"public EvWatcher::getLoop( )","inheritdoc":0,"modifier":["public"],"return":"EvLoop"},"invoke":{"params":{"$revents":""},"docComment":"Invokes the watcher callback with the given received events bit\n  mask","signature":"public EvWatcher::invoke(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"keepalive":{"params":{"$value":""},"docComment":"Configures whether to keep the loop from returning","signature":"public EvWatcher::keepalive(bool $value )","inheritdoc":0,"modifier":["public"],"return":""},"setCallback":{"params":{"$callback":""},"docComment":"Sets new callback for the watcher","signature":"public EvWatcher::setCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"start":{"params":[],"docComment":"Starts the watcher","signature":"public EvWatcher::start( )","inheritdoc":0,"modifier":["public"],"return":""},"stop":{"params":[],"docComment":"Stops the watcher","signature":"public EvWatcher::stop( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["is_active","data","is_pending","priority"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","is_active":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"data":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_pending":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"priority":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EvIo":{"classname":"EvIo","docComment":"","methods":{"modifier":{"public":["__construct","createStopped","set","clear","__construct","feed","getLoop","invoke","keepalive","setCallback","start","stop"],"private":[],"protected":[],"final":["createStopped"],"static":["createStopped"],"interface":[],"abstract":["__construct"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Abstract constructor of a watcher object","signature":"public EvWatcher::__construct( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"createStopped":{"params":{"$fd":"","$events":"","$callback":"","$data":"","$priority":""},"docComment":"Create stopped EvIo watcher object","signature":"static EvIo::createStopped(mixed $fd ,int $events ,callable $callback ,[mixed $data] ,[int $priority] )","inheritdoc":0,"modifier":["final","public","static"],"return":"EvIo"},"set":{"params":{"$fd":"","$events":""},"docComment":"Configures the watcher","signature":"public EvIo::set(mixed $fd ,int $events )","inheritdoc":0,"modifier":["public"],"return":""},"clear":{"params":[],"docComment":"Clear watcher pending status","signature":"public EvWatcher::clear( )","inheritdoc":0,"modifier":["public"],"return":""},"feed":{"params":{"$revents":""},"docComment":"Feeds the given revents set into the event loop","signature":"public EvWatcher::feed(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"getLoop":{"params":[],"docComment":"Returns the loop responsible for the watcher","signature":"public EvWatcher::getLoop( )","inheritdoc":0,"modifier":["public"],"return":"EvLoop"},"invoke":{"params":{"$revents":""},"docComment":"Invokes the watcher callback with the given received events bit\n  mask","signature":"public EvWatcher::invoke(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"keepalive":{"params":{"$value":""},"docComment":"Configures whether to keep the loop from returning","signature":"public EvWatcher::keepalive(bool $value )","inheritdoc":0,"modifier":["public"],"return":""},"setCallback":{"params":{"$callback":""},"docComment":"Sets new callback for the watcher","signature":"public EvWatcher::setCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"start":{"params":[],"docComment":"Starts the watcher","signature":"public EvWatcher::start( )","inheritdoc":0,"modifier":["public"],"return":""},"stop":{"params":[],"docComment":"Stops the watcher","signature":"public EvWatcher::stop( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["fd","events","is_active","data","is_pending","priority"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","fd":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"events":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_active":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"data":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_pending":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"priority":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EvLoop":{"classname":"EvLoop","docComment":"","methods":{"modifier":{"public":["backend","check","child","__construct","defaultLoop","embed","fork","idle","invokePending","io","loopFork","now","nowUpdate","periodic","prepare","resume","run","signal","stat","stop","suspend","timer","verify"],"private":[],"protected":[],"final":["check","child","embed","fork","idle","io","periodic","prepare","signal","stat","timer"],"static":["defaultLoop"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","backend":{"params":[],"docComment":"Returns an integer describing the backend used by libev.","signature":"public EvLoop::backend( )","inheritdoc":0,"modifier":["public"],"return":""},"check":{"params":{"$callback":"","$data":"","$priority":""},"docComment":"Creates EvCheck object associated with the current event loop\n  instance","signature":"public EvLoop::check(string $callback ,string $data ,string $priority )","inheritdoc":0,"modifier":["final","public"],"return":"EvCheck"},"child":{"params":{"$pid":"","$trace":"","$callback":"","$data":"","$priority":""},"docComment":"Creates EvChild object associated with the current event loop","signature":"public EvLoop::child(string $pid ,string $trace ,string $callback ,string $data ,string $priority )","inheritdoc":0,"modifier":["final","public"],"return":"EvChild"},"__construct":{"params":{"$flags":"","$data":"","$io_interval":"double","$timeout_interval":"double"},"docComment":"Constructs the event loop object","signature":"public EvLoop::__construct(int $flags ,[mixed $data] ,[double $io_interval] ,[double $timeout_interval] )","inheritdoc":0,"modifier":["public"],"return":""},"defaultLoop":{"params":{"$flags":"","$data":"","$io_interval":"double","$timeout_interval":"double"},"docComment":"Returns or creates the default event loop.","signature":"static EvLoop::defaultLoop([int $flags] ,[mixed $data] ,[double $io_interval] ,[double $timeout_interval] )","inheritdoc":0,"modifier":["public","static"],"return":"EvLoop"},"embed":{"params":{"$other":"","$callback":"","$data":"","$priority":""},"docComment":"Creates an instance of EvEmbed watcher associated\n  with the current EvLoop object.","signature":"public EvLoop::embed(string $other ,string $callback ,string $data ,string $priority )","inheritdoc":0,"modifier":["final","public"],"return":"EvEmbed"},"fork":{"params":{"$callback":"","$data":"","$priority":""},"docComment":"Creates EvFork watcher object associated with the current event\n  loop instance","signature":"public EvLoop::fork(callable $callback ,[mixed $data] ,[int $priority] )","inheritdoc":0,"modifier":["final","public"],"return":"EvFork"},"idle":{"params":{"$callback":"","$data":"","$priority":""},"docComment":"Creates EvIdle watcher object associated with the current event\n  loop instance","signature":"public EvLoop::idle(callable $callback ,[mixed $data] ,[int $priority] )","inheritdoc":0,"modifier":["final","public"],"return":"EvIdle"},"invokePending":{"params":[],"docComment":"Invoke all pending watchers while resetting their pending state","signature":"public EvLoop::invokePending( )","inheritdoc":0,"modifier":["public"],"return":""},"io":{"params":{"$fd":"","$events":"","$callback":"","$data":"","$priority":""},"docComment":"Create EvIo watcher object associated with the current event\n  loop instance","signature":"public EvLoop::io(mixed $fd ,int $events ,callable $callback ,[mixed $data] ,[int $priority] )","inheritdoc":0,"modifier":["final","public"],"return":"EvIo"},"loopFork":{"params":[],"docComment":"Must be called after a fork","signature":"public EvLoop::loopFork( )","inheritdoc":0,"modifier":["public"],"return":""},"now":{"params":[],"docComment":"Returns the current \"event loop time\"","signature":"public EvLoop::now( )","inheritdoc":0,"modifier":["public"],"return":"double"},"nowUpdate":{"params":[],"docComment":"Establishes the current time by querying the kernel, updating the time\n    returned by EvLoop::now in the progress.","signature":"public EvLoop::nowUpdate( )","inheritdoc":0,"modifier":["public"],"return":""},"periodic":{"params":{"$offset":"double","$interval":"double","$callback":"","$data":"","$priority":""},"docComment":"Creates EvPeriodic watcher object associated with the current\n  event loop instance","signature":"public EvLoop::periodic(double $offset ,double $interval ,callable $callback ,[mixed $data] ,[int $priority] )","inheritdoc":0,"modifier":["final","public"],"return":"EvPeriodic"},"prepare":{"params":{"$callback":"","$data":"","$priority":""},"docComment":"Creates EvPrepare watcher object associated with the current\n  event loop instance","signature":"public EvLoop::prepare(callable $callback ,[mixed $data] ,[int $priority] )","inheritdoc":0,"modifier":["final","public"],"return":"EvPrepare"},"resume":{"params":[],"docComment":"Resume previously suspended default event loop","signature":"public EvLoop::resume( )","inheritdoc":0,"modifier":["public"],"return":""},"run":{"params":{"$flags":""},"docComment":"Begin checking for events and calling callbacks for the loop","signature":"public EvLoop::run([int $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"signal":{"params":{"$signum":"","$callback":"","$data":"","$priority":""},"docComment":"Creates EvSignal watcher object associated with the current\n  event loop instance","signature":"public EvLoop::signal(int $signum ,callable $callback ,[mixed $data] ,[int $priority] )","inheritdoc":0,"modifier":["final","public"],"return":"EvSignal"},"stat":{"params":{"$path":"","$interval":"double","$callback":"","$data":"","$priority":""},"docComment":"Creates EvStat watcher object associated with the current event\n  loop instance","signature":"public EvLoop::stat(string $path ,double $interval ,callable $callback ,[mixed $data] ,[int $priority] )","inheritdoc":0,"modifier":["final","public"],"return":"EvStat"},"stop":{"params":{"$how":""},"docComment":"Stops the event loop","signature":"public EvLoop::stop(int $how )","inheritdoc":0,"modifier":["public"],"return":""},"suspend":{"params":[],"docComment":"Suspend the loop","signature":"public EvLoop::suspend( )","inheritdoc":0,"modifier":["public"],"return":""},"timer":{"params":{"$after":"double","$repeat":"double","$callback":"","$data":"","$priority":""},"docComment":"Creates EvTimer watcher object associated with the current event\n  loop instance","signature":"public EvLoop::timer(double $after ,double $repeat ,callable $callback ,[mixed $data] ,[int $priority] )","inheritdoc":0,"modifier":["final","public"],"return":"EvTimer"},"verify":{"params":[],"docComment":"Performs internal consistency checks(for debugging)","signature":"public EvLoop::verify( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["data","backend","is_default_loop","iteration","pending","io_interval","timeout_interval","depth"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","data":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"backend":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_default_loop":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"iteration":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"pending":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"io_interval":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"timeout_interval":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"depth":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EvPeriodic":{"classname":"EvPeriodic","docComment":"","methods":{"modifier":{"public":["again","at","__construct","createStopped","set","clear","__construct","feed","getLoop","invoke","keepalive","setCallback","start","stop"],"private":[],"protected":[],"final":["createStopped"],"static":["createStopped"],"interface":[],"abstract":["__construct"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","again":{"params":[],"docComment":"Simply stops and restarts the periodic watcher again.","signature":"public EvPeriodic::again( )","inheritdoc":0,"modifier":["public"],"return":""},"at":{"params":[],"docComment":"Returns the absolute time that this\n  watcher is supposed to trigger next","signature":"public EvPeriodic::at( )","inheritdoc":0,"modifier":["public"],"return":"double"},"__construct":{"params":[],"docComment":"Abstract constructor of a watcher object","signature":"public EvWatcher::__construct( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"createStopped":{"params":{"$offset":"double","$interval":"double","$reschedule_cb":"","$callback":"","$data":"","$priority":""},"docComment":"Create a stopped EvPeriodic watcher","signature":"static EvPeriodic::createStopped(double $offset ,double $interval ,callable $reschedule_cb ,callable $callback ,[mixed $data] ,[int $priority] )","inheritdoc":0,"modifier":["final","public","static"],"return":"EvPeriodic"},"set":{"params":{"$offset":"double","$interval":"double"},"docComment":"Configures the watcher","signature":"public EvPeriodic::set(double $offset ,double $interval )","inheritdoc":0,"modifier":["public"],"return":""},"clear":{"params":[],"docComment":"Clear watcher pending status","signature":"public EvWatcher::clear( )","inheritdoc":0,"modifier":["public"],"return":""},"feed":{"params":{"$revents":""},"docComment":"Feeds the given revents set into the event loop","signature":"public EvWatcher::feed(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"getLoop":{"params":[],"docComment":"Returns the loop responsible for the watcher","signature":"public EvWatcher::getLoop( )","inheritdoc":0,"modifier":["public"],"return":"EvLoop"},"invoke":{"params":{"$revents":""},"docComment":"Invokes the watcher callback with the given received events bit\n  mask","signature":"public EvWatcher::invoke(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"keepalive":{"params":{"$value":""},"docComment":"Configures whether to keep the loop from returning","signature":"public EvWatcher::keepalive(bool $value )","inheritdoc":0,"modifier":["public"],"return":""},"setCallback":{"params":{"$callback":""},"docComment":"Sets new callback for the watcher","signature":"public EvWatcher::setCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"start":{"params":[],"docComment":"Starts the watcher","signature":"public EvWatcher::start( )","inheritdoc":0,"modifier":["public"],"return":""},"stop":{"params":[],"docComment":"Stops the watcher","signature":"public EvWatcher::stop( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["offset","interval","is_active","data","is_pending","priority"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","offset":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"interval":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_active":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"data":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_pending":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"priority":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EvPrepare":{"classname":"EvPrepare","docComment":"","methods":{"modifier":{"public":["__construct","createStopped","clear","__construct","feed","getLoop","invoke","keepalive","setCallback","start","stop"],"private":[],"protected":[],"final":["createStopped"],"static":["createStopped"],"interface":[],"abstract":["__construct"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Abstract constructor of a watcher object","signature":"public EvWatcher::__construct( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"createStopped":{"params":{"$callback":"","$data":"","$priority":""},"docComment":"Creates a stopped instance of EvPrepare watcher","signature":"static EvPrepare::createStopped(callable $callback ,[mixed $data] ,[int $priority] )","inheritdoc":0,"modifier":["final","public","static"],"return":"EvPrepare"},"clear":{"params":[],"docComment":"Clear watcher pending status","signature":"public EvWatcher::clear( )","inheritdoc":0,"modifier":["public"],"return":""},"feed":{"params":{"$revents":""},"docComment":"Feeds the given revents set into the event loop","signature":"public EvWatcher::feed(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"getLoop":{"params":[],"docComment":"Returns the loop responsible for the watcher","signature":"public EvWatcher::getLoop( )","inheritdoc":0,"modifier":["public"],"return":"EvLoop"},"invoke":{"params":{"$revents":""},"docComment":"Invokes the watcher callback with the given received events bit\n  mask","signature":"public EvWatcher::invoke(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"keepalive":{"params":{"$value":""},"docComment":"Configures whether to keep the loop from returning","signature":"public EvWatcher::keepalive(bool $value )","inheritdoc":0,"modifier":["public"],"return":""},"setCallback":{"params":{"$callback":""},"docComment":"Sets new callback for the watcher","signature":"public EvWatcher::setCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"start":{"params":[],"docComment":"Starts the watcher","signature":"public EvWatcher::start( )","inheritdoc":0,"modifier":["public"],"return":""},"stop":{"params":[],"docComment":"Stops the watcher","signature":"public EvWatcher::stop( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["is_active","data","is_pending","priority"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","is_active":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"data":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_pending":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"priority":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EvSignal":{"classname":"EvSignal","docComment":"","methods":{"modifier":{"public":["__construct","createStopped","set","clear","__construct","feed","getLoop","invoke","keepalive","setCallback","start","stop"],"private":[],"protected":[],"final":["createStopped"],"static":["createStopped"],"interface":[],"abstract":["__construct"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Abstract constructor of a watcher object","signature":"public EvWatcher::__construct( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"createStopped":{"params":{"$signum":"","$callback":"","$data":"","$priority":""},"docComment":"Create stopped EvSignal watcher object","signature":"static EvSignal::createStopped(int $signum ,callable $callback ,[mixed $data] ,[int $priority] )","inheritdoc":0,"modifier":["final","public","static"],"return":"EvSignal"},"set":{"params":{"$signum":""},"docComment":"Configures the watcher","signature":"public EvSignal::set(int $signum )","inheritdoc":0,"modifier":["public"],"return":""},"clear":{"params":[],"docComment":"Clear watcher pending status","signature":"public EvWatcher::clear( )","inheritdoc":0,"modifier":["public"],"return":""},"feed":{"params":{"$revents":""},"docComment":"Feeds the given revents set into the event loop","signature":"public EvWatcher::feed(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"getLoop":{"params":[],"docComment":"Returns the loop responsible for the watcher","signature":"public EvWatcher::getLoop( )","inheritdoc":0,"modifier":["public"],"return":"EvLoop"},"invoke":{"params":{"$revents":""},"docComment":"Invokes the watcher callback with the given received events bit\n  mask","signature":"public EvWatcher::invoke(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"keepalive":{"params":{"$value":""},"docComment":"Configures whether to keep the loop from returning","signature":"public EvWatcher::keepalive(bool $value )","inheritdoc":0,"modifier":["public"],"return":""},"setCallback":{"params":{"$callback":""},"docComment":"Sets new callback for the watcher","signature":"public EvWatcher::setCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"start":{"params":[],"docComment":"Starts the watcher","signature":"public EvWatcher::start( )","inheritdoc":0,"modifier":["public"],"return":""},"stop":{"params":[],"docComment":"Stops the watcher","signature":"public EvWatcher::stop( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["signum","is_active","data","is_pending","priority"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","signum":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_active":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"data":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_pending":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"priority":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EvStat":{"classname":"EvStat","docComment":"","methods":{"modifier":{"public":["attr","__construct","createStopped","prev","set","stat","clear","__construct","feed","getLoop","invoke","keepalive","setCallback","start","stop"],"private":[],"protected":[],"final":["createStopped"],"static":["createStopped"],"interface":[],"abstract":["__construct"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","attr":{"params":[],"docComment":"Returns the values most recently detected by Ev","signature":"public EvStat::attr( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"Abstract constructor of a watcher object","signature":"public EvWatcher::__construct( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"createStopped":{"params":{"$path":"","$interval":"double","$callback":"","$data":"","$priority":""},"docComment":"Create a stopped EvStat watcher object","signature":"static EvStat::createStopped(string $path ,double $interval ,callable $callback ,[mixed $data] ,[int $priority] )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"prev":{"params":[],"docComment":"Returns the previous set of values returned by EvStat::attr","signature":"public EvStat::prev( )","inheritdoc":0,"modifier":["public"],"return":""},"set":{"params":{"$path":"","$interval":"double"},"docComment":"Configures the watcher","signature":"public EvStat::set(string $path ,double $interval )","inheritdoc":0,"modifier":["public"],"return":""},"stat":{"params":[],"docComment":"Initiates the stat call","signature":"public EvStat::stat( )","inheritdoc":0,"modifier":["public"],"return":""},"clear":{"params":[],"docComment":"Clear watcher pending status","signature":"public EvWatcher::clear( )","inheritdoc":0,"modifier":["public"],"return":""},"feed":{"params":{"$revents":""},"docComment":"Feeds the given revents set into the event loop","signature":"public EvWatcher::feed(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"getLoop":{"params":[],"docComment":"Returns the loop responsible for the watcher","signature":"public EvWatcher::getLoop( )","inheritdoc":0,"modifier":["public"],"return":"EvLoop"},"invoke":{"params":{"$revents":""},"docComment":"Invokes the watcher callback with the given received events bit\n  mask","signature":"public EvWatcher::invoke(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"keepalive":{"params":{"$value":""},"docComment":"Configures whether to keep the loop from returning","signature":"public EvWatcher::keepalive(bool $value )","inheritdoc":0,"modifier":["public"],"return":""},"setCallback":{"params":{"$callback":""},"docComment":"Sets new callback for the watcher","signature":"public EvWatcher::setCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"start":{"params":[],"docComment":"Starts the watcher","signature":"public EvWatcher::start( )","inheritdoc":0,"modifier":["public"],"return":""},"stop":{"params":[],"docComment":"Stops the watcher","signature":"public EvWatcher::stop( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["path","interval","is_active","data","is_pending","priority"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","path":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"interval":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_active":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"data":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_pending":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"priority":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EvTimer":{"classname":"EvTimer","docComment":"","methods":{"modifier":{"public":["again","__construct","createStopped","set","clear","__construct","feed","getLoop","invoke","keepalive","setCallback","start","stop"],"private":[],"protected":[],"final":["createStopped"],"static":["createStopped"],"interface":[],"abstract":["__construct"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","again":{"params":[],"docComment":"Restarts the timer watcher","signature":"public EvTimer::again( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"Abstract constructor of a watcher object","signature":"public EvWatcher::__construct( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"createStopped":{"params":{"$after":"double","$repeat":"double","$callback":"","$data":"","$priority":""},"docComment":"Creates EvTimer stopped watcher object","signature":"static EvTimer::createStopped(double $after ,double $repeat ,callable $callback ,[mixed $data] ,[int $priority] )","inheritdoc":0,"modifier":["final","public","static"],"return":"EvTimer"},"set":{"params":{"$after":"double","$repeat":"double"},"docComment":"Configures the watcher","signature":"public EvTimer::set(double $after ,double $repeat )","inheritdoc":0,"modifier":["public"],"return":""},"clear":{"params":[],"docComment":"Clear watcher pending status","signature":"public EvWatcher::clear( )","inheritdoc":0,"modifier":["public"],"return":""},"feed":{"params":{"$revents":""},"docComment":"Feeds the given revents set into the event loop","signature":"public EvWatcher::feed(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"getLoop":{"params":[],"docComment":"Returns the loop responsible for the watcher","signature":"public EvWatcher::getLoop( )","inheritdoc":0,"modifier":["public"],"return":"EvLoop"},"invoke":{"params":{"$revents":""},"docComment":"Invokes the watcher callback with the given received events bit\n  mask","signature":"public EvWatcher::invoke(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"keepalive":{"params":{"$value":""},"docComment":"Configures whether to keep the loop from returning","signature":"public EvWatcher::keepalive(bool $value )","inheritdoc":0,"modifier":["public"],"return":""},"setCallback":{"params":{"$callback":""},"docComment":"Sets new callback for the watcher","signature":"public EvWatcher::setCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"start":{"params":[],"docComment":"Starts the watcher","signature":"public EvWatcher::start( )","inheritdoc":0,"modifier":["public"],"return":""},"stop":{"params":[],"docComment":"Stops the watcher","signature":"public EvWatcher::stop( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["repeat","remaining","is_active","data","is_pending","priority"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","repeat":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"remaining":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_active":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"data":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_pending":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"priority":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EvWatcher":{"classname":"EvWatcher","docComment":"","methods":{"modifier":{"public":["clear","__construct","feed","getLoop","invoke","keepalive","setCallback","start","stop"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["__construct"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","clear":{"params":[],"docComment":"Clear watcher pending status","signature":"public EvWatcher::clear( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"Abstract constructor of a watcher object","signature":"public EvWatcher::__construct( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"feed":{"params":{"$revents":""},"docComment":"Feeds the given revents set into the event loop","signature":"public EvWatcher::feed(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"getLoop":{"params":[],"docComment":"Returns the loop responsible for the watcher","signature":"public EvWatcher::getLoop( )","inheritdoc":0,"modifier":["public"],"return":"EvLoop"},"invoke":{"params":{"$revents":""},"docComment":"Invokes the watcher callback with the given received events bit\n  mask","signature":"public EvWatcher::invoke(int $revents )","inheritdoc":0,"modifier":["public"],"return":""},"keepalive":{"params":{"$value":""},"docComment":"Configures whether to keep the loop from returning","signature":"public EvWatcher::keepalive(bool $value )","inheritdoc":0,"modifier":["public"],"return":""},"setCallback":{"params":{"$callback":""},"docComment":"Sets new callback for the watcher","signature":"public EvWatcher::setCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"start":{"params":[],"docComment":"Starts the watcher","signature":"public EvWatcher::start( )","inheritdoc":0,"modifier":["public"],"return":""},"stop":{"params":[],"docComment":"Stops the watcher","signature":"public EvWatcher::stop( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["is_active","data","is_pending","priority"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","is_active":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"data":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"is_pending":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"priority":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Event":{"classname":"Event","docComment":"","methods":{"modifier":{"public":["add","addSignal","addTimer","__construct","del","delSignal","delTimer","free","getSupportedMethods","pending","set","setPriority","setTimer","signal","timer"],"private":[],"protected":[],"final":[],"static":["getSupportedMethods","signal","timer"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$timeout":"double"},"docComment":"Makes event pending","signature":"public Event::add(double $timeout )","inheritdoc":0,"modifier":["public"],"return":""},"addSignal":{"params":{"$timeout":"double"},"docComment":"Makes signal event pending","signature":"public Event::addSignal(double $timeout )","inheritdoc":0,"modifier":["public"],"return":""},"addTimer":{"params":{"$timeout":"double"},"docComment":"Makes timer event pending","signature":"public Event::addTimer(double $timeout )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$base":"EventBase","$fd":"","$what":"","$cb":"","$arg":""},"docComment":"Constructs Event object","signature":"public Event::__construct(EventBase $base ,mixed $fd ,int $what ,callable $cb ,[mixed $arg] )","inheritdoc":0,"modifier":["public"],"return":""},"del":{"params":[],"docComment":"Makes event non-pending","signature":"public Event::del( )","inheritdoc":0,"modifier":["public"],"return":""},"delSignal":{"params":[],"docComment":"Makes signal event non-pending","signature":"public Event::delSignal( )","inheritdoc":0,"modifier":["public"],"return":""},"delTimer":{"params":[],"docComment":"Makes timer event non-pending","signature":"public Event::delTimer( )","inheritdoc":0,"modifier":["public"],"return":""},"free":{"params":[],"docComment":"Make event non-pending and free resources allocated for this\n  event.","signature":"public Event::free( )","inheritdoc":0,"modifier":["public"],"return":""},"getSupportedMethods":{"params":[],"docComment":"Returns array with of the names of the methods supported in this version of Libevent","signature":"static Event::getSupportedMethods( )","inheritdoc":0,"modifier":["public","static"],"return":""},"pending":{"params":{"$flags":""},"docComment":"Detects whether event is pending or scheduled","signature":"public Event::pending(int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"set":{"params":{"$base":"EventBase","$fd":"","$what":"","$cb":"","$arg":""},"docComment":"Re-configures event","signature":"public Event::set(EventBase $base ,mixed $fd ,int $what ,callable $cb ,mixed $arg )","inheritdoc":0,"modifier":["public"],"return":""},"setPriority":{"params":{"$priority":""},"docComment":"Set event priority","signature":"public Event::setPriority(int $priority )","inheritdoc":0,"modifier":["public"],"return":""},"setTimer":{"params":{"$base":"EventBase","$cb":"","$arg":""},"docComment":"Re-configures timer event","signature":"public Event::setTimer(EventBase $base ,callable $cb ,mixed $arg )","inheritdoc":0,"modifier":["public"],"return":""},"signal":{"params":{"$base":"EventBase","$signum":"","$cb":"","$arg":""},"docComment":"Constructs signal event object","signature":"static Event::signal(EventBase $base ,int $signum ,callable $cb ,mixed $arg )","inheritdoc":0,"modifier":["public","static"],"return":"Event"},"timer":{"params":{"$base":"EventBase","$cb":"","$arg":""},"docComment":"Constructs timer event object","signature":"static Event::timer(EventBase $base ,callable $cb ,mixed $arg )","inheritdoc":0,"modifier":["public","static"],"return":"Event"}}},"properties":{"modifier":{"public":["pending"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["ET","PERSIST","READ","WRITE","SIGNAL","TIMEOUT"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","ET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PERSIST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"READ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WRITE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SIGNAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TIMEOUT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"pending":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EventBase":{"classname":"EventBase","docComment":"","methods":{"modifier":{"public":["__construct","dispatch","exit","getFeatures","getMethod","getTimeOfDayCached","gotExit","gotStop","loop","priorityInit","reInit","stop"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$cfg":"EventConfig"},"docComment":"Constructs EventBase object","signature":"public EventBase::__construct(EventConfig $cfg )","inheritdoc":0,"modifier":["public"],"return":""},"dispatch":{"params":[],"docComment":"Dispatch pending events","signature":"public EventBase::dispatch( )","inheritdoc":0,"modifier":["public"],"return":""},"exit":{"params":{"$timeout":"double"},"docComment":"Stop dispatching events","signature":"public EventBase::exit(double $timeout )","inheritdoc":0,"modifier":["public"],"return":""},"getFeatures":{"params":[],"docComment":"Returns bitmask of features supported","signature":"public EventBase::getFeatures( )","inheritdoc":0,"modifier":["public"],"return":""},"getMethod":{"params":{"$cfg":"EventConfig"},"docComment":"Returns event method in use","signature":"public EventBase::getMethod(EventConfig $cfg )","inheritdoc":0,"modifier":["public"],"return":""},"getTimeOfDayCached":{"params":[],"docComment":"Returns the current event base time","signature":"public EventBase::getTimeOfDayCached( )","inheritdoc":0,"modifier":["public"],"return":"double"},"gotExit":{"params":[],"docComment":"Checks if the event loop was told to exit","signature":"public EventBase::gotExit( )","inheritdoc":0,"modifier":["public"],"return":""},"gotStop":{"params":[],"docComment":"Checks if the event loop was told to exit","signature":"public EventBase::gotStop( )","inheritdoc":0,"modifier":["public"],"return":""},"loop":{"params":{"$flags":""},"docComment":"Dispatch pending events","signature":"public EventBase::loop(int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"priorityInit":{"params":{"$n_priorities":""},"docComment":"Sets number of priorities per event base","signature":"public EventBase::priorityInit(string $n_priorities )","inheritdoc":0,"modifier":["public"],"return":""},"reInit":{"params":{"$base":""},"docComment":"Re-initialize event base(after a fork).","signature":"public EventBase::reInit(string $base )","inheritdoc":0,"modifier":["public"],"return":""},"stop":{"params":[],"docComment":"Tells event_base to stop dispatching events","signature":"public EventBase::stop( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["LOOP_ONCE","LOOP_NONBLOCK","NOLOCK","STARTUP_IOCP","NO_CACHE_TIME","EPOLL_USE_CHANGELIST"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","LOOP_ONCE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LOOP_NONBLOCK":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"NOLOCK":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"STARTUP_IOCP":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"NO_CACHE_TIME":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"EPOLL_USE_CHANGELIST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EventBuffer":{"classname":"EventBuffer","docComment":"","methods":{"modifier":{"public":["add","addBuffer","appendFrom","__construct","copyout","drain","enableLocking","expand","freeze","lock","prepend","prependBuffer","pullup","read","read","readLine","search","searchEol","substr","unfreeze","unlock","write"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$data":""},"docComment":"Append data to the end of an event buffer","signature":"public EventBuffer::add(string $data )","inheritdoc":0,"modifier":["public"],"return":""},"addBuffer":{"params":{"$buf":"EventBuffer"},"docComment":"Move all data from a buffer provided to the current instance of EventBuffer","signature":"public EventBuffer::addBuffer(EventBuffer $buf )","inheritdoc":0,"modifier":["public"],"return":""},"appendFrom":{"params":{"$buf":"EventBuffer","$len":""},"docComment":"Moves the specified number of bytes from a source buffer to the\n  end of the current buffer","signature":"public EventBuffer::appendFrom(EventBuffer $buf ,int $len )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"Constructs EventBuffer object","signature":"public EventBuffer::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"copyout":{"params":{"&$data":"","$max_bytes":""},"docComment":"Copies out specified number of bytes from the front of the buffer","signature":"public EventBuffer::copyout(string &$data ,int $max_bytes )","inheritdoc":0,"modifier":["public"],"return":""},"drain":{"params":{"$len":""},"docComment":"Removes specified number of bytes from the front of the buffer\n  without copying it anywhere","signature":"public EventBuffer::drain(int $len )","inheritdoc":0,"modifier":["public"],"return":""},"enableLocking":{"params":[],"docComment":"\n ","signature":"public EventBuffer::enableLocking( )","inheritdoc":0,"modifier":["public"],"return":""},"expand":{"params":{"$len":""},"docComment":"Reserves space in buffer","signature":"public EventBuffer::expand(int $len )","inheritdoc":0,"modifier":["public"],"return":""},"freeze":{"params":{"$at_front":""},"docComment":"Prevent calls that modify an event buffer from succeeding","signature":"public EventBuffer::freeze(bool $at_front )","inheritdoc":0,"modifier":["public"],"return":""},"lock":{"params":[],"docComment":"Acquires a lock on buffer","signature":"public EventBuffer::lock( )","inheritdoc":0,"modifier":["public"],"return":""},"prepend":{"params":{"$data":""},"docComment":"Prepend data to the front of the buffer","signature":"public EventBuffer::prepend(string $data )","inheritdoc":0,"modifier":["public"],"return":""},"prependBuffer":{"params":{"$buf":"EventBuffer"},"docComment":"Moves all data from source buffer to the front of current buffer","signature":"public EventBuffer::prependBuffer(EventBuffer $buf )","inheritdoc":0,"modifier":["public"],"return":""},"pullup":{"params":{"$size":""},"docComment":"Linearizes data within buffer\n  and returns it's contents as a string","signature":"public EventBuffer::pullup(string $size )","inheritdoc":0,"modifier":["public"],"return":""},"read":{"params":{"$max_bytes":""},"docComment":"Read data from an evbuffer and drain the bytes read","signature":"public EventBuffer::read(int $max_bytes )","inheritdoc":0,"modifier":["public"],"return":""},"readLine":{"params":{"$eol_style":""},"docComment":"Extracts a line from the front of the buffer","signature":"public EventBuffer::readLine(string $eol_style )","inheritdoc":0,"modifier":["public"],"return":""},"search":{"params":{"$what":"","$start":"","$end":""},"docComment":"Scans the buffer for an occurrence of a string","signature":"public EventBuffer::search(string $what ,[int $start] ,[int $end] )","inheritdoc":0,"modifier":["public"],"return":""},"searchEol":{"params":{"$start":"","$eol_style":""},"docComment":"Scans the buffer for an occurrence of an end of line","signature":"public EventBuffer::searchEol([int $start] ,[int $eol_style] )","inheritdoc":0,"modifier":["public"],"return":""},"substr":{"params":{"$start":"","$length":""},"docComment":"Substracts a portion of the buffer data","signature":"public EventBuffer::substr(int $start ,int $length )","inheritdoc":0,"modifier":["public"],"return":""},"unfreeze":{"params":{"$at_front":""},"docComment":"Re-enable calls that modify an event buffer","signature":"public EventBuffer::unfreeze(bool $at_front )","inheritdoc":0,"modifier":["public"],"return":""},"unlock":{"params":[],"docComment":"Releases lock acquired by EventBuffer::lock","signature":"public EventBuffer::unlock( )","inheritdoc":0,"modifier":["public"],"return":""},"write":{"params":{"$fd":"","$howmuch":""},"docComment":"Write contents of the buffer to a file or socket","signature":"public EventBuffer::write(mixed $fd ,int $howmuch )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["length","contiguous_space"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["EOL_ANY","EOL_CRLF","EOL_CRLF_STRICT","EOL_LF","PTR_SET","PTR_ADD"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","EOL_ANY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"EOL_CRLF":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"EOL_CRLF_STRICT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"EOL_LF":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PTR_SET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PTR_ADD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"length":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"contiguous_space":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EventBufferEvent":{"classname":"EventBufferEvent","docComment":"","methods":{"modifier":{"public":["connect","connectHost","__construct","createPair","disable","enable","free","getDnsErrorString","getEnabled","getInput","getOutput","read","readBuffer","setCallbacks","setPriority","setTimeouts","setWatermark","sslError","sslFilter","sslRenegotiate","sslSocket","write","writeBuffer"],"private":[],"protected":[],"final":[],"static":["sslFilter","sslSocket"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","connect":{"params":{"$addr":""},"docComment":"Connect buffer event's file descriptor to given address or\n  UNIX socket","signature":"public EventBufferEvent::connect(string $addr )","inheritdoc":0,"modifier":["public"],"return":""},"connectHost":{"params":{"$dns_base":"EventDnsBase","$hostname":"","$port":"","$family":""},"docComment":"Connects to a hostname with optionally asyncronous DNS resolving","signature":"public EventBufferEvent::connectHost(EventDnsBase $dns_base ,string $hostname ,int $port ,[int $family] )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$base":"EventBase","$socket":"","$options":"","$readcb":"","$writecb":"","$eventcb":""},"docComment":"Constructs EventBufferEvent object","signature":"public EventBufferEvent::__construct(EventBase $base ,[mixed $socket] ,[int $options] ,[callable $readcb] ,[callable $writecb] ,[callable $eventcb] )","inheritdoc":0,"modifier":["public"],"return":""},"createPair":{"params":{"$base":"EventBase","$options":""},"docComment":"Creates two buffer events connected to each other","signature":"public EventBufferEvent::createPair(EventBase $base ,[int $options] )","inheritdoc":0,"modifier":["public"],"return":""},"disable":{"params":{"$events":""},"docComment":"Disable events read, write, or both on a buffer event.","signature":"public EventBufferEvent::disable(int $events )","inheritdoc":0,"modifier":["public"],"return":""},"enable":{"params":{"$events":""},"docComment":"Enable events read, write, or both on a buffer event.","signature":"public EventBufferEvent::enable(string $events )","inheritdoc":0,"modifier":["public"],"return":""},"free":{"params":[],"docComment":"Free a buffer event","signature":"public EventBufferEvent::free( )","inheritdoc":0,"modifier":["public"],"return":""},"getDnsErrorString":{"params":[],"docComment":"Returns string describing the last failed DNS lookup attempt","signature":"public EventBufferEvent::getDnsErrorString( )","inheritdoc":0,"modifier":["public"],"return":""},"getEnabled":{"params":[],"docComment":"Returns bitmask of events currently enabled on the buffer event","signature":"public EventBufferEvent::getEnabled( )","inheritdoc":0,"modifier":["public"],"return":""},"getInput":{"params":[],"docComment":"Returns underlying input buffer associated with current buffer\n  event","signature":"public EventBufferEvent::getInput( )","inheritdoc":0,"modifier":["public"],"return":"EventBuffer"},"getOutput":{"params":[],"docComment":"Returns underlying output buffer associated with current buffer\n  event","signature":"public EventBufferEvent::getOutput( )","inheritdoc":0,"modifier":["public"],"return":"EventBuffer"},"read":{"params":{"&$data":"","$size":""},"docComment":"Read buffer's data","signature":"public EventBufferEvent::read(string &$data ,int $size )","inheritdoc":0,"modifier":["public"],"return":""},"readBuffer":{"params":{"$buf":"EventBuffer"},"docComment":"Drains the entire contents of the input buffer and places them into buf","signature":"public EventBufferEvent::readBuffer(EventBuffer $buf )","inheritdoc":0,"modifier":["public"],"return":""},"setCallbacks":{"params":{"$readcb":"","$writecb":"","$eventcb":"","$arg":""},"docComment":"Assigns read, write and event(status) callbacks","signature":"public EventBufferEvent::setCallbacks(callable $readcb ,callable $writecb ,callable $eventcb ,string $arg )","inheritdoc":0,"modifier":["public"],"return":""},"setPriority":{"params":{"$priority":""},"docComment":"Assign a priority to a bufferevent","signature":"public EventBufferEvent::setPriority(int $priority )","inheritdoc":0,"modifier":["public"],"return":""},"setTimeouts":{"params":{"$timeout_read":"","$timeout_write":""},"docComment":"Set the read and write timeout for a buffer event","signature":"public EventBufferEvent::setTimeouts(int $timeout_read ,int $timeout_write )","inheritdoc":0,"modifier":["public"],"return":""},"setWatermark":{"params":{"$events":"","$lowmark":"","$highmark":""},"docComment":"Adjusts read and\/or write watermarks","signature":"public EventBufferEvent::setWatermark(int $events ,int $lowmark ,int $highmark )","inheritdoc":0,"modifier":["public"],"return":""},"sslError":{"params":[],"docComment":"Returns most recent OpenSSL error reported on the buffer event","signature":"public EventBufferEvent::sslError( )","inheritdoc":0,"modifier":["public"],"return":""},"sslFilter":{"params":{"$base":"EventBase","$underlying":"EventBufferEvent","$ctx":"EventSslContext","$state":"","$options":""},"docComment":"Create a new SSL buffer event to send its data over another buffer event","signature":"static EventBufferEvent::sslFilter(EventBase $base ,EventBufferEvent $underlying ,EventSslContext $ctx ,int $state ,[int $options] )","inheritdoc":0,"modifier":["public","static"],"return":"EventBufferEvent"},"sslRenegotiate":{"params":[],"docComment":"Tells a bufferevent to begin SSL renegotiation.","signature":"public EventBufferEvent::sslRenegotiate( )","inheritdoc":0,"modifier":["public"],"return":""},"sslSocket":{"params":{"$base":"EventBase","$socket":"","$ctx":"EventSslContext","$state":"","$options":""},"docComment":"Creates a new SSL buffer event to send its data over an SSL on a socket","signature":"static EventBufferEvent::sslSocket(EventBase $base ,mixed $socket ,EventSslContext $ctx ,int $state ,int $options )","inheritdoc":0,"modifier":["public","static"],"return":"EventBufferEvent"},"write":{"params":{"$data":""},"docComment":"Adds data to a buffer event's output buffer","signature":"public EventBufferEvent::write(string $data )","inheritdoc":0,"modifier":["public"],"return":""},"writeBuffer":{"params":{"$buf":"EventBuffer"},"docComment":"Adds contents of the entire buffer to a buffer event's output\n  buffer","signature":"public EventBufferEvent::writeBuffer(EventBuffer $buf )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["fd","priority","input","output"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["READING","WRITING","EOF","ERROR","TIMEOUT","CONNECTED","OPT_CLOSE_ON_FREE","OPT_THREADSAFE","OPT_DEFER_CALLBACKS","OPT_UNLOCK_CALLBACKS","SSL_OPEN","SSL_CONNECTING","SSL_ACCEPTING"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","READING":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WRITING":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"EOF":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ERROR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TIMEOUT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CONNECTED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_CLOSE_ON_FREE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_THREADSAFE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_DEFER_CALLBACKS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_UNLOCK_CALLBACKS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SSL_OPEN":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SSL_CONNECTING":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SSL_ACCEPTING":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"fd":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"priority":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"input":{"type":"EventBuffer","Inheritdoc":0,"docComment":"","modifier":["public"]},"output":{"type":"EventBuffer","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EventConfig":{"classname":"EventConfig","docComment":"","methods":{"modifier":{"public":["avoidMethod","__construct","requireFeatures","setMaxDispatchInterval"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","avoidMethod":{"params":{"$method":""},"docComment":"Tells libevent to avoid specific event method","signature":"public EventConfig::avoidMethod(int $method )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"Constructs EventConfig object","signature":"public EventConfig::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"requireFeatures":{"params":{"$feature":""},"docComment":"Enters a required event method feature that the application demands","signature":"public EventConfig::requireFeatures(int $feature )","inheritdoc":0,"modifier":["public"],"return":""},"setMaxDispatchInterval":{"params":{"$max_interval":"","$max_callbacks":"","$min_priority":""},"docComment":"Prevents priority inversion","signature":"public EventConfig::setMaxDispatchInterval(int $max_interval ,int $max_callbacks ,int $min_priority )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["FEATURE_ET","FEATURE_O1","FEATURE_FDS"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","FEATURE_ET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FEATURE_O1":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FEATURE_FDS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EventDnsBase":{"classname":"EventDnsBase","docComment":"","methods":{"modifier":{"public":["addNameserverIp","addSearch","clearSearch","__construct","countNameservers","loadHosts","parseResolvConf","setOption","setSearchNdots"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addNameserverIp":{"params":{"$ip":""},"docComment":"Adds a nameserver to the DNS base","signature":"public EventDnsBase::addNameserverIp(string $ip )","inheritdoc":0,"modifier":["public"],"return":""},"addSearch":{"params":{"$domain":""},"docComment":"Adds a domain to the list of search domains","signature":"public EventDnsBase::addSearch(string $domain )","inheritdoc":0,"modifier":["public"],"return":""},"clearSearch":{"params":[],"docComment":"Removes all current search suffixes","signature":"public EventDnsBase::clearSearch( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$base":"EventBase","$initialize":""},"docComment":"Constructs EventDnsBase object","signature":"public EventDnsBase::__construct(EventBase $base ,bool $initialize )","inheritdoc":0,"modifier":["public"],"return":""},"countNameservers":{"params":[],"docComment":"Gets the number of configured nameservers","signature":"public EventDnsBase::countNameservers( )","inheritdoc":0,"modifier":["public"],"return":""},"loadHosts":{"params":{"$hosts":""},"docComment":"Loads a hosts file (in the same format as \/etc\/hosts) from hosts file","signature":"public EventDnsBase::loadHosts(string $hosts )","inheritdoc":0,"modifier":["public"],"return":""},"parseResolvConf":{"params":{"$flags":"","$filename":""},"docComment":"Scans the resolv.conf-formatted file","signature":"public EventDnsBase::parseResolvConf(int $flags ,string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"setOption":{"params":{"$option":"","$value":""},"docComment":"Set the value of a configuration option","signature":"public EventDnsBase::setOption(string $option ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"setSearchNdots":{"params":{"$ndots":""},"docComment":"Set the 'ndots' parameter for searches","signature":"public EventDnsBase::setSearchNdots(int $ndots )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["OPTION_SEARCH","OPTION_NAMESERVERS","OPTION_MISC","OPTION_HOSTSFILE","OPTIONS_ALL"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","OPTION_SEARCH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPTION_NAMESERVERS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPTION_MISC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPTION_HOSTSFILE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPTIONS_ALL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EventHttp":{"classname":"EventHttp","docComment":"","methods":{"modifier":{"public":["accept","addServerAlias","bind","__construct","removeServerAlias","setAllowedMethods","setCallback","setDefaultCallback","setMaxBodySize","setMaxHeadersSize","setTimeout"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","accept":{"params":{"$socket":""},"docComment":"Makes an HTTP server accept connections on the specified socket stream or resource","signature":"public EventHttp::accept(mixed $socket )","inheritdoc":0,"modifier":["public"],"return":""},"addServerAlias":{"params":{"$alias":""},"docComment":"Adds a server alias to the HTTP server object","signature":"public EventHttp::addServerAlias(string $alias )","inheritdoc":0,"modifier":["public"],"return":""},"bind":{"params":{"$address":"","$port":""},"docComment":"Binds an HTTP server on the specified address and port","signature":"public EventHttp::bind(string $address ,int $port )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$base":"EventBase"},"docComment":"Constructs EventHttp object(the HTTP server)","signature":"public EventHttp::__construct(EventBase $base )","inheritdoc":0,"modifier":["public"],"return":""},"removeServerAlias":{"params":{"$alias":""},"docComment":"Removes server alias","signature":"public EventHttp::removeServerAlias(string $alias )","inheritdoc":0,"modifier":["public"],"return":""},"setAllowedMethods":{"params":{"$methods":""},"docComment":"Sets the what HTTP methods are supported in requests accepted by this server, and passed to user callbacks","signature":"public EventHttp::setAllowedMethods(int $methods )","inheritdoc":0,"modifier":["public"],"return":""},"setCallback":{"params":{"$path":"","$cb":"","$arg":""},"docComment":"Sets a callback for specified URI","signature":"public EventHttp::setCallback(string $path ,string $cb ,string $arg )","inheritdoc":0,"modifier":["public"],"return":""},"setDefaultCallback":{"params":{"$cb":"","$arg":""},"docComment":"Sets default callback to handle requests that are not caught by specific callbacks","signature":"public EventHttp::setDefaultCallback(string $cb ,string $arg )","inheritdoc":0,"modifier":["public"],"return":""},"setMaxBodySize":{"params":{"$value":""},"docComment":"Sets maximum request body size","signature":"public EventHttp::setMaxBodySize(int $value )","inheritdoc":0,"modifier":["public"],"return":""},"setMaxHeadersSize":{"params":{"$value":""},"docComment":"Sets maximum HTTP header size","signature":"public EventHttp::setMaxHeadersSize(int $value )","inheritdoc":0,"modifier":["public"],"return":""},"setTimeout":{"params":{"$value":""},"docComment":"Sets the timeout for an HTTP request","signature":"public EventHttp::setTimeout(int $value )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EventHttpConnection":{"classname":"EventHttpConnection","docComment":"","methods":{"modifier":{"public":["__construct","getBase","getPeer","makeRequest","setLocalAddress","setLocalPort","setMaxBodySize","setMaxHeadersSize","setRetries","setTimeout"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$base":"EventBase","$dns_base":"EventDnsBase","$address":"","$port":""},"docComment":"Constructs EventHttpConnection object","signature":"public EventHttpConnection::__construct(EventBase $base ,EventDnsBase $dns_base ,string $address ,int $port )","inheritdoc":0,"modifier":["public"],"return":""},"getBase":{"params":[],"docComment":"Returns event base associated with the connection","signature":"public EventHttpConnection::getBase( )","inheritdoc":0,"modifier":["public"],"return":"EventBase"},"getPeer":{"params":{"&$address":"","&$port":""},"docComment":"Gets the remote address and port associated with the connection","signature":"public EventHttpConnection::getPeer(string &$address ,int &$port )","inheritdoc":0,"modifier":["public"],"return":""},"makeRequest":{"params":{"$req":"EventHttpRequest","$type":"","$uri":""},"docComment":"Makes an HTTP request over the specified connection","signature":"public EventHttpConnection::makeRequest(EventHttpRequest $req ,int $type ,string $uri )","inheritdoc":0,"modifier":["public"],"return":""},"setLocalAddress":{"params":{"$address":""},"docComment":"Sets the IP address from which HTTP connections are made","signature":"public EventHttpConnection::setLocalAddress(string $address )","inheritdoc":0,"modifier":["public"],"return":""},"setLocalPort":{"params":{"$port":""},"docComment":"Sets the local port from which connections are made","signature":"public EventHttpConnection::setLocalPort(int $port )","inheritdoc":0,"modifier":["public"],"return":""},"setMaxBodySize":{"params":{"$max_size":""},"docComment":"Sets maximum body size for the connection","signature":"public EventHttpConnection::setMaxBodySize(string $max_size )","inheritdoc":0,"modifier":["public"],"return":""},"setMaxHeadersSize":{"params":{"$max_size":""},"docComment":"Sets maximum header size","signature":"public EventHttpConnection::setMaxHeadersSize(string $max_size )","inheritdoc":0,"modifier":["public"],"return":""},"setRetries":{"params":{"$retries":""},"docComment":"Sets the retry limit for the connection","signature":"public EventHttpConnection::setRetries(int $retries )","inheritdoc":0,"modifier":["public"],"return":""},"setTimeout":{"params":{"$timeout":""},"docComment":"Sets the timeout for the connection","signature":"public EventHttpConnection::setTimeout(int $timeout )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EventHttpRequest":{"classname":"EventHttpRequest","docComment":"","methods":{"modifier":{"public":["addHeader","cancel","clearHeaders","__construct","findHeader","free","getCommand","getHost","getInputBuffer","getInputHeaders","getOutputBuffer","getOutputHeaders","getResponseCode","getUri","removeHeader","sendError","sendReply","sendReplyChunk","sendReplyEnd","sendReplyStart"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addHeader":{"params":{"$key":"","$value":"","$type":""},"docComment":"Adds an HTTP header to the headers of the request","signature":"public EventHttpRequest::addHeader(string $key ,string $value ,int $type )","inheritdoc":0,"modifier":["public"],"return":""},"cancel":{"params":[],"docComment":"Cancels a pending HTTP request","signature":"public EventHttpRequest::cancel( )","inheritdoc":0,"modifier":["public"],"return":""},"clearHeaders":{"params":[],"docComment":"Removes all output headers from the header list of the request","signature":"public EventHttpRequest::clearHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$callback":"","$data":""},"docComment":"Constructs EventHttpRequest object","signature":"public EventHttpRequest::__construct(callable $callback ,[mixed $data] )","inheritdoc":0,"modifier":["public"],"return":""},"findHeader":{"params":{"$key":"","$type":""},"docComment":"Finds the value belonging a header","signature":"public EventHttpRequest::findHeader(string $key ,string $type )","inheritdoc":0,"modifier":["public"],"return":""},"free":{"params":[],"docComment":"Frees the object and removes associated events","signature":"public EventHttpRequest::free( )","inheritdoc":0,"modifier":["public"],"return":""},"getCommand":{"params":[],"docComment":"Returns the request command(method)","signature":"public EventHttpRequest::getCommand( )","inheritdoc":0,"modifier":["public"],"return":""},"getHost":{"params":[],"docComment":"Returns the request host","signature":"public EventHttpRequest::getHost( )","inheritdoc":0,"modifier":["public"],"return":""},"getInputBuffer":{"params":[],"docComment":"Returns the input buffer","signature":"public EventHttpRequest::getInputBuffer( )","inheritdoc":0,"modifier":["public"],"return":"EventBuffer"},"getInputHeaders":{"params":[],"docComment":"Returns associative array of the input headers","signature":"public EventHttpRequest::getInputHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getOutputBuffer":{"params":[],"docComment":"Returns the output buffer of the request","signature":"public EventHttpRequest::getOutputBuffer( )","inheritdoc":0,"modifier":["public"],"return":"EventBuffer"},"getOutputHeaders":{"params":[],"docComment":"Returns associative array of the input headers","signature":"public EventHttpRequest::getOutputHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getResponseCode":{"params":[],"docComment":"Returns the the response code","signature":"public EventHttpRequest::getResponseCode( )","inheritdoc":0,"modifier":["public"],"return":""},"getUri":{"params":[],"docComment":"Returns the request URI","signature":"public EventHttpRequest::getUri( )","inheritdoc":0,"modifier":["public"],"return":""},"removeHeader":{"params":{"$key":"","$type":""},"docComment":"Removes an HTTP header from the headers of the request","signature":"public EventHttpRequest::removeHeader(string $key ,string $type )","inheritdoc":0,"modifier":["public"],"return":""},"sendError":{"params":{"$error":"","$reason":""},"docComment":"Send an HTML error message to the client","signature":"public EventHttpRequest::sendError(int $error ,[string $reason] )","inheritdoc":0,"modifier":["public"],"return":""},"sendReply":{"params":{"$code":"","$reason":"","$buf":"EventBuffer"},"docComment":"Send an HTML reply to the client","signature":"public EventHttpRequest::sendReply(int $code ,string $reason ,EventBuffer $buf )","inheritdoc":0,"modifier":["public"],"return":""},"sendReplyChunk":{"params":{"$buf":"EventBuffer"},"docComment":"Send another data chunk as part of an ongoing chunked reply","signature":"public EventHttpRequest::sendReplyChunk(EventBuffer $buf )","inheritdoc":0,"modifier":["public"],"return":""},"sendReplyEnd":{"params":[],"docComment":"Complete a chunked reply, freeing the request as appropriate","signature":"public EventHttpRequest::sendReplyEnd( )","inheritdoc":0,"modifier":["public"],"return":""},"sendReplyStart":{"params":{"$code":"","$reason":""},"docComment":"Initiate a chunked reply","signature":"public EventHttpRequest::sendReplyStart(int $code ,string $reason )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["CMD_GET","CMD_POST","CMD_HEAD","CMD_PUT","CMD_DELETE","CMD_OPTIONS","CMD_TRACE","CMD_CONNECT","CMD_PATCH","INPUT_HEADER","OUTPUT_HEADER"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","CMD_GET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CMD_POST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CMD_HEAD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CMD_PUT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CMD_DELETE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CMD_OPTIONS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CMD_TRACE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CMD_CONNECT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CMD_PATCH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INPUT_HEADER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OUTPUT_HEADER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EventListener":{"classname":"EventListener","docComment":"","methods":{"modifier":{"public":["__construct","disable","enable","getBase","getSocketName","setCallback","setErrorCallback"],"private":[],"protected":[],"final":[],"static":["getSocketName"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$base":"EventBase","$cb":"","$data":"","$flags":"","$backlog":"","$target":""},"docComment":"Creates new connection listener associated with an event base","signature":"public EventListener::__construct(EventBase $base ,callable $cb ,mixed $data ,int $flags ,int $backlog ,mixed $target )","inheritdoc":0,"modifier":["public"],"return":""},"disable":{"params":[],"docComment":"Disables an event connect listener object","signature":"public EventListener::disable( )","inheritdoc":0,"modifier":["public"],"return":""},"enable":{"params":[],"docComment":"Enables an event connect listener object","signature":"public EventListener::enable( )","inheritdoc":0,"modifier":["public"],"return":""},"getBase":{"params":[],"docComment":"Returns event base associated with the event listener","signature":"public EventListener::getBase( )","inheritdoc":0,"modifier":["public"],"return":""},"getSocketName":{"params":{"&$address":"","&$port":""},"docComment":"Retreives the current address to which the\n  listener's socket is bound.","signature":"static EventListener::getSocketName(string &$address ,mixed &$port )","inheritdoc":0,"modifier":["public","static"],"return":""},"setCallback":{"params":{"$cb":"","$arg":""},"docComment":"The setCallback purpose","signature":"public EventListener::setCallback(callable $cb ,[mixed $arg] )","inheritdoc":0,"modifier":["public"],"return":""},"setErrorCallback":{"params":{"$cb":""},"docComment":"Set event listener's error callback","signature":"public EventListener::setErrorCallback(string $cb )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["fd"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["OPT_LEAVE_SOCKETS_BLOCKING","OPT_CLOSE_ON_FREE","OPT_CLOSE_ON_EXEC","OPT_REUSEABLE","OPT_THREADSAFE"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","OPT_LEAVE_SOCKETS_BLOCKING":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_CLOSE_ON_FREE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_CLOSE_ON_EXEC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_REUSEABLE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_THREADSAFE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"fd":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EventSslContext":{"classname":"EventSslContext","docComment":"","methods":{"modifier":{"public":["__construct"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$method":"","$options":""},"docComment":"Constructs an OpenSSL context for use with Event classes","signature":"public EventSslContext::__construct(string $method ,string $options )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["local_cert","local_pk"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["SSLv2_CLIENT_METHOD","SSLv3_CLIENT_METHOD","SSLv23_CLIENT_METHOD","TLS_CLIENT_METHOD","SSLv2_SERVER_METHOD","SSLv3_SERVER_METHOD","SSLv23_SERVER_METHOD","TLS_SERVER_METHOD","OPT_LOCAL_CERT","OPT_LOCAL_PK","OPT_PASSPHRASE","OPT_CA_FILE","OPT_CA_PATH","OPT_ALLOW_SELF_SIGNED","OPT_VERIFY_PEER","OPT_VERIFY_DEPTH","OPT_CIPHERS"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","SSLv2_CLIENT_METHOD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SSLv3_CLIENT_METHOD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SSLv23_CLIENT_METHOD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TLS_CLIENT_METHOD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SSLv2_SERVER_METHOD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SSLv3_SERVER_METHOD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SSLv23_SERVER_METHOD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TLS_SERVER_METHOD":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_LOCAL_CERT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_LOCAL_PK":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_PASSPHRASE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_CA_FILE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_CA_PATH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_ALLOW_SELF_SIGNED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_VERIFY_PEER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_VERIFY_DEPTH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_CIPHERS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"local_cert":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"local_pk":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"EventUtil":{"classname":"EventUtil","docComment":"","methods":{"modifier":{"public":["__construct","getLastSocketErrno","getLastSocketError","getSocketFd","getSocketName","setSocketOption","sslRandPoll"],"private":[],"protected":[],"final":[],"static":["getLastSocketErrno","getLastSocketError","getSocketFd","getSocketName","setSocketOption","sslRandPoll"],"interface":[],"abstract":["__construct"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The abstract constructor","signature":"public EventUtil::__construct( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"getLastSocketErrno":{"params":{"$socket":""},"docComment":"Returns the most recent socket error number","signature":"static EventUtil::getLastSocketErrno([mixed $socket] )","inheritdoc":0,"modifier":["public","static"],"return":""},"getLastSocketError":{"params":{"$socket":""},"docComment":"Returns the most recent socket error","signature":"static EventUtil::getLastSocketError(mixed $socket )","inheritdoc":0,"modifier":["public","static"],"return":""},"getSocketFd":{"params":{"$socket":""},"docComment":"Returns numeric file descriptor of a socket, or stream","signature":"static EventUtil::getSocketFd(mixed $socket )","inheritdoc":0,"modifier":["public","static"],"return":""},"getSocketName":{"params":{"$socket":"","&$address":"","&$port":""},"docComment":"Retreives the current address to which the\n  socket is bound.","signature":"static EventUtil::getSocketName(mixed $socket ,string &$address ,mixed &$port )","inheritdoc":0,"modifier":["public","static"],"return":""},"setSocketOption":{"params":{"$socket":"","$level":"","$optname":"","$optval":""},"docComment":"Sets socket options","signature":"static EventUtil::setSocketOption(mixed $socket ,int $level ,int $optname ,mixed $optval )","inheritdoc":0,"modifier":["public","static"],"return":""},"sslRandPoll":{"params":[],"docComment":"Generates entropy by means of OpenSSL's RAND_poll()","signature":"static EventUtil::sslRandPoll( )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["AF_INET","AF_INET6","AF_UNSPEC","LIBEVENT_VERSION_NUMBER","SO_DEBUG","SO_REUSEADDR","SO_KEEPALIVE","SO_DONTROUTE","SO_LINGER","SO_BROADCAST","SO_OOBINLINE","SO_SNDBUF","SO_RCVBUF","SO_SNDLOWAT","SO_RCVLOWAT","SO_SNDTIMEO","SO_RCVTIMEO","SO_TYPE","SO_ERROR","SOL_SOCKET","SOL_TCP","SOL_UDP","IPPROTO_IP","IPPROTO_IPV6"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","AF_INET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"AF_INET6":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"AF_UNSPEC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LIBEVENT_VERSION_NUMBER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SO_DEBUG":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SO_REUSEADDR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SO_KEEPALIVE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SO_DONTROUTE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SO_LINGER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SO_BROADCAST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SO_OOBINLINE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SO_SNDBUF":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SO_RCVBUF":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SO_SNDLOWAT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SO_RCVLOWAT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SO_SNDTIMEO":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SO_RCVTIMEO":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SO_TYPE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SO_ERROR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SOL_SOCKET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SOL_TCP":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SOL_UDP":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IPPROTO_IP":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IPPROTO_IPV6":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"GearmanClient":{"classname":"GearmanClient","docComment":"","methods":{"modifier":{"public":["addOptions","addServer","addServers","addTask","addTaskBackground","addTaskHigh","addTaskHighBackground","addTaskLow","addTaskLowBackground","addTaskStatus","clearCallbacks","clone","__construct","context","data","do","doBackground","doHigh","doHighBackground","doJobHandle","doLow","doLowBackground","doNormal","doStatus","echo","error","getErrno","jobStatus","ping","removeOptions","returnCode","runTasks","setClientCallback","setCompleteCallback","setContext","setCreatedCallback","setData","setDataCallback","setExceptionCallback","setFailCallback","setOptions","setStatusCallback","setTimeout","setWarningCallback","setWorkloadCallback","timeout"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addOptions":{"params":{"$options":""},"docComment":"Add client options","signature":"public GearmanClient::addOptions(int $options )","inheritdoc":0,"modifier":["public"],"return":""},"addServer":{"params":{"$host":"","$port":""},"docComment":"Add a job server to the client","signature":"public GearmanClient::addServer([string $host] ,[int $port] )","inheritdoc":0,"modifier":["public"],"return":""},"addServers":{"params":{"$servers":""},"docComment":"Add a list of job servers to the client","signature":"public GearmanClient::addServers([string $servers] )","inheritdoc":0,"modifier":["public"],"return":""},"addTask":{"params":{"$function_name":"","$workload":"","&$context":"","$unique":""},"docComment":"Add a task to be run in parallel","signature":"public GearmanClient::addTask(string $function_name ,string $workload ,mixed &$context ,string $unique )","inheritdoc":0,"modifier":["public"],"return":"GearmanTask"},"addTaskBackground":{"params":{"$function_name":"","$workload":"","&$context":"","$unique":""},"docComment":"Add a background task to be run in parallel","signature":"public GearmanClient::addTaskBackground(string $function_name ,string $workload ,mixed &$context ,string $unique )","inheritdoc":0,"modifier":["public"],"return":"GearmanTask"},"addTaskHigh":{"params":{"$function_name":"","$workload":"","&$context":"","$unique":""},"docComment":"Add a high priority task to run in parallel","signature":"public GearmanClient::addTaskHigh(string $function_name ,string $workload ,mixed &$context ,string $unique )","inheritdoc":0,"modifier":["public"],"return":"GearmanTask"},"addTaskHighBackground":{"params":{"$function_name":"","$workload":"","&$context":"","$unique":""},"docComment":"Add a high priority background task to be run in parallel","signature":"public GearmanClient::addTaskHighBackground(string $function_name ,string $workload ,mixed &$context ,string $unique )","inheritdoc":0,"modifier":["public"],"return":"GearmanTask"},"addTaskLow":{"params":{"$function_name":"","$workload":"","&$context":"","$unique":""},"docComment":"Add a low priority task to run in parallel","signature":"public GearmanClient::addTaskLow(string $function_name ,string $workload ,mixed &$context ,string $unique )","inheritdoc":0,"modifier":["public"],"return":"GearmanTask"},"addTaskLowBackground":{"params":{"$function_name":"","$workload":"","&$context":"","$unique":""},"docComment":"Add a low priority background task to be run in parallel","signature":"public GearmanClient::addTaskLowBackground(string $function_name ,string $workload ,mixed &$context ,string $unique )","inheritdoc":0,"modifier":["public"],"return":"GearmanTask"},"addTaskStatus":{"params":{"$job_handle":"","&$context":""},"docComment":"Add a task to get status","signature":"public GearmanClient::addTaskStatus(string $job_handle ,string &$context )","inheritdoc":0,"modifier":["public"],"return":"GearmanTask"},"clearCallbacks":{"params":[],"docComment":"Clear all task callback functions","signature":"public GearmanClient::clearCallbacks( )","inheritdoc":0,"modifier":["public"],"return":""},"clone":{"params":[],"docComment":"Create a copy of a  object","signature":"public GearmanClient::clone( )","inheritdoc":0,"modifier":["public"],"return":"GearmanClient"},"__construct":{"params":[],"docComment":"Create a GearmanClient instance","signature":"public GearmanClient::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"context":{"params":[],"docComment":"Get the application context","signature":"public GearmanClient::context( )","inheritdoc":0,"modifier":["public"],"return":""},"data":{"params":[],"docComment":"Get the application data (deprecated)","signature":"public GearmanClient::data( )","inheritdoc":0,"modifier":["public"],"return":""},"do":{"params":{"$function_name":"","$workload":"","$unique":""},"docComment":"Run a single task and return a result [deprecated]","signature":"public GearmanClient::do(string $function_name ,string $workload ,string $unique )","inheritdoc":0,"modifier":["public"],"return":""},"doBackground":{"params":{"$function_name":"","$workload":"","$unique":""},"docComment":"Run a task in the background","signature":"public GearmanClient::doBackground(string $function_name ,string $workload ,string $unique )","inheritdoc":0,"modifier":["public"],"return":""},"doHigh":{"params":{"$function_name":"","$workload":"","$unique":""},"docComment":"Run a single high priority task","signature":"public GearmanClient::doHigh(string $function_name ,string $workload ,string $unique )","inheritdoc":0,"modifier":["public"],"return":""},"doHighBackground":{"params":{"$function_name":"","$workload":"","$unique":""},"docComment":"Run a high priority task in the background","signature":"public GearmanClient::doHighBackground(string $function_name ,string $workload ,string $unique )","inheritdoc":0,"modifier":["public"],"return":""},"doJobHandle":{"params":[],"docComment":"Get the job handle for the running task","signature":"public GearmanClient::doJobHandle( )","inheritdoc":0,"modifier":["public"],"return":""},"doLow":{"params":{"$function_name":"","$workload":"","$unique":""},"docComment":"Run a single low priority task","signature":"public GearmanClient::doLow(string $function_name ,string $workload ,string $unique )","inheritdoc":0,"modifier":["public"],"return":""},"doLowBackground":{"params":{"$function_name":"","$workload":"","$unique":""},"docComment":"Run a low priority task in the background","signature":"public GearmanClient::doLowBackground(string $function_name ,string $workload ,string $unique )","inheritdoc":0,"modifier":["public"],"return":""},"doNormal":{"params":{"$function_name":"","$workload":"","$unique":""},"docComment":"Run a single task and return a result","signature":"public GearmanClient::doNormal(string $function_name ,string $workload ,string $unique )","inheritdoc":0,"modifier":["public"],"return":""},"doStatus":{"params":[],"docComment":"Get the status for the running task","signature":"public GearmanClient::doStatus( )","inheritdoc":0,"modifier":["public"],"return":""},"echo":{"params":{"$workload":""},"docComment":"Send data to all job servers to see if they echo it back [deprecated]","signature":"public GearmanClient::echo(string $workload )","inheritdoc":0,"modifier":["public"],"return":""},"error":{"params":[],"docComment":"Returns an error string for the last error encountered.","signature":"public GearmanClient::error( )","inheritdoc":0,"modifier":["public"],"return":""},"getErrno":{"params":[],"docComment":"Get an errno value","signature":"public GearmanClient::getErrno( )","inheritdoc":0,"modifier":["public"],"return":""},"jobStatus":{"params":{"$job_handle":""},"docComment":"Get the status of a background job","signature":"public GearmanClient::jobStatus(string $job_handle )","inheritdoc":0,"modifier":["public"],"return":""},"ping":{"params":{"$workload":""},"docComment":"Send data to all job servers to see if they echo it back","signature":"public GearmanClient::ping(string $workload )","inheritdoc":0,"modifier":["public"],"return":""},"removeOptions":{"params":{"$options":""},"docComment":"Remove client options","signature":"public GearmanClient::removeOptions(int $options )","inheritdoc":0,"modifier":["public"],"return":""},"returnCode":{"params":[],"docComment":"Get the last Gearman return code","signature":"public GearmanClient::returnCode( )","inheritdoc":0,"modifier":["public"],"return":""},"runTasks":{"params":[],"docComment":"Run a list of tasks in parallel","signature":"public GearmanClient::runTasks( )","inheritdoc":0,"modifier":["public"],"return":""},"setClientCallback":{"params":{"$callback":""},"docComment":"Callback function when there is a data packet for a task (deprecated)","signature":"public GearmanClient::setClientCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"setCompleteCallback":{"params":{"$callback":""},"docComment":"Set a function to be called on task completion","signature":"public GearmanClient::setCompleteCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"setContext":{"params":{"$context":""},"docComment":"Set application context","signature":"public GearmanClient::setContext(string $context )","inheritdoc":0,"modifier":["public"],"return":""},"setCreatedCallback":{"params":{"$callback":""},"docComment":"Set a callback for when a task is queued","signature":"public GearmanClient::setCreatedCallback(string $callback )","inheritdoc":0,"modifier":["public"],"return":""},"setData":{"params":{"$data":""},"docComment":"Set application data (deprecated)","signature":"public GearmanClient::setData(string $data )","inheritdoc":0,"modifier":["public"],"return":""},"setDataCallback":{"params":{"$callback":""},"docComment":"Callback function when there is a data packet for a task","signature":"public GearmanClient::setDataCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"setExceptionCallback":{"params":{"$callback":""},"docComment":"Set a callback for worker exceptions","signature":"public GearmanClient::setExceptionCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"setFailCallback":{"params":{"$callback":""},"docComment":"Set callback for job failure","signature":"public GearmanClient::setFailCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"setOptions":{"params":{"$options":""},"docComment":"Set client options","signature":"public GearmanClient::setOptions(int $options )","inheritdoc":0,"modifier":["public"],"return":""},"setStatusCallback":{"params":{"$callback":""},"docComment":"Set a callback for collecting task status","signature":"public GearmanClient::setStatusCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"setTimeout":{"params":{"$timeout":""},"docComment":"Set socket I\/O activity timeout","signature":"public GearmanClient::setTimeout(int $timeout )","inheritdoc":0,"modifier":["public"],"return":""},"setWarningCallback":{"params":{"$callback":""},"docComment":"Set a callback for worker warnings","signature":"public GearmanClient::setWarningCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"setWorkloadCallback":{"params":{"$callback":""},"docComment":"Set a callback for accepting incremental data updates","signature":"public GearmanClient::setWorkloadCallback(callable $callback )","inheritdoc":0,"modifier":["public"],"return":""},"timeout":{"params":[],"docComment":"Get current socket I\/O activity timeout value","signature":"public GearmanClient::timeout( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"GearmanJob":{"classname":"GearmanJob","docComment":"","methods":{"modifier":{"public":["complete","__construct","data","exception","fail","functionName","handle","returnCode","sendComplete","sendData","sendException","sendFail","sendStatus","sendWarning","setReturn","status","unique","warning","workload","workloadSize"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","complete":{"params":{"$result":""},"docComment":"Send the result and complete status (deprecated)","signature":"public GearmanJob::complete(string $result )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"Create a GearmanJob instance","signature":"public GearmanJob::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"data":{"params":{"$data":""},"docComment":"Send data for a running job (deprecated)","signature":"public GearmanJob::data(string $data )","inheritdoc":0,"modifier":["public"],"return":""},"exception":{"params":{"$exception":""},"docComment":"Send exception for running job (deprecated)","signature":"public GearmanJob::exception(string $exception )","inheritdoc":0,"modifier":["public"],"return":""},"fail":{"params":[],"docComment":"Send fail status (deprecated)","signature":"public GearmanJob::fail( )","inheritdoc":0,"modifier":["public"],"return":""},"functionName":{"params":[],"docComment":"Get function name","signature":"public GearmanJob::functionName( )","inheritdoc":0,"modifier":["public"],"return":""},"handle":{"params":[],"docComment":"Get the job handle","signature":"public GearmanJob::handle( )","inheritdoc":0,"modifier":["public"],"return":""},"returnCode":{"params":[],"docComment":"Get last return code","signature":"public GearmanJob::returnCode( )","inheritdoc":0,"modifier":["public"],"return":""},"sendComplete":{"params":{"$result":""},"docComment":"Send the result and complete status","signature":"public GearmanJob::sendComplete(string $result )","inheritdoc":0,"modifier":["public"],"return":""},"sendData":{"params":{"$data":""},"docComment":"Send data for a running job","signature":"public GearmanJob::sendData(string $data )","inheritdoc":0,"modifier":["public"],"return":""},"sendException":{"params":{"$exception":""},"docComment":"Send exception for running job (exception)","signature":"public GearmanJob::sendException(string $exception )","inheritdoc":0,"modifier":["public"],"return":""},"sendFail":{"params":[],"docComment":"Send fail status","signature":"public GearmanJob::sendFail( )","inheritdoc":0,"modifier":["public"],"return":""},"sendStatus":{"params":{"$numerator":"","$denominator":""},"docComment":"Send status","signature":"public GearmanJob::sendStatus(int $numerator ,int $denominator )","inheritdoc":0,"modifier":["public"],"return":""},"sendWarning":{"params":{"$warning":""},"docComment":"Send a warning","signature":"public GearmanJob::sendWarning(string $warning )","inheritdoc":0,"modifier":["public"],"return":""},"setReturn":{"params":{"$gearman_return_t":""},"docComment":"Set a return value","signature":"public GearmanJob::setReturn(int $gearman_return_t )","inheritdoc":0,"modifier":["public"],"return":""},"status":{"params":{"$numerator":"","$denominator":""},"docComment":"Send status (deprecated)","signature":"public GearmanJob::status(int $numerator ,int $denominator )","inheritdoc":0,"modifier":["public"],"return":""},"unique":{"params":[],"docComment":"Get the unique identifier","signature":"public GearmanJob::unique( )","inheritdoc":0,"modifier":["public"],"return":""},"warning":{"params":{"$warning":""},"docComment":"Send a warning (deprecated)","signature":"public GearmanJob::warning(string $warning )","inheritdoc":0,"modifier":["public"],"return":""},"workload":{"params":[],"docComment":"Get workload","signature":"public GearmanJob::workload( )","inheritdoc":0,"modifier":["public"],"return":""},"workloadSize":{"params":[],"docComment":"Get size of work load","signature":"public GearmanJob::workloadSize( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"GearmanTask":{"classname":"GearmanTask","docComment":"","methods":{"modifier":{"public":["__construct","create","data","dataSize","function","functionName","isKnown","isRunning","jobHandle","recvData","returnCode","sendData","sendWorkload","taskDenominator","taskNumerator","unique","uuid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Create a GearmanTask instance","signature":"public GearmanTask::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"create":{"params":[],"docComment":"Create a task (deprecated)","signature":"public GearmanTask::create( )","inheritdoc":0,"modifier":["public"],"return":"GearmanTask"},"data":{"params":[],"docComment":"Get data returned for a task","signature":"public GearmanTask::data( )","inheritdoc":0,"modifier":["public"],"return":""},"dataSize":{"params":[],"docComment":"Get the size of returned data","signature":"public GearmanTask::dataSize( )","inheritdoc":0,"modifier":["public"],"return":""},"function":{"params":[],"docComment":"Get associated function name (deprecated)","signature":"public GearmanTask::function( )","inheritdoc":0,"modifier":["public"],"return":""},"functionName":{"params":[],"docComment":"Get associated function name","signature":"public GearmanTask::functionName( )","inheritdoc":0,"modifier":["public"],"return":""},"isKnown":{"params":[],"docComment":"Determine if task is known","signature":"public GearmanTask::isKnown( )","inheritdoc":0,"modifier":["public"],"return":""},"isRunning":{"params":[],"docComment":"Test whether the task is currently running","signature":"public GearmanTask::isRunning( )","inheritdoc":0,"modifier":["public"],"return":""},"jobHandle":{"params":[],"docComment":"Get the job handle","signature":"public GearmanTask::jobHandle( )","inheritdoc":0,"modifier":["public"],"return":""},"recvData":{"params":{"$data_len":""},"docComment":"Read work or result data into a buffer for a task","signature":"public GearmanTask::recvData(int $data_len )","inheritdoc":0,"modifier":["public"],"return":""},"returnCode":{"params":[],"docComment":"Get the last return code","signature":"public GearmanTask::returnCode( )","inheritdoc":0,"modifier":["public"],"return":""},"sendData":{"params":{"$data":""},"docComment":"Send data for a task (deprecated)","signature":"public GearmanTask::sendData(string $data )","inheritdoc":0,"modifier":["public"],"return":""},"sendWorkload":{"params":{"$data":""},"docComment":"Send data for a task","signature":"public GearmanTask::sendWorkload(string $data )","inheritdoc":0,"modifier":["public"],"return":""},"taskDenominator":{"params":[],"docComment":"Get completion percentage denominator","signature":"public GearmanTask::taskDenominator( )","inheritdoc":0,"modifier":["public"],"return":""},"taskNumerator":{"params":[],"docComment":"Get completion percentage numerator","signature":"public GearmanTask::taskNumerator( )","inheritdoc":0,"modifier":["public"],"return":""},"unique":{"params":[],"docComment":"Get the unique identifier for a task","signature":"public GearmanTask::unique( )","inheritdoc":0,"modifier":["public"],"return":""},"uuid":{"params":[],"docComment":"Get the unique identifier for a task (deprecated)","signature":"public GearmanTask::uuid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"GearmanWorker":{"classname":"GearmanWorker","docComment":"","methods":{"modifier":{"public":["addFunction","addOptions","addServer","addServers","clone","__construct","echo","error","getErrno","options","register","removeOptions","returnCode","setId","setOptions","setTimeout","timeout","unregister","unregisterAll","wait","work"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addFunction":{"params":{"$function_name":"","$function":"","&$context":"","$timeout":""},"docComment":"Register and add callback function","signature":"public GearmanWorker::addFunction(string $function_name ,callable $function ,mixed &$context ,int $timeout )","inheritdoc":0,"modifier":["public"],"return":""},"addOptions":{"params":{"$option":""},"docComment":"Add worker options","signature":"public GearmanWorker::addOptions(int $option )","inheritdoc":0,"modifier":["public"],"return":""},"addServer":{"params":{"$host":"","$port":""},"docComment":"Add a job server","signature":"public GearmanWorker::addServer([string $host] ,[int $port] )","inheritdoc":0,"modifier":["public"],"return":""},"addServers":{"params":{"$servers":""},"docComment":"Add job servers","signature":"public GearmanWorker::addServers([string $servers] )","inheritdoc":0,"modifier":["public"],"return":""},"clone":{"params":[],"docComment":"Create a copy of the worker","signature":"public GearmanWorker::clone( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"Create a GearmanWorker instance","signature":"public GearmanWorker::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"echo":{"params":{"$workload":""},"docComment":"Test job server response","signature":"public GearmanWorker::echo(string $workload )","inheritdoc":0,"modifier":["public"],"return":""},"error":{"params":[],"docComment":"Get the last error encountered","signature":"public GearmanWorker::error( )","inheritdoc":0,"modifier":["public"],"return":""},"getErrno":{"params":[],"docComment":"Get errno","signature":"public GearmanWorker::getErrno( )","inheritdoc":0,"modifier":["public"],"return":""},"options":{"params":[],"docComment":"Get worker options","signature":"public GearmanWorker::options( )","inheritdoc":0,"modifier":["public"],"return":""},"register":{"params":{"$function_name":"","$timeout":""},"docComment":"Register a function with the job server","signature":"public GearmanWorker::register(string $function_name ,int $timeout )","inheritdoc":0,"modifier":["public"],"return":""},"removeOptions":{"params":{"$option":""},"docComment":"Remove worker options","signature":"public GearmanWorker::removeOptions(int $option )","inheritdoc":0,"modifier":["public"],"return":""},"returnCode":{"params":[],"docComment":"Get last Gearman return code","signature":"public GearmanWorker::returnCode( )","inheritdoc":0,"modifier":["public"],"return":""},"setId":{"params":{"$id":""},"docComment":"Give the worker an identifier so it can be tracked when asking gearmand for the list of available workers.","signature":"public GearmanWorker::setId(string $id )","inheritdoc":0,"modifier":["public"],"return":""},"setOptions":{"params":{"$option":""},"docComment":"Set worker options","signature":"public GearmanWorker::setOptions(int $option )","inheritdoc":0,"modifier":["public"],"return":""},"setTimeout":{"params":{"$timeout":""},"docComment":"Set socket I\/O activity timeout","signature":"public GearmanWorker::setTimeout(int $timeout )","inheritdoc":0,"modifier":["public"],"return":""},"timeout":{"params":[],"docComment":"Get socket I\/O activity timeout","signature":"public GearmanWorker::timeout( )","inheritdoc":0,"modifier":["public"],"return":""},"unregister":{"params":{"$function_name":""},"docComment":"Unregister a function name with the job servers","signature":"public GearmanWorker::unregister(string $function_name )","inheritdoc":0,"modifier":["public"],"return":""},"unregisterAll":{"params":[],"docComment":"Unregister all function names with the job servers","signature":"public GearmanWorker::unregisterAll( )","inheritdoc":0,"modifier":["public"],"return":""},"wait":{"params":[],"docComment":"Wait for activity from one of the job servers","signature":"public GearmanWorker::wait( )","inheritdoc":0,"modifier":["public"],"return":""},"work":{"params":[],"docComment":"Wait for and perform jobs","signature":"public GearmanWorker::work( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"GearmanException":{"classname":"GearmanException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Gender\\Gender":{"classname":"Gender\\Gender","docComment":"","methods":{"modifier":{"public":["connect","__construct","country","get","isNick","similarNames"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","connect":{"params":{"$dsn":""},"docComment":"Connect to an external name dictionary.","signature":"public Gender\\Gender::connect(string $dsn )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$dsn":""},"docComment":"Construct the Gender object.","signature":"public Gender\\Gender::__construct(string $dsn )","inheritdoc":0,"modifier":["public"],"return":""},"country":{"params":{"$country":""},"docComment":"Get textual country representation","signature":"public Gender\\Gender::country(integer $country )","inheritdoc":0,"modifier":["public"],"return":""},"get":{"params":{"$name":"","$country":""},"docComment":"Get gender of a name.","signature":"public Gender\\Gender::get(string $name ,integer $country )","inheritdoc":0,"modifier":["public"],"return":""},"isNick":{"params":{"$name0":"","$name1":"","$country":""},"docComment":"Check if the name0 is an alias of the name1.","signature":"public Gender\\Gender::isNick(string $name0 ,string $name1 ,integer $country )","inheritdoc":0,"modifier":["public"],"return":""},"similarNames":{"params":{"$name":"","$country":""},"docComment":"Get similar names.","signature":"public Gender\\Gender::similarNames(string $name ,integer $country )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["IS_FEMALE","IS_MOSTLY_FEMALE","IS_MALE","IS_MOSTLY_MALE","IS_UNISEX_NAME","IS_A_COUPLE","NAME_NOT_FOUND","ERROR_IN_NAME","ANY_COUNTRY","BRITAIN","IRELAND","USA","SPAIN","PORTUGAL","ITALY","MALTA","FRANCE","BELGIUM","LUXEMBOURG","NETHERLANDS","GERMANY","EAST_FRISIA","AUSTRIA","SWISS","ICELAND","DENMARK","NORWAY","SWEDEN","FINLAND","ESTONIA","LATVIA","LITHUANIA","POLAND","CZECH_REP","SLOVAKIA","HUNGARY","ROMANIA","BULGARIA","BOSNIA","CROATIA","KOSOVO","MACEDONIA","MONTENEGRO","SERBIA","SLOVENIA","ALBANIA","GREECE","RUSSIA","BELARUS","MOLDOVA","UKRAINE","ARMENIA","AZERBAIJAN","GEORGIA","KAZAKH_UZBEK","TURKEY","ARABIA","ISRAEL","CHINA","INDIA","JAPAN","KOREA"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","IS_FEMALE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_MOSTLY_FEMALE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_MALE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_MOSTLY_MALE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_UNISEX_NAME":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IS_A_COUPLE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"NAME_NOT_FOUND":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ERROR_IN_NAME":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ANY_COUNTRY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BRITAIN":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IRELAND":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"USA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SPAIN":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PORTUGAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ITALY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"MALTA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FRANCE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BELGIUM":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LUXEMBOURG":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"NETHERLANDS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"GERMANY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"EAST_FRISIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"AUSTRIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SWISS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ICELAND":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DENMARK":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"NORWAY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SWEDEN":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FINLAND":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ESTONIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LATVIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"LITHUANIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"POLAND":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CZECH_REP":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SLOVAKIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HUNGARY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ROMANIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BULGARIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BOSNIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CROATIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"KOSOVO":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"MACEDONIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"MONTENEGRO":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SERBIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SLOVENIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ALBANIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"GREECE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RUSSIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BELARUS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"MOLDOVA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"UKRAINE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ARMENIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"AZERBAIJAN":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"GEORGIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"KAZAKH_UZBEK":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TURKEY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ARABIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ISRAEL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CHINA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INDIA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"JAPAN":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"KOREA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Gmagick":{"classname":"Gmagick","docComment":"","methods":{"modifier":{"public":["addimage","addnoiseimage","annotateimage","blurimage","borderimage","charcoalimage","chopimage","clear","commentimage","compositeimage","__construct","cropimage","cropthumbnailimage","current","cyclecolormapimage","deconstructimages","despeckleimage","destroy","drawimage","edgeimage","embossimage","enhanceimage","equalizeimage","flipimage","flopimage","frameimage","gammaimage","getcopyright","getfilename","getimagebackgroundcolor","getimageblueprimary","getimagebordercolor","getimagechanneldepth","getimagecolors","getimagecolorspace","getimagecompose","getimagedelay","getimagedepth","getimagedispose","getimageextrema","getimagefilename","getimageformat","getimagegamma","getimagegreenprimary","getimageheight","getimagehistogram","getimageindex","getimageinterlacescheme","getimageiterations","getimagematte","getimagemattecolor","getimageprofile","getimageredprimary","getimagerenderingintent","getimageresolution","getimagescene","getimagesignature","getimagetype","getimageunits","getimagewhitepoint","getimagewidth","getpackagename","getquantumdepth","getreleasedate","getsamplingfactors","getsize","getversion","hasnextimage","haspreviousimage","implodeimage","labelimage","levelimage","magnifyimage","mapimage","medianfilterimage","minifyimage","modulateimage","motionblurimage","newimage","nextimage","normalizeimage","oilpaintimage","previousimage","profileimage","quantizeimage","quantizeimages","queryfontmetrics","queryfonts","queryformats","radialblurimage","raiseimage","read","readimage","readimageblob","readimagefile","reducenoiseimage","removeimage","removeimageprofile","resampleimage","resizeimage","rollimage","rotateimage","scaleimage","separateimagechannel","setfilename","setimagebackgroundcolor","setimageblueprimary","setimagebordercolor","setimagechanneldepth","setimagecolorspace","setimagecompose","setimagedelay","setimagedepth","setimagedispose","setimagefilename","setimageformat","setimagegamma","setimagegreenprimary","setimageindex","setimageinterlacescheme","setimageiterations","setimageprofile","setimageredprimary","setimagerenderingintent","setimageresolution","setimagescene","setimagetype","setimageunits","setimagewhitepoint","setsamplingfactors","setsize","shearimage","solarizeimage","spreadimage","stripimage","swirlimage","thumbnailimage","trimimage","write","writeimage"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addimage":{"params":{"$Gmagick":"Gmagick"},"docComment":"Adds new image to Gmagick object image list","signature":"public Gmagick::addimage(Gmagick $Gmagick )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"addnoiseimage":{"params":{"$NOISE":""},"docComment":"Adds random noise to the image","signature":"public Gmagick::addnoiseimage(int $NOISE )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"annotateimage":{"params":{"$GmagickDraw":"GmagickDraw","$x":"","$y":"","$angle":"","$text":""},"docComment":"Annotates an image with text","signature":"public Gmagick::annotateimage(GmagickDraw $GmagickDraw ,float $x ,float $y ,float $angle ,string $text )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"blurimage":{"params":{"$radius":"","$sigma":"","$channel":""},"docComment":"Adds blur filter to image","signature":"public Gmagick::blurimage(float $radius ,float $sigma ,int $channel )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"borderimage":{"params":{"$color":"GmagickPixel","$width":"","$height":""},"docComment":"Surrounds the image with a border","signature":"public Gmagick::borderimage(GmagickPixel $color ,int $width ,int $height )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"charcoalimage":{"params":{"$radius":"","$sigma":""},"docComment":"Simulates a charcoal drawing","signature":"public Gmagick::charcoalimage(float $radius ,float $sigma )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"chopimage":{"params":{"$width":"","$height":"","$x":"","$y":""},"docComment":"Removes a region of an image and trims","signature":"public Gmagick::chopimage(int $width ,int $height ,int $x ,int $y )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"clear":{"params":[],"docComment":"Clears all resources associated to Gmagick object","signature":"public Gmagick::clear( )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"commentimage":{"params":{"$comment":""},"docComment":"Adds a comment to your image","signature":"public Gmagick::commentimage(string $comment )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"compositeimage":{"params":{"$source":"Gmagick","$COMPOSE":"","$x":"","$y":""},"docComment":"Composite one image onto another","signature":"public Gmagick::compositeimage(Gmagick $source ,int $COMPOSE ,int $x ,int $y )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"__construct":{"params":{"$filename":""},"docComment":"The Gmagick constructor","signature":"public Gmagick::__construct(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"cropimage":{"params":{"$width":"","$height":"","$x":"","$y":""},"docComment":"Extracts a region of the image","signature":"public Gmagick::cropimage(int $width ,int $height ,int $x ,int $y )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"cropthumbnailimage":{"params":{"$width":"","$height":""},"docComment":"Creates a crop thumbnail","signature":"public Gmagick::cropthumbnailimage(int $width ,int $height )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"current":{"params":[],"docComment":"The current purpose","signature":"public Gmagick::current( )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"cyclecolormapimage":{"params":{"$displace":""},"docComment":"Displaces an image's colormap","signature":"public Gmagick::cyclecolormapimage(int $displace )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"deconstructimages":{"params":[],"docComment":"Returns certain pixel differences between images","signature":"public Gmagick::deconstructimages( )","inheritdoc":0,"modifier":["public"],"return":""},"despeckleimage":{"params":[],"docComment":"The despeckleimage purpose","signature":"public Gmagick::despeckleimage( )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"destroy":{"params":[],"docComment":"The destroy purpose","signature":"public Gmagick::destroy( )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"drawimage":{"params":{"$GmagickDraw":"GmagickDraw"},"docComment":"Renders the GmagickDraw object on the current image","signature":"public Gmagick::drawimage(GmagickDraw $GmagickDraw )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"edgeimage":{"params":{"$radius":""},"docComment":"Enhance edges within the image","signature":"public Gmagick::edgeimage(float $radius )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"embossimage":{"params":{"$radius":"","$sigma":""},"docComment":"Returns a grayscale image with a three-dimensional effect","signature":"public Gmagick::embossimage(float $radius ,float $sigma )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"enhanceimage":{"params":[],"docComment":"Improves the quality of a noisy image","signature":"public Gmagick::enhanceimage( )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"equalizeimage":{"params":[],"docComment":"Equalizes the image histogram","signature":"public Gmagick::equalizeimage( )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"flipimage":{"params":[],"docComment":"Creates a vertical mirror image","signature":"public Gmagick::flipimage( )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"flopimage":{"params":[],"docComment":"The flopimage purpose","signature":"public Gmagick::flopimage( )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"frameimage":{"params":{"$color":"GmagickPixel","$width":"","$height":"","$inner_bevel":"","$outer_bevel":""},"docComment":"Adds a simulated three-dimensional border","signature":"public Gmagick::frameimage(GmagickPixel $color ,int $width ,int $height ,int $inner_bevel ,int $outer_bevel )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"gammaimage":{"params":{"$gamma":""},"docComment":"Gamma-corrects an image","signature":"public Gmagick::gammaimage(float $gamma )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"getcopyright":{"params":[],"docComment":"Returns the GraphicsMagick API copyright as a string","signature":"public Gmagick::getcopyright( )","inheritdoc":0,"modifier":["public"],"return":""},"getfilename":{"params":[],"docComment":"The filename associated with an image sequence","signature":"public Gmagick::getfilename( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagebackgroundcolor":{"params":[],"docComment":"Returns the image background color","signature":"public Gmagick::getimagebackgroundcolor( )","inheritdoc":0,"modifier":["public"],"return":""},"getimageblueprimary":{"params":[],"docComment":"Returns the chromaticy blue primary point","signature":"public Gmagick::getimageblueprimary( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagebordercolor":{"params":[],"docComment":"Returns the image border color","signature":"public Gmagick::getimagebordercolor( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagechanneldepth":{"params":{"$channel_type":""},"docComment":"Gets the depth for a particular image channel","signature":"public Gmagick::getimagechanneldepth(int $channel_type )","inheritdoc":0,"modifier":["public"],"return":""},"getimagecolors":{"params":[],"docComment":" Returns the color of the specified colormap index","signature":"public Gmagick::getimagecolors( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagecolorspace":{"params":[],"docComment":"Gets the image colorspace","signature":"public Gmagick::getimagecolorspace( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagecompose":{"params":[],"docComment":"Returns the composite operator associated with the image","signature":"public Gmagick::getimagecompose( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagedelay":{"params":[],"docComment":"Gets the image delay","signature":"public Gmagick::getimagedelay( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagedepth":{"params":[],"docComment":"Gets the depth of the image","signature":"public Gmagick::getimagedepth( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagedispose":{"params":[],"docComment":"Gets the image disposal method","signature":"public Gmagick::getimagedispose( )","inheritdoc":0,"modifier":["public"],"return":""},"getimageextrema":{"params":[],"docComment":"Gets the extrema for the image","signature":"public Gmagick::getimageextrema( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagefilename":{"params":[],"docComment":"Returns the filename of a particular image in a sequence","signature":"public Gmagick::getimagefilename( )","inheritdoc":0,"modifier":["public"],"return":""},"getimageformat":{"params":[],"docComment":"Returns the format of a particular image in a sequence","signature":"public Gmagick::getimageformat( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagegamma":{"params":[],"docComment":"Gets the image gamma","signature":"public Gmagick::getimagegamma( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagegreenprimary":{"params":[],"docComment":"Returns the chromaticy green primary point","signature":"public Gmagick::getimagegreenprimary( )","inheritdoc":0,"modifier":["public"],"return":""},"getimageheight":{"params":[],"docComment":"Returns the image height","signature":"public Gmagick::getimageheight( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagehistogram":{"params":[],"docComment":"Gets the image histogram","signature":"public Gmagick::getimagehistogram( )","inheritdoc":0,"modifier":["public"],"return":""},"getimageindex":{"params":[],"docComment":"Gets the index of the current active image","signature":"public Gmagick::getimageindex( )","inheritdoc":0,"modifier":["public"],"return":""},"getimageinterlacescheme":{"params":[],"docComment":"Gets the image interlace scheme","signature":"public Gmagick::getimageinterlacescheme( )","inheritdoc":0,"modifier":["public"],"return":""},"getimageiterations":{"params":[],"docComment":"Gets the image iterations","signature":"public Gmagick::getimageiterations( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagematte":{"params":[],"docComment":"Return if the image has a matte channel","signature":"public Gmagick::getimagematte( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagemattecolor":{"params":[],"docComment":"Returns the image matte color","signature":"public Gmagick::getimagemattecolor( )","inheritdoc":0,"modifier":["public"],"return":""},"getimageprofile":{"params":{"$name":""},"docComment":"Returns the named image profile.","signature":"public Gmagick::getimageprofile(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"getimageredprimary":{"params":[],"docComment":"Returns the chromaticity red primary point","signature":"public Gmagick::getimageredprimary( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagerenderingintent":{"params":[],"docComment":"Gets the image rendering intent","signature":"public Gmagick::getimagerenderingintent( )","inheritdoc":0,"modifier":["public"],"return":""},"getimageresolution":{"params":[],"docComment":"Gets the image X and Y resolution","signature":"public Gmagick::getimageresolution( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagescene":{"params":[],"docComment":"Gets the image scene","signature":"public Gmagick::getimagescene( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagesignature":{"params":[],"docComment":"Generates an SHA-256 message digest","signature":"public Gmagick::getimagesignature( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagetype":{"params":[],"docComment":"Gets the potential image type. ","signature":"public Gmagick::getimagetype( )","inheritdoc":0,"modifier":["public"],"return":""},"getimageunits":{"params":[],"docComment":"Gets the image units of resolution","signature":"public Gmagick::getimageunits( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagewhitepoint":{"params":[],"docComment":"Returns the chromaticity white point","signature":"public Gmagick::getimagewhitepoint( )","inheritdoc":0,"modifier":["public"],"return":""},"getimagewidth":{"params":[],"docComment":"Returns the width of the image","signature":"public Gmagick::getimagewidth( )","inheritdoc":0,"modifier":["public"],"return":""},"getpackagename":{"params":[],"docComment":"Returns the GraphicsMagick package name.","signature":"public Gmagick::getpackagename( )","inheritdoc":0,"modifier":["public"],"return":""},"getquantumdepth":{"params":[],"docComment":"Returns the Gmagick quantum depth as a string. ","signature":"public Gmagick::getquantumdepth( )","inheritdoc":0,"modifier":["public"],"return":""},"getreleasedate":{"params":[],"docComment":"Returns the GraphicsMagick release date as a string. ","signature":"public Gmagick::getreleasedate( )","inheritdoc":0,"modifier":["public"],"return":""},"getsamplingfactors":{"params":[],"docComment":"Gets the horizontal and vertical sampling factor. ","signature":"public Gmagick::getsamplingfactors( )","inheritdoc":0,"modifier":["public"],"return":""},"getsize":{"params":[],"docComment":"Returns the size associated with the Gmagick object","signature":"public Gmagick::getsize( )","inheritdoc":0,"modifier":["public"],"return":""},"getversion":{"params":[],"docComment":"Returns the GraphicsMagick API version","signature":"public Gmagick::getversion( )","inheritdoc":0,"modifier":["public"],"return":""},"hasnextimage":{"params":[],"docComment":"Checks if the object has more images","signature":"public Gmagick::hasnextimage( )","inheritdoc":0,"modifier":["public"],"return":""},"haspreviousimage":{"params":[],"docComment":"Checks if the object has a previous image","signature":"public Gmagick::haspreviousimage( )","inheritdoc":0,"modifier":["public"],"return":""},"implodeimage":{"params":{"$radius":""},"docComment":"Creates a new image as a copy","signature":"public Gmagick::implodeimage(float $radius )","inheritdoc":0,"modifier":["public"],"return":""},"labelimage":{"params":{"$label":""},"docComment":"Adds a label to an image. ","signature":"public Gmagick::labelimage(string $label )","inheritdoc":0,"modifier":["public"],"return":""},"levelimage":{"params":{"$blackPoint":"","$gamma":"","$whitePoint":"","$channel":""},"docComment":"Adjusts the levels of an image","signature":"public Gmagick::levelimage(float $blackPoint ,float $gamma ,float $whitePoint ,[int $channel] )","inheritdoc":0,"modifier":["public"],"return":""},"magnifyimage":{"params":[],"docComment":"Scales an image proportionally 2x","signature":"public Gmagick::magnifyimage( )","inheritdoc":0,"modifier":["public"],"return":""},"mapimage":{"params":{"$gmagick":"gmagick","$dither":""},"docComment":"Replaces the colors of an image with the closest color from a reference image.","signature":"public Gmagick::mapimage(gmagick $gmagick ,bool $dither )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"medianfilterimage":{"params":{"$radius":""},"docComment":"Applies a digital filter","signature":"public Gmagick::medianfilterimage(float $radius )","inheritdoc":0,"modifier":["public"],"return":""},"minifyimage":{"params":[],"docComment":"Scales an image proportionally to half its size","signature":"public Gmagick::minifyimage( )","inheritdoc":0,"modifier":["public"],"return":""},"modulateimage":{"params":{"$brightness":"","$saturation":"","$hue":""},"docComment":"Control the brightness, saturation, and hue","signature":"public Gmagick::modulateimage(float $brightness ,float $saturation ,float $hue )","inheritdoc":0,"modifier":["public"],"return":""},"motionblurimage":{"params":{"$radius":"","$sigma":"","$angle":""},"docComment":"Simulates motion blur","signature":"public Gmagick::motionblurimage(float $radius ,float $sigma ,float $angle )","inheritdoc":0,"modifier":["public"],"return":""},"newimage":{"params":{"$width":"","$height":"","$background":"","$format":""},"docComment":"Creates a new image","signature":"public Gmagick::newimage(int $width ,int $height ,string $background ,string $format )","inheritdoc":0,"modifier":["public"],"return":""},"nextimage":{"params":[],"docComment":"Moves to the next image","signature":"public Gmagick::nextimage( )","inheritdoc":0,"modifier":["public"],"return":""},"normalizeimage":{"params":{"$channel":""},"docComment":"Enhances the contrast of a color image","signature":"public Gmagick::normalizeimage(int $channel )","inheritdoc":0,"modifier":["public"],"return":""},"oilpaintimage":{"params":{"$radius":""},"docComment":"Simulates an oil painting","signature":"public Gmagick::oilpaintimage(float $radius )","inheritdoc":0,"modifier":["public"],"return":""},"previousimage":{"params":[],"docComment":"Move to the previous image in the object","signature":"public Gmagick::previousimage( )","inheritdoc":0,"modifier":["public"],"return":""},"profileimage":{"params":{"$name":"","$profile":""},"docComment":"Adds or removes a profile from an image","signature":"public Gmagick::profileimage(string $name ,string $profile )","inheritdoc":0,"modifier":["public"],"return":""},"quantizeimage":{"params":{"$numColors":"","$colorspace":"","$treeDepth":"","$dither":"","$measureError":""},"docComment":"Analyzes the colors within a reference image","signature":"public Gmagick::quantizeimage(int $numColors ,int $colorspace ,int $treeDepth ,bool $dither ,bool $measureError )","inheritdoc":0,"modifier":["public"],"return":""},"quantizeimages":{"params":{"$numColors":"","$colorspace":"","$treeDepth":"","$dither":"","$measureError":""},"docComment":"The quantizeimages purpose","signature":"public Gmagick::quantizeimages(int $numColors ,int $colorspace ,int $treeDepth ,bool $dither ,bool $measureError )","inheritdoc":0,"modifier":["public"],"return":""},"queryfontmetrics":{"params":{"$draw":"GmagickDraw","$text":""},"docComment":"Returns an array representing the font metrics","signature":"public Gmagick::queryfontmetrics(GmagickDraw $draw ,string $text )","inheritdoc":0,"modifier":["public"],"return":""},"queryfonts":{"params":{"$pattern":""},"docComment":"Returns the configured fonts","signature":"public Gmagick::queryfonts([string $pattern] )","inheritdoc":0,"modifier":["public"],"return":""},"queryformats":{"params":{"$pattern":""},"docComment":"Returns formats supported by Gmagick.","signature":"public Gmagick::queryformats([string $pattern] )","inheritdoc":0,"modifier":["public"],"return":""},"radialblurimage":{"params":{"$angle":"","$channel":""},"docComment":"Radial blurs an image","signature":"public Gmagick::radialblurimage(float $angle ,[int $channel] )","inheritdoc":0,"modifier":["public"],"return":""},"raiseimage":{"params":{"$width":"","$height":"","$x":"","$y":"","$raise":""},"docComment":"Creates a simulated 3d button-like effect","signature":"public Gmagick::raiseimage(int $width ,int $height ,int $x ,int $y ,bool $raise )","inheritdoc":0,"modifier":["public"],"return":""},"read":{"params":{"$filename":""},"docComment":"Reads image from filename","signature":"public Gmagick::read(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"readimage":{"params":{"$filename":""},"docComment":"Reads image from filename","signature":"public Gmagick::readimage(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"readimageblob":{"params":{"$imageContents":"","$filename":""},"docComment":"Reads image from a binary string","signature":"public Gmagick::readimageblob(string $imageContents ,string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"readimagefile":{"params":{"$fp":"","$filename":""},"docComment":"The readimagefile purpose","signature":"public Gmagick::readimagefile(resource $fp ,string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"reducenoiseimage":{"params":{"$radius":""},"docComment":"Smooths the contours of an image","signature":"public Gmagick::reducenoiseimage(float $radius )","inheritdoc":0,"modifier":["public"],"return":""},"removeimage":{"params":[],"docComment":"Removes an image from the image list","signature":"public Gmagick::removeimage( )","inheritdoc":0,"modifier":["public"],"return":""},"removeimageprofile":{"params":{"$name":""},"docComment":"Removes the named image profile and returns it","signature":"public Gmagick::removeimageprofile(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"resampleimage":{"params":{"$xResolution":"","$yResolution":"","$filter":"","$blur":""},"docComment":"Resample image to desired resolution","signature":"public Gmagick::resampleimage(float $xResolution ,float $yResolution ,int $filter ,float $blur )","inheritdoc":0,"modifier":["public"],"return":""},"resizeimage":{"params":{"$width":"","$height":"","$filter":"","$blur":"","$fit":""},"docComment":"Scales an image","signature":"public Gmagick::resizeimage(int $width ,int $height ,int $filter ,float $blur ,[bool $fit] )","inheritdoc":0,"modifier":["public"],"return":""},"rollimage":{"params":{"$x":"","$y":""},"docComment":"Offsets an image","signature":"public Gmagick::rollimage(int $x ,int $y )","inheritdoc":0,"modifier":["public"],"return":""},"rotateimage":{"params":{"$color":"","$degrees":""},"docComment":"Rotates an image","signature":"public Gmagick::rotateimage(mixed $color ,float $degrees )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"scaleimage":{"params":{"$width":"","$height":"","$fit":""},"docComment":"Scales the size of an image","signature":"public Gmagick::scaleimage(int $width ,int $height ,[bool $fit] )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"separateimagechannel":{"params":{"$channel":""},"docComment":"Separates a channel from the image","signature":"public Gmagick::separateimagechannel(int $channel )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setfilename":{"params":{"$filename":""},"docComment":"Sets the filename before you read or write the image","signature":"public Gmagick::setfilename(string $filename )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimagebackgroundcolor":{"params":{"$color":"GmagickPixel"},"docComment":"Sets the image background color. ","signature":"public Gmagick::setimagebackgroundcolor(GmagickPixel $color )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimageblueprimary":{"params":{"$x":"","$y":""},"docComment":"Sets the image chromaticity blue primary point.","signature":"public Gmagick::setimageblueprimary(float $x ,float $y )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimagebordercolor":{"params":{"$color":"GmagickPixel"},"docComment":"Sets the image border color.","signature":"public Gmagick::setimagebordercolor(GmagickPixel $color )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimagechanneldepth":{"params":{"$channel":"","$depth":""},"docComment":"Sets the depth of a particular image channel","signature":"public Gmagick::setimagechanneldepth(int $channel ,int $depth )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimagecolorspace":{"params":{"$colorspace":""},"docComment":"Sets the image colorspace","signature":"public Gmagick::setimagecolorspace(int $colorspace )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimagecompose":{"params":{"$composite":""},"docComment":"Sets the image composite operator","signature":"public Gmagick::setimagecompose(int $composite )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimagedelay":{"params":{"$delay":""},"docComment":"Sets the image delay","signature":"public Gmagick::setimagedelay(int $delay )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimagedepth":{"params":{"$depth":""},"docComment":"Sets the image depth","signature":"public Gmagick::setimagedepth(int $depth )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimagedispose":{"params":{"$disposeType":""},"docComment":"Sets the image disposal method","signature":"public Gmagick::setimagedispose(int $disposeType )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimagefilename":{"params":{"$filename":""},"docComment":"Sets the filename of a particular image in a sequence","signature":"public Gmagick::setimagefilename(string $filename )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimageformat":{"params":{"$imageFormat":""},"docComment":"Sets the format of a particular image","signature":"public Gmagick::setimageformat(string $imageFormat )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimagegamma":{"params":{"$gamma":""},"docComment":"Sets the image gamma","signature":"public Gmagick::setimagegamma(float $gamma )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimagegreenprimary":{"params":{"$x":"","$y":""},"docComment":"TSets the image chromaticity green primary point. ","signature":"public Gmagick::setimagegreenprimary(float $x ,float $y )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimageindex":{"params":{"$index":""},"docComment":"Set the iterator to the position in the image list specified with the index parameter","signature":"public Gmagick::setimageindex(int $index )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimageinterlacescheme":{"params":{"$interlace":""},"docComment":"Sets the interlace scheme of the image.","signature":"public Gmagick::setimageinterlacescheme(int $interlace )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimageiterations":{"params":{"$iterations":""},"docComment":"Sets the image iterations. ","signature":"public Gmagick::setimageiterations(int $iterations )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimageprofile":{"params":{"$name":"","$profile":""},"docComment":"Adds a named profile to the Gmagick object","signature":"public Gmagick::setimageprofile(string $name ,string $profile )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimageredprimary":{"params":{"$x":"","$y":""},"docComment":"Sets the image chromaticity red primary point. ","signature":"public Gmagick::setimageredprimary(float $x ,float $y )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimagerenderingintent":{"params":{"$rendering_intent":""},"docComment":"Sets the image rendering intent","signature":"public Gmagick::setimagerenderingintent(int $rendering_intent )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimageresolution":{"params":{"$xResolution":"","$yResolution":""},"docComment":"Sets the image resolution","signature":"public Gmagick::setimageresolution(float $xResolution ,float $yResolution )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimagescene":{"params":{"$scene":""},"docComment":"Sets the image scene","signature":"public Gmagick::setimagescene(int $scene )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimagetype":{"params":{"$imgType":""},"docComment":"Sets the image type","signature":"public Gmagick::setimagetype(int $imgType )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimageunits":{"params":{"$resolution":""},"docComment":"Sets the image units of resolution. ","signature":"public Gmagick::setimageunits(int $resolution )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setimagewhitepoint":{"params":{"$x":"","$y":""},"docComment":"Sets the image chromaticity white point. ","signature":"public Gmagick::setimagewhitepoint(float $x ,float $y )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setsamplingfactors":{"params":{"$factors":""},"docComment":"Sets the image sampling factors. ","signature":"public Gmagick::setsamplingfactors(array $factors )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"setsize":{"params":{"$columns":"","$rows":""},"docComment":"Sets the size of the Gmagick object","signature":"public Gmagick::setsize(int $columns ,int $rows )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"shearimage":{"params":{"$color":"","$xShear":"","$yShear":""},"docComment":"Creating a parallelogram","signature":"public Gmagick::shearimage(mixed $color ,float $xShear ,float $yShear )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"solarizeimage":{"params":{"$threshold":""},"docComment":"Applies a solarizing effect to the image","signature":"public Gmagick::solarizeimage(int $threshold )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"spreadimage":{"params":{"$radius":""},"docComment":"Randomly displaces each pixel in a block","signature":"public Gmagick::spreadimage(float $radius )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"stripimage":{"params":[],"docComment":"Strips an image of all profiles and comments","signature":"public Gmagick::stripimage( )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"swirlimage":{"params":{"$degrees":""},"docComment":"Swirls the pixels about the center of the image","signature":"public Gmagick::swirlimage(float $degrees )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"thumbnailimage":{"params":{"$width":"","$height":"","$fit":""},"docComment":"Changes the size of an image","signature":"public Gmagick::thumbnailimage(int $width ,int $height ,[bool $fit] )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"trimimage":{"params":{"$fuzz":""},"docComment":"Remove edges from the image","signature":"public Gmagick::trimimage(float $fuzz )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"},"write":{"params":{"$filename":""},"docComment":"Writes an image to the specified filename","signature":"public Gmagick::write(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"writeimage":{"params":{"$filename":"","$all_frames":""},"docComment":"Writes an image to the specified filename","signature":"public Gmagick::writeimage(string $filename ,[bool $all_frames] )","inheritdoc":0,"modifier":["public"],"return":"Gmagick"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"GmagickDraw":{"classname":"GmagickDraw","docComment":"","methods":{"modifier":{"public":["annotate","arc","bezier","ellipse","getfillcolor","getfillopacity","getfont","getfontsize","getfontstyle","getfontweight","getstrokecolor","getstrokeopacity","getstrokewidth","gettextdecoration","gettextencoding","line","point","polygon","polyline","rectangle","rotate","roundrectangle","scale","setfillcolor","setfillopacity","setfont","setfontsize","setfontstyle","setfontweight","setstrokecolor","setstrokeopacity","setstrokewidth","settextdecoration","settextencoding"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","annotate":{"params":{"$x":"","$y":"","$text":""},"docComment":"Draws text on the image","signature":"public GmagickDraw::annotate(float $x ,float $y ,string $text )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"arc":{"params":{"$sx":"","$sy":"","$ex":"","$ey":"","$sd":"","$ed":""},"docComment":"Draws an arc","signature":"public GmagickDraw::arc(float $sx ,float $sy ,float $ex ,float $ey ,float $sd ,float $ed )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"bezier":{"params":{"$coordinate_array":""},"docComment":"Draws a bezier curve","signature":"public GmagickDraw::bezier(array $coordinate_array )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"ellipse":{"params":{"$ox":"","$oy":"","$rx":"","$ry":"","$start":"","$end":""},"docComment":"Draws an ellipse on the image","signature":"public GmagickDraw::ellipse(float $ox ,float $oy ,float $rx ,float $ry ,float $start ,float $end )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"getfillcolor":{"params":[],"docComment":"Returns the fill color","signature":"public GmagickDraw::getfillcolor( )","inheritdoc":0,"modifier":["public"],"return":""},"getfillopacity":{"params":[],"docComment":"Returns the opacity used when drawing","signature":"public GmagickDraw::getfillopacity( )","inheritdoc":0,"modifier":["public"],"return":""},"getfont":{"params":[],"docComment":"Returns the font","signature":"public GmagickDraw::getfont( )","inheritdoc":0,"modifier":["public"],"return":""},"getfontsize":{"params":[],"docComment":"Returns the font pointsize","signature":"public GmagickDraw::getfontsize( )","inheritdoc":0,"modifier":["public"],"return":""},"getfontstyle":{"params":[],"docComment":"Returns the font style","signature":"public GmagickDraw::getfontstyle( )","inheritdoc":0,"modifier":["public"],"return":""},"getfontweight":{"params":[],"docComment":"Returns the font weight","signature":"public GmagickDraw::getfontweight( )","inheritdoc":0,"modifier":["public"],"return":""},"getstrokecolor":{"params":[],"docComment":"Returns the color used for stroking object outlines","signature":"public GmagickDraw::getstrokecolor( )","inheritdoc":0,"modifier":["public"],"return":""},"getstrokeopacity":{"params":[],"docComment":"Returns the opacity of stroked object outlines","signature":"public GmagickDraw::getstrokeopacity( )","inheritdoc":0,"modifier":["public"],"return":""},"getstrokewidth":{"params":[],"docComment":"Returns the width of the stroke used to draw object outlines","signature":"public GmagickDraw::getstrokewidth( )","inheritdoc":0,"modifier":["public"],"return":""},"gettextdecoration":{"params":[],"docComment":"Returns the text decoration","signature":"public GmagickDraw::gettextdecoration( )","inheritdoc":0,"modifier":["public"],"return":""},"gettextencoding":{"params":[],"docComment":"Returns the code set used for text annotations","signature":"public GmagickDraw::gettextencoding( )","inheritdoc":0,"modifier":["public"],"return":""},"line":{"params":{"$sx":"","$sy":"","$ex":"","$ey":""},"docComment":"The line purpose","signature":"public GmagickDraw::line(float $sx ,float $sy ,float $ex ,float $ey )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"point":{"params":{"$x":"","$y":""},"docComment":"Draws a point","signature":"public GmagickDraw::point(float $x ,float $y )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"polygon":{"params":{"$coordinates":""},"docComment":"Draws a polygon","signature":"public GmagickDraw::polygon(array $coordinates )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"polyline":{"params":{"$coordinate_array":""},"docComment":"Draws a polyline","signature":"public GmagickDraw::polyline(array $coordinate_array )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"rectangle":{"params":{"$x1":"","$y1":"","$x2":"","$y2":""},"docComment":"Draws a rectangle","signature":"public GmagickDraw::rectangle(float $x1 ,float $y1 ,float $x2 ,float $y2 )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"rotate":{"params":{"$degrees":""},"docComment":"Applies the specified rotation to the current coordinate space","signature":"public GmagickDraw::rotate(float $degrees )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"roundrectangle":{"params":{"$x1":"","$y1":"","$x2":"","$y2":"","$rx":"","$ry":""},"docComment":"Draws a rounded rectangle","signature":"public GmagickDraw::roundrectangle(float $x1 ,float $y1 ,float $x2 ,float $y2 ,float $rx ,float $ry )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"scale":{"params":{"$x":"","$y":""},"docComment":"Adjusts the scaling factor","signature":"public GmagickDraw::scale(float $x ,float $y )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"setfillcolor":{"params":{"$color":""},"docComment":"Sets the fill color to be used for drawing filled objects. ","signature":"public GmagickDraw::setfillcolor(string $color )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"setfillopacity":{"params":{"$fill_opacity":""},"docComment":"The setfillopacity purpose","signature":"public GmagickDraw::setfillopacity(float $fill_opacity )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"setfont":{"params":{"$font":""},"docComment":"Sets the fully-specified font to use when annotating with text. ","signature":"public GmagickDraw::setfont(string $font )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"setfontsize":{"params":{"$pointsize":""},"docComment":"Sets the font pointsize to use when annotating with text. ","signature":"public GmagickDraw::setfontsize(float $pointsize )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"setfontstyle":{"params":{"$style":""},"docComment":"Sets the font style to use when annotating with text","signature":"public GmagickDraw::setfontstyle(int $style )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"setfontweight":{"params":{"$weight":""},"docComment":"Sets the font weight","signature":"public GmagickDraw::setfontweight(int $weight )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"setstrokecolor":{"params":{"$color":"GmagickPixel"},"docComment":"Sets the color used for stroking object outlines. ","signature":"public GmagickDraw::setstrokecolor(GmagickPixel $color )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"setstrokeopacity":{"params":{"$stroke_opacity":""},"docComment":"Specifies the opacity of stroked object outlines.","signature":"public GmagickDraw::setstrokeopacity(float $stroke_opacity )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"setstrokewidth":{"params":{"$width":""},"docComment":"Sets the width of the stroke used to draw object outlines. ","signature":"public GmagickDraw::setstrokewidth(float $width )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"settextdecoration":{"params":{"$decoration":""},"docComment":"Specifies a decoration","signature":"public GmagickDraw::settextdecoration(int $decoration )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"},"settextencoding":{"params":{"$encoding":""},"docComment":"Specifies specifies the text code set","signature":"public GmagickDraw::settextencoding(string $encoding )","inheritdoc":0,"modifier":["public"],"return":"GmagickDraw"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"GmagickPixel":{"classname":"GmagickPixel","docComment":"","methods":{"modifier":{"public":["__construct","getcolor","getcolorcount","getcolorvalue","setcolor","setcolorvalue"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$color":""},"docComment":"The GmagickPixel constructor","signature":"public GmagickPixel::__construct(string $color )","inheritdoc":0,"modifier":["public"],"return":""},"getcolor":{"params":{"$as_array":"","$normalize_array":""},"docComment":"Returns the color","signature":"public GmagickPixel::getcolor(bool $as_array ,bool $normalize_array )","inheritdoc":0,"modifier":["public"],"return":""},"getcolorcount":{"params":[],"docComment":"Returns the color count associated with this color","signature":"public GmagickPixel::getcolorcount( )","inheritdoc":0,"modifier":["public"],"return":""},"getcolorvalue":{"params":{"$color":""},"docComment":"Gets the normalized value of the provided color channel","signature":"public GmagickPixel::getcolorvalue(int $color )","inheritdoc":0,"modifier":["public"],"return":""},"setcolor":{"params":{"$color":""},"docComment":"Sets the color","signature":"public GmagickPixel::setcolor(string $color )","inheritdoc":0,"modifier":["public"],"return":"GmagickPixel"},"setcolorvalue":{"params":{"$color":"","$value":""},"docComment":"Sets the normalized value of one of the channels","signature":"public GmagickPixel::setcolorvalue(int $color ,float $value )","inheritdoc":0,"modifier":["public"],"return":"GmagickPixel"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HaruException":{"classname":"HaruException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HaruDoc":{"classname":"HaruDoc","docComment":"","methods":{"modifier":{"public":["addPage","addPageLabel","__construct","createOutline","getCurrentEncoder","getCurrentPage","getEncoder","getFont","getInfoAttr","getPageLayout","getPageMode","getStreamSize","insertPage","loadJPEG","loadPNG","loadRaw","loadTTC","loadTTF","loadType1","output","readFromStream","resetError","resetStream","save","saveToStream","setCompressionMode","setCurrentEncoder","setEncryptionMode","setInfoAttr","setInfoDateAttr","setOpenAction","setPageLayout","setPageMode","setPagesConfiguration","setPassword","setPermission","useCNSEncodings","useCNSFonts","useCNTEncodings","useCNTFonts","useJPEncodings","useJPFonts","useKREncodings","useKRFonts"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addPage":{"params":[],"docComment":"Add new page to the document","signature":"HaruDoc::addPage( )","inheritdoc":0,"modifier":[],"return":""},"addPageLabel":{"params":{"$first_page":"","$style":"","$first_num":"","$prefix":""},"docComment":"Set the numbering style for the specified range of pages","signature":"HaruDoc::addPageLabel(int $first_page ,int $style ,int $first_num ,[string $prefix] )","inheritdoc":0,"modifier":[],"return":""},"__construct":{"params":[],"docComment":"Construct new  instance","signature":"HaruDoc::__construct( )","inheritdoc":0,"modifier":[],"return":""},"createOutline":{"params":{"$title":"","$parent_outline":"","$encoder":""},"docComment":"Create a  instance","signature":"HaruDoc::createOutline(string $title ,object $parent_outline ,object $encoder )","inheritdoc":0,"modifier":[],"return":""},"getCurrentEncoder":{"params":[],"docComment":"Get  currently used in the document","signature":"HaruDoc::getCurrentEncoder( )","inheritdoc":0,"modifier":[],"return":""},"getCurrentPage":{"params":[],"docComment":"Return current page of the document","signature":"HaruDoc::getCurrentPage( )","inheritdoc":0,"modifier":[],"return":""},"getEncoder":{"params":{"$encoding":""},"docComment":"Get  instance for the specified encoding","signature":"HaruDoc::getEncoder(string $encoding )","inheritdoc":0,"modifier":[],"return":""},"getFont":{"params":{"$fontname":"","$encoding":""},"docComment":"Get  instance","signature":"HaruDoc::getFont(string $fontname ,string $encoding )","inheritdoc":0,"modifier":[],"return":""},"getInfoAttr":{"params":{"$type":""},"docComment":"Get current value of the specified document attribute","signature":"HaruDoc::getInfoAttr(int $type )","inheritdoc":0,"modifier":[],"return":""},"getPageLayout":{"params":[],"docComment":"Get current page layout","signature":"HaruDoc::getPageLayout( )","inheritdoc":0,"modifier":[],"return":""},"getPageMode":{"params":[],"docComment":"Get current page mode","signature":"HaruDoc::getPageMode( )","inheritdoc":0,"modifier":[],"return":""},"getStreamSize":{"params":[],"docComment":"Get the size of the temporary stream","signature":"HaruDoc::getStreamSize( )","inheritdoc":0,"modifier":[],"return":""},"insertPage":{"params":{"$page":""},"docComment":"Insert new page just before the specified page","signature":"HaruDoc::insertPage(object $page )","inheritdoc":0,"modifier":[],"return":""},"loadJPEG":{"params":{"$filename":""},"docComment":"Load a JPEG image","signature":"HaruDoc::loadJPEG(string $filename )","inheritdoc":0,"modifier":[],"return":""},"loadPNG":{"params":{"$filename":"","$deferred":""},"docComment":"Load PNG image and return  instance","signature":"HaruDoc::loadPNG(string $filename ,[bool $deferred] )","inheritdoc":0,"modifier":[],"return":""},"loadRaw":{"params":{"$filename":"","$width":"","$height":"","$color_space":""},"docComment":"Load a RAW image","signature":"HaruDoc::loadRaw(string $filename ,int $width ,int $height ,int $color_space )","inheritdoc":0,"modifier":[],"return":""},"loadTTC":{"params":{"$fontfile":"","$index":"","$embed":""},"docComment":"Load the font with the specified index from TTC file","signature":"HaruDoc::loadTTC(string $fontfile ,int $index ,[bool $embed] )","inheritdoc":0,"modifier":[],"return":""},"loadTTF":{"params":{"$fontfile":"","$embed":""},"docComment":"Load TTF font file","signature":"HaruDoc::loadTTF(string $fontfile ,[bool $embed] )","inheritdoc":0,"modifier":[],"return":""},"loadType1":{"params":{"$afmfile":"","$pfmfile":""},"docComment":"Load Type1 font","signature":"HaruDoc::loadType1(string $afmfile ,string $pfmfile )","inheritdoc":0,"modifier":[],"return":""},"output":{"params":[],"docComment":"Write the document data to the output buffer","signature":"HaruDoc::output( )","inheritdoc":0,"modifier":[],"return":""},"readFromStream":{"params":{"$bytes":""},"docComment":"Read data from the temporary stream","signature":"HaruDoc::readFromStream(int $bytes )","inheritdoc":0,"modifier":[],"return":""},"resetError":{"params":[],"docComment":"Reset error state of the document handle","signature":"HaruDoc::resetError( )","inheritdoc":0,"modifier":[],"return":""},"resetStream":{"params":[],"docComment":"Rewind the temporary stream","signature":"HaruDoc::resetStream( )","inheritdoc":0,"modifier":[],"return":""},"save":{"params":{"$file":""},"docComment":"Save the document into the specified file","signature":"HaruDoc::save(string $file )","inheritdoc":0,"modifier":[],"return":""},"saveToStream":{"params":[],"docComment":"Save the document into a temporary stream","signature":"HaruDoc::saveToStream( )","inheritdoc":0,"modifier":[],"return":""},"setCompressionMode":{"params":{"$mode":""},"docComment":"Set compression mode for the document","signature":"HaruDoc::setCompressionMode(int $mode )","inheritdoc":0,"modifier":[],"return":""},"setCurrentEncoder":{"params":{"$encoding":""},"docComment":"Set the current encoder for the document","signature":"HaruDoc::setCurrentEncoder(string $encoding )","inheritdoc":0,"modifier":[],"return":""},"setEncryptionMode":{"params":{"$mode":"","$key_len":""},"docComment":"Set encryption mode for the document","signature":"HaruDoc::setEncryptionMode(int $mode ,[int $key_len] )","inheritdoc":0,"modifier":[],"return":""},"setInfoAttr":{"params":{"$type":"","$info":""},"docComment":"Set the info attribute of the document","signature":"HaruDoc::setInfoAttr(int $type ,string $info )","inheritdoc":0,"modifier":[],"return":""},"setInfoDateAttr":{"params":{"$type":"","$year":"","$month":"","$day":"","$hour":"","$min":"","$sec":"","$ind":"","$off_hour":"","$off_min":""},"docComment":"Set the datetime info attributes of the document","signature":"HaruDoc::setInfoDateAttr(int $type ,int $year ,int $month ,int $day ,int $hour ,int $min ,int $sec ,string $ind ,int $off_hour ,int $off_min )","inheritdoc":0,"modifier":[],"return":""},"setOpenAction":{"params":{"$destination":""},"docComment":"Define which page is shown when the document is opened","signature":"HaruDoc::setOpenAction(object $destination )","inheritdoc":0,"modifier":[],"return":""},"setPageLayout":{"params":{"$layout":""},"docComment":"Set how pages should be displayed","signature":"HaruDoc::setPageLayout(int $layout )","inheritdoc":0,"modifier":[],"return":""},"setPageMode":{"params":{"$mode":""},"docComment":"Set how the document should be displayed","signature":"HaruDoc::setPageMode(int $mode )","inheritdoc":0,"modifier":[],"return":""},"setPagesConfiguration":{"params":{"$page_per_pages":""},"docComment":"Set the number of pages per set of pages","signature":"HaruDoc::setPagesConfiguration(int $page_per_pages )","inheritdoc":0,"modifier":[],"return":""},"setPassword":{"params":{"$owner_password":"","$user_password":""},"docComment":"Set owner and user passwords for the document","signature":"HaruDoc::setPassword(string $owner_password ,string $user_password )","inheritdoc":0,"modifier":[],"return":""},"setPermission":{"params":{"$permission":""},"docComment":"Set permissions for the document","signature":"HaruDoc::setPermission(int $permission )","inheritdoc":0,"modifier":[],"return":""},"useCNSEncodings":{"params":[],"docComment":"Enable Chinese simplified encodings","signature":"HaruDoc::useCNSEncodings( )","inheritdoc":0,"modifier":[],"return":""},"useCNSFonts":{"params":[],"docComment":"Enable builtin Chinese simplified fonts","signature":"HaruDoc::useCNSFonts( )","inheritdoc":0,"modifier":[],"return":""},"useCNTEncodings":{"params":[],"docComment":"Enable Chinese traditional encodings","signature":"HaruDoc::useCNTEncodings( )","inheritdoc":0,"modifier":[],"return":""},"useCNTFonts":{"params":[],"docComment":"Enable builtin Chinese traditional fonts","signature":"HaruDoc::useCNTFonts( )","inheritdoc":0,"modifier":[],"return":""},"useJPEncodings":{"params":[],"docComment":"Enable Japanese encodings","signature":"HaruDoc::useJPEncodings( )","inheritdoc":0,"modifier":[],"return":""},"useJPFonts":{"params":[],"docComment":"Enable builtin Japanese fonts","signature":"HaruDoc::useJPFonts( )","inheritdoc":0,"modifier":[],"return":""},"useKREncodings":{"params":[],"docComment":"Enable Korean encodings","signature":"HaruDoc::useKREncodings( )","inheritdoc":0,"modifier":[],"return":""},"useKRFonts":{"params":[],"docComment":"Enable builtin Korean fonts","signature":"HaruDoc::useKRFonts( )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HaruPage":{"classname":"HaruPage","docComment":"","methods":{"modifier":{"public":["arc","beginText","circle","closePath","concat","createDestination","createLinkAnnotation","createTextAnnotation","createURLAnnotation","curveTo2","curveTo3","curveTo","drawImage","ellipse","endPath","endText","eofill","eoFillStroke","fill","fillStroke","getCharSpace","getCMYKFill","getCMYKStroke","getCurrentFont","getCurrentFontSize","getCurrentPos","getCurrentTextPos","getDash","getFillingColorSpace","getFlatness","getGMode","getGrayFill","getGrayStroke","getHeight","getHorizontalScaling","getLineCap","getLineJoin","getLineWidth","getMiterLimit","getRGBFill","getRGBStroke","getStrokingColorSpace","getTextLeading","getTextMatrix","getTextRenderingMode","getTextRise","getTextWidth","getTransMatrix","getWidth","getWordSpace","lineTo","measureText","moveTextPos","moveTo","moveToNextLine","rectangle","setCharSpace","setCMYKFill","setCMYKStroke","setDash","setFlatness","setFontAndSize","setGrayFill","setGrayStroke","setHeight","setHorizontalScaling","setLineCap","setLineJoin","setLineWidth","setMiterLimit","setRGBFill","setRGBStroke","setRotate","setSize","setSlideShow","setTextLeading","setTextMatrix","setTextRenderingMode","setTextRise","setWidth","setWordSpace","showText","showTextNextLine","stroke","textOut","textRect"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","arc":{"params":{"$x":"","$y":"","$ray":"","$ang1":"","$ang2":""},"docComment":"Append an arc to the current path","signature":"HaruPage::arc(float $x ,float $y ,float $ray ,float $ang1 ,float $ang2 )","inheritdoc":0,"modifier":[],"return":""},"beginText":{"params":[],"docComment":"Begin a text object and set the current text position to (0,0)","signature":"HaruPage::beginText( )","inheritdoc":0,"modifier":[],"return":""},"circle":{"params":{"$x":"","$y":"","$ray":""},"docComment":"Append a circle to the current path","signature":"HaruPage::circle(float $x ,float $y ,float $ray )","inheritdoc":0,"modifier":[],"return":""},"closePath":{"params":[],"docComment":"Append a straight line from the current point to the start point of the path","signature":"HaruPage::closePath( )","inheritdoc":0,"modifier":[],"return":""},"concat":{"params":{"$a":"","$b":"","$c":"","$d":"","$x":"","$y":""},"docComment":"Concatenate current transformation matrix of the page and the specified matrix","signature":"HaruPage::concat(float $a ,float $b ,float $c ,float $d ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"createDestination":{"params":[],"docComment":"Create new  instance","signature":"HaruPage::createDestination( )","inheritdoc":0,"modifier":[],"return":""},"createLinkAnnotation":{"params":{"$rectangle":"","$destination":""},"docComment":"Create new  instance","signature":"HaruPage::createLinkAnnotation(array $rectangle ,object $destination )","inheritdoc":0,"modifier":[],"return":""},"createTextAnnotation":{"params":{"$rectangle":"","$text":"","$encoder":""},"docComment":"Create new  instance","signature":"HaruPage::createTextAnnotation(array $rectangle ,string $text ,object $encoder )","inheritdoc":0,"modifier":[],"return":""},"createURLAnnotation":{"params":{"$rectangle":"","$url":""},"docComment":"Create and return new  instance","signature":"HaruPage::createURLAnnotation(array $rectangle ,string $url )","inheritdoc":0,"modifier":[],"return":""},"curveTo2":{"params":{"$x2":"","$y2":"","$x3":"","$y3":""},"docComment":"Append a Bezier curve to the current path","signature":"HaruPage::curveTo2(float $x2 ,float $y2 ,float $x3 ,float $y3 )","inheritdoc":0,"modifier":[],"return":""},"curveTo3":{"params":{"$x1":"","$y1":"","$x3":"","$y3":""},"docComment":"Append a Bezier curve to the current path","signature":"HaruPage::curveTo3(float $x1 ,float $y1 ,float $x3 ,float $y3 )","inheritdoc":0,"modifier":[],"return":""},"curveTo":{"params":{"$x1":"","$y1":"","$x2":"","$y2":"","$x3":"","$y3":""},"docComment":"Append a Bezier curve to the current path","signature":"HaruPage::curveTo(float $x1 ,float $y1 ,float $x2 ,float $y2 ,float $x3 ,float $y3 )","inheritdoc":0,"modifier":[],"return":""},"drawImage":{"params":{"$image":"","$x":"","$y":"","$width":"","$height":""},"docComment":"Show image at the page","signature":"HaruPage::drawImage(object $image ,float $x ,float $y ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":""},"ellipse":{"params":{"$x":"","$y":"","$xray":"","$yray":""},"docComment":"Append an ellipse to the current path","signature":"HaruPage::ellipse(float $x ,float $y ,float $xray ,float $yray )","inheritdoc":0,"modifier":[],"return":""},"endPath":{"params":[],"docComment":"End current path object without filling and painting operations","signature":"HaruPage::endPath( )","inheritdoc":0,"modifier":[],"return":""},"endText":{"params":[],"docComment":"End current text object","signature":"HaruPage::endText( )","inheritdoc":0,"modifier":[],"return":""},"eofill":{"params":[],"docComment":"Fill current path using even-odd rule","signature":"HaruPage::eofill( )","inheritdoc":0,"modifier":[],"return":""},"eoFillStroke":{"params":{"$close_path":""},"docComment":"Fill current path using even-odd rule, then paint the path","signature":"HaruPage::eoFillStroke([bool $close_path] )","inheritdoc":0,"modifier":[],"return":""},"fill":{"params":[],"docComment":"Fill current path using nonzero winding number rule","signature":"HaruPage::fill( )","inheritdoc":0,"modifier":[],"return":""},"fillStroke":{"params":{"$close_path":""},"docComment":"Fill current path using nonzero winding number rule, then paint the path","signature":"HaruPage::fillStroke([bool $close_path] )","inheritdoc":0,"modifier":[],"return":""},"getCharSpace":{"params":[],"docComment":"Get the current value of character spacing","signature":"HaruPage::getCharSpace( )","inheritdoc":0,"modifier":[],"return":""},"getCMYKFill":{"params":[],"docComment":"Get the current filling color","signature":"HaruPage::getCMYKFill( )","inheritdoc":0,"modifier":[],"return":""},"getCMYKStroke":{"params":[],"docComment":"Get the current stroking color","signature":"HaruPage::getCMYKStroke( )","inheritdoc":0,"modifier":[],"return":""},"getCurrentFont":{"params":[],"docComment":"Get the currently used font","signature":"HaruPage::getCurrentFont( )","inheritdoc":0,"modifier":[],"return":""},"getCurrentFontSize":{"params":[],"docComment":"Get the current font size","signature":"HaruPage::getCurrentFontSize( )","inheritdoc":0,"modifier":[],"return":""},"getCurrentPos":{"params":[],"docComment":"Get the current position for path painting","signature":"HaruPage::getCurrentPos( )","inheritdoc":0,"modifier":[],"return":""},"getCurrentTextPos":{"params":[],"docComment":"Get the current position for text printing","signature":"HaruPage::getCurrentTextPos( )","inheritdoc":0,"modifier":[],"return":""},"getDash":{"params":[],"docComment":"Get the current dash pattern","signature":"HaruPage::getDash( )","inheritdoc":0,"modifier":[],"return":""},"getFillingColorSpace":{"params":[],"docComment":"Get the current filling color space","signature":"HaruPage::getFillingColorSpace( )","inheritdoc":0,"modifier":[],"return":""},"getFlatness":{"params":[],"docComment":"Get the flatness of the page","signature":"HaruPage::getFlatness( )","inheritdoc":0,"modifier":[],"return":""},"getGMode":{"params":[],"docComment":"Get the current graphics mode","signature":"HaruPage::getGMode( )","inheritdoc":0,"modifier":[],"return":""},"getGrayFill":{"params":[],"docComment":"Get the current filling color","signature":"HaruPage::getGrayFill( )","inheritdoc":0,"modifier":[],"return":""},"getGrayStroke":{"params":[],"docComment":"Get the current stroking color","signature":"HaruPage::getGrayStroke( )","inheritdoc":0,"modifier":[],"return":""},"getHeight":{"params":[],"docComment":"Get the height of the page","signature":"HaruPage::getHeight( )","inheritdoc":0,"modifier":[],"return":""},"getHorizontalScaling":{"params":[],"docComment":"Get the current value of horizontal scaling","signature":"HaruPage::getHorizontalScaling( )","inheritdoc":0,"modifier":[],"return":""},"getLineCap":{"params":[],"docComment":"Get the current line cap style","signature":"HaruPage::getLineCap( )","inheritdoc":0,"modifier":[],"return":""},"getLineJoin":{"params":[],"docComment":"Get the current line join style","signature":"HaruPage::getLineJoin( )","inheritdoc":0,"modifier":[],"return":""},"getLineWidth":{"params":[],"docComment":"Get the current line width","signature":"HaruPage::getLineWidth( )","inheritdoc":0,"modifier":[],"return":""},"getMiterLimit":{"params":[],"docComment":"Get the value of miter limit","signature":"HaruPage::getMiterLimit( )","inheritdoc":0,"modifier":[],"return":""},"getRGBFill":{"params":[],"docComment":"Get the current filling color","signature":"HaruPage::getRGBFill( )","inheritdoc":0,"modifier":[],"return":""},"getRGBStroke":{"params":[],"docComment":"Get the current stroking color","signature":"HaruPage::getRGBStroke( )","inheritdoc":0,"modifier":[],"return":""},"getStrokingColorSpace":{"params":[],"docComment":"Get the current stroking color space","signature":"HaruPage::getStrokingColorSpace( )","inheritdoc":0,"modifier":[],"return":""},"getTextLeading":{"params":[],"docComment":"Get the current value of line spacing","signature":"HaruPage::getTextLeading( )","inheritdoc":0,"modifier":[],"return":""},"getTextMatrix":{"params":[],"docComment":"Get the current text transformation matrix of the page","signature":"HaruPage::getTextMatrix( )","inheritdoc":0,"modifier":[],"return":""},"getTextRenderingMode":{"params":[],"docComment":"Get the current text rendering mode","signature":"HaruPage::getTextRenderingMode( )","inheritdoc":0,"modifier":[],"return":""},"getTextRise":{"params":[],"docComment":"Get the current value of text rising","signature":"HaruPage::getTextRise( )","inheritdoc":0,"modifier":[],"return":""},"getTextWidth":{"params":{"$text":""},"docComment":"Get the width of the text using current fontsize, character spacing and word spacing","signature":"HaruPage::getTextWidth(string $text )","inheritdoc":0,"modifier":[],"return":""},"getTransMatrix":{"params":[],"docComment":"Get the current transformation matrix of the page","signature":"HaruPage::getTransMatrix( )","inheritdoc":0,"modifier":[],"return":""},"getWidth":{"params":[],"docComment":"Get the width of the page","signature":"HaruPage::getWidth( )","inheritdoc":0,"modifier":[],"return":""},"getWordSpace":{"params":[],"docComment":"Get the current value of word spacing","signature":"HaruPage::getWordSpace( )","inheritdoc":0,"modifier":[],"return":""},"lineTo":{"params":{"$x":"","$y":""},"docComment":"Draw a line from the current point to the specified point","signature":"HaruPage::lineTo(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"measureText":{"params":{"$text":"","$width":"","$wordwrap":""},"docComment":"Calculate the number of characters which can be included within the specified width","signature":"HaruPage::measureText(string $text ,float $width ,[bool $wordwrap] )","inheritdoc":0,"modifier":[],"return":""},"moveTextPos":{"params":{"$x":"","$y":"","$set_leading":""},"docComment":"Move text position to the specified offset","signature":"HaruPage::moveTextPos(float $x ,float $y ,[bool $set_leading] )","inheritdoc":0,"modifier":[],"return":""},"moveTo":{"params":{"$x":"","$y":""},"docComment":"Set starting point for new drawing path","signature":"HaruPage::moveTo(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"moveToNextLine":{"params":[],"docComment":"Move text position to the start of the next line","signature":"HaruPage::moveToNextLine( )","inheritdoc":0,"modifier":[],"return":""},"rectangle":{"params":{"$x":"","$y":"","$width":"","$height":""},"docComment":"Append a rectangle to the current path","signature":"HaruPage::rectangle(float $x ,float $y ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":""},"setCharSpace":{"params":{"$char_space":""},"docComment":"Set character spacing for the page","signature":"HaruPage::setCharSpace(float $char_space )","inheritdoc":0,"modifier":[],"return":""},"setCMYKFill":{"params":{"$c":"","$m":"","$y":"","$k":""},"docComment":"Set filling color for the page","signature":"HaruPage::setCMYKFill(float $c ,float $m ,float $y ,float $k )","inheritdoc":0,"modifier":[],"return":""},"setCMYKStroke":{"params":{"$c":"","$m":"","$y":"","$k":""},"docComment":"Set stroking color for the page","signature":"HaruPage::setCMYKStroke(float $c ,float $m ,float $y ,float $k )","inheritdoc":0,"modifier":[],"return":""},"setDash":{"params":{"$pattern":"","$phase":""},"docComment":"Set the dash pattern for the page","signature":"HaruPage::setDash(array $pattern ,int $phase )","inheritdoc":0,"modifier":[],"return":""},"setFlatness":{"params":{"$flatness":""},"docComment":"Set flatness for the page","signature":"HaruPage::setFlatness(float $flatness )","inheritdoc":0,"modifier":[],"return":""},"setFontAndSize":{"params":{"$font":"","$size":""},"docComment":"Set font and fontsize for the page","signature":"HaruPage::setFontAndSize(object $font ,float $size )","inheritdoc":0,"modifier":[],"return":""},"setGrayFill":{"params":{"$value":""},"docComment":"Set filling color for the page","signature":"HaruPage::setGrayFill(float $value )","inheritdoc":0,"modifier":[],"return":""},"setGrayStroke":{"params":{"$value":""},"docComment":"Sets stroking color for the page","signature":"HaruPage::setGrayStroke(float $value )","inheritdoc":0,"modifier":[],"return":""},"setHeight":{"params":{"$height":""},"docComment":"Set height of the page","signature":"HaruPage::setHeight(float $height )","inheritdoc":0,"modifier":[],"return":""},"setHorizontalScaling":{"params":{"$scaling":""},"docComment":"Set horizontal scaling for the page","signature":"HaruPage::setHorizontalScaling(float $scaling )","inheritdoc":0,"modifier":[],"return":""},"setLineCap":{"params":{"$cap":""},"docComment":"Set the shape to be used at the ends of lines","signature":"HaruPage::setLineCap(int $cap )","inheritdoc":0,"modifier":[],"return":""},"setLineJoin":{"params":{"$join":""},"docComment":"Set line join style for the page","signature":"HaruPage::setLineJoin(int $join )","inheritdoc":0,"modifier":[],"return":""},"setLineWidth":{"params":{"$width":""},"docComment":"Set line width for the page","signature":"HaruPage::setLineWidth(float $width )","inheritdoc":0,"modifier":[],"return":""},"setMiterLimit":{"params":{"$limit":""},"docComment":"Set the current value of the miter limit of the page","signature":"HaruPage::setMiterLimit(float $limit )","inheritdoc":0,"modifier":[],"return":""},"setRGBFill":{"params":{"$r":"","$g":"","$b":""},"docComment":"Set filling color for the page","signature":"HaruPage::setRGBFill(float $r ,float $g ,float $b )","inheritdoc":0,"modifier":[],"return":""},"setRGBStroke":{"params":{"$r":"","$g":"","$b":""},"docComment":"Set stroking color for the page","signature":"HaruPage::setRGBStroke(float $r ,float $g ,float $b )","inheritdoc":0,"modifier":[],"return":""},"setRotate":{"params":{"$angle":""},"docComment":"Set rotation angle of the page","signature":"HaruPage::setRotate(int $angle )","inheritdoc":0,"modifier":[],"return":""},"setSize":{"params":{"$size":"","$direction":""},"docComment":"Set size and direction of the page","signature":"HaruPage::setSize(int $size ,int $direction )","inheritdoc":0,"modifier":[],"return":""},"setSlideShow":{"params":{"$type":"","$disp_time":"","$trans_time":""},"docComment":"Set transition style for the page","signature":"HaruPage::setSlideShow(int $type ,float $disp_time ,float $trans_time )","inheritdoc":0,"modifier":[],"return":""},"setTextLeading":{"params":{"$text_leading":""},"docComment":"Set text leading (line spacing) for the page","signature":"HaruPage::setTextLeading(float $text_leading )","inheritdoc":0,"modifier":[],"return":""},"setTextMatrix":{"params":{"$a":"","$b":"","$c":"","$d":"","$x":"","$y":""},"docComment":"Set the current text transformation matrix of the page","signature":"HaruPage::setTextMatrix(float $a ,float $b ,float $c ,float $d ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"setTextRenderingMode":{"params":{"$mode":""},"docComment":"Set text rendering mode for the page","signature":"HaruPage::setTextRenderingMode(int $mode )","inheritdoc":0,"modifier":[],"return":""},"setTextRise":{"params":{"$rise":""},"docComment":"Set the current value of text rising","signature":"HaruPage::setTextRise(float $rise )","inheritdoc":0,"modifier":[],"return":""},"setWidth":{"params":{"$width":""},"docComment":"Set width of the page","signature":"HaruPage::setWidth(float $width )","inheritdoc":0,"modifier":[],"return":""},"setWordSpace":{"params":{"$word_space":""},"docComment":"Set word spacing for the page","signature":"HaruPage::setWordSpace(float $word_space )","inheritdoc":0,"modifier":[],"return":""},"showText":{"params":{"$text":""},"docComment":"Print text at the current position of the page","signature":"HaruPage::showText(string $text )","inheritdoc":0,"modifier":[],"return":""},"showTextNextLine":{"params":{"$text":"","$word_space":"","$char_space":""},"docComment":"Move the current position to the start of the next line and print the text","signature":"HaruPage::showTextNextLine(string $text ,[float $word_space] ,[float $char_space] )","inheritdoc":0,"modifier":[],"return":""},"stroke":{"params":{"$close_path":""},"docComment":"Paint current path","signature":"HaruPage::stroke([bool $close_path] )","inheritdoc":0,"modifier":[],"return":""},"textOut":{"params":{"$x":"","$y":"","$text":""},"docComment":"Print the text on the specified position","signature":"HaruPage::textOut(float $x ,float $y ,string $text )","inheritdoc":0,"modifier":[],"return":""},"textRect":{"params":{"$left":"","$top":"","$right":"","$bottom":"","$text":"","$align":""},"docComment":"Print the text inside the specified region","signature":"HaruPage::textRect(float $left ,float $top ,float $right ,float $bottom ,string $text ,[int $align] )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HaruFont":{"classname":"HaruFont","docComment":"","methods":{"modifier":{"public":["getAscent","getCapHeight","getDescent","getEncodingName","getFontName","getTextWidth","getUnicodeWidth","getXHeight","measureText"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getAscent":{"params":[],"docComment":"Get the vertical ascent of the font","signature":"HaruFont::getAscent( )","inheritdoc":0,"modifier":[],"return":""},"getCapHeight":{"params":[],"docComment":"Get the distance from the baseline of uppercase letters","signature":"HaruFont::getCapHeight( )","inheritdoc":0,"modifier":[],"return":""},"getDescent":{"params":[],"docComment":"Get the vertical descent of the font","signature":"HaruFont::getDescent( )","inheritdoc":0,"modifier":[],"return":""},"getEncodingName":{"params":[],"docComment":"Get the name of the encoding","signature":"HaruFont::getEncodingName( )","inheritdoc":0,"modifier":[],"return":""},"getFontName":{"params":[],"docComment":"Get the name of the font","signature":"HaruFont::getFontName( )","inheritdoc":0,"modifier":[],"return":""},"getTextWidth":{"params":{"$text":""},"docComment":"Get the total width of the text, number of characters, number of words and number of spaces","signature":"HaruFont::getTextWidth(string $text )","inheritdoc":0,"modifier":[],"return":""},"getUnicodeWidth":{"params":{"$character":""},"docComment":"Get the width of the character in the font","signature":"HaruFont::getUnicodeWidth(int $character )","inheritdoc":0,"modifier":[],"return":""},"getXHeight":{"params":[],"docComment":"Get the distance from the baseline of lowercase letters","signature":"HaruFont::getXHeight( )","inheritdoc":0,"modifier":[],"return":""},"measureText":{"params":{"$text":"","$width":"","$font_size":"","$char_space":"","$word_space":"","$word_wrap":""},"docComment":"Calculate the number of characters which can be included within the specified width","signature":"HaruFont::measureText(string $text ,float $width ,float $font_size ,float $char_space ,float $word_space ,[bool $word_wrap] )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HaruImage":{"classname":"HaruImage","docComment":"","methods":{"modifier":{"public":["getBitsPerComponent","getColorSpace","getHeight","getSize","getWidth","setColorMask","setMaskImage"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getBitsPerComponent":{"params":[],"docComment":"Get the number of bits used to describe each color component of the image","signature":"HaruImage::getBitsPerComponent( )","inheritdoc":0,"modifier":[],"return":""},"getColorSpace":{"params":[],"docComment":"Get the name of the color space","signature":"HaruImage::getColorSpace( )","inheritdoc":0,"modifier":[],"return":""},"getHeight":{"params":[],"docComment":"Get the height of the image","signature":"HaruImage::getHeight( )","inheritdoc":0,"modifier":[],"return":""},"getSize":{"params":[],"docComment":"Get size of the image","signature":"HaruImage::getSize( )","inheritdoc":0,"modifier":[],"return":""},"getWidth":{"params":[],"docComment":"Get the width of the image","signature":"HaruImage::getWidth( )","inheritdoc":0,"modifier":[],"return":""},"setColorMask":{"params":{"$rmin":"","$rmax":"","$gmin":"","$gmax":"","$bmin":"","$bmax":""},"docComment":"Set the color mask of the image","signature":"HaruImage::setColorMask(int $rmin ,int $rmax ,int $gmin ,int $gmax ,int $bmin ,int $bmax )","inheritdoc":0,"modifier":[],"return":""},"setMaskImage":{"params":{"$mask_image":""},"docComment":"Set the image mask","signature":"HaruImage::setMaskImage(object $mask_image )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HaruEncoder":{"classname":"HaruEncoder","docComment":"","methods":{"modifier":{"public":["getByteType","getType","getUnicode","getWritingMode"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getByteType":{"params":{"$text":"","$index":""},"docComment":"Get the type of the byte in the text","signature":"HaruEncoder::getByteType(string $text ,int $index )","inheritdoc":0,"modifier":[],"return":""},"getType":{"params":[],"docComment":"Get the type of the encoder","signature":"HaruEncoder::getType( )","inheritdoc":0,"modifier":[],"return":""},"getUnicode":{"params":{"$character":""},"docComment":"Convert the specified character to unicode","signature":"HaruEncoder::getUnicode(int $character )","inheritdoc":0,"modifier":[],"return":""},"getWritingMode":{"params":[],"docComment":"Get the writing mode of the encoder","signature":"HaruEncoder::getWritingMode( )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HaruOutline":{"classname":"HaruOutline","docComment":"","methods":{"modifier":{"public":["setDestination","setOpened"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","setDestination":{"params":{"$destination":""},"docComment":"Set the destination for the outline","signature":"HaruOutline::setDestination(object $destination )","inheritdoc":0,"modifier":[],"return":""},"setOpened":{"params":{"$opened":""},"docComment":"Set the initial state of the outline","signature":"HaruOutline::setOpened(bool $opened )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HaruAnnotation":{"classname":"HaruAnnotation","docComment":"","methods":{"modifier":{"public":["setBorderStyle","setHighlightMode","setIcon","setOpened"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","setBorderStyle":{"params":{"$width":"","$dash_on":"","$dash_off":""},"docComment":"Set the border style of the annotation","signature":"HaruAnnotation::setBorderStyle(float $width ,int $dash_on ,int $dash_off )","inheritdoc":0,"modifier":[],"return":""},"setHighlightMode":{"params":{"$mode":""},"docComment":"Set the highlighting mode of the annotation","signature":"HaruAnnotation::setHighlightMode(int $mode )","inheritdoc":0,"modifier":[],"return":""},"setIcon":{"params":{"$icon":""},"docComment":"Set the icon style of the annotation","signature":"HaruAnnotation::setIcon(int $icon )","inheritdoc":0,"modifier":[],"return":""},"setOpened":{"params":{"$opened":""},"docComment":"Set the initial state of the annotation","signature":"HaruAnnotation::setOpened(bool $opened )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HaruDestination":{"classname":"HaruDestination","docComment":"","methods":{"modifier":{"public":["setFit","setFitB","setFitBH","setFitBV","setFitH","setFitR","setFitV","setXYZ"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","setFit":{"params":[],"docComment":"Set the appearance of the page to fit the window","signature":"HaruDestination::setFit( )","inheritdoc":0,"modifier":[],"return":""},"setFitB":{"params":[],"docComment":"Set the appearance of the page to fit the bounding box of the page within the window","signature":"HaruDestination::setFitB( )","inheritdoc":0,"modifier":[],"return":""},"setFitBH":{"params":{"$top":""},"docComment":"Set the appearance of the page to fit the width of the bounding box","signature":"HaruDestination::setFitBH(float $top )","inheritdoc":0,"modifier":[],"return":""},"setFitBV":{"params":{"$left":""},"docComment":"Set the appearance of the page to fit the height of the boudning box","signature":"HaruDestination::setFitBV(float $left )","inheritdoc":0,"modifier":[],"return":""},"setFitH":{"params":{"$top":""},"docComment":"Set the appearance of the page to fit the window width","signature":"HaruDestination::setFitH(float $top )","inheritdoc":0,"modifier":[],"return":""},"setFitR":{"params":{"$left":"","$bottom":"","$right":"","$top":""},"docComment":"Set the appearance of the page to fit the specified rectangle","signature":"HaruDestination::setFitR(float $left ,float $bottom ,float $right ,float $top )","inheritdoc":0,"modifier":[],"return":""},"setFitV":{"params":{"$left":""},"docComment":"Set the appearance of the page to fit the window height","signature":"HaruDestination::setFitV(float $left )","inheritdoc":0,"modifier":[],"return":""},"setXYZ":{"params":{"$left":"","$top":"","$zoom":""},"docComment":"Set the appearance of the page","signature":"HaruDestination::setXYZ(float $left ,float $top ,float $zoom )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HttpDeflateStream":{"classname":"HttpDeflateStream","docComment":"","methods":{"modifier":{"public":["__construct","finish","flush","update"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"static public":["factory"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$flags":""},"docComment":"HttpDeflateStream class constructor","signature":"public HttpDeflateStream::__construct([int $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"factory":{"params":{"$flags":"","$class_name":""},"docComment":"HttpDeflateStream class factory","signature":"static public HttpDeflateStream::factory([int $flags] ,[string $class_name] )","inheritdoc":0,"modifier":["static public"],"return":"HttpDeflateStream"},"finish":{"params":{"$data":""},"docComment":"Finalize deflate stream","signature":"public HttpDeflateStream::finish(string $data )","inheritdoc":0,"modifier":["public"],"return":""},"flush":{"params":{"$data":""},"docComment":"Flush deflate stream","signature":"public HttpDeflateStream::flush(string $data )","inheritdoc":0,"modifier":["public"],"return":""},"update":{"params":{"$data":""},"docComment":"Update deflate stream","signature":"public HttpDeflateStream::update(string $data )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HttpInflateStream":{"classname":"HttpInflateStream","docComment":"","methods":{"modifier":{"public":["__construct","factory","finish","flush","update"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$flags":""},"docComment":"HttpInflateStream class constructor","signature":"public HttpInflateStream::__construct([int $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"factory":{"params":{"$flags":"","$class_name":""},"docComment":"HttpInflateStream class factory","signature":"public HttpInflateStream::factory([int $flags] ,[string $class_name] )","inheritdoc":0,"modifier":["public"],"return":"HttpInflateStream"},"finish":{"params":{"$data":""},"docComment":"Finalize inflate stream","signature":"public HttpInflateStream::finish(string $data )","inheritdoc":0,"modifier":["public"],"return":""},"flush":{"params":{"$data":""},"docComment":"Flush inflate stream","signature":"public HttpInflateStream::flush(string $data )","inheritdoc":0,"modifier":["public"],"return":""},"update":{"params":{"$data":""},"docComment":"Update inflate stream","signature":"public HttpInflateStream::update(string $data )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HttpMessage":{"classname":"HttpMessage","docComment":"","methods":{"modifier":{"public":["addHeaders","__construct","detach","getBody","getHeader","getHeaders","getHttpVersion","getParentMessage","getRequestMethod","getRequestUrl","getResponseCode","getResponseStatus","getType","guessContentType","prepend","reverse","send","setBody","setHeaders","setHttpVersion","setRequestMethod","setRequestUrl","setResponseCode","setResponseStatus","setType","toMessageTypeObject","toString"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"static public":["factory","fromEnv","fromString"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addHeaders":{"params":{"$headers":"","$append":""},"docComment":"Add headers","signature":"public HttpMessage::addHeaders(array $headers ,[bool $append] )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$message":""},"docComment":"HttpMessage constructor","signature":"public HttpMessage::__construct(string $message )","inheritdoc":0,"modifier":["public"],"return":""},"detach":{"params":[],"docComment":"Detach HttpMessage","signature":"public HttpMessage::detach( )","inheritdoc":0,"modifier":["public"],"return":"HttpMessage"},"factory":{"params":{"$raw_message":"","$class_name":""},"docComment":"Create HttpMessage from string","signature":"static public HttpMessage::factory(string $raw_message ,[string $class_name] )","inheritdoc":0,"modifier":["static public"],"return":"HttpMessage"},"fromEnv":{"params":{"$message_type":"","$class_name":""},"docComment":"Create HttpMessage from environment","signature":"static public HttpMessage::fromEnv(int $message_type ,[string $class_name] )","inheritdoc":0,"modifier":["static public"],"return":"HttpMessage"},"fromString":{"params":{"$raw_message":"","$class_name":""},"docComment":"Create HttpMessage from string","signature":"static public HttpMessage::fromString(string $raw_message ,[string $class_name] )","inheritdoc":0,"modifier":["static public"],"return":"HttpMessage"},"getBody":{"params":[],"docComment":"Get message body","signature":"public HttpMessage::getBody( )","inheritdoc":0,"modifier":["public"],"return":""},"getHeader":{"params":{"$header":""},"docComment":"Get header","signature":"public HttpMessage::getHeader(string $header )","inheritdoc":0,"modifier":["public"],"return":""},"getHeaders":{"params":[],"docComment":"Get message headers","signature":"public HttpMessage::getHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getHttpVersion":{"params":[],"docComment":"Get HTTP version","signature":"public HttpMessage::getHttpVersion( )","inheritdoc":0,"modifier":["public"],"return":""},"getParentMessage":{"params":[],"docComment":"Get parent message","signature":"public HttpMessage::getParentMessage( )","inheritdoc":0,"modifier":["public"],"return":"HttpMessage"},"getRequestMethod":{"params":[],"docComment":"Get request method","signature":"public HttpMessage::getRequestMethod( )","inheritdoc":0,"modifier":["public"],"return":""},"getRequestUrl":{"params":[],"docComment":"Get request URL","signature":"public HttpMessage::getRequestUrl( )","inheritdoc":0,"modifier":["public"],"return":""},"getResponseCode":{"params":[],"docComment":"Get response code","signature":"public HttpMessage::getResponseCode( )","inheritdoc":0,"modifier":["public"],"return":""},"getResponseStatus":{"params":[],"docComment":"Get response status","signature":"public HttpMessage::getResponseStatus( )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"Get message type","signature":"public HttpMessage::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"guessContentType":{"params":{"$magic_file":"","$magic_mode":""},"docComment":"Guess content type","signature":"public HttpMessage::guessContentType(string $magic_file ,[int $magic_mode] )","inheritdoc":0,"modifier":["public"],"return":""},"prepend":{"params":{"$message":"HttpMessage","$top":""},"docComment":"Prepend message(s)","signature":"public HttpMessage::prepend(HttpMessage $message ,[bool $top] )","inheritdoc":0,"modifier":["public"],"return":""},"reverse":{"params":[],"docComment":"Reverse message chain","signature":"public HttpMessage::reverse( )","inheritdoc":0,"modifier":["public"],"return":"HttpMessage"},"send":{"params":[],"docComment":"Send message","signature":"public HttpMessage::send( )","inheritdoc":0,"modifier":["public"],"return":""},"setBody":{"params":{"$body":""},"docComment":"Set message body","signature":"public HttpMessage::setBody(string $body )","inheritdoc":0,"modifier":["public"],"return":""},"setHeaders":{"params":{"$headers":""},"docComment":"Set headers","signature":"public HttpMessage::setHeaders(array $headers )","inheritdoc":0,"modifier":["public"],"return":""},"setHttpVersion":{"params":{"$version":""},"docComment":"Set HTTP version","signature":"public HttpMessage::setHttpVersion(string $version )","inheritdoc":0,"modifier":["public"],"return":""},"setRequestMethod":{"params":{"$method":""},"docComment":"Set request method","signature":"public HttpMessage::setRequestMethod(string $method )","inheritdoc":0,"modifier":["public"],"return":""},"setRequestUrl":{"params":{"$url":""},"docComment":"Set request URL","signature":"public HttpMessage::setRequestUrl(string $url )","inheritdoc":0,"modifier":["public"],"return":""},"setResponseCode":{"params":{"$code":""},"docComment":"Set response code","signature":"public HttpMessage::setResponseCode(int $code )","inheritdoc":0,"modifier":["public"],"return":""},"setResponseStatus":{"params":{"$status":""},"docComment":"Set response status","signature":"public HttpMessage::setResponseStatus(string $status )","inheritdoc":0,"modifier":["public"],"return":""},"setType":{"params":{"$type":""},"docComment":"Set message type","signature":"public HttpMessage::setType(int $type )","inheritdoc":0,"modifier":["public"],"return":""},"toMessageTypeObject":{"params":[],"docComment":"Create HTTP object regarding message type","signature":"public HttpMessage::toMessageTypeObject( )","inheritdoc":0,"modifier":["public"],"return":""},"toString":{"params":{"$include_parent":""},"docComment":"Get string representation","signature":"public HttpMessage::toString([bool $include_parent] )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HttpQueryString":{"classname":"HttpQueryString","docComment":"","methods":{"modifier":{"public":["get","mod","set","toArray","toString","xlate"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"final public":["__construct"],"static public":["singleton"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$global":"","$add":""},"docComment":"HttpQueryString constructor","signature":"final public HttpQueryString::__construct([bool $global] ,mixed $add )","inheritdoc":0,"modifier":["final public"],"return":""},"get":{"params":{"$key":"","$type":"","$defval":"","$delete":""},"docComment":"Get (part of) query string","signature":"public HttpQueryString::get(string $key ,[mixed $type] ,[mixed $defval] ,[bool $delete] )","inheritdoc":0,"modifier":["public"],"return":""},"mod":{"params":{"$params":""},"docComment":"Modifiy query string copy","signature":"public HttpQueryString::mod(mixed $params )","inheritdoc":0,"modifier":["public"],"return":"HttpQueryString"},"set":{"params":{"$params":""},"docComment":"Set query string params","signature":"public HttpQueryString::set(mixed $params )","inheritdoc":0,"modifier":["public"],"return":""},"singleton":{"params":{"$global":""},"docComment":"HttpQueryString singleton","signature":"static public HttpQueryString::singleton([bool $global] )","inheritdoc":0,"modifier":["static public"],"return":"HttpQueryString"},"toArray":{"params":[],"docComment":"Get query string as array","signature":"public HttpQueryString::toArray( )","inheritdoc":0,"modifier":["public"],"return":""},"toString":{"params":[],"docComment":"Get query string","signature":"public HttpQueryString::toString( )","inheritdoc":0,"modifier":["public"],"return":""},"xlate":{"params":{"$ie":"","$oe":""},"docComment":"Change query strings charset","signature":"public HttpQueryString::xlate(string $ie ,string $oe )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HttpRequest":{"classname":"HttpRequest","docComment":"","methods":{"modifier":{"public":["addCookies","addHeaders","addPostFields","addPostFile","addPutData","addQueryData","addRawPostData","addSslOptions","clearHistory","__construct","enableCookies","getContentType","getCookies","getHeaders","getHistory","getMethod","getOptions","getPostFields","getPostFiles","getPutData","getPutFile","getQueryData","getRawPostData","getRawRequestMessage","getRawResponseMessage","getRequestMessage","getResponseBody","getResponseCode","getResponseCookies","getResponseData","getResponseHeader","getResponseInfo","getResponseMessage","getResponseStatus","getSslOptions","getUrl","resetCookies","send","setBody","setContentType","setCookies","setHeaders","setMethod","setOptions","setPostFields","setPostFiles","setPutData","setPutFile","setQueryData","setRawPostData","setSslOptions","setUrl"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addCookies":{"params":{"$cookies":""},"docComment":"Add cookies","signature":"public HttpRequest::addCookies(array $cookies )","inheritdoc":0,"modifier":["public"],"return":""},"addHeaders":{"params":{"$headers":""},"docComment":"Add headers","signature":"public HttpRequest::addHeaders(array $headers )","inheritdoc":0,"modifier":["public"],"return":""},"addPostFields":{"params":{"$post_data":""},"docComment":"Add post fields","signature":"public HttpRequest::addPostFields(array $post_data )","inheritdoc":0,"modifier":["public"],"return":""},"addPostFile":{"params":{"$name":"","$file":"","$content_type":""},"docComment":"Add post file","signature":"public HttpRequest::addPostFile(string $name ,string $file ,[string $content_type] )","inheritdoc":0,"modifier":["public"],"return":""},"addPutData":{"params":{"$put_data":""},"docComment":"Add put data","signature":"public HttpRequest::addPutData(string $put_data )","inheritdoc":0,"modifier":["public"],"return":""},"addQueryData":{"params":{"$query_params":""},"docComment":"Add query data","signature":"public HttpRequest::addQueryData(array $query_params )","inheritdoc":0,"modifier":["public"],"return":""},"addRawPostData":{"params":{"$raw_post_data":""},"docComment":"Add raw post data","signature":"public HttpRequest::addRawPostData(string $raw_post_data )","inheritdoc":0,"modifier":["public"],"return":""},"addSslOptions":{"params":{"$options":""},"docComment":"Add ssl options","signature":"public HttpRequest::addSslOptions(array $options )","inheritdoc":0,"modifier":["public"],"return":""},"clearHistory":{"params":[],"docComment":"Clear history","signature":"public HttpRequest::clearHistory( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$url":"","$request_method":"","$options":""},"docComment":"HttpRequest constructor","signature":"public HttpRequest::__construct(string $url ,[int $request_method] ,array $options )","inheritdoc":0,"modifier":["public"],"return":""},"enableCookies":{"params":[],"docComment":"Enable cookies","signature":"public HttpRequest::enableCookies( )","inheritdoc":0,"modifier":["public"],"return":""},"getContentType":{"params":[],"docComment":"Get content type","signature":"public HttpRequest::getContentType( )","inheritdoc":0,"modifier":["public"],"return":""},"getCookies":{"params":[],"docComment":"Get cookies","signature":"public HttpRequest::getCookies( )","inheritdoc":0,"modifier":["public"],"return":""},"getHeaders":{"params":[],"docComment":"Get headers","signature":"public HttpRequest::getHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getHistory":{"params":[],"docComment":"Get history","signature":"public HttpRequest::getHistory( )","inheritdoc":0,"modifier":["public"],"return":"HttpMessage"},"getMethod":{"params":[],"docComment":"Get method","signature":"public HttpRequest::getMethod( )","inheritdoc":0,"modifier":["public"],"return":""},"getOptions":{"params":[],"docComment":"Get options","signature":"public HttpRequest::getOptions( )","inheritdoc":0,"modifier":["public"],"return":""},"getPostFields":{"params":[],"docComment":"Get post fields","signature":"public HttpRequest::getPostFields( )","inheritdoc":0,"modifier":["public"],"return":""},"getPostFiles":{"params":[],"docComment":"Get post files","signature":"public HttpRequest::getPostFiles( )","inheritdoc":0,"modifier":["public"],"return":""},"getPutData":{"params":[],"docComment":"Get put data","signature":"public HttpRequest::getPutData( )","inheritdoc":0,"modifier":["public"],"return":""},"getPutFile":{"params":[],"docComment":"Get put file","signature":"public HttpRequest::getPutFile( )","inheritdoc":0,"modifier":["public"],"return":""},"getQueryData":{"params":[],"docComment":"Get query data","signature":"public HttpRequest::getQueryData( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawPostData":{"params":[],"docComment":"Get raw post data","signature":"public HttpRequest::getRawPostData( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawRequestMessage":{"params":[],"docComment":"Get raw request message","signature":"public HttpRequest::getRawRequestMessage( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawResponseMessage":{"params":[],"docComment":"Get raw response message","signature":"public HttpRequest::getRawResponseMessage( )","inheritdoc":0,"modifier":["public"],"return":""},"getRequestMessage":{"params":[],"docComment":"Get request message","signature":"public HttpRequest::getRequestMessage( )","inheritdoc":0,"modifier":["public"],"return":"HttpMessage"},"getResponseBody":{"params":[],"docComment":"Get response body","signature":"public HttpRequest::getResponseBody( )","inheritdoc":0,"modifier":["public"],"return":""},"getResponseCode":{"params":[],"docComment":"Get response code","signature":"public HttpRequest::getResponseCode( )","inheritdoc":0,"modifier":["public"],"return":""},"getResponseCookies":{"params":{"$flags":"","$allowed_extras":""},"docComment":"Get response cookie(s)","signature":"public HttpRequest::getResponseCookies([int $flags] ,array $allowed_extras )","inheritdoc":0,"modifier":["public"],"return":""},"getResponseData":{"params":[],"docComment":"Get response data","signature":"public HttpRequest::getResponseData( )","inheritdoc":0,"modifier":["public"],"return":""},"getResponseHeader":{"params":{"$name":""},"docComment":"Get response header(s)","signature":"public HttpRequest::getResponseHeader(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"getResponseInfo":{"params":{"$name":""},"docComment":"Get response info","signature":"public HttpRequest::getResponseInfo(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"getResponseMessage":{"params":[],"docComment":"Get response message","signature":"public HttpRequest::getResponseMessage( )","inheritdoc":0,"modifier":["public"],"return":"HttpMessage"},"getResponseStatus":{"params":[],"docComment":"Get response status","signature":"public HttpRequest::getResponseStatus( )","inheritdoc":0,"modifier":["public"],"return":""},"getSslOptions":{"params":[],"docComment":"Get ssl options","signature":"public HttpRequest::getSslOptions( )","inheritdoc":0,"modifier":["public"],"return":""},"getUrl":{"params":[],"docComment":"Get url","signature":"public HttpRequest::getUrl( )","inheritdoc":0,"modifier":["public"],"return":""},"resetCookies":{"params":{"$session_only":""},"docComment":"Reset cookies","signature":"public HttpRequest::resetCookies([bool $session_only] )","inheritdoc":0,"modifier":["public"],"return":""},"send":{"params":[],"docComment":"Send request","signature":"public HttpRequest::send( )","inheritdoc":0,"modifier":["public"],"return":"HttpMessage"},"setBody":{"params":{"$request_body_data":""},"docComment":"Set request body to send, overwriting previously set request body.","signature":"HttpRequest::setBody(string $request_body_data )","inheritdoc":0,"modifier":[],"return":""},"setContentType":{"params":{"$content_type":""},"docComment":"Set content type","signature":"public HttpRequest::setContentType(string $content_type )","inheritdoc":0,"modifier":["public"],"return":""},"setCookies":{"params":{"$cookies":""},"docComment":"Set cookies","signature":"public HttpRequest::setCookies(array $cookies )","inheritdoc":0,"modifier":["public"],"return":""},"setHeaders":{"params":{"$headers":""},"docComment":"Set headers","signature":"public HttpRequest::setHeaders(array $headers )","inheritdoc":0,"modifier":["public"],"return":""},"setMethod":{"params":{"$request_method":""},"docComment":"Set method","signature":"public HttpRequest::setMethod(int $request_method )","inheritdoc":0,"modifier":["public"],"return":""},"setOptions":{"params":{"$options":""},"docComment":"Set options","signature":"public HttpRequest::setOptions(array $options )","inheritdoc":0,"modifier":["public"],"return":""},"setPostFields":{"params":{"$post_data":""},"docComment":"Set post fields","signature":"public HttpRequest::setPostFields(array $post_data )","inheritdoc":0,"modifier":["public"],"return":""},"setPostFiles":{"params":{"$post_files":""},"docComment":"Set post files","signature":"public HttpRequest::setPostFiles(array $post_files )","inheritdoc":0,"modifier":["public"],"return":""},"setPutData":{"params":{"$put_data":""},"docComment":"Set put data","signature":"public HttpRequest::setPutData(string $put_data )","inheritdoc":0,"modifier":["public"],"return":""},"setPutFile":{"params":{"$file":""},"docComment":"Set put file","signature":"public HttpRequest::setPutFile([string $file] )","inheritdoc":0,"modifier":["public"],"return":""},"setQueryData":{"params":{"$query_data":""},"docComment":"Set query data","signature":"public HttpRequest::setQueryData(mixed $query_data )","inheritdoc":0,"modifier":["public"],"return":""},"setRawPostData":{"params":{"$raw_post_data":""},"docComment":"Set raw post data","signature":"public HttpRequest::setRawPostData(string $raw_post_data )","inheritdoc":0,"modifier":["public"],"return":""},"setSslOptions":{"params":{"$options":""},"docComment":"Set ssl options","signature":"public HttpRequest::setSslOptions(array $options )","inheritdoc":0,"modifier":["public"],"return":""},"setUrl":{"params":{"$url":""},"docComment":"Set URL","signature":"public HttpRequest::setUrl(string $url )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HttpRequestPool":{"classname":"HttpRequestPool","docComment":"","methods":{"modifier":{"public":["attach","__construct","__destruct","detach","getAttachedRequests","getFinishedRequests","reset","send"],"private":[],"protected":["socketPerform","socketSelect"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","attach":{"params":{"$request":"HttpRequest"},"docComment":"Attach HttpRequest","signature":"public HttpRequestPool::attach(HttpRequest $request )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$request":"HttpRequest","$...":"HttpRequest"},"docComment":"HttpRequestPool constructor","signature":"public HttpRequestPool::__construct(HttpRequest $request ,HttpRequest $... )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":[],"docComment":"HttpRequestPool destructor","signature":"HttpRequestPool::__destruct( )","inheritdoc":0,"modifier":[],"return":""},"detach":{"params":{"$request":"HttpRequest"},"docComment":"Detach HttpRequest","signature":"HttpRequestPool::detach(HttpRequest $request )","inheritdoc":0,"modifier":[],"return":""},"getAttachedRequests":{"params":[],"docComment":"Get attached requests","signature":"HttpRequestPool::getAttachedRequests( )","inheritdoc":0,"modifier":[],"return":""},"getFinishedRequests":{"params":[],"docComment":"Get finished requests","signature":"HttpRequestPool::getFinishedRequests( )","inheritdoc":0,"modifier":[],"return":""},"reset":{"params":[],"docComment":"Reset request pool","signature":"HttpRequestPool::reset( )","inheritdoc":0,"modifier":[],"return":""},"send":{"params":[],"docComment":"Send all requests","signature":"HttpRequestPool::send( )","inheritdoc":0,"modifier":[],"return":""},"socketPerform":{"params":[],"docComment":"Perform socket actions","signature":"protected HttpRequestPool::socketPerform( )","inheritdoc":0,"modifier":["protected"],"return":""},"socketSelect":{"params":{"$timeout":""},"docComment":"Perform socket select","signature":"protected HttpRequestPool::socketSelect([float $timeout] )","inheritdoc":0,"modifier":["protected"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"HttpResponse":{"classname":"HttpResponse","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":["capture","getBufferSize","getCache","getCacheControl","getContentDisposition","getContentType","getData","getETag","getFile","getGzip","getHeader","getLastModified","getRequestBody","getRequestBodyStream","getRequestHeaders","getStream","getThrottleDelay","guessContentType","redirect","send","setBufferSize","setCache","setCacheControl","setContentDisposition","setContentType","setData","setETag","setFile","setGzip","setHeader","setLastModified","setStream","setThrottleDelay","status"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","capture":{"params":[],"docComment":"Capture script output","signature":"static HttpResponse::capture( )","inheritdoc":0,"modifier":["static"],"return":""},"getBufferSize":{"params":[],"docComment":"Get buffer size","signature":"static HttpResponse::getBufferSize( )","inheritdoc":0,"modifier":["static"],"return":""},"getCache":{"params":[],"docComment":"Get cache","signature":"static HttpResponse::getCache( )","inheritdoc":0,"modifier":["static"],"return":""},"getCacheControl":{"params":[],"docComment":"Get cache control","signature":"static HttpResponse::getCacheControl( )","inheritdoc":0,"modifier":["static"],"return":""},"getContentDisposition":{"params":[],"docComment":"Get content disposition","signature":"static HttpResponse::getContentDisposition( )","inheritdoc":0,"modifier":["static"],"return":""},"getContentType":{"params":[],"docComment":"Get content type","signature":"static HttpResponse::getContentType( )","inheritdoc":0,"modifier":["static"],"return":""},"getData":{"params":[],"docComment":"Get data","signature":"static HttpResponse::getData( )","inheritdoc":0,"modifier":["static"],"return":""},"getETag":{"params":[],"docComment":"Get ETag","signature":"static HttpResponse::getETag( )","inheritdoc":0,"modifier":["static"],"return":""},"getFile":{"params":[],"docComment":"Get file","signature":"static HttpResponse::getFile( )","inheritdoc":0,"modifier":["static"],"return":""},"getGzip":{"params":[],"docComment":"Get gzip","signature":"static HttpResponse::getGzip( )","inheritdoc":0,"modifier":["static"],"return":""},"getHeader":{"params":{"$name":""},"docComment":"Get header","signature":"static HttpResponse::getHeader(string $name )","inheritdoc":0,"modifier":["static"],"return":""},"getLastModified":{"params":[],"docComment":"Get last modified","signature":"static HttpResponse::getLastModified( )","inheritdoc":0,"modifier":["static"],"return":""},"getRequestBody":{"params":[],"docComment":"Get request body","signature":"static HttpResponse::getRequestBody( )","inheritdoc":0,"modifier":["static"],"return":""},"getRequestBodyStream":{"params":[],"docComment":"Get request body stream","signature":"static HttpResponse::getRequestBodyStream( )","inheritdoc":0,"modifier":["static"],"return":""},"getRequestHeaders":{"params":[],"docComment":"Get request headers","signature":"static HttpResponse::getRequestHeaders( )","inheritdoc":0,"modifier":["static"],"return":""},"getStream":{"params":[],"docComment":"Get Stream","signature":"static HttpResponse::getStream( )","inheritdoc":0,"modifier":["static"],"return":""},"getThrottleDelay":{"params":[],"docComment":"Get throttle delay","signature":"static HttpResponse::getThrottleDelay( )","inheritdoc":0,"modifier":["static"],"return":""},"guessContentType":{"params":{"$magic_file":"","$magic_mode":""},"docComment":"Guess content type","signature":"static HttpResponse::guessContentType(string $magic_file ,[int $magic_mode] )","inheritdoc":0,"modifier":["static"],"return":""},"redirect":{"params":{"$url":"","$params":"","$session":"","$status":""},"docComment":"Redirect","signature":"static HttpResponse::redirect(string $url ,array $params ,[bool $session] ,int $status )","inheritdoc":0,"modifier":["static"],"return":""},"send":{"params":{"$clean_ob":""},"docComment":"Send response","signature":"static HttpResponse::send([bool $clean_ob] )","inheritdoc":0,"modifier":["static"],"return":""},"setBufferSize":{"params":{"$bytes":""},"docComment":"Set buffer size","signature":"static HttpResponse::setBufferSize(int $bytes )","inheritdoc":0,"modifier":["static"],"return":""},"setCache":{"params":{"$cache":""},"docComment":"Set cache","signature":"static HttpResponse::setCache(bool $cache )","inheritdoc":0,"modifier":["static"],"return":""},"setCacheControl":{"params":{"$control":"","$max_age":"","$must_revalidate":""},"docComment":"Set cache control","signature":"static HttpResponse::setCacheControl(string $control ,[int $max_age] ,[bool $must_revalidate] )","inheritdoc":0,"modifier":["static"],"return":""},"setContentDisposition":{"params":{"$filename":"","$inline":""},"docComment":"Set content disposition","signature":"static HttpResponse::setContentDisposition(string $filename ,[bool $inline] )","inheritdoc":0,"modifier":["static"],"return":""},"setContentType":{"params":{"$content_type":""},"docComment":"Set content type","signature":"static HttpResponse::setContentType(string $content_type )","inheritdoc":0,"modifier":["static"],"return":""},"setData":{"params":{"$data":""},"docComment":"Set data","signature":"static HttpResponse::setData(mixed $data )","inheritdoc":0,"modifier":["static"],"return":""},"setETag":{"params":{"$etag":""},"docComment":"Set ETag","signature":"static HttpResponse::setETag(string $etag )","inheritdoc":0,"modifier":["static"],"return":""},"setFile":{"params":{"$file":""},"docComment":"Set file","signature":"static HttpResponse::setFile(string $file )","inheritdoc":0,"modifier":["static"],"return":""},"setGzip":{"params":{"$gzip":""},"docComment":"Set gzip","signature":"static HttpResponse::setGzip(bool $gzip )","inheritdoc":0,"modifier":["static"],"return":""},"setHeader":{"params":{"$name":"","$value":"","$replace":""},"docComment":"Set header","signature":"static HttpResponse::setHeader(string $name ,mixed $value ,[bool $replace] )","inheritdoc":0,"modifier":["static"],"return":""},"setLastModified":{"params":{"$timestamp":""},"docComment":"Set last modified","signature":"static HttpResponse::setLastModified(int $timestamp )","inheritdoc":0,"modifier":["static"],"return":""},"setStream":{"params":{"$stream":""},"docComment":"Set stream","signature":"static HttpResponse::setStream(resource $stream )","inheritdoc":0,"modifier":["static"],"return":""},"setThrottleDelay":{"params":{"$seconds":""},"docComment":"Set throttle delay","signature":"static HttpResponse::setThrottleDelay(float $seconds )","inheritdoc":0,"modifier":["static"],"return":""},"status":{"params":{"$status":""},"docComment":"Send HTTP response status","signature":"static HttpResponse::status(int $status )","inheritdoc":0,"modifier":["static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Imagick":{"classname":"Imagick","docComment":"","methods":{"modifier":{"public":["adaptiveBlurImage","adaptiveResizeImage","adaptiveSharpenImage","adaptiveThresholdImage","addImage","addNoiseImage","affineTransformImage","animateImages","annotateImage","appendImages","averageImages","blackThresholdImage","blurImage","borderImage","charcoalImage","chopImage","clear","clipImage","clipPathImage","clone","clutImage","coalesceImages","colorFloodfillImage","colorizeImage","combineImages","commentImage","compareImageChannels","compareImageLayers","compareImages","compositeImage","__construct","contrastImage","contrastStretchImage","convolveImage","cropImage","cropThumbnailImage","current","cycleColormapImage","decipherImage","deconstructImages","deleteImageArtifact","deskewImage","despeckleImage","destroy","displayImage","displayImages","distortImage","drawImage","edgeImage","embossImage","encipherImage","enhanceImage","equalizeImage","evaluateImage","exportImagePixels","extentImage","flattenImages","flipImage","floodFillPaintImage","flopImage","frameImage","functionImage","fxImage","gammaImage","gaussianBlurImage","getColorspace","getCompression","getCompressionQuality","getCopyright","getFilename","getFont","getFormat","getGravity","getHomeURL","getImage","getImageAlphaChannel","getImageArtifact","getImageBackgroundColor","getImageBlob","getImageBluePrimary","getImageBorderColor","getImageChannelDepth","getImageChannelDistortion","getImageChannelDistortions","getImageChannelExtrema","getImageChannelKurtosis","getImageChannelMean","getImageChannelRange","getImageChannelStatistics","getImageClipMask","getImageColormapColor","getImageColors","getImageColorspace","getImageCompose","getImageCompression","getCompressionQuality","getImageDelay","getImageDepth","getImageDispose","getImageDistortion","getImageExtrema","getImageFilename","getImageFormat","getImageGamma","getImageGeometry","getImageGravity","getImageGreenPrimary","getImageHeight","getImageHistogram","getImageIndex","getImageInterlaceScheme","getImageInterpolateMethod","getImageIterations","getImageLength","getImageMagickLicense","getImageMatte","getImageMatteColor","getImageOrientation","getImagePage","getImagePixelColor","getImageProfile","getImageProfiles","getImageProperties","getImageProperty","getImageRedPrimary","getImageRegion","getImageRenderingIntent","getImageResolution","getImagesBlob","getImageScene","getImageSignature","getImageSize","getImageTicksPerSecond","getImageTotalInkDensity","getImageType","getImageUnits","getImageVirtualPixelMethod","getImageWhitePoint","getImageWidth","getInterlaceScheme","getIteratorIndex","getNumberImages","getOption","getPackageName","getPage","getPixelIterator","getPixelRegionIterator","getPointSize","getQuantumDepth","getQuantumRange","getReleaseDate","getResource","getResourceLimit","getSamplingFactors","getSize","getSizeOffset","getVersion","haldClutImage","hasNextImage","hasPreviousImage","identifyImage","implodeImage","importImagePixels","labelImage","levelImage","linearStretchImage","liquidRescaleImage","magnifyImage","mapImage","matteFloodfillImage","medianFilterImage","mergeImageLayers","minifyImage","modulateImage","montageImage","morphImages","mosaicImages","motionBlurImage","negateImage","newImage","newPseudoImage","nextImage","normalizeImage","oilPaintImage","opaquePaintImage","optimizeImageLayers","orderedPosterizeImage","paintFloodfillImage","paintOpaqueImage","paintTransparentImage","pingImage","pingImageBlob","pingImageFile","polaroidImage","posterizeImage","previewImages","previousImage","profileImage","quantizeImage","quantizeImages","queryFontMetrics","queryFonts","queryFormats","radialBlurImage","raiseImage","randomThresholdImage","readImage","readImageBlob","readImageFile","recolorImage","reduceNoiseImage","remapImage","removeImage","removeImageProfile","render","resampleImage","resetImagePage","resizeImage","rollImage","rotateImage","roundCorners","sampleImage","scaleImage","segmentImage","separateImageChannel","sepiaToneImage","setBackgroundColor","setColorspace","setCompression","setCompressionQuality","setFilename","setFirstIterator","setFont","setFormat","setGravity","setImage","setImageAlphaChannel","setImageArtifact","setImageBackgroundColor","setImageBias","setImageBluePrimary","setImageBorderColor","setImageChannelDepth","setImageClipMask","setImageColormapColor","setImageColorspace","setImageCompose","setImageCompression","setImageCompressionQuality","setImageDelay","setImageDepth","setImageDispose","setImageExtent","setImageFilename","setImageFormat","setImageGamma","setImageGravity","setImageGreenPrimary","setImageIndex","setImageInterlaceScheme","setImageInterpolateMethod","setImageIterations","setImageMatte","setImageMatteColor","setImageOpacity","setImageOrientation","setImagePage","setImageProfile","setImageProperty","setImageRedPrimary","setImageRenderingIntent","setImageResolution","setImageScene","setImageTicksPerSecond","setImageType","setImageUnits","setImageVirtualPixelMethod","setImageWhitePoint","setInterlaceScheme","setIteratorIndex","setLastIterator","setOption","setPage","setPointSize","setResolution","setResourceLimit","setSamplingFactors","setSize","setSizeOffset","setType","shadeImage","shadowImage","sharpenImage","shaveImage","shearImage","sigmoidalContrastImage","sketchImage","solarizeImage","sparseColorImage","spliceImage","spreadImage","steganoImage","stereoImage","stripImage","swirlImage","textureImage","thresholdImage","thumbnailImage","tintImage","transformImage","transparentPaintImage","transposeImage","transverseImage","trimImage","uniqueImageColors","unsharpMaskImage","valid","vignetteImage","waveImage","whiteThresholdImage","writeImage","writeImageFile","writeImages","writeImagesFile"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","adaptiveBlurImage":{"params":{"$radius":"","$sigma":"","$channel":""},"docComment":"Adds adaptive blur filter to image","signature":"Imagick::adaptiveBlurImage(float $radius ,float $sigma ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"adaptiveResizeImage":{"params":{"$columns":"","$rows":"","$bestfit":""},"docComment":"Adaptively resize image with data dependent triangulation","signature":"Imagick::adaptiveResizeImage(int $columns ,int $rows ,[bool $bestfit] )","inheritdoc":0,"modifier":[],"return":""},"adaptiveSharpenImage":{"params":{"$radius":"","$sigma":"","$channel":""},"docComment":"Adaptively sharpen the image","signature":"Imagick::adaptiveSharpenImage(float $radius ,float $sigma ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"adaptiveThresholdImage":{"params":{"$width":"","$height":"","$offset":""},"docComment":"Selects a threshold for each pixel based on a range of intensity","signature":"Imagick::adaptiveThresholdImage(int $width ,int $height ,int $offset )","inheritdoc":0,"modifier":[],"return":""},"addImage":{"params":{"$source":"Imagick"},"docComment":"Adds new image to Imagick object image list","signature":"Imagick::addImage(Imagick $source )","inheritdoc":0,"modifier":[],"return":""},"addNoiseImage":{"params":{"$noise_type":"","$channel":""},"docComment":"Adds random noise to the image","signature":"Imagick::addNoiseImage(int $noise_type ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"affineTransformImage":{"params":{"$matrix":"ImagickDraw"},"docComment":"Transforms an image","signature":"Imagick::affineTransformImage(ImagickDraw $matrix )","inheritdoc":0,"modifier":[],"return":""},"animateImages":{"params":{"$x_server":""},"docComment":"Animates an image or images","signature":"Imagick::animateImages(string $x_server )","inheritdoc":0,"modifier":[],"return":""},"annotateImage":{"params":{"$draw_settings":"ImagickDraw","$x":"","$y":"","$angle":"","$text":""},"docComment":"Annotates an image with text","signature":"Imagick::annotateImage(ImagickDraw $draw_settings ,float $x ,float $y ,float $angle ,string $text )","inheritdoc":0,"modifier":[],"return":""},"appendImages":{"params":{"$stack":""},"docComment":"Append a set of images","signature":"Imagick::appendImages([bool $stack] )","inheritdoc":0,"modifier":[],"return":"Imagick"},"averageImages":{"params":[],"docComment":"Average a set of images","signature":"Imagick::averageImages( )","inheritdoc":0,"modifier":[],"return":"Imagick"},"blackThresholdImage":{"params":{"$threshold":""},"docComment":"Forces all pixels below the threshold into black","signature":"Imagick::blackThresholdImage(mixed $threshold )","inheritdoc":0,"modifier":[],"return":""},"blurImage":{"params":{"$radius":"","$sigma":"","$channel":""},"docComment":"Adds blur filter to image","signature":"Imagick::blurImage(float $radius ,float $sigma ,int $channel )","inheritdoc":0,"modifier":[],"return":""},"borderImage":{"params":{"$bordercolor":"","$width":"","$height":""},"docComment":"Surrounds the image with a border","signature":"Imagick::borderImage(mixed $bordercolor ,int $width ,int $height )","inheritdoc":0,"modifier":[],"return":""},"charcoalImage":{"params":{"$radius":"","$sigma":""},"docComment":"Simulates a charcoal drawing","signature":"Imagick::charcoalImage(float $radius ,float $sigma )","inheritdoc":0,"modifier":[],"return":""},"chopImage":{"params":{"$width":"","$height":"","$x":"","$y":""},"docComment":"Removes a region of an image and trims","signature":"Imagick::chopImage(int $width ,int $height ,int $x ,int $y )","inheritdoc":0,"modifier":[],"return":""},"clear":{"params":[],"docComment":"Clears all resources associated to Imagick object","signature":"Imagick::clear( )","inheritdoc":0,"modifier":[],"return":""},"clipImage":{"params":[],"docComment":"Clips along the first path from the 8BIM profile","signature":"Imagick::clipImage( )","inheritdoc":0,"modifier":[],"return":""},"clipPathImage":{"params":{"$pathname":"","$inside":""},"docComment":"Clips along the named paths from the 8BIM profile","signature":"Imagick::clipPathImage(string $pathname ,bool $inside )","inheritdoc":0,"modifier":[],"return":""},"clone":{"params":[],"docComment":"Makes an exact copy of the Imagick object","signature":"Imagick::clone( )","inheritdoc":0,"modifier":[],"return":"Imagick"},"clutImage":{"params":{"$lookup_table":"Imagick","$channel":""},"docComment":"Replaces colors in the image","signature":"Imagick::clutImage(Imagick $lookup_table ,[float $channel] )","inheritdoc":0,"modifier":[],"return":""},"coalesceImages":{"params":[],"docComment":"Composites a set of images","signature":"Imagick::coalesceImages( )","inheritdoc":0,"modifier":[],"return":"Imagick"},"colorFloodfillImage":{"params":{"$fill":"","$fuzz":"","$bordercolor":"","$x":"","$y":""},"docComment":"Changes the color value of any pixel that matches target","signature":"Imagick::colorFloodfillImage(mixed $fill ,float $fuzz ,mixed $bordercolor ,int $x ,int $y )","inheritdoc":0,"modifier":[],"return":""},"colorizeImage":{"params":{"$colorize":"","$opacity":""},"docComment":"Blends the fill color with the image","signature":"Imagick::colorizeImage(mixed $colorize ,mixed $opacity )","inheritdoc":0,"modifier":[],"return":""},"combineImages":{"params":{"$channelType":""},"docComment":"Combines one or more images into a single image","signature":"Imagick::combineImages(int $channelType )","inheritdoc":0,"modifier":[],"return":"Imagick"},"commentImage":{"params":{"$comment":""},"docComment":"Adds a comment to your image","signature":"Imagick::commentImage(string $comment )","inheritdoc":0,"modifier":[],"return":""},"compareImageChannels":{"params":{"$image":"Imagick","$channelType":"","$metricType":""},"docComment":"Returns the difference in one or more images","signature":"Imagick::compareImageChannels(Imagick $image ,int $channelType ,int $metricType )","inheritdoc":0,"modifier":[],"return":""},"compareImageLayers":{"params":{"$method":""},"docComment":"Returns the maximum bounding region between images","signature":"Imagick::compareImageLayers(int $method )","inheritdoc":0,"modifier":[],"return":"Imagick"},"compareImages":{"params":{"$compare":"Imagick","$metric":""},"docComment":"Compares an image to a reconstructed image","signature":"Imagick::compareImages(Imagick $compare ,int $metric )","inheritdoc":0,"modifier":[],"return":""},"compositeImage":{"params":{"$composite_object":"Imagick","$composite":"","$x":"","$y":"","$channel":""},"docComment":"Composite one image onto another","signature":"Imagick::compositeImage(Imagick $composite_object ,int $composite ,int $x ,int $y ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"__construct":{"params":{"$files":""},"docComment":"The Imagick constructor","signature":"Imagick::__construct(mixed $files )","inheritdoc":0,"modifier":[],"return":""},"contrastImage":{"params":{"$sharpen":""},"docComment":"Change the contrast of the image","signature":"Imagick::contrastImage(bool $sharpen )","inheritdoc":0,"modifier":[],"return":""},"contrastStretchImage":{"params":{"$black_point":"","$white_point":"","$channel":""},"docComment":"Enhances the contrast of a color image","signature":"Imagick::contrastStretchImage(float $black_point ,float $white_point ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"convolveImage":{"params":{"$kernel":"","$channel":""},"docComment":"Applies a custom convolution kernel to the image","signature":"Imagick::convolveImage(array $kernel ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"cropImage":{"params":{"$width":"","$height":"","$x":"","$y":""},"docComment":"Extracts a region of the image","signature":"Imagick::cropImage(int $width ,int $height ,int $x ,int $y )","inheritdoc":0,"modifier":[],"return":""},"cropThumbnailImage":{"params":{"$width":"","$height":""},"docComment":"Creates a crop thumbnail","signature":"Imagick::cropThumbnailImage(int $width ,int $height )","inheritdoc":0,"modifier":[],"return":""},"current":{"params":[],"docComment":"Returns a reference to the current Imagick object","signature":"Imagick::current( )","inheritdoc":0,"modifier":[],"return":"Imagick"},"cycleColormapImage":{"params":{"$displace":""},"docComment":"Displaces an image's colormap","signature":"Imagick::cycleColormapImage(int $displace )","inheritdoc":0,"modifier":[],"return":""},"decipherImage":{"params":{"$passphrase":""},"docComment":"Deciphers an image","signature":"Imagick::decipherImage(string $passphrase )","inheritdoc":0,"modifier":[],"return":""},"deconstructImages":{"params":[],"docComment":"Returns certain pixel differences between images","signature":"Imagick::deconstructImages( )","inheritdoc":0,"modifier":[],"return":"Imagick"},"deleteImageArtifact":{"params":{"$artifact":""},"docComment":"Delete image artifact","signature":"Imagick::deleteImageArtifact(string $artifact )","inheritdoc":0,"modifier":[],"return":""},"deskewImage":{"params":{"$threshold":""},"docComment":"Removes skew from the image","signature":"public Imagick::deskewImage(float $threshold )","inheritdoc":0,"modifier":["public"],"return":""},"despeckleImage":{"params":[],"docComment":"Reduces the speckle noise in an image","signature":"Imagick::despeckleImage( )","inheritdoc":0,"modifier":[],"return":""},"destroy":{"params":[],"docComment":"Destroys the Imagick object","signature":"Imagick::destroy( )","inheritdoc":0,"modifier":[],"return":""},"displayImage":{"params":{"$servername":""},"docComment":"Displays an image","signature":"Imagick::displayImage(string $servername )","inheritdoc":0,"modifier":[],"return":""},"displayImages":{"params":{"$servername":""},"docComment":"Displays an image or image sequence","signature":"Imagick::displayImages(string $servername )","inheritdoc":0,"modifier":[],"return":""},"distortImage":{"params":{"$method":"","$arguments":"","$bestfit":""},"docComment":"Distorts an image using various distortion methods","signature":"Imagick::distortImage(int $method ,array $arguments ,bool $bestfit )","inheritdoc":0,"modifier":[],"return":""},"drawImage":{"params":{"$draw":"ImagickDraw"},"docComment":"Renders the ImagickDraw object on the current image","signature":"Imagick::drawImage(ImagickDraw $draw )","inheritdoc":0,"modifier":[],"return":""},"edgeImage":{"params":{"$radius":""},"docComment":"Enhance edges within the image","signature":"Imagick::edgeImage(float $radius )","inheritdoc":0,"modifier":[],"return":""},"embossImage":{"params":{"$radius":"","$sigma":""},"docComment":"Returns a grayscale image with a three-dimensional effect","signature":"Imagick::embossImage(float $radius ,float $sigma )","inheritdoc":0,"modifier":[],"return":""},"encipherImage":{"params":{"$passphrase":""},"docComment":"Enciphers an image","signature":"Imagick::encipherImage(string $passphrase )","inheritdoc":0,"modifier":[],"return":""},"enhanceImage":{"params":[],"docComment":"Improves the quality of a noisy image","signature":"Imagick::enhanceImage( )","inheritdoc":0,"modifier":[],"return":""},"equalizeImage":{"params":[],"docComment":"Equalizes the image histogram","signature":"Imagick::equalizeImage( )","inheritdoc":0,"modifier":[],"return":""},"evaluateImage":{"params":{"$op":"","$constant":"","$channel":""},"docComment":"Applies an expression to an image","signature":"Imagick::evaluateImage(int $op ,float $constant ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"exportImagePixels":{"params":{"$x":"","$y":"","$width":"","$height":"","$map":"","$STORAGE":""},"docComment":"Exports raw image pixels","signature":"public Imagick::exportImagePixels(int $x ,int $y ,int $width ,int $height ,string $map ,int $STORAGE )","inheritdoc":0,"modifier":["public"],"return":""},"extentImage":{"params":{"$width":"","$height":"","$x":"","$y":""},"docComment":"Set image size","signature":"Imagick::extentImage(int $width ,int $height ,int $x ,int $y )","inheritdoc":0,"modifier":[],"return":""},"flattenImages":{"params":[],"docComment":"Merges a sequence of images","signature":"Imagick::flattenImages( )","inheritdoc":0,"modifier":[],"return":"Imagick"},"flipImage":{"params":[],"docComment":"Creates a vertical mirror image","signature":"Imagick::flipImage( )","inheritdoc":0,"modifier":[],"return":""},"floodFillPaintImage":{"params":{"$fill":"","$fuzz":"","$target":"","$x":"","$y":"","$invert":"","$channel":""},"docComment":"Changes the color value of any pixel that matches target","signature":"Imagick::floodFillPaintImage(mixed $fill ,float $fuzz ,mixed $target ,int $x ,int $y ,bool $invert ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"flopImage":{"params":[],"docComment":"Creates a horizontal mirror image","signature":"Imagick::flopImage( )","inheritdoc":0,"modifier":[],"return":""},"frameImage":{"params":{"$matte_color":"","$width":"","$height":"","$inner_bevel":"","$outer_bevel":""},"docComment":"Adds a simulated three-dimensional border","signature":"Imagick::frameImage(mixed $matte_color ,int $width ,int $height ,int $inner_bevel ,int $outer_bevel )","inheritdoc":0,"modifier":[],"return":""},"functionImage":{"params":{"$function":"","$arguments":"","$channel":""},"docComment":"Applies a function on the image","signature":"public Imagick::functionImage(int $function ,array $arguments ,[int $channel] )","inheritdoc":0,"modifier":["public"],"return":""},"fxImage":{"params":{"$expression":"","$channel":""},"docComment":"Evaluate expression for each pixel in the image","signature":"Imagick::fxImage(string $expression ,[int $channel] )","inheritdoc":0,"modifier":[],"return":"Imagick"},"gammaImage":{"params":{"$gamma":"","$channel":""},"docComment":"Gamma-corrects an image","signature":"Imagick::gammaImage(float $gamma ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"gaussianBlurImage":{"params":{"$radius":"","$sigma":"","$channel":""},"docComment":"Blurs an image","signature":"Imagick::gaussianBlurImage(float $radius ,float $sigma ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"getColorspace":{"params":[],"docComment":"Gets the colorspace","signature":"Imagick::getColorspace( )","inheritdoc":0,"modifier":[],"return":""},"getCompression":{"params":[],"docComment":"Gets the object compression type","signature":"Imagick::getCompression( )","inheritdoc":0,"modifier":[],"return":""},"getCompressionQuality":{"params":[],"docComment":"Gets the object compression quality","signature":"Imagick::getCompressionQuality( )","inheritdoc":0,"modifier":[],"return":""},"getCopyright":{"params":[],"docComment":"Returns the ImageMagick API copyright as a string","signature":"Imagick::getCopyright( )","inheritdoc":0,"modifier":[],"return":""},"getFilename":{"params":[],"docComment":"The filename associated with an image sequence","signature":"Imagick::getFilename( )","inheritdoc":0,"modifier":[],"return":""},"getFont":{"params":[],"docComment":"Gets font","signature":"Imagick::getFont( )","inheritdoc":0,"modifier":[],"return":""},"getFormat":{"params":[],"docComment":"Returns the format of the Imagick object","signature":"Imagick::getFormat( )","inheritdoc":0,"modifier":[],"return":""},"getGravity":{"params":[],"docComment":"Gets the gravity","signature":"Imagick::getGravity( )","inheritdoc":0,"modifier":[],"return":""},"getHomeURL":{"params":[],"docComment":"Returns the ImageMagick home URL","signature":"Imagick::getHomeURL( )","inheritdoc":0,"modifier":[],"return":""},"getImage":{"params":[],"docComment":"Returns a new Imagick object","signature":"Imagick::getImage( )","inheritdoc":0,"modifier":[],"return":"Imagick"},"getImageAlphaChannel":{"params":[],"docComment":"Gets the image alpha channel","signature":"Imagick::getImageAlphaChannel( )","inheritdoc":0,"modifier":[],"return":""},"getImageArtifact":{"params":{"$artifact":""},"docComment":"Get image artifact","signature":"Imagick::getImageArtifact(string $artifact )","inheritdoc":0,"modifier":[],"return":""},"getImageBackgroundColor":{"params":[],"docComment":"Returns the image background color","signature":"Imagick::getImageBackgroundColor( )","inheritdoc":0,"modifier":[],"return":"ImagickPixel"},"getImageBlob":{"params":[],"docComment":"Returns the image sequence as a blob","signature":"Imagick::getImageBlob( )","inheritdoc":0,"modifier":[],"return":""},"getImageBluePrimary":{"params":[],"docComment":"Returns the chromaticy blue primary point","signature":"Imagick::getImageBluePrimary( )","inheritdoc":0,"modifier":[],"return":""},"getImageBorderColor":{"params":[],"docComment":"Returns the image border color","signature":"Imagick::getImageBorderColor( )","inheritdoc":0,"modifier":[],"return":"ImagickPixel"},"getImageChannelDepth":{"params":{"$channel":""},"docComment":"Gets the depth for a particular image channel","signature":"Imagick::getImageChannelDepth(int $channel )","inheritdoc":0,"modifier":[],"return":""},"getImageChannelDistortion":{"params":{"$reference":"Imagick","$channel":"","$metric":""},"docComment":"Compares image channels of an image to a reconstructed image","signature":"Imagick::getImageChannelDistortion(Imagick $reference ,int $channel ,int $metric )","inheritdoc":0,"modifier":[],"return":""},"getImageChannelDistortions":{"params":{"$reference":"Imagick","$metric":"","$channel":""},"docComment":"Gets channel distortions","signature":"Imagick::getImageChannelDistortions(Imagick $reference ,int $metric ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"getImageChannelExtrema":{"params":{"$channel":""},"docComment":"Gets the extrema for one or more image channels","signature":"Imagick::getImageChannelExtrema(int $channel )","inheritdoc":0,"modifier":[],"return":""},"getImageChannelKurtosis":{"params":{"$channel":""},"docComment":"The getImageChannelKurtosis purpose","signature":"public Imagick::getImageChannelKurtosis([int $channel] )","inheritdoc":0,"modifier":["public"],"return":""},"getImageChannelMean":{"params":{"$channel":""},"docComment":"Gets the mean and standard deviation","signature":"Imagick::getImageChannelMean(int $channel )","inheritdoc":0,"modifier":[],"return":""},"getImageChannelRange":{"params":{"$channel":""},"docComment":"Gets channel range","signature":"Imagick::getImageChannelRange(int $channel )","inheritdoc":0,"modifier":[],"return":""},"getImageChannelStatistics":{"params":[],"docComment":"Returns statistics for each channel in the image","signature":"Imagick::getImageChannelStatistics( )","inheritdoc":0,"modifier":[],"return":""},"getImageClipMask":{"params":[],"docComment":"Gets image clip mask","signature":"Imagick::getImageClipMask( )","inheritdoc":0,"modifier":[],"return":"Imagick"},"getImageColormapColor":{"params":{"$index":""},"docComment":"Returns the color of the specified colormap index","signature":"Imagick::getImageColormapColor(int $index )","inheritdoc":0,"modifier":[],"return":"ImagickPixel"},"getImageColors":{"params":[],"docComment":"Gets the number of unique colors in the image","signature":"Imagick::getImageColors( )","inheritdoc":0,"modifier":[],"return":""},"getImageColorspace":{"params":[],"docComment":"Gets the image colorspace","signature":"Imagick::getImageColorspace( )","inheritdoc":0,"modifier":[],"return":""},"getImageCompose":{"params":[],"docComment":"Returns the composite operator associated with the image","signature":"Imagick::getImageCompose( )","inheritdoc":0,"modifier":[],"return":""},"getImageCompression":{"params":[],"docComment":"Gets the current image's compression type","signature":"Imagick::getImageCompression( )","inheritdoc":0,"modifier":[],"return":""},"getImageDelay":{"params":[],"docComment":"Gets the image delay","signature":"Imagick::getImageDelay( )","inheritdoc":0,"modifier":[],"return":""},"getImageDepth":{"params":[],"docComment":"Gets the image depth","signature":"Imagick::getImageDepth( )","inheritdoc":0,"modifier":[],"return":""},"getImageDispose":{"params":[],"docComment":"Gets the image disposal method","signature":"Imagick::getImageDispose( )","inheritdoc":0,"modifier":[],"return":""},"getImageDistortion":{"params":{"$reference":"","$metric":""},"docComment":"Compares an image to a reconstructed image","signature":"Imagick::getImageDistortion( $reference ,int $metric )","inheritdoc":0,"modifier":[],"return":""},"getImageExtrema":{"params":[],"docComment":"Gets the extrema for the image","signature":"Imagick::getImageExtrema( )","inheritdoc":0,"modifier":[],"return":""},"getImageFilename":{"params":[],"docComment":"Returns the filename of a particular image in a sequence","signature":"Imagick::getImageFilename( )","inheritdoc":0,"modifier":[],"return":""},"getImageFormat":{"params":[],"docComment":"Returns the format of a particular image in a sequence","signature":"Imagick::getImageFormat( )","inheritdoc":0,"modifier":[],"return":""},"getImageGamma":{"params":[],"docComment":"Gets the image gamma","signature":"Imagick::getImageGamma( )","inheritdoc":0,"modifier":[],"return":""},"getImageGeometry":{"params":[],"docComment":"Gets the width and height as an associative array","signature":"Imagick::getImageGeometry( )","inheritdoc":0,"modifier":[],"return":""},"getImageGravity":{"params":[],"docComment":"Gets the image gravity","signature":"Imagick::getImageGravity( )","inheritdoc":0,"modifier":[],"return":""},"getImageGreenPrimary":{"params":[],"docComment":"Returns the chromaticy green primary point","signature":"Imagick::getImageGreenPrimary( )","inheritdoc":0,"modifier":[],"return":""},"getImageHeight":{"params":[],"docComment":"Returns the image height","signature":"Imagick::getImageHeight( )","inheritdoc":0,"modifier":[],"return":""},"getImageHistogram":{"params":[],"docComment":"Gets the image histogram","signature":"Imagick::getImageHistogram( )","inheritdoc":0,"modifier":[],"return":""},"getImageIndex":{"params":[],"docComment":"Gets the index of the current active image","signature":"Imagick::getImageIndex( )","inheritdoc":0,"modifier":[],"return":""},"getImageInterlaceScheme":{"params":[],"docComment":"Gets the image interlace scheme","signature":"Imagick::getImageInterlaceScheme( )","inheritdoc":0,"modifier":[],"return":""},"getImageInterpolateMethod":{"params":[],"docComment":"Returns the interpolation method","signature":"Imagick::getImageInterpolateMethod( )","inheritdoc":0,"modifier":[],"return":""},"getImageIterations":{"params":[],"docComment":"Gets the image iterations","signature":"Imagick::getImageIterations( )","inheritdoc":0,"modifier":[],"return":""},"getImageLength":{"params":[],"docComment":"Returns the image length in bytes","signature":"Imagick::getImageLength( )","inheritdoc":0,"modifier":[],"return":""},"getImageMagickLicense":{"params":[],"docComment":"Returns a string containing the ImageMagick license","signature":"Imagick::getImageMagickLicense( )","inheritdoc":0,"modifier":[],"return":""},"getImageMatte":{"params":[],"docComment":"Return if the image has a matte channel","signature":"Imagick::getImageMatte( )","inheritdoc":0,"modifier":[],"return":""},"getImageMatteColor":{"params":[],"docComment":"Returns the image matte color","signature":"Imagick::getImageMatteColor( )","inheritdoc":0,"modifier":[],"return":"ImagickPixel"},"getImageOrientation":{"params":[],"docComment":"Gets the image orientation","signature":"Imagick::getImageOrientation( )","inheritdoc":0,"modifier":[],"return":""},"getImagePage":{"params":[],"docComment":"Returns the page geometry","signature":"Imagick::getImagePage( )","inheritdoc":0,"modifier":[],"return":""},"getImagePixelColor":{"params":{"$x":"","$y":""},"docComment":"Returns the color of the specified pixel","signature":"Imagick::getImagePixelColor(int $x ,int $y )","inheritdoc":0,"modifier":[],"return":"ImagickPixel"},"getImageProfile":{"params":{"$name":""},"docComment":"Returns the named image profile","signature":"Imagick::getImageProfile(string $name )","inheritdoc":0,"modifier":[],"return":""},"getImageProfiles":{"params":{"$pattern":"","$only_names":""},"docComment":"Returns the image profiles","signature":"Imagick::getImageProfiles([string $pattern] ,[bool $only_names] )","inheritdoc":0,"modifier":[],"return":""},"getImageProperties":{"params":{"$pattern":"","$only_names":""},"docComment":"Returns the image properties","signature":"Imagick::getImageProperties([string $pattern] ,[bool $only_names] )","inheritdoc":0,"modifier":[],"return":""},"getImageProperty":{"params":{"$name":""},"docComment":"Returns the named image property","signature":"Imagick::getImageProperty(string $name )","inheritdoc":0,"modifier":[],"return":""},"getImageRedPrimary":{"params":[],"docComment":"Returns the chromaticity red primary point","signature":"Imagick::getImageRedPrimary( )","inheritdoc":0,"modifier":[],"return":""},"getImageRegion":{"params":{"$width":"","$height":"","$x":"","$y":""},"docComment":"Extracts a region of the image","signature":"Imagick::getImageRegion(int $width ,int $height ,int $x ,int $y )","inheritdoc":0,"modifier":[],"return":"Imagick"},"getImageRenderingIntent":{"params":[],"docComment":"Gets the image rendering intent","signature":"Imagick::getImageRenderingIntent( )","inheritdoc":0,"modifier":[],"return":""},"getImageResolution":{"params":[],"docComment":"Gets the image X and Y resolution","signature":"Imagick::getImageResolution( )","inheritdoc":0,"modifier":[],"return":""},"getImagesBlob":{"params":[],"docComment":"Returns all image sequences as a blob","signature":"Imagick::getImagesBlob( )","inheritdoc":0,"modifier":[],"return":""},"getImageScene":{"params":[],"docComment":"Gets the image scene","signature":"Imagick::getImageScene( )","inheritdoc":0,"modifier":[],"return":""},"getImageSignature":{"params":[],"docComment":"Generates an SHA-256 message digest","signature":"Imagick::getImageSignature( )","inheritdoc":0,"modifier":[],"return":""},"getImageSize":{"params":[],"docComment":"Returns the image length in bytes","signature":"Imagick::getImageSize( )","inheritdoc":0,"modifier":[],"return":""},"getImageTicksPerSecond":{"params":[],"docComment":"Gets the image ticks-per-second","signature":"Imagick::getImageTicksPerSecond( )","inheritdoc":0,"modifier":[],"return":""},"getImageTotalInkDensity":{"params":[],"docComment":"Gets the image total ink density","signature":"Imagick::getImageTotalInkDensity( )","inheritdoc":0,"modifier":[],"return":""},"getImageType":{"params":[],"docComment":"Gets the potential image type","signature":"Imagick::getImageType( )","inheritdoc":0,"modifier":[],"return":""},"getImageUnits":{"params":[],"docComment":"Gets the image units of resolution","signature":"Imagick::getImageUnits( )","inheritdoc":0,"modifier":[],"return":""},"getImageVirtualPixelMethod":{"params":[],"docComment":"Returns the virtual pixel method","signature":"Imagick::getImageVirtualPixelMethod( )","inheritdoc":0,"modifier":[],"return":""},"getImageWhitePoint":{"params":[],"docComment":"Returns the chromaticity white point","signature":"Imagick::getImageWhitePoint( )","inheritdoc":0,"modifier":[],"return":""},"getImageWidth":{"params":[],"docComment":"Returns the image width","signature":"Imagick::getImageWidth( )","inheritdoc":0,"modifier":[],"return":""},"getInterlaceScheme":{"params":[],"docComment":"Gets the object interlace scheme","signature":"Imagick::getInterlaceScheme( )","inheritdoc":0,"modifier":[],"return":""},"getIteratorIndex":{"params":[],"docComment":"Gets the index of the current active image","signature":"Imagick::getIteratorIndex( )","inheritdoc":0,"modifier":[],"return":""},"getNumberImages":{"params":[],"docComment":"Returns the number of images in the object","signature":"Imagick::getNumberImages( )","inheritdoc":0,"modifier":[],"return":""},"getOption":{"params":{"$key":""},"docComment":"Returns a value associated with the specified key","signature":"Imagick::getOption(string $key )","inheritdoc":0,"modifier":[],"return":""},"getPackageName":{"params":[],"docComment":"Returns the ImageMagick package name","signature":"Imagick::getPackageName( )","inheritdoc":0,"modifier":[],"return":""},"getPage":{"params":[],"docComment":"Returns the page geometry","signature":"Imagick::getPage( )","inheritdoc":0,"modifier":[],"return":""},"getPixelIterator":{"params":[],"docComment":"Returns a MagickPixelIterator","signature":"Imagick::getPixelIterator( )","inheritdoc":0,"modifier":[],"return":"ImagickPixelIterator"},"getPixelRegionIterator":{"params":{"$x":"","$y":"","$columns":"","$rows":""},"docComment":"Get an ImagickPixelIterator for an image section","signature":"Imagick::getPixelRegionIterator(int $x ,int $y ,int $columns ,int $rows )","inheritdoc":0,"modifier":[],"return":"ImagickPixelIterator"},"getPointSize":{"params":[],"docComment":"Gets point size","signature":"Imagick::getPointSize( )","inheritdoc":0,"modifier":[],"return":""},"getQuantumDepth":{"params":[],"docComment":"Gets the quantum depth","signature":"Imagick::getQuantumDepth( )","inheritdoc":0,"modifier":[],"return":""},"getQuantumRange":{"params":[],"docComment":"Returns the Imagick quantum range","signature":"Imagick::getQuantumRange( )","inheritdoc":0,"modifier":[],"return":""},"getReleaseDate":{"params":[],"docComment":"Returns the ImageMagick release date","signature":"Imagick::getReleaseDate( )","inheritdoc":0,"modifier":[],"return":""},"getResource":{"params":{"$type":""},"docComment":"Returns the specified resource's memory usage","signature":"Imagick::getResource(int $type )","inheritdoc":0,"modifier":[],"return":""},"getResourceLimit":{"params":{"$type":""},"docComment":"Returns the specified resource limit","signature":"Imagick::getResourceLimit(int $type )","inheritdoc":0,"modifier":[],"return":""},"getSamplingFactors":{"params":[],"docComment":"Gets the horizontal and vertical sampling factor","signature":"Imagick::getSamplingFactors( )","inheritdoc":0,"modifier":[],"return":""},"getSize":{"params":[],"docComment":"Returns the size associated with the Imagick object","signature":"Imagick::getSize( )","inheritdoc":0,"modifier":[],"return":""},"getSizeOffset":{"params":[],"docComment":"Returns the size offset","signature":"Imagick::getSizeOffset( )","inheritdoc":0,"modifier":[],"return":""},"getVersion":{"params":[],"docComment":"Returns the ImageMagick API version","signature":"Imagick::getVersion( )","inheritdoc":0,"modifier":[],"return":""},"haldClutImage":{"params":{"$clut":"Imagick","$channel":""},"docComment":"Replaces colors in the image","signature":"public Imagick::haldClutImage(Imagick $clut ,[int $channel] )","inheritdoc":0,"modifier":["public"],"return":""},"hasNextImage":{"params":[],"docComment":"Checks if the object has more images","signature":"Imagick::hasNextImage( )","inheritdoc":0,"modifier":[],"return":""},"hasPreviousImage":{"params":[],"docComment":"Checks if the object has a previous image","signature":"Imagick::hasPreviousImage( )","inheritdoc":0,"modifier":[],"return":""},"identifyImage":{"params":{"$appendRawOutput":""},"docComment":"Identifies an image and fetches attributes","signature":"Imagick::identifyImage([bool $appendRawOutput] )","inheritdoc":0,"modifier":[],"return":""},"implodeImage":{"params":{"$radius":""},"docComment":"Creates a new image as a copy","signature":"Imagick::implodeImage(float $radius )","inheritdoc":0,"modifier":[],"return":""},"importImagePixels":{"params":{"$x":"","$y":"","$width":"","$height":"","$map":"","$storage":"","$pixels":""},"docComment":"Imports image pixels","signature":"public Imagick::importImagePixels(int $x ,int $y ,int $width ,int $height ,string $map ,int $storage ,array $pixels )","inheritdoc":0,"modifier":["public"],"return":""},"labelImage":{"params":{"$label":""},"docComment":"Adds a label to an image","signature":"Imagick::labelImage(string $label )","inheritdoc":0,"modifier":[],"return":""},"levelImage":{"params":{"$blackPoint":"","$gamma":"","$whitePoint":"","$channel":""},"docComment":"Adjusts the levels of an image","signature":"Imagick::levelImage(float $blackPoint ,float $gamma ,float $whitePoint ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"linearStretchImage":{"params":{"$blackPoint":"","$whitePoint":""},"docComment":"Stretches with saturation the image intensity","signature":"Imagick::linearStretchImage(float $blackPoint ,float $whitePoint )","inheritdoc":0,"modifier":[],"return":""},"liquidRescaleImage":{"params":{"$width":"","$height":"","$delta_x":"","$rigidity":""},"docComment":"Animates an image or images","signature":"Imagick::liquidRescaleImage(int $width ,int $height ,float $delta_x ,float $rigidity )","inheritdoc":0,"modifier":[],"return":""},"magnifyImage":{"params":[],"docComment":"Scales an image proportionally 2x","signature":"Imagick::magnifyImage( )","inheritdoc":0,"modifier":[],"return":""},"mapImage":{"params":{"$map":"Imagick","$dither":""},"docComment":"Replaces the colors of an image with the closest color from a reference image.","signature":"Imagick::mapImage(Imagick $map ,bool $dither )","inheritdoc":0,"modifier":[],"return":""},"matteFloodfillImage":{"params":{"$alpha":"","$fuzz":"","$bordercolor":"","$x":"","$y":""},"docComment":"Changes the transparency value of a color","signature":"Imagick::matteFloodfillImage(float $alpha ,float $fuzz ,mixed $bordercolor ,int $x ,int $y )","inheritdoc":0,"modifier":[],"return":""},"medianFilterImage":{"params":{"$radius":""},"docComment":"Applies a digital filter","signature":"Imagick::medianFilterImage(float $radius )","inheritdoc":0,"modifier":[],"return":""},"mergeImageLayers":{"params":{"$layer_method":""},"docComment":"Merges image layers","signature":"Imagick::mergeImageLayers(int $layer_method )","inheritdoc":0,"modifier":[],"return":""},"minifyImage":{"params":[],"docComment":"Scales an image proportionally to half its size","signature":"Imagick::minifyImage( )","inheritdoc":0,"modifier":[],"return":""},"modulateImage":{"params":{"$brightness":"","$saturation":"","$hue":""},"docComment":"Control the brightness, saturation, and hue","signature":"Imagick::modulateImage(float $brightness ,float $saturation ,float $hue )","inheritdoc":0,"modifier":[],"return":""},"montageImage":{"params":{"$draw":"ImagickDraw","$tile_geometry":"","$thumbnail_geometry":"","$mode":"","$frame":""},"docComment":"Creates a composite image","signature":"Imagick::montageImage(ImagickDraw $draw ,string $tile_geometry ,string $thumbnail_geometry ,int $mode ,string $frame )","inheritdoc":0,"modifier":[],"return":"Imagick"},"morphImages":{"params":{"$number_frames":""},"docComment":"Method morphs a set of images","signature":"Imagick::morphImages(int $number_frames )","inheritdoc":0,"modifier":[],"return":"Imagick"},"mosaicImages":{"params":[],"docComment":"Forms a mosaic from images","signature":"Imagick::mosaicImages( )","inheritdoc":0,"modifier":[],"return":"Imagick"},"motionBlurImage":{"params":{"$radius":"","$sigma":"","$angle":"","$channel":""},"docComment":"Simulates motion blur","signature":"Imagick::motionBlurImage(float $radius ,float $sigma ,float $angle ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"negateImage":{"params":{"$gray":"","$channel":""},"docComment":"Negates the colors in the reference image","signature":"Imagick::negateImage(bool $gray ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"newImage":{"params":{"$cols":"","$rows":"","$background":"","$format":""},"docComment":"Creates a new image","signature":"Imagick::newImage(int $cols ,int $rows ,mixed $background ,string $format )","inheritdoc":0,"modifier":[],"return":""},"newPseudoImage":{"params":{"$columns":"","$rows":"","$pseudoString":""},"docComment":"Creates a new image","signature":"Imagick::newPseudoImage(int $columns ,int $rows ,string $pseudoString )","inheritdoc":0,"modifier":[],"return":""},"nextImage":{"params":[],"docComment":"Moves to the next image","signature":"Imagick::nextImage( )","inheritdoc":0,"modifier":[],"return":""},"normalizeImage":{"params":{"$channel":""},"docComment":"Enhances the contrast of a color image","signature":"Imagick::normalizeImage([int $channel] )","inheritdoc":0,"modifier":[],"return":""},"oilPaintImage":{"params":{"$radius":""},"docComment":"Simulates an oil painting","signature":"Imagick::oilPaintImage(float $radius )","inheritdoc":0,"modifier":[],"return":""},"opaquePaintImage":{"params":{"$target":"","$fill":"","$fuzz":"","$invert":"","$channel":""},"docComment":"Changes the color value of any pixel that matches target","signature":"Imagick::opaquePaintImage(mixed $target ,mixed $fill ,float $fuzz ,bool $invert ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"optimizeImageLayers":{"params":[],"docComment":"Removes repeated portions of images to optimize","signature":"Imagick::optimizeImageLayers( )","inheritdoc":0,"modifier":[],"return":""},"orderedPosterizeImage":{"params":{"$threshold_map":"","$channel":""},"docComment":"Performs an ordered dither","signature":"Imagick::orderedPosterizeImage(string $threshold_map ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"paintFloodfillImage":{"params":{"$fill":"","$fuzz":"","$bordercolor":"","$x":"","$y":"","$channel":""},"docComment":"Changes the color value of any pixel that matches target","signature":"Imagick::paintFloodfillImage(mixed $fill ,float $fuzz ,mixed $bordercolor ,int $x ,int $y ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"paintOpaqueImage":{"params":{"$target":"","$fill":"","$fuzz":"","$channel":""},"docComment":"Change any pixel that matches color","signature":"Imagick::paintOpaqueImage(mixed $target ,mixed $fill ,float $fuzz ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"paintTransparentImage":{"params":{"$target":"","$alpha":"","$fuzz":""},"docComment":"Changes any pixel that matches color with the color defined by fill","signature":"Imagick::paintTransparentImage(mixed $target ,float $alpha ,float $fuzz )","inheritdoc":0,"modifier":[],"return":""},"pingImage":{"params":{"$filename":""},"docComment":"Fetch basic attributes about the image","signature":"Imagick::pingImage(string $filename )","inheritdoc":0,"modifier":[],"return":""},"pingImageBlob":{"params":{"$image":""},"docComment":"Quickly fetch attributes","signature":"Imagick::pingImageBlob(string $image )","inheritdoc":0,"modifier":[],"return":""},"pingImageFile":{"params":{"$filehandle":"","$fileName":""},"docComment":"Get basic image attributes in a lightweight manner","signature":"Imagick::pingImageFile(resource $filehandle ,string $fileName )","inheritdoc":0,"modifier":[],"return":""},"polaroidImage":{"params":{"$properties":"ImagickDraw","$angle":""},"docComment":"Simulates a Polaroid picture","signature":"Imagick::polaroidImage(ImagickDraw $properties ,float $angle )","inheritdoc":0,"modifier":[],"return":""},"posterizeImage":{"params":{"$levels":"","$dither":""},"docComment":"Reduces the image to a limited number of color level","signature":"Imagick::posterizeImage(int $levels ,bool $dither )","inheritdoc":0,"modifier":[],"return":""},"previewImages":{"params":{"$preview":""},"docComment":"Quickly pin-point appropriate parameters for image processing","signature":"Imagick::previewImages(int $preview )","inheritdoc":0,"modifier":[],"return":""},"previousImage":{"params":[],"docComment":"Move to the previous image in the object","signature":"Imagick::previousImage( )","inheritdoc":0,"modifier":[],"return":""},"profileImage":{"params":{"$name":"","$profile":""},"docComment":"Adds or removes a profile from an image","signature":"Imagick::profileImage(string $name ,string $profile )","inheritdoc":0,"modifier":[],"return":""},"quantizeImage":{"params":{"$numberColors":"","$colorspace":"","$treedepth":"","$dither":"","$measureError":""},"docComment":"Analyzes the colors within a reference image","signature":"Imagick::quantizeImage(int $numberColors ,int $colorspace ,int $treedepth ,bool $dither ,bool $measureError )","inheritdoc":0,"modifier":[],"return":""},"quantizeImages":{"params":{"$numberColors":"","$colorspace":"","$treedepth":"","$dither":"","$measureError":""},"docComment":"Analyzes the colors within a sequence of images","signature":"Imagick::quantizeImages(int $numberColors ,int $colorspace ,int $treedepth ,bool $dither ,bool $measureError )","inheritdoc":0,"modifier":[],"return":""},"queryFontMetrics":{"params":{"$properties":"ImagickDraw","$text":"","$multiline":""},"docComment":"Returns an array representing the font metrics","signature":"Imagick::queryFontMetrics(ImagickDraw $properties ,string $text ,bool $multiline )","inheritdoc":0,"modifier":[],"return":""},"queryFonts":{"params":{"$pattern":""},"docComment":"Returns the configured fonts","signature":"Imagick::queryFonts([string $pattern] )","inheritdoc":0,"modifier":[],"return":""},"queryFormats":{"params":{"$pattern":""},"docComment":"Returns formats supported by Imagick","signature":"Imagick::queryFormats([string $pattern] )","inheritdoc":0,"modifier":[],"return":""},"radialBlurImage":{"params":{"$angle":"","$channel":""},"docComment":"Radial blurs an image","signature":"Imagick::radialBlurImage(float $angle ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"raiseImage":{"params":{"$width":"","$height":"","$x":"","$y":"","$raise":""},"docComment":"Creates a simulated 3d button-like effect","signature":"Imagick::raiseImage(int $width ,int $height ,int $x ,int $y ,bool $raise )","inheritdoc":0,"modifier":[],"return":""},"randomThresholdImage":{"params":{"$low":"","$high":"","$channel":""},"docComment":"Creates a high-contrast, two-color image","signature":"Imagick::randomThresholdImage(float $low ,float $high ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"readImage":{"params":{"$filename":""},"docComment":"Reads image from filename","signature":"Imagick::readImage(string $filename )","inheritdoc":0,"modifier":[],"return":""},"readImageBlob":{"params":{"$image":"","$filename":""},"docComment":"Reads image from a binary string","signature":"Imagick::readImageBlob(string $image ,string $filename )","inheritdoc":0,"modifier":[],"return":""},"readImageFile":{"params":{"$filehandle":"","$fileName":""},"docComment":"Reads image from open filehandle","signature":"Imagick::readImageFile(resource $filehandle ,[string $fileName] )","inheritdoc":0,"modifier":[],"return":""},"recolorImage":{"params":{"$matrix":""},"docComment":"Recolors image","signature":"Imagick::recolorImage(array $matrix )","inheritdoc":0,"modifier":[],"return":""},"reduceNoiseImage":{"params":{"$radius":""},"docComment":"Smooths the contours of an image","signature":"Imagick::reduceNoiseImage(float $radius )","inheritdoc":0,"modifier":[],"return":""},"remapImage":{"params":{"$replacement":"Imagick","$DITHER":""},"docComment":"Remaps image colors","signature":"public Imagick::remapImage(Imagick $replacement ,int $DITHER )","inheritdoc":0,"modifier":["public"],"return":""},"removeImage":{"params":[],"docComment":"Removes an image from the image list","signature":"Imagick::removeImage( )","inheritdoc":0,"modifier":[],"return":""},"removeImageProfile":{"params":{"$name":""},"docComment":"Removes the named image profile and returns it","signature":"Imagick::removeImageProfile(string $name )","inheritdoc":0,"modifier":[],"return":""},"render":{"params":[],"docComment":"Renders all preceding drawing commands","signature":"Imagick::render( )","inheritdoc":0,"modifier":[],"return":""},"resampleImage":{"params":{"$x_resolution":"","$y_resolution":"","$filter":"","$blur":""},"docComment":"Resample image to desired resolution","signature":"Imagick::resampleImage(float $x_resolution ,float $y_resolution ,int $filter ,float $blur )","inheritdoc":0,"modifier":[],"return":""},"resetImagePage":{"params":{"$page":""},"docComment":"Reset image page","signature":"Imagick::resetImagePage(string $page )","inheritdoc":0,"modifier":[],"return":""},"resizeImage":{"params":{"$columns":"","$rows":"","$filter":"","$blur":"","$bestfit":""},"docComment":"Scales an image","signature":"Imagick::resizeImage(int $columns ,int $rows ,int $filter ,float $blur ,[bool $bestfit] )","inheritdoc":0,"modifier":[],"return":""},"rollImage":{"params":{"$x":"","$y":""},"docComment":"Offsets an image","signature":"Imagick::rollImage(int $x ,int $y )","inheritdoc":0,"modifier":[],"return":""},"rotateImage":{"params":{"$background":"","$degrees":""},"docComment":"Rotates an image","signature":"Imagick::rotateImage(mixed $background ,float $degrees )","inheritdoc":0,"modifier":[],"return":""},"roundCorners":{"params":{"$x_rounding":"","$y_rounding":"","$stroke_width":"","$displace":"","$size_correction":""},"docComment":"Rounds image corners","signature":"Imagick::roundCorners(float $x_rounding ,float $y_rounding ,[float $stroke_width] ,[float $displace] ,[float $size_correction] )","inheritdoc":0,"modifier":[],"return":""},"sampleImage":{"params":{"$columns":"","$rows":""},"docComment":"Scales an image with pixel sampling","signature":"Imagick::sampleImage(int $columns ,int $rows )","inheritdoc":0,"modifier":[],"return":""},"scaleImage":{"params":{"$cols":"","$rows":"","$bestfit":""},"docComment":"Scales the size of an image","signature":"Imagick::scaleImage(int $cols ,int $rows ,[bool $bestfit] )","inheritdoc":0,"modifier":[],"return":""},"segmentImage":{"params":{"$COLORSPACE":"","$cluster_threshold":"","$smooth_threshold":"","$verbose":""},"docComment":"Segments an image","signature":"public Imagick::segmentImage(int $COLORSPACE ,float $cluster_threshold ,float $smooth_threshold ,[bool $verbose] )","inheritdoc":0,"modifier":["public"],"return":""},"separateImageChannel":{"params":{"$channel":""},"docComment":"Separates a channel from the image","signature":"Imagick::separateImageChannel(int $channel )","inheritdoc":0,"modifier":[],"return":""},"sepiaToneImage":{"params":{"$threshold":""},"docComment":"Sepia tones an image","signature":"Imagick::sepiaToneImage(float $threshold )","inheritdoc":0,"modifier":[],"return":""},"setBackgroundColor":{"params":{"$background":""},"docComment":"Sets the object's default background color","signature":"Imagick::setBackgroundColor(mixed $background )","inheritdoc":0,"modifier":[],"return":""},"setColorspace":{"params":{"$COLORSPACE":""},"docComment":"Set colorspace","signature":"Imagick::setColorspace(int $COLORSPACE )","inheritdoc":0,"modifier":[],"return":""},"setCompression":{"params":{"$compression":""},"docComment":"Sets the object's default compression type","signature":"Imagick::setCompression(int $compression )","inheritdoc":0,"modifier":[],"return":""},"setCompressionQuality":{"params":{"$quality":""},"docComment":"Sets the object's default compression quality","signature":"Imagick::setCompressionQuality(int $quality )","inheritdoc":0,"modifier":[],"return":""},"setFilename":{"params":{"$filename":""},"docComment":"Sets the filename before you read or write the image","signature":"Imagick::setFilename(string $filename )","inheritdoc":0,"modifier":[],"return":""},"setFirstIterator":{"params":[],"docComment":"Sets the Imagick iterator to the first image","signature":"Imagick::setFirstIterator( )","inheritdoc":0,"modifier":[],"return":""},"setFont":{"params":{"$font":""},"docComment":"Sets font","signature":"Imagick::setFont(string $font )","inheritdoc":0,"modifier":[],"return":""},"setFormat":{"params":{"$format":""},"docComment":"Sets the format of the Imagick object","signature":"Imagick::setFormat(string $format )","inheritdoc":0,"modifier":[],"return":""},"setGravity":{"params":{"$gravity":""},"docComment":"Sets the gravity","signature":"Imagick::setGravity(int $gravity )","inheritdoc":0,"modifier":[],"return":""},"setImage":{"params":{"$replace":"Imagick"},"docComment":"Replaces image in the object","signature":"Imagick::setImage(Imagick $replace )","inheritdoc":0,"modifier":[],"return":""},"setImageAlphaChannel":{"params":{"$mode":""},"docComment":"Sets image alpha channel","signature":"Imagick::setImageAlphaChannel(int $mode )","inheritdoc":0,"modifier":[],"return":""},"setImageArtifact":{"params":{"$artifact":"","$value":""},"docComment":"Set image artifact","signature":"Imagick::setImageArtifact(string $artifact ,string $value )","inheritdoc":0,"modifier":[],"return":""},"setImageBackgroundColor":{"params":{"$background":""},"docComment":"Sets the image background color","signature":"Imagick::setImageBackgroundColor(mixed $background )","inheritdoc":0,"modifier":[],"return":""},"setImageBias":{"params":{"$bias":""},"docComment":"Sets the image bias for any method that convolves an image","signature":"Imagick::setImageBias(float $bias )","inheritdoc":0,"modifier":[],"return":""},"setImageBluePrimary":{"params":{"$x":"","$y":""},"docComment":"Sets the image chromaticity blue primary point","signature":"Imagick::setImageBluePrimary(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"setImageBorderColor":{"params":{"$border":""},"docComment":"Sets the image border color","signature":"Imagick::setImageBorderColor(mixed $border )","inheritdoc":0,"modifier":[],"return":""},"setImageChannelDepth":{"params":{"$channel":"","$depth":""},"docComment":"Sets the depth of a particular image channel","signature":"Imagick::setImageChannelDepth(int $channel ,int $depth )","inheritdoc":0,"modifier":[],"return":""},"setImageClipMask":{"params":{"$clip_mask":"Imagick"},"docComment":"Sets image clip mask","signature":"Imagick::setImageClipMask(Imagick $clip_mask )","inheritdoc":0,"modifier":[],"return":""},"setImageColormapColor":{"params":{"$index":"","$color":"ImagickPixel"},"docComment":"Sets the color of the specified colormap index","signature":"Imagick::setImageColormapColor(int $index ,ImagickPixel $color )","inheritdoc":0,"modifier":[],"return":""},"setImageColorspace":{"params":{"$colorspace":""},"docComment":"Sets the image colorspace","signature":"Imagick::setImageColorspace(int $colorspace )","inheritdoc":0,"modifier":[],"return":""},"setImageCompose":{"params":{"$compose":""},"docComment":"Sets the image composite operator","signature":"Imagick::setImageCompose(int $compose )","inheritdoc":0,"modifier":[],"return":""},"setImageCompression":{"params":{"$compression":""},"docComment":"Sets the image compression","signature":"Imagick::setImageCompression(int $compression )","inheritdoc":0,"modifier":[],"return":""},"setImageCompressionQuality":{"params":{"$quality":""},"docComment":"Sets the image compression quality","signature":"Imagick::setImageCompressionQuality(int $quality )","inheritdoc":0,"modifier":[],"return":""},"setImageDelay":{"params":{"$delay":""},"docComment":"Sets the image delay","signature":"Imagick::setImageDelay(int $delay )","inheritdoc":0,"modifier":[],"return":""},"setImageDepth":{"params":{"$depth":""},"docComment":"Sets the image depth","signature":"Imagick::setImageDepth(int $depth )","inheritdoc":0,"modifier":[],"return":""},"setImageDispose":{"params":{"$dispose":""},"docComment":"Sets the image disposal method","signature":"Imagick::setImageDispose(int $dispose )","inheritdoc":0,"modifier":[],"return":""},"setImageExtent":{"params":{"$columns":"","$rows":""},"docComment":"Sets the image size","signature":"Imagick::setImageExtent(int $columns ,int $rows )","inheritdoc":0,"modifier":[],"return":""},"setImageFilename":{"params":{"$filename":""},"docComment":"Sets the filename of a particular image","signature":"Imagick::setImageFilename(string $filename )","inheritdoc":0,"modifier":[],"return":""},"setImageFormat":{"params":{"$format":""},"docComment":"Sets the format of a particular image","signature":"Imagick::setImageFormat(string $format )","inheritdoc":0,"modifier":[],"return":""},"setImageGamma":{"params":{"$gamma":""},"docComment":"Sets the image gamma","signature":"Imagick::setImageGamma(float $gamma )","inheritdoc":0,"modifier":[],"return":""},"setImageGravity":{"params":{"$gravity":""},"docComment":"Sets the image gravity","signature":"Imagick::setImageGravity(int $gravity )","inheritdoc":0,"modifier":[],"return":""},"setImageGreenPrimary":{"params":{"$x":"","$y":""},"docComment":"Sets the image chromaticity green primary point","signature":"Imagick::setImageGreenPrimary(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"setImageIndex":{"params":{"$index":""},"docComment":"Set the iterator position","signature":"Imagick::setImageIndex(int $index )","inheritdoc":0,"modifier":[],"return":""},"setImageInterlaceScheme":{"params":{"$interlace_scheme":""},"docComment":"Sets the image compression","signature":"Imagick::setImageInterlaceScheme(int $interlace_scheme )","inheritdoc":0,"modifier":[],"return":""},"setImageInterpolateMethod":{"params":{"$method":""},"docComment":"Sets the image interpolate pixel method","signature":"Imagick::setImageInterpolateMethod(int $method )","inheritdoc":0,"modifier":[],"return":""},"setImageIterations":{"params":{"$iterations":""},"docComment":"Sets the image iterations","signature":"Imagick::setImageIterations(int $iterations )","inheritdoc":0,"modifier":[],"return":""},"setImageMatte":{"params":{"$matte":""},"docComment":"Sets the image matte channel","signature":"Imagick::setImageMatte(bool $matte )","inheritdoc":0,"modifier":[],"return":""},"setImageMatteColor":{"params":{"$matte":""},"docComment":"Sets the image matte color","signature":"Imagick::setImageMatteColor(mixed $matte )","inheritdoc":0,"modifier":[],"return":""},"setImageOpacity":{"params":{"$opacity":""},"docComment":"Sets the image opacity level","signature":"Imagick::setImageOpacity(float $opacity )","inheritdoc":0,"modifier":[],"return":""},"setImageOrientation":{"params":{"$orientation":""},"docComment":"Sets the image orientation","signature":"Imagick::setImageOrientation(int $orientation )","inheritdoc":0,"modifier":[],"return":""},"setImagePage":{"params":{"$width":"","$height":"","$x":"","$y":""},"docComment":"Sets the page geometry of the image","signature":"Imagick::setImagePage(int $width ,int $height ,int $x ,int $y )","inheritdoc":0,"modifier":[],"return":""},"setImageProfile":{"params":{"$name":"","$profile":""},"docComment":"Adds a named profile to the Imagick object","signature":"Imagick::setImageProfile(string $name ,string $profile )","inheritdoc":0,"modifier":[],"return":""},"setImageProperty":{"params":{"$name":"","$value":""},"docComment":"Sets an image property","signature":"Imagick::setImageProperty(string $name ,string $value )","inheritdoc":0,"modifier":[],"return":""},"setImageRedPrimary":{"params":{"$x":"","$y":""},"docComment":"Sets the image chromaticity red primary point","signature":"Imagick::setImageRedPrimary(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"setImageRenderingIntent":{"params":{"$rendering_intent":""},"docComment":"Sets the image rendering intent","signature":"Imagick::setImageRenderingIntent(int $rendering_intent )","inheritdoc":0,"modifier":[],"return":""},"setImageResolution":{"params":{"$x_resolution":"","$y_resolution":""},"docComment":"Sets the image resolution","signature":"Imagick::setImageResolution(float $x_resolution ,float $y_resolution )","inheritdoc":0,"modifier":[],"return":""},"setImageScene":{"params":{"$scene":""},"docComment":"Sets the image scene","signature":"Imagick::setImageScene(int $scene )","inheritdoc":0,"modifier":[],"return":""},"setImageTicksPerSecond":{"params":{"$ticks_per-second":""},"docComment":"Sets the image ticks-per-second","signature":"Imagick::setImageTicksPerSecond(int $ticks_per-second )","inheritdoc":0,"modifier":[],"return":""},"setImageType":{"params":{"$image_type":""},"docComment":"Sets the image type","signature":"Imagick::setImageType(int $image_type )","inheritdoc":0,"modifier":[],"return":""},"setImageUnits":{"params":{"$units":""},"docComment":"Sets the image units of resolution","signature":"Imagick::setImageUnits(int $units )","inheritdoc":0,"modifier":[],"return":""},"setImageVirtualPixelMethod":{"params":{"$method":""},"docComment":"Sets the image virtual pixel method","signature":"Imagick::setImageVirtualPixelMethod(int $method )","inheritdoc":0,"modifier":[],"return":""},"setImageWhitePoint":{"params":{"$x":"","$y":""},"docComment":"Sets the image chromaticity white point","signature":"Imagick::setImageWhitePoint(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"setInterlaceScheme":{"params":{"$interlace_scheme":""},"docComment":"Sets the image compression","signature":"Imagick::setInterlaceScheme(int $interlace_scheme )","inheritdoc":0,"modifier":[],"return":""},"setIteratorIndex":{"params":{"$index":""},"docComment":"Set the iterator position","signature":"Imagick::setIteratorIndex(int $index )","inheritdoc":0,"modifier":[],"return":""},"setLastIterator":{"params":[],"docComment":"Sets the Imagick iterator to the last image","signature":"Imagick::setLastIterator( )","inheritdoc":0,"modifier":[],"return":""},"setOption":{"params":{"$key":"","$value":""},"docComment":"Set an option","signature":"Imagick::setOption(string $key ,string $value )","inheritdoc":0,"modifier":[],"return":""},"setPage":{"params":{"$width":"","$height":"","$x":"","$y":""},"docComment":"Sets the page geometry of the Imagick object","signature":"Imagick::setPage(int $width ,int $height ,int $x ,int $y )","inheritdoc":0,"modifier":[],"return":""},"setPointSize":{"params":{"$point_size":""},"docComment":"Sets point size","signature":"Imagick::setPointSize(float $point_size )","inheritdoc":0,"modifier":[],"return":""},"setResolution":{"params":{"$x_resolution":"","$y_resolution":""},"docComment":"Sets the image resolution","signature":"Imagick::setResolution(float $x_resolution ,float $y_resolution )","inheritdoc":0,"modifier":[],"return":""},"setResourceLimit":{"params":{"$type":"","$limit":""},"docComment":"Sets the limit for a particular resource in megabytes","signature":"Imagick::setResourceLimit(int $type ,int $limit )","inheritdoc":0,"modifier":[],"return":""},"setSamplingFactors":{"params":{"$factors":""},"docComment":"Sets the image sampling factors","signature":"Imagick::setSamplingFactors(array $factors )","inheritdoc":0,"modifier":[],"return":""},"setSize":{"params":{"$columns":"","$rows":""},"docComment":"Sets the size of the Imagick object","signature":"Imagick::setSize(int $columns ,int $rows )","inheritdoc":0,"modifier":[],"return":""},"setSizeOffset":{"params":{"$columns":"","$rows":"","$offset":""},"docComment":"Sets the size and offset of the Imagick object","signature":"Imagick::setSizeOffset(int $columns ,int $rows ,int $offset )","inheritdoc":0,"modifier":[],"return":""},"setType":{"params":{"$image_type":""},"docComment":"Sets the image type attribute","signature":"Imagick::setType(int $image_type )","inheritdoc":0,"modifier":[],"return":""},"shadeImage":{"params":{"$gray":"","$azimuth":"","$elevation":""},"docComment":"Creates a 3D effect","signature":"Imagick::shadeImage(bool $gray ,float $azimuth ,float $elevation )","inheritdoc":0,"modifier":[],"return":""},"shadowImage":{"params":{"$opacity":"","$sigma":"","$x":"","$y":""},"docComment":"Simulates an image shadow","signature":"Imagick::shadowImage(float $opacity ,float $sigma ,int $x ,int $y )","inheritdoc":0,"modifier":[],"return":""},"sharpenImage":{"params":{"$radius":"","$sigma":"","$channel":""},"docComment":"Sharpens an image","signature":"Imagick::sharpenImage(float $radius ,float $sigma ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"shaveImage":{"params":{"$columns":"","$rows":""},"docComment":"Shaves pixels from the image edges","signature":"Imagick::shaveImage(int $columns ,int $rows )","inheritdoc":0,"modifier":[],"return":""},"shearImage":{"params":{"$background":"","$x_shear":"","$y_shear":""},"docComment":"Creating a parallelogram","signature":"Imagick::shearImage(mixed $background ,float $x_shear ,float $y_shear )","inheritdoc":0,"modifier":[],"return":""},"sigmoidalContrastImage":{"params":{"$sharpen":"","$alpha":"","$beta":"","$channel":""},"docComment":"Adjusts the contrast of an image","signature":"Imagick::sigmoidalContrastImage(bool $sharpen ,float $alpha ,float $beta ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"sketchImage":{"params":{"$radius":"","$sigma":"","$angle":""},"docComment":"Simulates a pencil sketch","signature":"Imagick::sketchImage(float $radius ,float $sigma ,float $angle )","inheritdoc":0,"modifier":[],"return":""},"solarizeImage":{"params":{"$threshold":""},"docComment":"Applies a solarizing effect to the image","signature":"Imagick::solarizeImage(int $threshold )","inheritdoc":0,"modifier":[],"return":""},"sparseColorImage":{"params":{"$SPARSE_METHOD":"","$arguments":"","$channel":""},"docComment":"Interpolates colors","signature":"public Imagick::sparseColorImage(int $SPARSE_METHOD ,array $arguments ,[int $channel] )","inheritdoc":0,"modifier":["public"],"return":""},"spliceImage":{"params":{"$width":"","$height":"","$x":"","$y":""},"docComment":"Splices a solid color into the image","signature":"Imagick::spliceImage(int $width ,int $height ,int $x ,int $y )","inheritdoc":0,"modifier":[],"return":""},"spreadImage":{"params":{"$radius":""},"docComment":"Randomly displaces each pixel in a block","signature":"Imagick::spreadImage(float $radius )","inheritdoc":0,"modifier":[],"return":""},"steganoImage":{"params":{"$watermark_wand":"Imagick","$offset":""},"docComment":"Hides a digital watermark within the image","signature":"Imagick::steganoImage(Imagick $watermark_wand ,int $offset )","inheritdoc":0,"modifier":[],"return":"Imagick"},"stereoImage":{"params":{"$offset_wand":"Imagick"},"docComment":"Composites two images","signature":"Imagick::stereoImage(Imagick $offset_wand )","inheritdoc":0,"modifier":[],"return":""},"stripImage":{"params":[],"docComment":"Strips an image of all profiles and comments","signature":"Imagick::stripImage( )","inheritdoc":0,"modifier":[],"return":""},"swirlImage":{"params":{"$degrees":""},"docComment":"Swirls the pixels about the center of the image","signature":"Imagick::swirlImage(float $degrees )","inheritdoc":0,"modifier":[],"return":""},"textureImage":{"params":{"$texture_wand":"Imagick"},"docComment":"Repeatedly tiles the texture image","signature":"Imagick::textureImage(Imagick $texture_wand )","inheritdoc":0,"modifier":[],"return":""},"thresholdImage":{"params":{"$threshold":"","$channel":""},"docComment":"Changes the value of individual pixels based on a threshold","signature":"Imagick::thresholdImage(float $threshold ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"thumbnailImage":{"params":{"$columns":"","$rows":"","$bestfit":"","$fill":""},"docComment":"Changes the size of an image","signature":"Imagick::thumbnailImage(int $columns ,int $rows ,[bool $bestfit] ,[bool $fill] )","inheritdoc":0,"modifier":[],"return":""},"tintImage":{"params":{"$tint":"","$opacity":""},"docComment":"Applies a color vector to each pixel in the image","signature":"Imagick::tintImage(mixed $tint ,mixed $opacity )","inheritdoc":0,"modifier":[],"return":""},"transformImage":{"params":{"$crop":"","$geometry":""},"docComment":"Convenience method for setting crop size and the image geometry","signature":"Imagick::transformImage(string $crop ,string $geometry )","inheritdoc":0,"modifier":[],"return":"Imagick"},"transparentPaintImage":{"params":{"$target":"","$alpha":"","$fuzz":"","$invert":""},"docComment":"Paints pixels transparent","signature":"Imagick::transparentPaintImage(mixed $target ,float $alpha ,float $fuzz ,bool $invert )","inheritdoc":0,"modifier":[],"return":""},"transposeImage":{"params":[],"docComment":"Creates a vertical mirror image","signature":"Imagick::transposeImage( )","inheritdoc":0,"modifier":[],"return":""},"transverseImage":{"params":[],"docComment":"Creates a horizontal mirror image","signature":"Imagick::transverseImage( )","inheritdoc":0,"modifier":[],"return":""},"trimImage":{"params":{"$fuzz":""},"docComment":"Remove edges from the image","signature":"Imagick::trimImage(float $fuzz )","inheritdoc":0,"modifier":[],"return":""},"uniqueImageColors":{"params":[],"docComment":"Discards all but one of any pixel color","signature":"Imagick::uniqueImageColors( )","inheritdoc":0,"modifier":[],"return":""},"unsharpMaskImage":{"params":{"$radius":"","$sigma":"","$amount":"","$threshold":"","$channel":""},"docComment":"Sharpens an image","signature":"Imagick::unsharpMaskImage(float $radius ,float $sigma ,float $amount ,float $threshold ,[int $channel] )","inheritdoc":0,"modifier":[],"return":""},"valid":{"params":[],"docComment":"Checks if the current item is valid","signature":"Imagick::valid( )","inheritdoc":0,"modifier":[],"return":""},"vignetteImage":{"params":{"$blackPoint":"","$whitePoint":"","$x":"","$y":""},"docComment":"Adds vignette filter to the image","signature":"Imagick::vignetteImage(float $blackPoint ,float $whitePoint ,int $x ,int $y )","inheritdoc":0,"modifier":[],"return":""},"waveImage":{"params":{"$amplitude":"","$length":""},"docComment":"Applies wave filter to the image","signature":"Imagick::waveImage(float $amplitude ,float $length )","inheritdoc":0,"modifier":[],"return":""},"whiteThresholdImage":{"params":{"$threshold":""},"docComment":"Force all pixels above the threshold into white","signature":"Imagick::whiteThresholdImage(mixed $threshold )","inheritdoc":0,"modifier":[],"return":""},"writeImage":{"params":{"$filename":""},"docComment":"Writes an image to the specified filename","signature":"Imagick::writeImage(string $filename )","inheritdoc":0,"modifier":[],"return":""},"writeImageFile":{"params":{"$filehandle":""},"docComment":"Writes an image to a filehandle","signature":"Imagick::writeImageFile(resource $filehandle )","inheritdoc":0,"modifier":[],"return":""},"writeImages":{"params":{"$filename":"","$adjoin":""},"docComment":"Writes an image or image sequence","signature":"Imagick::writeImages(string $filename ,bool $adjoin )","inheritdoc":0,"modifier":[],"return":""},"writeImagesFile":{"params":{"$filehandle":""},"docComment":"Writes frames to a filehandle","signature":"Imagick::writeImagesFile(resource $filehandle )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ImagickDraw":{"classname":"ImagickDraw","docComment":"","methods":{"modifier":{"public":["affine","annotation","arc","bezier","circle","clear","clone","color","comment","composite","__construct","destroy","ellipse","getClipPath","getClipRule","getClipUnits","getFillColor","getFillOpacity","getFillRule","getFont","getFontFamily","getFontSize","getFontStyle","getFontWeight","getGravity","getStrokeAntialias","getStrokeColor","getStrokeDashArray","getStrokeDashOffset","getStrokeLineCap","getStrokeLineJoin","getStrokeMiterLimit","getStrokeOpacity","getStrokeWidth","getTextAlignment","getTextAntialias","getTextDecoration","getTextEncoding","getTextUnderColor","getVectorGraphics","line","matte","pathClose","pathCurveToAbsolute","pathCurveToQuadraticBezierAbsolute","pathCurveToQuadraticBezierRelative","pathCurveToQuadraticBezierSmoothAbsolute","pathCurveToQuadraticBezierSmoothRelative","pathCurveToRelative","pathCurveToSmoothAbsolute","pathCurveToSmoothRelative","pathEllipticArcAbsolute","pathEllipticArcRelative","pathFinish","pathLineToAbsolute","pathLineToHorizontalAbsolute","pathLineToHorizontalRelative","pathLineToRelative","pathLineToVerticalAbsolute","pathLineToVerticalRelative","pathMoveToAbsolute","pathMoveToRelative","pathStart","point","polygon","polyline","pop","popClipPath","popDefs","popPattern","push","pushClipPath","pushDefs","pushPattern","rectangle","render","rotate","roundRectangle","scale","setClipPath","setClipRule","setClipUnits","setFillAlpha","setFillColor","setFillOpacity","setFillPatternURL","setFillRule","setFont","setFontFamily","setFontSize","setFontStretch","setFontStyle","setFontWeight","setGravity","setStrokeAlpha","setStrokeAntialias","setStrokeColor","setStrokeDashArray","setStrokeDashOffset","setStrokeLineCap","setStrokeLineJoin","setStrokeMiterLimit","setStrokeOpacity","setStrokePatternURL","setStrokeWidth","setTextAlignment","setTextAntialias","setTextDecoration","setTextEncoding","setTextUnderColor","setVectorGraphics","setViewbox","skewX","skewY","translate"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","affine":{"params":{"$affine":""},"docComment":"Adjusts the current affine transformation matrix","signature":"ImagickDraw::affine(array $affine )","inheritdoc":0,"modifier":[],"return":""},"annotation":{"params":{"$x":"","$y":"","$text":""},"docComment":"Draws text on the image","signature":"ImagickDraw::annotation(float $x ,float $y ,string $text )","inheritdoc":0,"modifier":[],"return":""},"arc":{"params":{"$sx":"","$sy":"","$ex":"","$ey":"","$sd":"","$ed":""},"docComment":"Draws an arc","signature":"ImagickDraw::arc(float $sx ,float $sy ,float $ex ,float $ey ,float $sd ,float $ed )","inheritdoc":0,"modifier":[],"return":""},"bezier":{"params":{"$coordinates":""},"docComment":"Draws a bezier curve","signature":"ImagickDraw::bezier(array $coordinates )","inheritdoc":0,"modifier":[],"return":""},"circle":{"params":{"$ox":"","$oy":"","$px":"","$py":""},"docComment":"Draws a circle","signature":"ImagickDraw::circle(float $ox ,float $oy ,float $px ,float $py )","inheritdoc":0,"modifier":[],"return":""},"clear":{"params":[],"docComment":"Clears the ImagickDraw","signature":"ImagickDraw::clear( )","inheritdoc":0,"modifier":[],"return":""},"clone":{"params":[],"docComment":"Makes an exact copy of the specified ImagickDraw object","signature":"ImagickDraw::clone( )","inheritdoc":0,"modifier":[],"return":"ImagickDraw"},"color":{"params":{"$x":"","$y":"","$paintMethod":""},"docComment":"Draws color on image","signature":"ImagickDraw::color(float $x ,float $y ,int $paintMethod )","inheritdoc":0,"modifier":[],"return":""},"comment":{"params":{"$comment":""},"docComment":"Adds a comment","signature":"ImagickDraw::comment(string $comment )","inheritdoc":0,"modifier":[],"return":""},"composite":{"params":{"$compose":"","$x":"","$y":"","$width":"","$height":"","$compositeWand":"Imagick"},"docComment":"Composites an image onto the current image","signature":"ImagickDraw::composite(int $compose ,float $x ,float $y ,float $width ,float $height ,Imagick $compositeWand )","inheritdoc":0,"modifier":[],"return":""},"__construct":{"params":[],"docComment":"The ImagickDraw constructor","signature":"ImagickDraw::__construct( )","inheritdoc":0,"modifier":[],"return":""},"destroy":{"params":[],"docComment":"Frees all associated resources","signature":"ImagickDraw::destroy( )","inheritdoc":0,"modifier":[],"return":""},"ellipse":{"params":{"$ox":"","$oy":"","$rx":"","$ry":"","$start":"","$end":""},"docComment":"Draws an ellipse on the image","signature":"ImagickDraw::ellipse(float $ox ,float $oy ,float $rx ,float $ry ,float $start ,float $end )","inheritdoc":0,"modifier":[],"return":""},"getClipPath":{"params":[],"docComment":"Obtains the current clipping path ID","signature":"ImagickDraw::getClipPath( )","inheritdoc":0,"modifier":[],"return":""},"getClipRule":{"params":[],"docComment":"Returns the current polygon fill rule","signature":"ImagickDraw::getClipRule( )","inheritdoc":0,"modifier":[],"return":""},"getClipUnits":{"params":[],"docComment":"Returns the interpretation of clip path units","signature":"ImagickDraw::getClipUnits( )","inheritdoc":0,"modifier":[],"return":""},"getFillColor":{"params":[],"docComment":"Returns the fill color","signature":"ImagickDraw::getFillColor( )","inheritdoc":0,"modifier":[],"return":"ImagickPixel"},"getFillOpacity":{"params":[],"docComment":"Returns the opacity used when drawing","signature":"ImagickDraw::getFillOpacity( )","inheritdoc":0,"modifier":[],"return":""},"getFillRule":{"params":[],"docComment":"Returns the fill rule","signature":"ImagickDraw::getFillRule( )","inheritdoc":0,"modifier":[],"return":""},"getFont":{"params":[],"docComment":"Returns the font","signature":"ImagickDraw::getFont( )","inheritdoc":0,"modifier":[],"return":""},"getFontFamily":{"params":[],"docComment":"Returns the font family","signature":"ImagickDraw::getFontFamily( )","inheritdoc":0,"modifier":[],"return":""},"getFontSize":{"params":[],"docComment":"Returns the font pointsize","signature":"ImagickDraw::getFontSize( )","inheritdoc":0,"modifier":[],"return":""},"getFontStyle":{"params":[],"docComment":"Returns the font style","signature":"ImagickDraw::getFontStyle( )","inheritdoc":0,"modifier":[],"return":""},"getFontWeight":{"params":[],"docComment":"Returns the font weight","signature":"ImagickDraw::getFontWeight( )","inheritdoc":0,"modifier":[],"return":""},"getGravity":{"params":[],"docComment":"Returns the text placement gravity","signature":"ImagickDraw::getGravity( )","inheritdoc":0,"modifier":[],"return":""},"getStrokeAntialias":{"params":[],"docComment":"Returns the current stroke antialias setting","signature":"ImagickDraw::getStrokeAntialias( )","inheritdoc":0,"modifier":[],"return":""},"getStrokeColor":{"params":[],"docComment":"Returns the color used for stroking object outlines","signature":"ImagickDraw::getStrokeColor( )","inheritdoc":0,"modifier":[],"return":"ImagickPixel"},"getStrokeDashArray":{"params":[],"docComment":"Returns an array representing the pattern of dashes and gaps used to stroke paths","signature":"ImagickDraw::getStrokeDashArray( )","inheritdoc":0,"modifier":[],"return":""},"getStrokeDashOffset":{"params":[],"docComment":"Returns the offset into the dash pattern to start the dash","signature":"ImagickDraw::getStrokeDashOffset( )","inheritdoc":0,"modifier":[],"return":""},"getStrokeLineCap":{"params":[],"docComment":"Returns the shape to be used at the end of open subpaths when they are stroked","signature":"ImagickDraw::getStrokeLineCap( )","inheritdoc":0,"modifier":[],"return":""},"getStrokeLineJoin":{"params":[],"docComment":"Returns the shape to be used at the corners of paths when they are stroked","signature":"ImagickDraw::getStrokeLineJoin( )","inheritdoc":0,"modifier":[],"return":""},"getStrokeMiterLimit":{"params":[],"docComment":"Returns the stroke miter limit","signature":"ImagickDraw::getStrokeMiterLimit( )","inheritdoc":0,"modifier":[],"return":""},"getStrokeOpacity":{"params":[],"docComment":"Returns the opacity of stroked object outlines","signature":"ImagickDraw::getStrokeOpacity( )","inheritdoc":0,"modifier":[],"return":""},"getStrokeWidth":{"params":[],"docComment":"Returns the width of the stroke used to draw object outlines","signature":"ImagickDraw::getStrokeWidth( )","inheritdoc":0,"modifier":[],"return":""},"getTextAlignment":{"params":[],"docComment":"Returns the text alignment","signature":"ImagickDraw::getTextAlignment( )","inheritdoc":0,"modifier":[],"return":""},"getTextAntialias":{"params":[],"docComment":"Returns the current text antialias setting","signature":"ImagickDraw::getTextAntialias( )","inheritdoc":0,"modifier":[],"return":""},"getTextDecoration":{"params":[],"docComment":"Returns the text decoration","signature":"ImagickDraw::getTextDecoration( )","inheritdoc":0,"modifier":[],"return":""},"getTextEncoding":{"params":[],"docComment":"Returns the code set used for text annotations","signature":"ImagickDraw::getTextEncoding( )","inheritdoc":0,"modifier":[],"return":""},"getTextUnderColor":{"params":[],"docComment":"Returns the text under color","signature":"ImagickDraw::getTextUnderColor( )","inheritdoc":0,"modifier":[],"return":"ImagickPixel"},"getVectorGraphics":{"params":[],"docComment":"Returns a string containing vector graphics","signature":"ImagickDraw::getVectorGraphics( )","inheritdoc":0,"modifier":[],"return":""},"line":{"params":{"$sx":"","$sy":"","$ex":"","$ey":""},"docComment":"Draws a line","signature":"ImagickDraw::line(float $sx ,float $sy ,float $ex ,float $ey )","inheritdoc":0,"modifier":[],"return":""},"matte":{"params":{"$x":"","$y":"","$paintMethod":""},"docComment":"Paints on the image's opacity channel","signature":"ImagickDraw::matte(float $x ,float $y ,int $paintMethod )","inheritdoc":0,"modifier":[],"return":""},"pathClose":{"params":[],"docComment":"Adds a path element to the current path","signature":"ImagickDraw::pathClose( )","inheritdoc":0,"modifier":[],"return":""},"pathCurveToAbsolute":{"params":{"$x1":"","$y1":"","$x2":"","$y2":"","$x":"","$y":""},"docComment":"Draws a cubic Bezier curve","signature":"ImagickDraw::pathCurveToAbsolute(float $x1 ,float $y1 ,float $x2 ,float $y2 ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"pathCurveToQuadraticBezierAbsolute":{"params":{"$x1":"","$y1":"","$x":"","$y":""},"docComment":"Draws a quadratic Bezier curve","signature":"ImagickDraw::pathCurveToQuadraticBezierAbsolute(float $x1 ,float $y1 ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"pathCurveToQuadraticBezierRelative":{"params":{"$x1":"","$y1":"","$x":"","$y":""},"docComment":"Draws a quadratic Bezier curve","signature":"ImagickDraw::pathCurveToQuadraticBezierRelative(float $x1 ,float $y1 ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"pathCurveToQuadraticBezierSmoothAbsolute":{"params":{"$x":"","$y":""},"docComment":"Draws a quadratic Bezier curve","signature":"ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"pathCurveToQuadraticBezierSmoothRelative":{"params":{"$x":"","$y":""},"docComment":"Draws a quadratic Bezier curve","signature":"ImagickDraw::pathCurveToQuadraticBezierSmoothRelative(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"pathCurveToRelative":{"params":{"$x1":"","$y1":"","$x2":"","$y2":"","$x":"","$y":""},"docComment":"Draws a cubic Bezier curve","signature":"ImagickDraw::pathCurveToRelative(float $x1 ,float $y1 ,float $x2 ,float $y2 ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"pathCurveToSmoothAbsolute":{"params":{"$x2":"","$y2":"","$x":"","$y":""},"docComment":"Draws a cubic Bezier curve","signature":"ImagickDraw::pathCurveToSmoothAbsolute(float $x2 ,float $y2 ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"pathCurveToSmoothRelative":{"params":{"$x2":"","$y2":"","$x":"","$y":""},"docComment":"Draws a cubic Bezier curve","signature":"ImagickDraw::pathCurveToSmoothRelative(float $x2 ,float $y2 ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"pathEllipticArcAbsolute":{"params":{"$rx":"","$ry":"","$x_axis_rotation":"","$large_arc_flag":"","$sweep_flag":"","$x":"","$y":""},"docComment":"Draws an elliptical arc","signature":"ImagickDraw::pathEllipticArcAbsolute(float $rx ,float $ry ,float $x_axis_rotation ,bool $large_arc_flag ,bool $sweep_flag ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"pathEllipticArcRelative":{"params":{"$rx":"","$ry":"","$x_axis_rotation":"","$large_arc_flag":"","$sweep_flag":"","$x":"","$y":""},"docComment":"Draws an elliptical arc","signature":"ImagickDraw::pathEllipticArcRelative(float $rx ,float $ry ,float $x_axis_rotation ,bool $large_arc_flag ,bool $sweep_flag ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"pathFinish":{"params":[],"docComment":"Terminates the current path","signature":"ImagickDraw::pathFinish( )","inheritdoc":0,"modifier":[],"return":""},"pathLineToAbsolute":{"params":{"$x":"","$y":""},"docComment":"Draws a line path","signature":"ImagickDraw::pathLineToAbsolute(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"pathLineToHorizontalAbsolute":{"params":{"$x":""},"docComment":"Draws a horizontal line path","signature":"ImagickDraw::pathLineToHorizontalAbsolute(float $x )","inheritdoc":0,"modifier":[],"return":""},"pathLineToHorizontalRelative":{"params":{"$x":""},"docComment":"Draws a horizontal line","signature":"ImagickDraw::pathLineToHorizontalRelative(float $x )","inheritdoc":0,"modifier":[],"return":""},"pathLineToRelative":{"params":{"$x":"","$y":""},"docComment":"Draws a line path","signature":"ImagickDraw::pathLineToRelative(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"pathLineToVerticalAbsolute":{"params":{"$y":""},"docComment":"Draws a vertical line","signature":"ImagickDraw::pathLineToVerticalAbsolute(float $y )","inheritdoc":0,"modifier":[],"return":""},"pathLineToVerticalRelative":{"params":{"$y":""},"docComment":"Draws a vertical line path","signature":"ImagickDraw::pathLineToVerticalRelative(float $y )","inheritdoc":0,"modifier":[],"return":""},"pathMoveToAbsolute":{"params":{"$x":"","$y":""},"docComment":"Starts a new sub-path","signature":"ImagickDraw::pathMoveToAbsolute(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"pathMoveToRelative":{"params":{"$x":"","$y":""},"docComment":"Starts a new sub-path","signature":"ImagickDraw::pathMoveToRelative(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"pathStart":{"params":[],"docComment":"Declares the start of a path drawing list","signature":"ImagickDraw::pathStart( )","inheritdoc":0,"modifier":[],"return":""},"point":{"params":{"$x":"","$y":""},"docComment":"Draws a point","signature":"ImagickDraw::point(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"polygon":{"params":{"$coordinates":""},"docComment":"Draws a polygon","signature":"ImagickDraw::polygon(array $coordinates )","inheritdoc":0,"modifier":[],"return":""},"polyline":{"params":{"$coordinates":""},"docComment":"Draws a polyline","signature":"ImagickDraw::polyline(array $coordinates )","inheritdoc":0,"modifier":[],"return":""},"pop":{"params":[],"docComment":"Destroys the current ImagickDraw in the stack, and returns to the previously pushed ImagickDraw","signature":"ImagickDraw::pop( )","inheritdoc":0,"modifier":[],"return":""},"popClipPath":{"params":[],"docComment":"Terminates a clip path definition","signature":"ImagickDraw::popClipPath( )","inheritdoc":0,"modifier":[],"return":""},"popDefs":{"params":[],"docComment":"Terminates a definition list","signature":"ImagickDraw::popDefs( )","inheritdoc":0,"modifier":[],"return":""},"popPattern":{"params":[],"docComment":"Terminates a pattern definition","signature":"ImagickDraw::popPattern( )","inheritdoc":0,"modifier":[],"return":""},"push":{"params":[],"docComment":"Clones the current ImagickDraw and pushes it to the stack","signature":"ImagickDraw::push( )","inheritdoc":0,"modifier":[],"return":""},"pushClipPath":{"params":{"$clip_mask_id":""},"docComment":"Starts a clip path definition","signature":"ImagickDraw::pushClipPath(string $clip_mask_id )","inheritdoc":0,"modifier":[],"return":""},"pushDefs":{"params":[],"docComment":"Indicates that following commands create named elements for early processing","signature":"ImagickDraw::pushDefs( )","inheritdoc":0,"modifier":[],"return":""},"pushPattern":{"params":{"$pattern_id":"","$x":"","$y":"","$width":"","$height":""},"docComment":"Indicates that subsequent commands up to a ImagickDraw::opPattern() command comprise the definition of a named pattern","signature":"ImagickDraw::pushPattern(string $pattern_id ,float $x ,float $y ,float $width ,float $height )","inheritdoc":0,"modifier":[],"return":""},"rectangle":{"params":{"$x1":"","$y1":"","$x2":"","$y2":""},"docComment":"Draws a rectangle","signature":"ImagickDraw::rectangle(float $x1 ,float $y1 ,float $x2 ,float $y2 )","inheritdoc":0,"modifier":[],"return":""},"render":{"params":[],"docComment":"Renders all preceding drawing commands onto the image","signature":"ImagickDraw::render( )","inheritdoc":0,"modifier":[],"return":""},"rotate":{"params":{"$degrees":""},"docComment":"Applies the specified rotation to the current coordinate space","signature":"ImagickDraw::rotate(float $degrees )","inheritdoc":0,"modifier":[],"return":""},"roundRectangle":{"params":{"$x1":"","$y1":"","$x2":"","$y2":"","$rx":"","$ry":""},"docComment":"Draws a rounded rectangle","signature":"ImagickDraw::roundRectangle(float $x1 ,float $y1 ,float $x2 ,float $y2 ,float $rx ,float $ry )","inheritdoc":0,"modifier":[],"return":""},"scale":{"params":{"$x":"","$y":""},"docComment":"Adjusts the scaling factor","signature":"ImagickDraw::scale(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"setClipPath":{"params":{"$clip_mask":""},"docComment":"Associates a named clipping path with the image","signature":"ImagickDraw::setClipPath(string $clip_mask )","inheritdoc":0,"modifier":[],"return":""},"setClipRule":{"params":{"$fill_rule":""},"docComment":"Set the polygon fill rule to be used by the clipping path","signature":"ImagickDraw::setClipRule(int $fill_rule )","inheritdoc":0,"modifier":[],"return":""},"setClipUnits":{"params":{"$clip_units":""},"docComment":"Sets the interpretation of clip path units","signature":"ImagickDraw::setClipUnits(int $clip_units )","inheritdoc":0,"modifier":[],"return":""},"setFillAlpha":{"params":{"$opacity":""},"docComment":"Sets the opacity to use when drawing using the fill color or fill texture","signature":"ImagickDraw::setFillAlpha(float $opacity )","inheritdoc":0,"modifier":[],"return":""},"setFillColor":{"params":{"$fill_pixel":"ImagickPixel"},"docComment":"Sets the fill color to be used for drawing filled objects","signature":"ImagickDraw::setFillColor(ImagickPixel $fill_pixel )","inheritdoc":0,"modifier":[],"return":""},"setFillOpacity":{"params":{"$fillOpacity":""},"docComment":"Sets the opacity to use when drawing using the fill color or fill texture","signature":"ImagickDraw::setFillOpacity(float $fillOpacity )","inheritdoc":0,"modifier":[],"return":""},"setFillPatternURL":{"params":{"$fill_url":""},"docComment":"Sets the URL to use as a fill pattern for filling objects","signature":"ImagickDraw::setFillPatternURL(string $fill_url )","inheritdoc":0,"modifier":[],"return":""},"setFillRule":{"params":{"$fill_rule":""},"docComment":"Sets the fill rule to use while drawing polygons","signature":"ImagickDraw::setFillRule(int $fill_rule )","inheritdoc":0,"modifier":[],"return":""},"setFont":{"params":{"$font_name":""},"docComment":"Sets the fully-specified font to use when annotating with text","signature":"ImagickDraw::setFont(string $font_name )","inheritdoc":0,"modifier":[],"return":""},"setFontFamily":{"params":{"$font_family":""},"docComment":"Sets the font family to use when annotating with text","signature":"ImagickDraw::setFontFamily(string $font_family )","inheritdoc":0,"modifier":[],"return":""},"setFontSize":{"params":{"$pointsize":""},"docComment":"Sets the font pointsize to use when annotating with text","signature":"ImagickDraw::setFontSize(float $pointsize )","inheritdoc":0,"modifier":[],"return":""},"setFontStretch":{"params":{"$fontStretch":""},"docComment":"Sets the font stretch to use when annotating with text","signature":"ImagickDraw::setFontStretch(int $fontStretch )","inheritdoc":0,"modifier":[],"return":""},"setFontStyle":{"params":{"$style":""},"docComment":"Sets the font style to use when annotating with text","signature":"ImagickDraw::setFontStyle(int $style )","inheritdoc":0,"modifier":[],"return":""},"setFontWeight":{"params":{"$font_weight":""},"docComment":"Sets the font weight","signature":"ImagickDraw::setFontWeight(int $font_weight )","inheritdoc":0,"modifier":[],"return":""},"setGravity":{"params":{"$gravity":""},"docComment":"Sets the text placement gravity","signature":"ImagickDraw::setGravity(int $gravity )","inheritdoc":0,"modifier":[],"return":""},"setStrokeAlpha":{"params":{"$opacity":""},"docComment":"Specifies the opacity of stroked object outlines","signature":"ImagickDraw::setStrokeAlpha(float $opacity )","inheritdoc":0,"modifier":[],"return":""},"setStrokeAntialias":{"params":{"$stroke_antialias":""},"docComment":"Controls whether stroked outlines are antialiased","signature":"ImagickDraw::setStrokeAntialias(bool $stroke_antialias )","inheritdoc":0,"modifier":[],"return":""},"setStrokeColor":{"params":{"$stroke_pixel":"ImagickPixel"},"docComment":"Sets the color used for stroking object outlines","signature":"ImagickDraw::setStrokeColor(ImagickPixel $stroke_pixel )","inheritdoc":0,"modifier":[],"return":""},"setStrokeDashArray":{"params":{"$dashArray":""},"docComment":"Specifies the pattern of dashes and gaps used to stroke paths","signature":"ImagickDraw::setStrokeDashArray(array $dashArray )","inheritdoc":0,"modifier":[],"return":""},"setStrokeDashOffset":{"params":{"$dash_offset":""},"docComment":"Specifies the offset into the dash pattern to start the dash","signature":"ImagickDraw::setStrokeDashOffset(float $dash_offset )","inheritdoc":0,"modifier":[],"return":""},"setStrokeLineCap":{"params":{"$linecap":""},"docComment":"Specifies the shape to be used at the end of open subpaths when they are stroked","signature":"ImagickDraw::setStrokeLineCap(int $linecap )","inheritdoc":0,"modifier":[],"return":""},"setStrokeLineJoin":{"params":{"$linejoin":""},"docComment":"Specifies the shape to be used at the corners of paths when they are stroked","signature":"ImagickDraw::setStrokeLineJoin(int $linejoin )","inheritdoc":0,"modifier":[],"return":""},"setStrokeMiterLimit":{"params":{"$miterlimit":""},"docComment":"Specifies the miter limit","signature":"ImagickDraw::setStrokeMiterLimit(int $miterlimit )","inheritdoc":0,"modifier":[],"return":""},"setStrokeOpacity":{"params":{"$stroke_opacity":""},"docComment":"Specifies the opacity of stroked object outlines","signature":"ImagickDraw::setStrokeOpacity(float $stroke_opacity )","inheritdoc":0,"modifier":[],"return":""},"setStrokePatternURL":{"params":{"$stroke_url":""},"docComment":"Sets the pattern used for stroking object outlines","signature":"ImagickDraw::setStrokePatternURL(string $stroke_url )","inheritdoc":0,"modifier":[],"return":""},"setStrokeWidth":{"params":{"$stroke_width":""},"docComment":"Sets the width of the stroke used to draw object outlines","signature":"ImagickDraw::setStrokeWidth(float $stroke_width )","inheritdoc":0,"modifier":[],"return":""},"setTextAlignment":{"params":{"$alignment":""},"docComment":"Specifies a text alignment","signature":"ImagickDraw::setTextAlignment(int $alignment )","inheritdoc":0,"modifier":[],"return":""},"setTextAntialias":{"params":{"$antiAlias":""},"docComment":"Controls whether text is antialiased","signature":"ImagickDraw::setTextAntialias(bool $antiAlias )","inheritdoc":0,"modifier":[],"return":""},"setTextDecoration":{"params":{"$decoration":""},"docComment":"Specifies a decoration","signature":"ImagickDraw::setTextDecoration(int $decoration )","inheritdoc":0,"modifier":[],"return":""},"setTextEncoding":{"params":{"$encoding":""},"docComment":"Specifies specifies the text code set","signature":"ImagickDraw::setTextEncoding(string $encoding )","inheritdoc":0,"modifier":[],"return":""},"setTextUnderColor":{"params":{"$under_color":"ImagickPixel"},"docComment":"Specifies the color of a background rectangle","signature":"ImagickDraw::setTextUnderColor(ImagickPixel $under_color )","inheritdoc":0,"modifier":[],"return":""},"setVectorGraphics":{"params":{"$xml":""},"docComment":"Sets the vector graphics","signature":"ImagickDraw::setVectorGraphics(string $xml )","inheritdoc":0,"modifier":[],"return":""},"setViewbox":{"params":{"$x1":"","$y1":"","$x2":"","$y2":""},"docComment":"Sets the overall canvas size","signature":"ImagickDraw::setViewbox(int $x1 ,int $y1 ,int $x2 ,int $y2 )","inheritdoc":0,"modifier":[],"return":""},"skewX":{"params":{"$degrees":""},"docComment":"Skews the current coordinate system in the horizontal direction","signature":"ImagickDraw::skewX(float $degrees )","inheritdoc":0,"modifier":[],"return":""},"skewY":{"params":{"$degrees":""},"docComment":"Skews the current coordinate system in the vertical direction","signature":"ImagickDraw::skewY(float $degrees )","inheritdoc":0,"modifier":[],"return":""},"translate":{"params":{"$x":"","$y":""},"docComment":"Applies a translation to the current coordinate system","signature":"ImagickDraw::translate(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ImagickPixel":{"classname":"ImagickPixel","docComment":"","methods":{"modifier":{"public":["clear","__construct","destroy","getColor","getColorAsString","getColorCount","getColorValue","getHSL","isSimilar","setColor","setColorValue","setHSL"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","clear":{"params":[],"docComment":"Clears resources associated with this object","signature":"ImagickPixel::clear( )","inheritdoc":0,"modifier":[],"return":""},"__construct":{"params":{"$color":""},"docComment":"The ImagickPixel constructor","signature":"ImagickPixel::__construct(string $color )","inheritdoc":0,"modifier":[],"return":""},"destroy":{"params":[],"docComment":"Deallocates resources associated with this object","signature":"ImagickPixel::destroy( )","inheritdoc":0,"modifier":[],"return":""},"getColor":{"params":{"$normalized":""},"docComment":"Returns the color","signature":"ImagickPixel::getColor([bool $normalized] )","inheritdoc":0,"modifier":[],"return":""},"getColorAsString":{"params":[],"docComment":"Returns the color as a string","signature":"ImagickPixel::getColorAsString( )","inheritdoc":0,"modifier":[],"return":""},"getColorCount":{"params":[],"docComment":"Returns the color count associated with this color","signature":"ImagickPixel::getColorCount( )","inheritdoc":0,"modifier":[],"return":""},"getColorValue":{"params":{"$color":""},"docComment":"Gets the normalized value of the provided color channel","signature":"ImagickPixel::getColorValue(int $color )","inheritdoc":0,"modifier":[],"return":""},"getHSL":{"params":[],"docComment":"Returns the normalized HSL color of the ImagickPixel object","signature":"ImagickPixel::getHSL( )","inheritdoc":0,"modifier":[],"return":""},"isSimilar":{"params":{"$color":"ImagickPixel","$fuzz":""},"docComment":"Check the distance between this color and another","signature":"ImagickPixel::isSimilar(ImagickPixel $color ,float $fuzz )","inheritdoc":0,"modifier":[],"return":""},"setColor":{"params":{"$color":""},"docComment":"Sets the color","signature":"ImagickPixel::setColor(string $color )","inheritdoc":0,"modifier":[],"return":""},"setColorValue":{"params":{"$color":"","$value":""},"docComment":"Sets the normalized value of one of the channels","signature":"ImagickPixel::setColorValue(int $color ,float $value )","inheritdoc":0,"modifier":[],"return":""},"setHSL":{"params":{"$hue":"","$saturation":"","$luminosity":""},"docComment":"Sets the normalized HSL color","signature":"ImagickPixel::setHSL(float $hue ,float $saturation ,float $luminosity )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ImagickPixelIterator":{"classname":"ImagickPixelIterator","docComment":"","methods":{"modifier":{"public":["clear","__construct","destroy","getCurrentIteratorRow","getIteratorRow","getNextIteratorRow","getPreviousIteratorRow","newPixelIterator","newPixelRegionIterator","resetIterator","setIteratorFirstRow","setIteratorLastRow","setIteratorRow","syncIterator"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","clear":{"params":[],"docComment":"Clear resources associated with a PixelIterator","signature":"ImagickPixelIterator::clear( )","inheritdoc":0,"modifier":[],"return":""},"__construct":{"params":{"$wand":"Imagick"},"docComment":"The ImagickPixelIterator constructor","signature":"ImagickPixelIterator::__construct(Imagick $wand )","inheritdoc":0,"modifier":[],"return":""},"destroy":{"params":[],"docComment":"Deallocates resources associated with a PixelIterator","signature":"ImagickPixelIterator::destroy( )","inheritdoc":0,"modifier":[],"return":""},"getCurrentIteratorRow":{"params":[],"docComment":"Returns the current row of ImagickPixel objects","signature":"ImagickPixelIterator::getCurrentIteratorRow( )","inheritdoc":0,"modifier":[],"return":""},"getIteratorRow":{"params":[],"docComment":"Returns the current pixel iterator row","signature":"ImagickPixelIterator::getIteratorRow( )","inheritdoc":0,"modifier":[],"return":""},"getNextIteratorRow":{"params":[],"docComment":"Returns the next row of the pixel iterator","signature":"ImagickPixelIterator::getNextIteratorRow( )","inheritdoc":0,"modifier":[],"return":""},"getPreviousIteratorRow":{"params":[],"docComment":"Returns the previous row","signature":"ImagickPixelIterator::getPreviousIteratorRow( )","inheritdoc":0,"modifier":[],"return":""},"newPixelIterator":{"params":{"$wand":"Imagick"},"docComment":"Returns a new pixel iterator","signature":"ImagickPixelIterator::newPixelIterator(Imagick $wand )","inheritdoc":0,"modifier":[],"return":""},"newPixelRegionIterator":{"params":{"$wand":"Imagick","$x":"","$y":"","$columns":"","$rows":""},"docComment":"Returns a new pixel iterator","signature":"ImagickPixelIterator::newPixelRegionIterator(Imagick $wand ,int $x ,int $y ,int $columns ,int $rows )","inheritdoc":0,"modifier":[],"return":""},"resetIterator":{"params":[],"docComment":"Resets the pixel iterator","signature":"ImagickPixelIterator::resetIterator( )","inheritdoc":0,"modifier":[],"return":""},"setIteratorFirstRow":{"params":[],"docComment":"Sets the pixel iterator to the first pixel row","signature":"ImagickPixelIterator::setIteratorFirstRow( )","inheritdoc":0,"modifier":[],"return":""},"setIteratorLastRow":{"params":[],"docComment":"Sets the pixel iterator to the last pixel row","signature":"ImagickPixelIterator::setIteratorLastRow( )","inheritdoc":0,"modifier":[],"return":""},"setIteratorRow":{"params":{"$row":""},"docComment":"Set the pixel iterator row","signature":"ImagickPixelIterator::setIteratorRow(int $row )","inheritdoc":0,"modifier":[],"return":""},"syncIterator":{"params":[],"docComment":"Syncs the pixel iterator","signature":"ImagickPixelIterator::syncIterator( )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Judy":{"classname":"Judy","docComment":"","methods":{"modifier":{"public":["byCount","__construct","count","__destruct","first","firstEmpty","free","getType","last","lastEmpty","memoryUsage","next","nextEmpty","offsetExists","offsetGet","offsetSet","offsetUnset","prev","prevEmpty","size"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","byCount":{"params":{"$nth_index":""},"docComment":"Locate the Nth index present in the  array","signature":"public Judy::byCount(int $nth_index )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$judy_type":""},"docComment":"Construct a new  object","signature":"public Judy::__construct(int $judy_type )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":{"$index_start":"","$index_end":""},"docComment":"Count the number of elements in the  array","signature":"public Judy::count([int $index_start] ,[int $index_end] )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":[],"docComment":"Destruct a Judy object","signature":"public Judy::__destruct( )","inheritdoc":0,"modifier":["public"],"return":""},"first":{"params":{"$index":""},"docComment":"Search for the first index in the  array","signature":"public Judy::first(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"firstEmpty":{"params":{"$index":""},"docComment":"Search for the first absent index in the  array","signature":"public Judy::firstEmpty([mixed $index] )","inheritdoc":0,"modifier":["public"],"return":""},"free":{"params":[],"docComment":"Free the entire  array","signature":"public Judy::free( )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"Return the type of the current  array","signature":"public Judy::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"last":{"params":{"$index":""},"docComment":"Search for the last index in the  array","signature":"public Judy::last(string $index )","inheritdoc":0,"modifier":["public"],"return":""},"lastEmpty":{"params":{"$index":""},"docComment":"Search for the last absent index in the  array","signature":"public Judy::lastEmpty([int $index] )","inheritdoc":0,"modifier":["public"],"return":""},"memoryUsage":{"params":[],"docComment":"Return the memory used by the  array","signature":"public Judy::memoryUsage( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":{"$index":""},"docComment":"Search for the next index in the  array","signature":"public Judy::next(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"nextEmpty":{"params":{"$index":""},"docComment":"Search for the next absent index in the  array","signature":"public Judy::nextEmpty(int $index )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$offset":""},"docComment":"Whether a offset exists","signature":"public Judy::offsetExists(mixed $offset )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$offset":""},"docComment":"Offset to retrieve","signature":"public Judy::offsetGet(mixed $offset )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$offset":"","$value":""},"docComment":"Offset to set","signature":"public Judy::offsetSet(mixed $offset ,mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$offset":""},"docComment":"Offset to unset","signature":"public Judy::offsetUnset(mixed $offset )","inheritdoc":0,"modifier":["public"],"return":""},"prev":{"params":{"$index":""},"docComment":"Search for the previous index in the  array","signature":"public Judy::prev(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"prevEmpty":{"params":{"$index":""},"docComment":"Search for the previous absent index in the  array","signature":"public Judy::prevEmpty(mixed $index )","inheritdoc":0,"modifier":["public"],"return":""},"size":{"params":[],"docComment":"Return the size of the current  array","signature":"public Judy::size( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["BITSET","INT_TO_INT","INT_TO_MIXED","STRING_TO_INT","STRING_TO_MIXED"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","BITSET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INT_TO_INT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INT_TO_MIXED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"STRING_TO_INT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"STRING_TO_MIXED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"KTaglib_MPEG_File":{"classname":"KTaglib_MPEG_File","docComment":"","methods":{"modifier":{"public":["getAudioProperties","getID3v1Tag","getID3v2Tag"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getAudioProperties":{"params":[],"docComment":"Returns an object that provides access to the audio properties","signature":"public KTaglib_MPEG_File::getAudioProperties( )","inheritdoc":0,"modifier":["public"],"return":"KTaglib_MPEG_File"},"getID3v1Tag":{"params":{"$create":""},"docComment":"Returns an object representing an ID3v1 tag","signature":"public KTaglib_MPEG_File::getID3v1Tag([bool $create] )","inheritdoc":0,"modifier":["public"],"return":""},"getID3v2Tag":{"params":{"$create":""},"docComment":"Returns a ID3v2 object","signature":"public KTaglib_MPEG_File::getID3v2Tag([bool $create] )","inheritdoc":0,"modifier":["public"],"return":"KTaglib_ID3v2_Tag"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"KTaglib_MPEG_AudioProperties":{"classname":"KTaglib_MPEG_AudioProperties","docComment":"","methods":{"modifier":{"public":["getBitrate","getChannels","getLayer","getLength","getSampleBitrate","getVersion","isCopyrighted","isOriginal","isProtectionEnabled"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getBitrate":{"params":[],"docComment":"Returns the bitrate of the MPEG file","signature":"public KTaglib_MPEG_AudioProperties::getBitrate( )","inheritdoc":0,"modifier":["public"],"return":""},"getChannels":{"params":[],"docComment":"Returns the amount of channels of a MPEG file","signature":"public KTaglib_MPEG_AudioProperties::getChannels( )","inheritdoc":0,"modifier":["public"],"return":""},"getLayer":{"params":[],"docComment":"Returns the layer of a MPEG file","signature":"public KTaglib_MPEG_AudioProperties::getLayer( )","inheritdoc":0,"modifier":["public"],"return":""},"getLength":{"params":[],"docComment":"Returns the length of a MPEG file","signature":"public KTaglib_MPEG_AudioProperties::getLength( )","inheritdoc":0,"modifier":["public"],"return":""},"getSampleBitrate":{"params":[],"docComment":"Returns the sample bitrate of a MPEG file","signature":"public KTaglib_MPEG_AudioProperties::getSampleBitrate( )","inheritdoc":0,"modifier":["public"],"return":""},"getVersion":{"params":[],"docComment":"Returns the version of a MPEG file","signature":"public KTaglib_MPEG_AudioProperties::getVersion( )","inheritdoc":0,"modifier":["public"],"return":""},"isCopyrighted":{"params":[],"docComment":"Returns the copyright status of an MPEG file","signature":"public KTaglib_MPEG_AudioProperties::isCopyrighted( )","inheritdoc":0,"modifier":["public"],"return":""},"isOriginal":{"params":[],"docComment":"Returns if the file is marked as the original file","signature":"public KTaglib_MPEG_AudioProperties::isOriginal( )","inheritdoc":0,"modifier":["public"],"return":""},"isProtectionEnabled":{"params":[],"docComment":"Returns if protection mechanisms of an MPEG file are enabled","signature":"public KTaglib_MPEG_AudioProperties::isProtectionEnabled( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"KTaglib_Tag":{"classname":"KTaglib_Tag","docComment":"","methods":{"modifier":{"public":["getAlbum","getArtist","getComment","getGenre","getTitle","getTrack","getYear","isEmpty"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getAlbum":{"params":[],"docComment":"Returns the title string from a ID3 tag","signature":"public KTaglib_Tag::getAlbum( )","inheritdoc":0,"modifier":["public"],"return":""},"getArtist":{"params":[],"docComment":"Returns the artist string from a ID3 tag","signature":"public KTaglib_Tag::getArtist( )","inheritdoc":0,"modifier":["public"],"return":""},"getComment":{"params":[],"docComment":"Returns the comment from a ID3 tag","signature":"public KTaglib_Tag::getComment( )","inheritdoc":0,"modifier":["public"],"return":""},"getGenre":{"params":[],"docComment":"Returns the genre from a ID3 tag","signature":"public KTaglib_Tag::getGenre( )","inheritdoc":0,"modifier":["public"],"return":""},"getTitle":{"params":[],"docComment":"Returns the title string from a ID3 tag","signature":"public KTaglib_Tag::getTitle( )","inheritdoc":0,"modifier":["public"],"return":""},"getTrack":{"params":[],"docComment":"Returns the track number from a ID3 tag","signature":"public KTaglib_Tag::getTrack( )","inheritdoc":0,"modifier":["public"],"return":""},"getYear":{"params":[],"docComment":"Returns the year from a ID3 tag","signature":"public KTaglib_Tag::getYear( )","inheritdoc":0,"modifier":["public"],"return":""},"isEmpty":{"params":[],"docComment":"Returns true if the tag is empty","signature":"public KTaglib_Tag::isEmpty( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"KTaglib_ID3v2_Tag":{"classname":"","docComment":"","methods":{"modifier":{"public":["addFrame","getFrameList","getAlbum","getArtist","getComment","getGenre","getTitle","getTrack","getYear","isEmpty"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addFrame":{"params":{"$frame":"KTaglib_ID3v2_Frame"},"docComment":"Add a frame to the ID3v2 tag","signature":"public KTaglib_ID3v2_Tag::addFrame(KTaglib_ID3v2_Frame $frame )","inheritdoc":0,"modifier":["public"],"return":""},"getFrameList":{"params":[],"docComment":"Returns an array of ID3v2 frames, associated with the ID3v2 tag","signature":"public KTaglib_ID3v2_Tag::getFrameList( )","inheritdoc":0,"modifier":["public"],"return":""},"getAlbum":{"params":[],"docComment":"Returns the title string from a ID3 tag","signature":"public KTaglib_Tag::getAlbum( )","inheritdoc":0,"modifier":["public"],"return":""},"getArtist":{"params":[],"docComment":"Returns the artist string from a ID3 tag","signature":"public KTaglib_Tag::getArtist( )","inheritdoc":0,"modifier":["public"],"return":""},"getComment":{"params":[],"docComment":"Returns the comment from a ID3 tag","signature":"public KTaglib_Tag::getComment( )","inheritdoc":0,"modifier":["public"],"return":""},"getGenre":{"params":[],"docComment":"Returns the genre from a ID3 tag","signature":"public KTaglib_Tag::getGenre( )","inheritdoc":0,"modifier":["public"],"return":""},"getTitle":{"params":[],"docComment":"Returns the title string from a ID3 tag","signature":"public KTaglib_Tag::getTitle( )","inheritdoc":0,"modifier":["public"],"return":""},"getTrack":{"params":[],"docComment":"Returns the track number from a ID3 tag","signature":"public KTaglib_Tag::getTrack( )","inheritdoc":0,"modifier":["public"],"return":""},"getYear":{"params":[],"docComment":"Returns the year from a ID3 tag","signature":"public KTaglib_Tag::getYear( )","inheritdoc":0,"modifier":["public"],"return":""},"isEmpty":{"params":[],"docComment":"Returns true if the tag is empty","signature":"public KTaglib_Tag::isEmpty( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"KTaglib_ID3v2_Frame":{"classname":"","docComment":"","methods":{"modifier":{"public":["getSize","__toString","getAlbum","getArtist","getComment","getGenre","getTitle","getTrack","getYear","isEmpty"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getSize":{"params":[],"docComment":"Returns the size of the frame in bytes","signature":"public KTaglib_ID3v2_Frame::getSize( )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Returns a string representation of the frame","signature":"public KTaglib_ID3v2_Frame::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"getAlbum":{"params":[],"docComment":"Returns the title string from a ID3 tag","signature":"public KTaglib_Tag::getAlbum( )","inheritdoc":0,"modifier":["public"],"return":""},"getArtist":{"params":[],"docComment":"Returns the artist string from a ID3 tag","signature":"public KTaglib_Tag::getArtist( )","inheritdoc":0,"modifier":["public"],"return":""},"getComment":{"params":[],"docComment":"Returns the comment from a ID3 tag","signature":"public KTaglib_Tag::getComment( )","inheritdoc":0,"modifier":["public"],"return":""},"getGenre":{"params":[],"docComment":"Returns the genre from a ID3 tag","signature":"public KTaglib_Tag::getGenre( )","inheritdoc":0,"modifier":["public"],"return":""},"getTitle":{"params":[],"docComment":"Returns the title string from a ID3 tag","signature":"public KTaglib_Tag::getTitle( )","inheritdoc":0,"modifier":["public"],"return":""},"getTrack":{"params":[],"docComment":"Returns the track number from a ID3 tag","signature":"public KTaglib_Tag::getTrack( )","inheritdoc":0,"modifier":["public"],"return":""},"getYear":{"params":[],"docComment":"Returns the year from a ID3 tag","signature":"public KTaglib_Tag::getYear( )","inheritdoc":0,"modifier":["public"],"return":""},"isEmpty":{"params":[],"docComment":"Returns true if the tag is empty","signature":"public KTaglib_Tag::isEmpty( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"KTaglib_ID3v2_AttachedPictureFrame":{"classname":"","docComment":"","methods":{"modifier":{"public":["getDescription","getMimeType","getType","savePicture","getMimeType","setPicture","setType","getSize","__toString","getAlbum","getArtist","getComment","getGenre","getTitle","getTrack","getYear","isEmpty"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getDescription":{"params":[],"docComment":"Returns a description for the picture in a picture frame","signature":"public KTaglib_ID3v2_AttachedPictureFrame::getDescription( )","inheritdoc":0,"modifier":["public"],"return":""},"getMimeType":{"params":[],"docComment":"Returns the mime type of the picture","signature":"public KTaglib_ID3v2_AttachedPictureFrame::getMimeType( )","inheritdoc":0,"modifier":["public"],"return":""},"getType":{"params":[],"docComment":"Returns the type of the image","signature":"public KTaglib_ID3v2_AttachedPictureFrame::getType( )","inheritdoc":0,"modifier":["public"],"return":""},"savePicture":{"params":{"$filename":""},"docComment":"Saves the picture to a file","signature":"public KTaglib_ID3v2_AttachedPictureFrame::savePicture(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"setPicture":{"params":{"$filename":""},"docComment":"Sets the frame picture to the given image","signature":"public KTaglib_ID3v2_AttachedPictureFrame::setPicture(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"setType":{"params":{"$type":""},"docComment":"Set the type of the image","signature":"public KTaglib_ID3v2_AttachedPictureFrame::setType(int $type )","inheritdoc":0,"modifier":["public"],"return":""},"getSize":{"params":[],"docComment":"Returns the size of the frame in bytes","signature":"public KTaglib_ID3v2_Frame::getSize( )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Returns a string representation of the frame","signature":"public KTaglib_ID3v2_Frame::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"getAlbum":{"params":[],"docComment":"Returns the title string from a ID3 tag","signature":"public KTaglib_Tag::getAlbum( )","inheritdoc":0,"modifier":["public"],"return":""},"getArtist":{"params":[],"docComment":"Returns the artist string from a ID3 tag","signature":"public KTaglib_Tag::getArtist( )","inheritdoc":0,"modifier":["public"],"return":""},"getComment":{"params":[],"docComment":"Returns the comment from a ID3 tag","signature":"public KTaglib_Tag::getComment( )","inheritdoc":0,"modifier":["public"],"return":""},"getGenre":{"params":[],"docComment":"Returns the genre from a ID3 tag","signature":"public KTaglib_Tag::getGenre( )","inheritdoc":0,"modifier":["public"],"return":""},"getTitle":{"params":[],"docComment":"Returns the title string from a ID3 tag","signature":"public KTaglib_Tag::getTitle( )","inheritdoc":0,"modifier":["public"],"return":""},"getTrack":{"params":[],"docComment":"Returns the track number from a ID3 tag","signature":"public KTaglib_Tag::getTrack( )","inheritdoc":0,"modifier":["public"],"return":""},"getYear":{"params":[],"docComment":"Returns the year from a ID3 tag","signature":"public KTaglib_Tag::getYear( )","inheritdoc":0,"modifier":["public"],"return":""},"isEmpty":{"params":[],"docComment":"Returns true if the tag is empty","signature":"public KTaglib_Tag::isEmpty( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Lapack":{"classname":"Lapack","docComment":"","methods":{"modifier":{"public":["eigenValues","identity","leastSquaresByFactorisation","leastSquaresBySVD","pseudoInverse","singularValues","solveLinearEquation"],"private":[],"protected":[],"final":[],"static":["eigenValues","identity","leastSquaresByFactorisation","leastSquaresBySVD","pseudoInverse","singularValues","solveLinearEquation"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","eigenValues":{"params":{"$a":"","$left":"","$right":""},"docComment":"This function returns the eigenvalues for a given square matrix","signature":"static Lapack::eigenValues(array $a ,array $left ,array $right )","inheritdoc":0,"modifier":["public","static"],"return":""},"identity":{"params":{"$n":""},"docComment":"Return an identity matrix","signature":"static Lapack::identity(int $n )","inheritdoc":0,"modifier":["public","static"],"return":""},"leastSquaresByFactorisation":{"params":{"$a":"","$b":""},"docComment":"Calculate the linear least squares solution of a matrix using QR factorisation","signature":"static Lapack::leastSquaresByFactorisation(array $a ,array $b )","inheritdoc":0,"modifier":["public","static"],"return":""},"leastSquaresBySVD":{"params":{"$a":"","$b":""},"docComment":"Solve the linear least squares problem, using SVD","signature":"static Lapack::leastSquaresBySVD(array $a ,array $b )","inheritdoc":0,"modifier":["public","static"],"return":""},"pseudoInverse":{"params":{"$a":""},"docComment":"Calculate the inverse of a matrix","signature":"static Lapack::pseudoInverse(array $a )","inheritdoc":0,"modifier":["public","static"],"return":""},"singularValues":{"params":{"$a":""},"docComment":"Calculated the singular values of a matrix","signature":"static Lapack::singularValues(array $a )","inheritdoc":0,"modifier":["public","static"],"return":""},"solveLinearEquation":{"params":{"$a":"","$b":""},"docComment":"Solve a system of linear equations","signature":"static Lapack::solveLinearEquation(array $a ,array $b )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"LapackException":{"classname":"lapackexception","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Lua":{"classname":"Lua","docComment":"","methods":{"modifier":{"public":["assign","call","call","__call","__call","__construct","eval","getVersion","include","registerCallback"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","assign":{"params":{"$name":"","$value":""},"docComment":"Assign a PHP variable to Lua","signature":"public Lua::assign(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"call":{"params":{"$lua_func":"","$args":"","$use_self":""},"docComment":"Call Lua functions","signature":"public Lua::__call(callable $lua_func ,array $args ,[int $use_self] )","inheritdoc":0,"modifier":["public","public"],"return":""},"__call":{"params":{"$lua_func":"","$args":"","$use_self":""},"docComment":"Call Lua functions","signature":"public Lua::__call(callable $lua_func ,array $args ,[int $use_self] )","inheritdoc":0,"modifier":["public","public"],"return":""},"__construct":{"params":{"$lua_script_file":""},"docComment":"Lua constructor","signature":"public Lua::__construct([string $lua_script_file] )","inheritdoc":0,"modifier":["public"],"return":""},"eval":{"params":{"$statements":""},"docComment":"Evaluate a string as Lua code","signature":"public Lua::eval(string $statements )","inheritdoc":0,"modifier":["public"],"return":""},"getVersion":{"params":[],"docComment":"The getversion purpose","signature":"public Lua::getVersion( )","inheritdoc":0,"modifier":["public"],"return":""},"include":{"params":{"$file":""},"docComment":"Parse a Lua script file","signature":"public Lua::include(string $file )","inheritdoc":0,"modifier":["public"],"return":""},"registerCallback":{"params":{"$name":"","$function":""},"docComment":"Register a PHP function to Lua","signature":"public Lua::registerCallback(string $name ,callable $function )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["LUA_VERSION"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","LUA_VERSION":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"LuaClosure":{"classname":"LuaClosure","docComment":"","methods":{"modifier":{"public":["__invoke"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__invoke":{"params":{"$arg":"","$...":""},"docComment":"invoke luaclosure","signature":"public LuaClosure::__invoke(mixed $arg ,mixed $... )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Memcache":{"classname":"Memcache","docComment":"","methods":{"modifier":{"public":["add","addServer","close","connect","decrement","delete","flush","get","getExtendedStats","getServerStatus","getStats","getVersion","increment","pconnect","replace","set","setCompressThreshold","setServerParams"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$key":"","$var":"","$flag":"","$expire":""},"docComment":"Add an item to the server","signature":"Memcache::add(string $key ,mixed $var ,int $flag ,int $expire )","inheritdoc":0,"modifier":[],"return":""},"addServer":{"params":{"$host":"","$port":"","$persistent":"","$weight":"","$timeout":"","$retry_interval":"","$status":"","$failure_callback":"","$timeoutms":""},"docComment":"Add a memcached server to connection pool","signature":"Memcache::addServer(string $host ,[int $port] ,bool $persistent ,int $weight ,int $timeout ,int $retry_interval ,bool $status ,callable $failure_callback ,int $timeoutms )","inheritdoc":0,"modifier":[],"return":""},"close":{"params":[],"docComment":"Close memcached server connection","signature":"Memcache::close( )","inheritdoc":0,"modifier":[],"return":""},"connect":{"params":{"$host":"","$port":"","$timeout":""},"docComment":"Open memcached server connection","signature":"Memcache::connect(string $host ,int $port ,int $timeout )","inheritdoc":0,"modifier":[],"return":""},"decrement":{"params":{"$key":"","$value":""},"docComment":"Decrement item's value","signature":"Memcache::decrement(string $key ,[int $value] )","inheritdoc":0,"modifier":[],"return":""},"delete":{"params":{"$key":"","$timeout":""},"docComment":"Delete item from the server","signature":"Memcache::delete(string $key ,[int $timeout] )","inheritdoc":0,"modifier":[],"return":""},"flush":{"params":[],"docComment":"Flush all existing items at the server","signature":"Memcache::flush( )","inheritdoc":0,"modifier":[],"return":""},"get":{"params":{"$key":"","&$flags":"","$keys":""},"docComment":"Retrieve item from the server","signature":"Memcache::get(array $keys ,array &$flags )","inheritdoc":0,"modifier":[],"return":""},"getExtendedStats":{"params":{"$type":"","$slabid":"","$limit":""},"docComment":"Get statistics from all servers in pool","signature":"Memcache::getExtendedStats(string $type ,int $slabid ,[int $limit] )","inheritdoc":0,"modifier":[],"return":""},"getServerStatus":{"params":{"$host":"","$port":""},"docComment":"Returns server status","signature":"Memcache::getServerStatus(string $host ,[int $port] )","inheritdoc":0,"modifier":[],"return":""},"getStats":{"params":{"$type":"","$slabid":"","$limit":""},"docComment":"Get statistics of the server","signature":"Memcache::getStats(string $type ,int $slabid ,[int $limit] )","inheritdoc":0,"modifier":[],"return":""},"getVersion":{"params":[],"docComment":"Return version of the server","signature":"Memcache::getVersion( )","inheritdoc":0,"modifier":[],"return":""},"increment":{"params":{"$key":"","$value":""},"docComment":"Increment item's value","signature":"Memcache::increment(string $key ,[int $value] )","inheritdoc":0,"modifier":[],"return":""},"pconnect":{"params":{"$host":"","$port":"","$timeout":""},"docComment":"Open memcached server persistent connection","signature":"Memcache::pconnect(string $host ,int $port ,int $timeout )","inheritdoc":0,"modifier":[],"return":""},"replace":{"params":{"$key":"","$var":"","$flag":"","$expire":""},"docComment":"Replace value of the existing item","signature":"Memcache::replace(string $key ,mixed $var ,int $flag ,int $expire )","inheritdoc":0,"modifier":[],"return":""},"set":{"params":{"$key":"","$var":"","$flag":"","$expire":""},"docComment":"Store data at the server","signature":"Memcache::set(string $key ,mixed $var ,int $flag ,int $expire )","inheritdoc":0,"modifier":[],"return":""},"setCompressThreshold":{"params":{"$threshold":"","$min_savings":""},"docComment":"Enable automatic compression of large values","signature":"Memcache::setCompressThreshold(int $threshold ,float $min_savings )","inheritdoc":0,"modifier":[],"return":""},"setServerParams":{"params":{"$host":"","$port":"","$timeout":"","$retry_interval":"","$status":"","$failure_callback":""},"docComment":"Changes server parameters and status at runtime","signature":"Memcache::setServerParams(string $host ,[int $port] ,int $timeout ,[int $retry_interval] ,bool $status ,callable $failure_callback )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Memcached":{"classname":"Memcached","docComment":"","methods":{"modifier":{"public":["add","addByKey","addServer","addServers","append","appendByKey","cas","casByKey","decrement","decrementByKey","delete","deleteByKey","deleteMulti","deleteMultiByKey","fetch","fetchAll","flush","get","getAllKeys","getByKey","getDelayed","getDelayedByKey","getMulti","getMultiByKey","getOption","getResultCode","getResultMessage","getServerByKey","getServerList","getStats","getVersion","increment","incrementByKey","isPersistent","isPristine","prepend","prependByKey","quit","replace","replaceByKey","resetServerList","set","setByKey","setMulti","setMultiByKey","setOption","setOptions","setSaslAuthData","touch","touchByKey"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$key":"","$value":"","$expiration":""},"docComment":"Add an item under a new key","signature":"public Memcached::add(string $key ,mixed $value ,int $expiration )","inheritdoc":0,"modifier":["public"],"return":""},"addByKey":{"params":{"$server_key":"","$key":"","$value":"","$expiration":""},"docComment":"Add an item under a new key on a specific server","signature":"public Memcached::addByKey(string $server_key ,string $key ,mixed $value ,int $expiration )","inheritdoc":0,"modifier":["public"],"return":""},"addServer":{"params":{"$host":"","$port":"","$weight":""},"docComment":"Add a server to the server pool","signature":"public Memcached::addServer(string $host ,int $port ,[int $weight] )","inheritdoc":0,"modifier":["public"],"return":""},"addServers":{"params":{"$servers":""},"docComment":"Add multiple servers to the server pool","signature":"public Memcached::addServers(array $servers )","inheritdoc":0,"modifier":["public"],"return":""},"append":{"params":{"$key":"","$value":""},"docComment":"Append data to an existing item","signature":"public Memcached::append(string $key ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"appendByKey":{"params":{"$server_key":"","$key":"","$value":""},"docComment":"Append data to an existing item on a specific server","signature":"public Memcached::appendByKey(string $server_key ,string $key ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"cas":{"params":{"$cas_token":"","$key":"","$value":"","$expiration":""},"docComment":"Compare and swap an item","signature":"public Memcached::cas(float $cas_token ,string $key ,mixed $value ,int $expiration )","inheritdoc":0,"modifier":["public"],"return":""},"casByKey":{"params":{"$cas_token":"","$server_key":"","$key":"","$value":"","$expiration":""},"docComment":"Compare and swap an item on a specific server","signature":"public Memcached::casByKey(float $cas_token ,string $server_key ,string $key ,mixed $value ,int $expiration )","inheritdoc":0,"modifier":["public"],"return":""},"decrement":{"params":{"$key":"","$offset":"","$initial_value":"","$expiry":""},"docComment":"Decrement numeric item's value","signature":"public Memcached::decrement(string $key ,[int $offset] ,[int $initial_value] ,[int $expiry] )","inheritdoc":0,"modifier":["public"],"return":""},"decrementByKey":{"params":{"$server_key":"","$key":"","$offset":"","$initial_value":"","$expiry":""},"docComment":"Decrement numeric item's value, stored on a specific server","signature":"public Memcached::decrementByKey(string $server_key ,string $key ,[int $offset] ,[int $initial_value] ,[int $expiry] )","inheritdoc":0,"modifier":["public"],"return":""},"delete":{"params":{"$key":"","$time":""},"docComment":"Delete an item","signature":"public Memcached::delete(string $key ,[int $time] )","inheritdoc":0,"modifier":["public"],"return":""},"deleteByKey":{"params":{"$server_key":"","$key":"","$time":""},"docComment":"Delete an item from a specific server","signature":"public Memcached::deleteByKey(string $server_key ,string $key ,[int $time] )","inheritdoc":0,"modifier":["public"],"return":""},"deleteMulti":{"params":{"$keys":"","$time":""},"docComment":"Delete multiple items","signature":"public Memcached::deleteMulti(array $keys ,[int $time] )","inheritdoc":0,"modifier":["public"],"return":""},"deleteMultiByKey":{"params":{"$server_key":"","$keys":"","$time":""},"docComment":"Delete multiple items from a specific server","signature":"public Memcached::deleteMultiByKey(string $server_key ,array $keys ,[int $time] )","inheritdoc":0,"modifier":["public"],"return":""},"fetch":{"params":[],"docComment":"Fetch the next result","signature":"public Memcached::fetch( )","inheritdoc":0,"modifier":["public"],"return":""},"fetchAll":{"params":[],"docComment":"Fetch all the remaining results","signature":"public Memcached::fetchAll( )","inheritdoc":0,"modifier":["public"],"return":""},"flush":{"params":{"$delay":""},"docComment":"Invalidate all items in the cache","signature":"public Memcached::flush([int $delay] )","inheritdoc":0,"modifier":["public"],"return":""},"get":{"params":{"$key":"","$cache_cb":"","&$cas_token":""},"docComment":"Retrieve an item","signature":"public Memcached::get(string $key ,callable $cache_cb ,float &$cas_token )","inheritdoc":0,"modifier":["public"],"return":""},"getAllKeys":{"params":[],"docComment":"Gets the keys stored on all the servers","signature":"public Memcached::getAllKeys( )","inheritdoc":0,"modifier":["public"],"return":""},"getByKey":{"params":{"$server_key":"","$key":"","$cache_cb":"","&$cas_token":""},"docComment":"Retrieve an item from a specific server","signature":"public Memcached::getByKey(string $server_key ,string $key ,callable $cache_cb ,float &$cas_token )","inheritdoc":0,"modifier":["public"],"return":""},"getDelayed":{"params":{"$keys":"","$with_cas":"","$value_cb":""},"docComment":"Request multiple items","signature":"public Memcached::getDelayed(array $keys ,bool $with_cas ,callable $value_cb )","inheritdoc":0,"modifier":["public"],"return":""},"getDelayedByKey":{"params":{"$server_key":"","$keys":"","$with_cas":"","$value_cb":""},"docComment":"Request multiple items from a specific server","signature":"public Memcached::getDelayedByKey(string $server_key ,array $keys ,bool $with_cas ,callable $value_cb )","inheritdoc":0,"modifier":["public"],"return":""},"getMulti":{"params":{"$keys":"","&$cas_tokens":"","$flags":""},"docComment":"Retrieve multiple items","signature":"public Memcached::getMulti(array $keys ,array &$cas_tokens ,int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"getMultiByKey":{"params":{"$server_key":"","$keys":"","&$cas_tokens":"","$flags":""},"docComment":"Retrieve multiple items from a specific server","signature":"public Memcached::getMultiByKey(string $server_key ,array $keys ,string &$cas_tokens ,int $flags )","inheritdoc":0,"modifier":["public"],"return":""},"getOption":{"params":{"$option":""},"docComment":"Retrieve a Memcached option value","signature":"public Memcached::getOption(int $option )","inheritdoc":0,"modifier":["public"],"return":""},"getResultCode":{"params":[],"docComment":"Return the result code of the last operation","signature":"public Memcached::getResultCode( )","inheritdoc":0,"modifier":["public"],"return":""},"getResultMessage":{"params":[],"docComment":"Return the message describing the result of the last operation","signature":"public Memcached::getResultMessage( )","inheritdoc":0,"modifier":["public"],"return":""},"getServerByKey":{"params":{"$server_key":""},"docComment":"Map a key to a server","signature":"public Memcached::getServerByKey(string $server_key )","inheritdoc":0,"modifier":["public"],"return":""},"getServerList":{"params":[],"docComment":"Get the list of the servers in the pool","signature":"public Memcached::getServerList( )","inheritdoc":0,"modifier":["public"],"return":""},"getStats":{"params":[],"docComment":"Get server pool statistics","signature":"public Memcached::getStats( )","inheritdoc":0,"modifier":["public"],"return":""},"getVersion":{"params":[],"docComment":"Get server pool version info","signature":"public Memcached::getVersion( )","inheritdoc":0,"modifier":["public"],"return":""},"increment":{"params":{"$key":"","$offset":"","$initial_value":"","$expiry":""},"docComment":"Increment numeric item's value","signature":"public Memcached::increment(string $key ,[int $offset] ,[int $initial_value] ,[int $expiry] )","inheritdoc":0,"modifier":["public"],"return":""},"incrementByKey":{"params":{"$server_key":"","$key":"","$offset":"","$initial_value":"","$expiry":""},"docComment":"Increment numeric item's value, stored on a specific server","signature":"public Memcached::incrementByKey(string $server_key ,string $key ,[int $offset] ,[int $initial_value] ,[int $expiry] )","inheritdoc":0,"modifier":["public"],"return":""},"isPersistent":{"params":[],"docComment":"Check if a persitent connection to memcache is being used","signature":"public Memcached::isPersistent( )","inheritdoc":0,"modifier":["public"],"return":""},"isPristine":{"params":[],"docComment":"Check if the instance was recently created","signature":"public Memcached::isPristine( )","inheritdoc":0,"modifier":["public"],"return":""},"prepend":{"params":{"$key":"","$value":""},"docComment":"Prepend data to an existing item","signature":"public Memcached::prepend(string $key ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"prependByKey":{"params":{"$server_key":"","$key":"","$value":""},"docComment":"Prepend data to an existing item on a specific server","signature":"public Memcached::prependByKey(string $server_key ,string $key ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"quit":{"params":[],"docComment":"Close any open connections","signature":"public Memcached::quit( )","inheritdoc":0,"modifier":["public"],"return":""},"replace":{"params":{"$key":"","$value":"","$expiration":""},"docComment":"Replace the item under an existing key","signature":"public Memcached::replace(string $key ,mixed $value ,int $expiration )","inheritdoc":0,"modifier":["public"],"return":""},"replaceByKey":{"params":{"$server_key":"","$key":"","$value":"","$expiration":""},"docComment":"Replace the item under an existing key on a specific server","signature":"public Memcached::replaceByKey(string $server_key ,string $key ,mixed $value ,int $expiration )","inheritdoc":0,"modifier":["public"],"return":""},"resetServerList":{"params":[],"docComment":"Clears all servers from the server list","signature":"public Memcached::resetServerList( )","inheritdoc":0,"modifier":["public"],"return":""},"set":{"params":{"$key":"","$value":"","$expiration":""},"docComment":"Store an item","signature":"public Memcached::set(string $key ,mixed $value ,int $expiration )","inheritdoc":0,"modifier":["public"],"return":""},"setByKey":{"params":{"$server_key":"","$key":"","$value":"","$expiration":""},"docComment":"Store an item on a specific server","signature":"public Memcached::setByKey(string $server_key ,string $key ,mixed $value ,int $expiration )","inheritdoc":0,"modifier":["public"],"return":""},"setMulti":{"params":{"$items":"","$expiration":""},"docComment":"Store multiple items","signature":"public Memcached::setMulti(array $items ,int $expiration )","inheritdoc":0,"modifier":["public"],"return":""},"setMultiByKey":{"params":{"$server_key":"","$items":"","$expiration":""},"docComment":"Store multiple items on a specific server","signature":"public Memcached::setMultiByKey(string $server_key ,array $items ,int $expiration )","inheritdoc":0,"modifier":["public"],"return":""},"setOption":{"params":{"$option":"","$value":""},"docComment":"Set a Memcached option","signature":"public Memcached::setOption(int $option ,mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"setOptions":{"params":{"$options":""},"docComment":"Set Memcached options","signature":"public Memcached::setOptions(array $options )","inheritdoc":0,"modifier":["public"],"return":""},"setSaslAuthData":{"params":{"$username":"","$password":""},"docComment":"Set the credentials to use for authentication","signature":"public Memcached::setSaslAuthData(string $username ,string $password )","inheritdoc":0,"modifier":["public"],"return":""},"touch":{"params":{"$key":"","$expiration":""},"docComment":"Set a new expiration on an item","signature":"public Memcached::touch(string $key ,int $expiration )","inheritdoc":0,"modifier":["public"],"return":""},"touchByKey":{"params":{"$server_key":"","$key":"","$expiration":""},"docComment":"Set a new expiration on an item on a specific server","signature":"public Memcached::touchByKey(string $server_key ,string $key ,int $expiration )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MemcachedException":{"classname":"MemcachedException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFAction":{"classname":"SWFAction","docComment":"","methods":{"modifier":{"public":["__construct"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$script":""},"docComment":"Creates a new SWFAction","signature":"SWFAction::__construct(string $script )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFBitmap":{"classname":"SWFBitmap","docComment":"","methods":{"modifier":{"public":["__construct","getHeight","getWidth"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$file":"","$alphafile":""},"docComment":"Loads Bitmap object","signature":"SWFBitmap::__construct(mixed $file ,mixed $alphafile )","inheritdoc":0,"modifier":[],"return":""},"getHeight":{"params":[],"docComment":"Returns the bitmap's height","signature":"SWFBitmap::getHeight( )","inheritdoc":0,"modifier":[],"return":""},"getWidth":{"params":[],"docComment":"Returns the bitmap's width","signature":"SWFBitmap::getWidth( )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFButton":{"classname":"SWFButton","docComment":"","methods":{"modifier":{"public":["addAction","addASound","addShape","__construct","setAction","setDown","setHit","setMenu","setOver","setUp"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addAction":{"params":{"$action":"SWFAction","$flags":""},"docComment":"Adds an action","signature":"SWFButton::addAction(SWFAction $action ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"addASound":{"params":{"$sound":"SWFSound","$flags":""},"docComment":"Associates a sound with a button transition","signature":"SWFButton::addASound(SWFSound $sound ,int $flags )","inheritdoc":0,"modifier":[],"return":"SWFSoundInstance"},"addShape":{"params":{"$shape":"SWFShape","$flags":""},"docComment":"Adds a shape to a button","signature":"SWFButton::addShape(SWFShape $shape ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"__construct":{"params":[],"docComment":"Creates a new Button","signature":"SWFButton::__construct( )","inheritdoc":0,"modifier":[],"return":""},"setAction":{"params":{"$action":"SWFAction"},"docComment":"Sets the action","signature":"SWFButton::setAction(SWFAction $action )","inheritdoc":0,"modifier":[],"return":""},"setDown":{"params":[],"docComment":"","signature":"","inheritdoc":0,"modifier":[],"return":""},"setHit":{"params":[],"docComment":"","signature":"","inheritdoc":0,"modifier":[],"return":""},"setMenu":{"params":{"$flag":""},"docComment":"enable track as menu button behaviour","signature":"SWFButton::setMenu(int $flag )","inheritdoc":0,"modifier":[],"return":""},"setOver":{"params":[],"docComment":"","signature":"","inheritdoc":0,"modifier":[],"return":""},"setUp":{"params":[],"docComment":"","signature":"","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFDisplayItem":{"classname":"SWFDisplayItem","docComment":"","methods":{"modifier":{"public":["addAction","addColor","endMask","getRot","getX","getXScale","getXSkew","getY","getYScale","getYSkew","move","moveTo","multColor","remove","rotate","rotateTo","scale","scaleTo","setDepth","setMaskLevel","setMatrix","setName","setRatio","skewX","skewXTo","skewY","skewYTo"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addAction":{"params":{"$action":"SWFAction","$flags":""},"docComment":"Adds this SWFAction to the given SWFSprite instance","signature":"SWFDisplayItem::addAction(SWFAction $action ,int $flags )","inheritdoc":0,"modifier":[],"return":""},"addColor":{"params":{"$red":"","$green":"","$blue":"","$a":""},"docComment":"Adds the given color to this item's color transform","signature":"SWFDisplayItem::addColor(int $red ,int $green ,int $blue ,int $a )","inheritdoc":0,"modifier":[],"return":""},"endMask":{"params":[],"docComment":"Another way of defining a MASK layer","signature":"SWFDisplayItem::endMask( )","inheritdoc":0,"modifier":[],"return":""},"getRot":{"params":[],"docComment":"\n ","signature":"SWFDisplayItem::getRot( )","inheritdoc":0,"modifier":[],"return":""},"getX":{"params":[],"docComment":"\n ","signature":"SWFDisplayItem::getX( )","inheritdoc":0,"modifier":[],"return":""},"getXScale":{"params":[],"docComment":"\n ","signature":"SWFDisplayItem::getXScale( )","inheritdoc":0,"modifier":[],"return":""},"getXSkew":{"params":[],"docComment":"\n ","signature":"SWFDisplayItem::getXSkew( )","inheritdoc":0,"modifier":[],"return":""},"getY":{"params":[],"docComment":"\n ","signature":"SWFDisplayItem::getY( )","inheritdoc":0,"modifier":[],"return":""},"getYScale":{"params":[],"docComment":"\n ","signature":"SWFDisplayItem::getYScale( )","inheritdoc":0,"modifier":[],"return":""},"getYSkew":{"params":[],"docComment":"\n ","signature":"SWFDisplayItem::getYSkew( )","inheritdoc":0,"modifier":[],"return":""},"move":{"params":{"$dx":"","$dy":""},"docComment":"Moves object in relative coordinates","signature":"SWFDisplayItem::move(float $dx ,float $dy )","inheritdoc":0,"modifier":[],"return":""},"moveTo":{"params":{"$x":"","$y":""},"docComment":"Moves object in global coordinates","signature":"SWFDisplayItem::moveTo(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"multColor":{"params":{"$red":"","$green":"","$blue":"","$a":""},"docComment":"Multiplies the item's color transform","signature":"SWFDisplayItem::multColor(float $red ,float $green ,float $blue ,float $a )","inheritdoc":0,"modifier":[],"return":""},"remove":{"params":[],"docComment":"Removes the object from the movie","signature":"SWFDisplayItem::remove( )","inheritdoc":0,"modifier":[],"return":""},"rotate":{"params":{"$angle":""},"docComment":"Rotates in relative coordinates","signature":"SWFDisplayItem::rotate(float $angle )","inheritdoc":0,"modifier":[],"return":""},"rotateTo":{"params":{"$angle":""},"docComment":"Rotates the object in global coordinates","signature":"SWFDisplayItem::rotateTo(float $angle )","inheritdoc":0,"modifier":[],"return":""},"scale":{"params":{"$dx":"","$dy":""},"docComment":"Scales the object in relative coordinates","signature":"SWFDisplayItem::scale(float $dx ,float $dy )","inheritdoc":0,"modifier":[],"return":""},"scaleTo":{"params":{"$x":"","$y":""},"docComment":"Scales the object in global coordinates","signature":"SWFDisplayItem::scaleTo(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"setDepth":{"params":{"$depth":""},"docComment":"Sets z-order","signature":"SWFDisplayItem::setDepth(int $depth )","inheritdoc":0,"modifier":[],"return":""},"setMaskLevel":{"params":{"$level":""},"docComment":"Defines a MASK layer at level","signature":"SWFDisplayItem::setMaskLevel(int $level )","inheritdoc":0,"modifier":[],"return":""},"setMatrix":{"params":{"$a":"","$b":"","$c":"","$d":"","$x":"","$y":""},"docComment":"Sets the item's transform matrix","signature":"SWFDisplayItem::setMatrix(float $a ,float $b ,float $c ,float $d ,float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"setName":{"params":{"$name":""},"docComment":"Sets the object's name","signature":"SWFDisplayItem::setName(string $name )","inheritdoc":0,"modifier":[],"return":""},"setRatio":{"params":{"$ratio":""},"docComment":"Sets the object's ratio","signature":"SWFDisplayItem::setRatio(float $ratio )","inheritdoc":0,"modifier":[],"return":""},"skewX":{"params":{"$ddegrees":""},"docComment":"Sets the X-skew","signature":"SWFDisplayItem::skewX(float $ddegrees )","inheritdoc":0,"modifier":[],"return":""},"skewXTo":{"params":{"$degrees":""},"docComment":"Sets the X-skew","signature":"SWFDisplayItem::skewXTo(float $degrees )","inheritdoc":0,"modifier":[],"return":""},"skewY":{"params":{"$ddegrees":""},"docComment":"Sets the Y-skew","signature":"SWFDisplayItem::skewY(float $ddegrees )","inheritdoc":0,"modifier":[],"return":""},"skewYTo":{"params":{"$degrees":""},"docComment":"Sets the Y-skew","signature":"SWFDisplayItem::skewYTo(float $degrees )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFFill":{"classname":"SWFFill","docComment":"","methods":{"modifier":{"public":["moveTo","rotateTo","scaleTo","skewXTo","skewYTo"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","moveTo":{"params":{"$x":"","$y":""},"docComment":"Moves fill origin","signature":"SWFFill::moveTo(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"rotateTo":{"params":{"$angle":""},"docComment":"Sets fill's rotation","signature":"SWFFill::rotateTo(float $angle )","inheritdoc":0,"modifier":[],"return":""},"scaleTo":{"params":{"$x":"","$y":""},"docComment":"Sets fill's scale","signature":"SWFFill::scaleTo(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"skewXTo":{"params":{"$x":""},"docComment":"Sets fill x-skew","signature":"SWFFill::skewXTo(float $x )","inheritdoc":0,"modifier":[],"return":""},"skewYTo":{"params":{"$y":""},"docComment":"Sets fill y-skew","signature":"SWFFill::skewYTo(float $y )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFFont":{"classname":"SWFFont","docComment":"","methods":{"modifier":{"public":["__construct","getAscent","getDescent","getLeading","getShape","getUTF8Width","getWidth"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$filename":""},"docComment":"Loads a font definition","signature":"SWFFont::__construct(string $filename )","inheritdoc":0,"modifier":[],"return":""},"getAscent":{"params":[],"docComment":"Returns the ascent of the font, or 0 if not available","signature":"SWFFont::getAscent( )","inheritdoc":0,"modifier":[],"return":""},"getDescent":{"params":[],"docComment":"Returns the descent of the font, or 0 if not available","signature":"SWFFont::getDescent( )","inheritdoc":0,"modifier":[],"return":""},"getLeading":{"params":[],"docComment":"Returns the leading of the font, or 0 if not available","signature":"SWFFont::getLeading( )","inheritdoc":0,"modifier":[],"return":""},"getShape":{"params":{"$code":""},"docComment":"Returns the glyph shape of a char as a text string","signature":"SWFFont::getShape(int $code )","inheritdoc":0,"modifier":[],"return":""},"getUTF8Width":{"params":{"$string":""},"docComment":"Calculates the width of the given string in this font at full height","signature":"SWFFont::getUTF8Width(string $string )","inheritdoc":0,"modifier":[],"return":""},"getWidth":{"params":{"$string":""},"docComment":"Returns the string's width","signature":"SWFFont::getWidth(string $string )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFFontChar":{"classname":"SWFFontChar","docComment":"","methods":{"modifier":{"public":["addChars","addUTF8Chars"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addChars":{"params":{"$char":""},"docComment":"Adds characters to a font for exporting font","signature":"SWFFontChar::addChars(string $char )","inheritdoc":0,"modifier":[],"return":""},"addUTF8Chars":{"params":{"$char":""},"docComment":"Adds characters to a font for exporting font","signature":"SWFFontChar::addUTF8Chars(string $char )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFGradient":{"classname":"SWFGradient","docComment":"","methods":{"modifier":{"public":["addEntry","__construct"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addEntry":{"params":{"$ratio":"","$red":"","$green":"","$blue":"","$alpha":""},"docComment":"Adds an entry to the gradient list","signature":"SWFGradient::addEntry(float $ratio ,int $red ,int $green ,int $blue ,[int $alpha] )","inheritdoc":0,"modifier":[],"return":""},"__construct":{"params":[],"docComment":"Creates a gradient object","signature":"SWFGradient::__construct( )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFMorph":{"classname":"SWFMorph","docComment":"","methods":{"modifier":{"public":["__construct","getShape1","getShape2"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Creates a new SWFMorph object","signature":"SWFMorph::__construct( )","inheritdoc":0,"modifier":[],"return":""},"getShape1":{"params":[],"docComment":"Gets a handle to the starting shape","signature":"SWFMorph::getShape1( )","inheritdoc":0,"modifier":[],"return":"SWFShape"},"getShape2":{"params":[],"docComment":"Gets a handle to the ending shape","signature":"SWFMorph::getShape2( )","inheritdoc":0,"modifier":[],"return":"SWFShape"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFMovie":{"classname":"SWFMovie","docComment":"","methods":{"modifier":{"public":["add","addExport","addFont","__construct","importChar","importFont","labelFrame","nextFrame","output","remove","save","saveToFile","setbackground","setDimension","setFrames","setRate","startSound","stopSound","streamMP3","writeExports"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$instance":""},"docComment":"Adds any type of data to a movie","signature":"SWFMovie::add(object $instance )","inheritdoc":0,"modifier":[],"return":""},"addExport":{"params":{"$char":"","$name":""},"docComment":"\n ","signature":"SWFMovie::addExport( $char ,string $name )","inheritdoc":0,"modifier":[],"return":""},"addFont":{"params":{"$font":"SWFFont"},"docComment":"\n ","signature":"SWFMovie::addFont(SWFFont $font )","inheritdoc":0,"modifier":[],"return":""},"__construct":{"params":{"$version":""},"docComment":"Creates a new movie object, representing an SWF version 4 movie","signature":"SWFMovie::__construct(int $version )","inheritdoc":0,"modifier":[],"return":""},"importChar":{"params":{"$libswf":"","$name":""},"docComment":"\n ","signature":"SWFMovie::importChar(string $libswf ,string $name )","inheritdoc":0,"modifier":[],"return":"SWFSprite"},"importFont":{"params":{"$libswf":"","$name":""},"docComment":"\n ","signature":"SWFMovie::importFont(string $libswf ,string $name )","inheritdoc":0,"modifier":[],"return":"SWFFontChar"},"labelFrame":{"params":{"$label":""},"docComment":"Labels a frame","signature":"SWFMovie::labelFrame(string $label )","inheritdoc":0,"modifier":[],"return":""},"nextFrame":{"params":[],"docComment":"Moves to the next frame of the animation","signature":"SWFMovie::nextFrame( )","inheritdoc":0,"modifier":[],"return":""},"output":{"params":{"$compression":""},"docComment":"Dumps your lovingly prepared movie out","signature":"SWFMovie::output(int $compression )","inheritdoc":0,"modifier":[],"return":""},"remove":{"params":{"$instance":""},"docComment":"Removes the object instance from the display list","signature":"SWFMovie::remove(object $instance )","inheritdoc":0,"modifier":[],"return":""},"save":{"params":{"$filename":"","$compression":""},"docComment":"Saves the SWF movie in a file","signature":"SWFMovie::save(string $filename ,[int $compression] )","inheritdoc":0,"modifier":[],"return":""},"saveToFile":{"params":{"$x":"","$compression":""},"docComment":"\n ","signature":"SWFMovie::saveToFile(resource $x ,[int $compression] )","inheritdoc":0,"modifier":[],"return":""},"setbackground":{"params":{"$red":"","$green":"","$blue":""},"docComment":"Sets the background color","signature":"SWFMovie::setbackground(int $red ,int $green ,int $blue )","inheritdoc":0,"modifier":[],"return":""},"setDimension":{"params":{"$width":"","$height":""},"docComment":"Sets the movie's width and height","signature":"SWFMovie::setDimension(float $width ,float $height )","inheritdoc":0,"modifier":[],"return":""},"setFrames":{"params":{"$number":""},"docComment":"Sets the total number of frames in the animation","signature":"SWFMovie::setFrames(int $number )","inheritdoc":0,"modifier":[],"return":""},"setRate":{"params":{"$rate":""},"docComment":"Sets the animation's frame rate","signature":"SWFMovie::setRate(float $rate )","inheritdoc":0,"modifier":[],"return":""},"startSound":{"params":{"$sound":"SWFSound"},"docComment":"\n ","signature":"SWFMovie::startSound(SWFSound $sound )","inheritdoc":0,"modifier":[],"return":"SWFSoundInstance"},"stopSound":{"params":{"$sound":"SWFSound"},"docComment":"\n ","signature":"SWFMovie::stopSound(SWFSound $sound )","inheritdoc":0,"modifier":[],"return":""},"streamMP3":{"params":{"$mp3file":"","$skip":""},"docComment":"Streams a MP3 file","signature":"SWFMovie::streamMP3(mixed $mp3file ,[float $skip] )","inheritdoc":0,"modifier":[],"return":""},"writeExports":{"params":[],"docComment":"\n ","signature":"SWFMovie::writeExports( )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFPrebuiltClip":{"classname":"SWFPrebuiltClip","docComment":"","methods":{"modifier":{"public":["__construct"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$file":""},"docComment":"Returns a SWFPrebuiltClip object","signature":"SWFPrebuiltClip::__construct(mixed $file )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFShape":{"classname":"SWFShape","docComment":"","methods":{"modifier":{"public":["addFill","__construct","drawArc","drawCircle","drawCubic","drawCubicTo","drawCurve","drawCurveTo","drawGlyph","drawLine","drawLineTo","movePen","movePenTo","setLeftFill","setLine","setRightFill"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addFill":{"params":{"$red":"","$green":"","$blue":"","$alpha":"","$bitmap":"SWFBitmap","$flags":"","$gradient":"SWFGradient"},"docComment":"Adds a solid fill to the shape","signature":"addFill(SWFGradient $gradient ,int $flags )","inheritdoc":0,"modifier":[],"return":"SWFFill"},"__construct":{"params":[],"docComment":"Creates a new shape object","signature":"SWFShape::__construct( )","inheritdoc":0,"modifier":[],"return":""},"drawArc":{"params":{"$r":"","$startAngle":"","$endAngle":""},"docComment":"Draws an arc of radius r centered at the current location, from angle startAngle to angle endAngle measured clockwise from 12 o'clock","signature":"SWFShape::drawArc(float $r ,float $startAngle ,float $endAngle )","inheritdoc":0,"modifier":[],"return":""},"drawCircle":{"params":{"$r":""},"docComment":"Draws a circle of radius r centered at the current location, in a counter-clockwise fashion","signature":"SWFShape::drawCircle(float $r )","inheritdoc":0,"modifier":[],"return":""},"drawCubic":{"params":{"$bx":"","$by":"","$cx":"","$cy":"","$dx":"","$dy":""},"docComment":"Draws a cubic bezier curve using the current position and the three given points as control points","signature":"SWFShape::drawCubic(float $bx ,float $by ,float $cx ,float $cy ,float $dx ,float $dy )","inheritdoc":0,"modifier":[],"return":""},"drawCubicTo":{"params":{"$bx":"","$by":"","$cx":"","$cy":"","$dx":"","$dy":""},"docComment":"Draws a cubic bezier curve using the current position and the three given points as control points","signature":"SWFShape::drawCubicTo(float $bx ,float $by ,float $cx ,float $cy ,float $dx ,float $dy )","inheritdoc":0,"modifier":[],"return":""},"drawCurve":{"params":{"$controldx":"","$controldy":"","$anchordx":"","$anchordy":"","$targetdx":"","$targetdy":""},"docComment":"Draws a curve (relative)","signature":"SWFShape::drawCurve(float $controldx ,float $controldy ,float $anchordx ,float $anchordy ,float $targetdx ,float $targetdy )","inheritdoc":0,"modifier":[],"return":""},"drawCurveTo":{"params":{"$controlx":"","$controly":"","$anchorx":"","$anchory":"","$targetx":"","$targety":""},"docComment":"Draws a curve","signature":"SWFShape::drawCurveTo(float $controlx ,float $controly ,float $anchorx ,float $anchory ,float $targetx ,float $targety )","inheritdoc":0,"modifier":[],"return":""},"drawGlyph":{"params":{"$font":"SWFFont","$character":"","$size":""},"docComment":"Draws the first character in the given string into the shape using the glyph definition from the given font","signature":"SWFShape::drawGlyph(SWFFont $font ,string $character ,int $size )","inheritdoc":0,"modifier":[],"return":""},"drawLine":{"params":{"$dx":"","$dy":""},"docComment":"Draws a line (relative)","signature":"SWFShape::drawLine(float $dx ,float $dy )","inheritdoc":0,"modifier":[],"return":""},"drawLineTo":{"params":{"$x":"","$y":""},"docComment":"Draws a line","signature":"SWFShape::drawLineTo(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"movePen":{"params":{"$dx":"","$dy":""},"docComment":"Moves the shape's pen (relative)","signature":"SWFShape::movePen(float $dx ,float $dy )","inheritdoc":0,"modifier":[],"return":""},"movePenTo":{"params":{"$x":"","$y":""},"docComment":"Moves the shape's pen","signature":"SWFShape::movePenTo(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"setLeftFill":{"params":{"$fill":"SWFGradient","$red":"","$green":"","$blue":"","$a":""},"docComment":"Sets left rasterizing color","signature":"setLeftFill(int $red ,int $green ,int $blue ,int $a )","inheritdoc":0,"modifier":[],"return":""},"setLine":{"params":{"$shape":"SWFShape","$width":"","$red":"","$green":"","$blue":"","$a":""},"docComment":"Sets the shape's line style","signature":"setLine(int $width ,int $red ,int $green ,int $blue ,int $a )","inheritdoc":0,"modifier":[],"return":""},"setRightFill":{"params":{"$fill":"SWFGradient","$red":"","$green":"","$blue":"","$a":""},"docComment":"Sets right rasterizing color","signature":"setRightFill(int $red ,int $green ,int $blue ,int $a )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFSound":{"classname":"SWFSound","docComment":"","methods":{"modifier":{"public":["__construct"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$filename":"","$flags":""},"docComment":"Returns a new SWFSound object from given file","signature":"SWFSound::__construct(string $filename ,[int $flags] )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFSoundInstance":{"classname":"SWFSoundInstance","docComment":"","methods":{"modifier":{"public":["loopCount","loopInPoint","loopOutPoint","noMultiple"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","loopCount":{"params":{"$point":""},"docComment":"\n ","signature":"SWFSoundInstance::loopCount(int $point )","inheritdoc":0,"modifier":[],"return":""},"loopInPoint":{"params":{"$point":""},"docComment":"\n ","signature":"SWFSoundInstance::loopInPoint(int $point )","inheritdoc":0,"modifier":[],"return":""},"loopOutPoint":{"params":{"$point":""},"docComment":"\n ","signature":"SWFSoundInstance::loopOutPoint(int $point )","inheritdoc":0,"modifier":[],"return":""},"noMultiple":{"params":[],"docComment":"\n ","signature":"SWFSoundInstance::noMultiple( )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFSprite":{"classname":"SWFSprite","docComment":"","methods":{"modifier":{"public":["add","__construct","labelFrame","nextFrame","remove","setFrames","startSound","stopSound"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$object":""},"docComment":"Adds an object to a sprite","signature":"SWFSprite::add(object $object )","inheritdoc":0,"modifier":[],"return":""},"__construct":{"params":[],"docComment":"Creates a movie clip (a sprite)","signature":"SWFSprite::__construct( )","inheritdoc":0,"modifier":[],"return":""},"labelFrame":{"params":{"$label":""},"docComment":"Labels frame","signature":"SWFSprite::labelFrame(string $label )","inheritdoc":0,"modifier":[],"return":""},"nextFrame":{"params":[],"docComment":"Moves to the next frame of the animation","signature":"SWFSprite::nextFrame( )","inheritdoc":0,"modifier":[],"return":""},"remove":{"params":{"$object":""},"docComment":"Removes an object to a sprite","signature":"SWFSprite::remove(object $object )","inheritdoc":0,"modifier":[],"return":""},"setFrames":{"params":{"$number":""},"docComment":"Sets the total number of frames in the animation","signature":"SWFSprite::setFrames(int $number )","inheritdoc":0,"modifier":[],"return":""},"startSound":{"params":{"$sount":"SWFSound"},"docComment":"\n ","signature":"SWFSprite::startSound(SWFSound $sount )","inheritdoc":0,"modifier":[],"return":"SWFSoundInstance"},"stopSound":{"params":{"$sount":"SWFSound"},"docComment":"\n ","signature":"SWFSprite::stopSound(SWFSound $sount )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFText":{"classname":"SWFText","docComment":"","methods":{"modifier":{"public":["addString","addUTF8String","__construct","getAscent","getDescent","getLeading","getUTF8Width","getWidth","moveTo","setColor","setFont","setHeight","setSpacing"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addString":{"params":{"$string":""},"docComment":"Draws a string","signature":"SWFText::addString(string $string )","inheritdoc":0,"modifier":[],"return":""},"addUTF8String":{"params":{"$text":""},"docComment":"Writes the given text into this SWFText object at the current pen position,\n using the current font, height, spacing, and color","signature":"SWFText::addUTF8String(string $text )","inheritdoc":0,"modifier":[],"return":""},"__construct":{"params":[],"docComment":"Creates a new SWFText object","signature":"SWFText::__construct( )","inheritdoc":0,"modifier":[],"return":""},"getAscent":{"params":[],"docComment":"Returns the ascent of the current font at its current size, or 0 if not available","signature":"SWFText::getAscent( )","inheritdoc":0,"modifier":[],"return":""},"getDescent":{"params":[],"docComment":"Returns the descent of the current font at its current size, or 0 if not available","signature":"SWFText::getDescent( )","inheritdoc":0,"modifier":[],"return":""},"getLeading":{"params":[],"docComment":"Returns the leading of the current font at its current size, or 0 if not available","signature":"SWFText::getLeading( )","inheritdoc":0,"modifier":[],"return":""},"getUTF8Width":{"params":{"$string":""},"docComment":"calculates the width of the given string in this text objects current font and size","signature":"SWFText::getUTF8Width(string $string )","inheritdoc":0,"modifier":[],"return":""},"getWidth":{"params":{"$string":""},"docComment":"Computes string's width","signature":"SWFText::getWidth(string $string )","inheritdoc":0,"modifier":[],"return":""},"moveTo":{"params":{"$x":"","$y":""},"docComment":"Moves the pen","signature":"SWFText::moveTo(float $x ,float $y )","inheritdoc":0,"modifier":[],"return":""},"setColor":{"params":{"$red":"","$green":"","$blue":"","$a":""},"docComment":"Sets the current text color","signature":"SWFText::setColor(int $red ,int $green ,int $blue ,[int $a] )","inheritdoc":0,"modifier":[],"return":""},"setFont":{"params":{"$font":"SWFFont"},"docComment":"Sets the current font","signature":"SWFText::setFont(SWFFont $font )","inheritdoc":0,"modifier":[],"return":""},"setHeight":{"params":{"$height":""},"docComment":"Sets the current font height","signature":"SWFText::setHeight(float $height )","inheritdoc":0,"modifier":[],"return":""},"setSpacing":{"params":{"$spacing":""},"docComment":"Sets the current font spacing","signature":"SWFText::setSpacing(float $spacing )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFTextField":{"classname":"SWFTextField","docComment":"","methods":{"modifier":{"public":["addChars","addString","align","__construct","setBounds","setColor","setFont","setHeight","setIndentation","setLeftMargin","setLineSpacing","setMargins","setName","setPadding","setRightMargin"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addChars":{"params":{"$chars":""},"docComment":"adds characters to a font that will be available within a textfield","signature":"SWFTextField::addChars(string $chars )","inheritdoc":0,"modifier":[],"return":""},"addString":{"params":{"$string":""},"docComment":"Concatenates the given string to the text field","signature":"SWFTextField::addString(string $string )","inheritdoc":0,"modifier":[],"return":""},"align":{"params":{"$alignement":""},"docComment":"Sets the text field alignment","signature":"SWFTextField::align(int $alignement )","inheritdoc":0,"modifier":[],"return":""},"__construct":{"params":{"$flags":""},"docComment":"Creates a text field object","signature":"SWFTextField::__construct(int $flags )","inheritdoc":0,"modifier":[],"return":""},"setBounds":{"params":{"$width":"","$height":""},"docComment":"Sets the text field width and height","signature":"SWFTextField::setBounds(float $width ,float $height )","inheritdoc":0,"modifier":[],"return":""},"setColor":{"params":{"$red":"","$green":"","$blue":"","$a":""},"docComment":"Sets the color of the text field","signature":"SWFTextField::setColor(int $red ,int $green ,int $blue ,[int $a] )","inheritdoc":0,"modifier":[],"return":""},"setFont":{"params":{"$font":"SWFFont"},"docComment":"Sets the text field font","signature":"SWFTextField::setFont(SWFFont $font )","inheritdoc":0,"modifier":[],"return":""},"setHeight":{"params":{"$height":""},"docComment":"Sets the font height of this text field font","signature":"SWFTextField::setHeight(float $height )","inheritdoc":0,"modifier":[],"return":""},"setIndentation":{"params":{"$width":""},"docComment":"Sets the indentation of the first line","signature":"SWFTextField::setIndentation(float $width )","inheritdoc":0,"modifier":[],"return":""},"setLeftMargin":{"params":{"$width":""},"docComment":"Sets the left margin width of the text field","signature":"SWFTextField::setLeftMargin(float $width )","inheritdoc":0,"modifier":[],"return":""},"setLineSpacing":{"params":{"$height":""},"docComment":"Sets the line spacing of the text field","signature":"SWFTextField::setLineSpacing(float $height )","inheritdoc":0,"modifier":[],"return":""},"setMargins":{"params":{"$left":"","$right":""},"docComment":"Sets the margins width of the text field","signature":"SWFTextField::setMargins(float $left ,float $right )","inheritdoc":0,"modifier":[],"return":""},"setName":{"params":{"$name":""},"docComment":"Sets the variable name","signature":"SWFTextField::setName(string $name )","inheritdoc":0,"modifier":[],"return":""},"setPadding":{"params":{"$padding":""},"docComment":"Sets the padding of this textfield","signature":"SWFTextField::setPadding(float $padding )","inheritdoc":0,"modifier":[],"return":""},"setRightMargin":{"params":{"$width":""},"docComment":"Sets the right margin width of the text field","signature":"SWFTextField::setRightMargin(float $width )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SWFVideoStream":{"classname":"SWFVideoStream","docComment":"","methods":{"modifier":{"public":["__construct","getNumFrames","setDimension"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$file":""},"docComment":"Returns a SWFVideoStream object","signature":"SWFVideoStream::__construct(string $file )","inheritdoc":0,"modifier":[],"return":""},"getNumFrames":{"params":[],"docComment":"Returns the number of frames in the video","signature":"SWFVideoStream::getNumFrames( )","inheritdoc":0,"modifier":[],"return":""},"setDimension":{"params":{"$x":"","$y":""},"docComment":"Sets video dimension","signature":"SWFVideoStream::setDimension(int $x ,int $y )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoClient":{"classname":"MongoClient","docComment":"","methods":{"modifier":{"public":["close","connect","dropDB","__get","getConnections","getHosts","getReadPreference","killCursor","listDBs","selectCollection","selectDB","setReadPreference","__toString"],"private":[],"protected":[],"final":[],"static":["getConnections"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","close":{"params":{"$connection":""},"docComment":"Closes this connection","signature":"public MongoClient::close( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"connect":{"params":[],"docComment":"Connects to a database server","signature":"public MongoClient::connect( )","inheritdoc":0,"modifier":["public"],"return":""},"dropDB":{"params":{"$db":""},"docComment":"Drops a database [deprecated]","signature":"public MongoClient::dropDB(mixed $db )","inheritdoc":0,"modifier":["public"],"return":""},"__get":{"params":{"$dbname":""},"docComment":"Gets a database","signature":"public MongoClient::__get(string $dbname )","inheritdoc":0,"modifier":["public"],"return":"MongoDB"},"getConnections":{"params":[],"docComment":"Return info about all open connections","signature":"static MongoClient::getConnections( )","inheritdoc":0,"modifier":["public","static"],"return":""},"getHosts":{"params":[],"docComment":"Updates status for all associated hosts","signature":"public MongoClient::getHosts( )","inheritdoc":0,"modifier":["public"],"return":""},"getReadPreference":{"params":[],"docComment":"Get the read preference for this connection","signature":"public MongoClient::getReadPreference( )","inheritdoc":0,"modifier":["public"],"return":""},"killCursor":{"params":{"$server_hash":"","$id":""},"docComment":"Kills a specific cursor on the server","signature":"public MongoClient::killCursor(string $server_hash , $id )","inheritdoc":0,"modifier":["public"],"return":""},"listDBs":{"params":[],"docComment":"Lists all of the databases available.","signature":"public MongoClient::listDBs( )","inheritdoc":0,"modifier":["public"],"return":""},"selectCollection":{"params":{"$db":"","$collection":""},"docComment":"Gets a database collection","signature":"public MongoClient::selectCollection(string $db ,string $collection )","inheritdoc":0,"modifier":["public"],"return":"MongoCollection"},"selectDB":{"params":{"$name":""},"docComment":"Gets a database","signature":"public MongoClient::selectDB(string $name )","inheritdoc":0,"modifier":["public"],"return":"MongoDB"},"setReadPreference":{"params":{"$read_preference":"","$tags":""},"docComment":"Set the read preference for this connection","signature":"public MongoClient::setReadPreference(string $read_preference ,array $tags )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"String representation of this connection","signature":"public MongoClient::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["connected","status"],"private":[],"protected":["server","persistent"],"final":[],"static":[],"interface":[],"abstract":[],"const":["VERSION","DEFAULT_HOST","DEFAULT_PORT","RP_PRIMARY","RP_PRIMARY_PREFERRED","RP_SECONDARY","RP_SECONDARY_PREFERRED","RP_NEAREST"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","VERSION":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DEFAULT_HOST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DEFAULT_PORT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RP_PRIMARY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RP_PRIMARY_PREFERRED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RP_SECONDARY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RP_SECONDARY_PREFERRED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RP_NEAREST":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"connected":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"status":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"server":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"persistent":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoDB":{"classname":"MongoDB","docComment":"","methods":{"modifier":{"public":["authenticate","command","__construct","createCollection","createDBRef","drop","dropCollection","execute","forceError","__get","getCollectionNames","getDBRef","getGridFS","getProfilingLevel","getReadPreference","getSlaveOkay","lastError","listCollections","prevError","repair","resetError","selectCollection","setProfilingLevel","setReadPreference","setSlaveOkay","__toString"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","authenticate":{"params":{"$username":"","$password":""},"docComment":"Log in to this database","signature":"public MongoDB::authenticate(string $username ,string $password )","inheritdoc":0,"modifier":["public"],"return":""},"command":{"params":{"$command":"","$options":""},"docComment":"Execute a database command","signature":"public MongoDB::command(array $command ,[array $options] )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$conn":"MongoClient","$name":""},"docComment":"Creates a new database","signature":"public MongoDB::__construct(MongoClient $conn ,string $name )","inheritdoc":0,"modifier":["public"],"return":""},"createCollection":{"params":{"$name":"","$options":""},"docComment":"Creates a collection","signature":"public MongoDB::createCollection(string $name ,array $options )","inheritdoc":0,"modifier":["public"],"return":"MongoCollection"},"createDBRef":{"params":{"$collection":"","$document_or_id":""},"docComment":"Creates a database reference","signature":"public MongoDB::createDBRef(string $collection ,mixed $document_or_id )","inheritdoc":0,"modifier":["public"],"return":""},"drop":{"params":[],"docComment":"Drops this database","signature":"public MongoDB::drop( )","inheritdoc":0,"modifier":["public"],"return":""},"dropCollection":{"params":{"$coll":""},"docComment":"Drops a collection [deprecated]","signature":"public MongoDB::dropCollection(mixed $coll )","inheritdoc":0,"modifier":["public"],"return":""},"execute":{"params":{"$code":"","$args":""},"docComment":"Runs JavaScript code on the database server.","signature":"public MongoDB::execute(mixed $code ,[array $args] )","inheritdoc":0,"modifier":["public"],"return":""},"forceError":{"params":[],"docComment":"Creates a database error","signature":"public MongoDB::forceError( )","inheritdoc":0,"modifier":["public"],"return":""},"__get":{"params":{"$name":""},"docComment":"Gets a collection","signature":"public MongoDB::__get(string $name )","inheritdoc":0,"modifier":["public"],"return":"MongoCollection"},"getCollectionNames":{"params":{"$includeSystemCollections":""},"docComment":"Get all collections from this database","signature":"public MongoDB::getCollectionNames([bool $includeSystemCollections] )","inheritdoc":0,"modifier":["public"],"return":""},"getDBRef":{"params":{"$ref":""},"docComment":"Fetches the document pointed to by a database reference","signature":"public MongoDB::getDBRef(array $ref )","inheritdoc":0,"modifier":["public"],"return":""},"getGridFS":{"params":{"$prefix":""},"docComment":"Fetches toolkit for dealing with files stored in this database","signature":"public MongoDB::getGridFS([string $prefix] )","inheritdoc":0,"modifier":["public"],"return":"MongoGridFS"},"getProfilingLevel":{"params":[],"docComment":"Gets this database's profiling level","signature":"public MongoDB::getProfilingLevel( )","inheritdoc":0,"modifier":["public"],"return":""},"getReadPreference":{"params":[],"docComment":"Get the read preference for this database","signature":"public MongoDB::getReadPreference( )","inheritdoc":0,"modifier":["public"],"return":""},"getSlaveOkay":{"params":[],"docComment":"Get slaveOkay setting for this database","signature":"public MongoDB::getSlaveOkay( )","inheritdoc":0,"modifier":["public"],"return":""},"lastError":{"params":[],"docComment":"Check if there was an error on the most recent db operation performed","signature":"public MongoDB::lastError( )","inheritdoc":0,"modifier":["public"],"return":""},"listCollections":{"params":{"$includeSystemCollections":""},"docComment":"Gets an array of all MongoCollections for this database","signature":"public MongoDB::listCollections([bool $includeSystemCollections] )","inheritdoc":0,"modifier":["public"],"return":""},"prevError":{"params":[],"docComment":"Checks for the last error thrown during a database operation","signature":"public MongoDB::prevError( )","inheritdoc":0,"modifier":["public"],"return":""},"repair":{"params":{"$preserve_cloned_files":"","$backup_original_files":""},"docComment":"Repairs and compacts this database","signature":"public MongoDB::repair([bool $preserve_cloned_files] ,[bool $backup_original_files] )","inheritdoc":0,"modifier":["public"],"return":""},"resetError":{"params":[],"docComment":"Clears any flagged errors on the database","signature":"public MongoDB::resetError( )","inheritdoc":0,"modifier":["public"],"return":""},"selectCollection":{"params":{"$name":""},"docComment":"Gets a collection","signature":"public MongoDB::selectCollection(string $name )","inheritdoc":0,"modifier":["public"],"return":"MongoCollection"},"setProfilingLevel":{"params":{"$level":""},"docComment":"Sets this database's profiling level","signature":"public MongoDB::setProfilingLevel(int $level )","inheritdoc":0,"modifier":["public"],"return":""},"setReadPreference":{"params":{"$read_preference":"","$tags":""},"docComment":"Set the read preference for this database","signature":"public MongoDB::setReadPreference(string $read_preference ,array $tags )","inheritdoc":0,"modifier":["public"],"return":""},"setSlaveOkay":{"params":{"$ok":""},"docComment":"Change slaveOkay setting for this database","signature":"public MongoDB::setSlaveOkay([bool $ok] )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"The name of this database","signature":"public MongoDB::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["w","wtimeout"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["PROFILING_OFF","PROFILING_SLOW","PROFILING_ON"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","PROFILING_OFF":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PROFILING_SLOW":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PROFILING_ON":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"w":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"wtimeout":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoCollection":{"classname":"MongoCollection","docComment":"","methods":{"modifier":{"public":["aggregate","batchInsert","__construct","count","createDBRef","deleteIndex","deleteIndexes","distinct","drop","ensureIndex","find","findAndModify","findOne","__get","getDBRef","getIndexInfo","getName","getReadPreference","getSlaveOkay","group","insert","remove","save","setReadPreference","setSlaveOkay","__toString","update","validate"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"static protected":["toIndexString"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","aggregate":{"params":{"$pipeline":"","$op":"","$...":""},"docComment":"Perform an aggregation using the aggregation framework","signature":"public MongoCollection::aggregate(array $pipeline ,array $op ,array $... )","inheritdoc":0,"modifier":["public"],"return":""},"batchInsert":{"params":{"$a":"","$options":""},"docComment":"Inserts multiple documents into this collection","signature":"public MongoCollection::batchInsert(array $a ,[array $options] )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$db":"MongoDB","$name":""},"docComment":"Creates a new collection","signature":"public MongoCollection::__construct(MongoDB $db ,string $name )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":{"$query":"","$limit":"","$skip":""},"docComment":"Counts the number of documents in this collection","signature":"public MongoCollection::count([array $query] ,[int $limit] ,[int $skip] )","inheritdoc":0,"modifier":["public"],"return":""},"createDBRef":{"params":{"$document_or_id":""},"docComment":"Creates a database reference","signature":"public MongoCollection::createDBRef(mixed $document_or_id )","inheritdoc":0,"modifier":["public"],"return":""},"deleteIndex":{"params":{"$keys":""},"docComment":"Deletes an index from this collection","signature":"public MongoCollection::deleteIndex( $keys )","inheritdoc":0,"modifier":["public"],"return":""},"deleteIndexes":{"params":[],"docComment":"Delete all indices for this collection","signature":"public MongoCollection::deleteIndexes( )","inheritdoc":0,"modifier":["public"],"return":""},"distinct":{"params":{"$key":"","$query":""},"docComment":"Retrieve a list of distinct values for the given key across a collection.","signature":"public MongoCollection::distinct(string $key ,array $query )","inheritdoc":0,"modifier":["public"],"return":""},"drop":{"params":[],"docComment":"Drops this collection","signature":"public MongoCollection::drop( )","inheritdoc":0,"modifier":["public"],"return":""},"ensureIndex":{"params":{"$key|keys":"","$options":""},"docComment":"\n   Creates an index on the given field(s), or does nothing if the index \n   already exists\n  ","signature":"public MongoCollection::ensureIndex( $key|keys ,[array $options] )","inheritdoc":0,"modifier":["public"],"return":""},"find":{"params":{"$query":"","$fields":""},"docComment":"Querys this collection, returning a \n  for the result set","signature":"public MongoCollection::find([array $query] ,[array $fields] )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"findAndModify":{"params":{"$query":"","$update":"","$fields":"","$options":""},"docComment":"Update a document and return it","signature":"public MongoCollection::findAndModify(array $query ,array $update ,array $fields ,array $options )","inheritdoc":0,"modifier":["public"],"return":""},"findOne":{"params":{"$query":"","$fields":""},"docComment":"Querys this collection, returning a single element","signature":"public MongoCollection::findOne([array $query] ,[array $fields] )","inheritdoc":0,"modifier":["public"],"return":""},"__get":{"params":{"$name":""},"docComment":"Gets a collection","signature":"public MongoCollection::__get(string $name )","inheritdoc":0,"modifier":["public"],"return":"MongoCollection"},"getDBRef":{"params":{"$ref":""},"docComment":"Fetches the document pointed to by a database reference","signature":"public MongoCollection::getDBRef(array $ref )","inheritdoc":0,"modifier":["public"],"return":""},"getIndexInfo":{"params":[],"docComment":"Returns information about indexes on this collection","signature":"public MongoCollection::getIndexInfo( )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":[],"docComment":"Returns this collection's name","signature":"public MongoCollection::getName( )","inheritdoc":0,"modifier":["public"],"return":""},"getReadPreference":{"params":[],"docComment":"Get the read preference for this collection","signature":"public MongoCollection::getReadPreference( )","inheritdoc":0,"modifier":["public"],"return":""},"getSlaveOkay":{"params":[],"docComment":"Get slaveOkay setting for this collection","signature":"public MongoCollection::getSlaveOkay( )","inheritdoc":0,"modifier":["public"],"return":""},"group":{"params":{"$keys":"","$initial":"","$reduce":"MongoCode","$options":""},"docComment":"Performs an operation similar to SQL's GROUP BY command","signature":"public MongoCollection::group(mixed $keys ,array $initial ,MongoCode $reduce ,[array $options] )","inheritdoc":0,"modifier":["public"],"return":""},"insert":{"params":{"$a":"","$options":""},"docComment":"Inserts a document into the collection","signature":"public MongoCollection::insert( $a ,[array $options] )","inheritdoc":0,"modifier":["public"],"return":""},"remove":{"params":{"$criteria":"","$options":""},"docComment":"Remove records from this collection","signature":"public MongoCollection::remove([array $criteria] ,[array $options] )","inheritdoc":0,"modifier":["public"],"return":""},"save":{"params":{"$a":"","$options":""},"docComment":"Saves a document to this collection","signature":"public MongoCollection::save( $a ,[array $options] )","inheritdoc":0,"modifier":["public"],"return":""},"setReadPreference":{"params":{"$read_preference":"","$tags":""},"docComment":"Set the read preference for this collection","signature":"public MongoCollection::setReadPreference(string $read_preference ,array $tags )","inheritdoc":0,"modifier":["public"],"return":""},"setSlaveOkay":{"params":{"$ok":""},"docComment":"Change slaveOkay setting for this collection","signature":"public MongoCollection::setSlaveOkay([bool $ok] )","inheritdoc":0,"modifier":["public"],"return":""},"toIndexString":{"params":{"$keys":""},"docComment":"Converts keys specifying an index to its identifying string","signature":"static protected MongoCollection::toIndexString(mixed $keys )","inheritdoc":0,"modifier":["static protected"],"return":""},"__toString":{"params":[],"docComment":"String representation of this collection","signature":"public MongoCollection::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"update":{"params":{"$criteria":"","$new_object":"","$options":""},"docComment":"Update records based on a given criteria","signature":"public MongoCollection::update(array $criteria ,array $new_object ,[array $options] )","inheritdoc":0,"modifier":["public"],"return":""},"validate":{"params":{"$scan_data":""},"docComment":"Validates this collection","signature":"public MongoCollection::validate([bool $scan_data] )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["db","w","wtimeout"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["ASCENDING","DESCENDING"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","ASCENDING":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DESCENDING":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"db":{"type":"MongoDB","Inheritdoc":0,"docComment":"","modifier":["public"]},"w":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"wtimeout":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoCursor":{"classname":"MongoCursor","docComment":"","methods":{"modifier":{"public":["addOption","awaitData","batchSize","__construct","count","current","dead","explain","fields","getNext","getReadPreference","hasNext","hint","immortal","info","key","limit","next","partial","reset","rewind","setFlag","setReadPreference","skip","slaveOkay","snapshot","sort","tailable","timeout","valid"],"private":[],"protected":["doQuery"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addOption":{"params":{"$key":"","$value":""},"docComment":"Adds a top-level key\/value pair to a query","signature":"public MongoCursor::addOption(string $key ,mixed $value )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"awaitData":{"params":{"$wait":""},"docComment":"Sets whether this cursor will wait for a while for a tailable cursor to return more data","signature":"public MongoCursor::awaitData([bool $wait] )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"batchSize":{"params":{"$batchSize":""},"docComment":"Limits the number of elements returned in one batch.","signature":"public MongoCursor::batchSize(int $batchSize )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"__construct":{"params":{"$connection":"MongoClient","$ns":"","$query":"","$fields":""},"docComment":"Create a new cursor","signature":"public MongoCursor::__construct(MongoClient $connection ,string $ns ,[array $query] ,[array $fields] )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":{"$foundOnly":""},"docComment":"Counts the number of results for this query","signature":"public MongoCursor::count([bool $foundOnly] )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Returns the current element","signature":"public MongoCursor::current( )","inheritdoc":0,"modifier":["public"],"return":""},"dead":{"params":[],"docComment":"Checks if there are documents that have not been sent yet from the database for this cursor","signature":"public MongoCursor::dead( )","inheritdoc":0,"modifier":["public"],"return":""},"doQuery":{"params":[],"docComment":"Execute the query.","signature":"protected MongoCursor::doQuery( )","inheritdoc":0,"modifier":["protected"],"return":""},"explain":{"params":[],"docComment":"Return an explanation of the query, often useful for optimization and debugging","signature":"public MongoCursor::explain( )","inheritdoc":0,"modifier":["public"],"return":""},"fields":{"params":{"$f":""},"docComment":"Sets the fields for a query","signature":"public MongoCursor::fields(array $f )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"getNext":{"params":[],"docComment":"Return the next object to which this cursor points, and advance the cursor","signature":"public MongoCursor::getNext( )","inheritdoc":0,"modifier":["public"],"return":""},"getReadPreference":{"params":[],"docComment":"Get the read preference for this query","signature":"public MongoCursor::getReadPreference( )","inheritdoc":0,"modifier":["public"],"return":""},"hasNext":{"params":[],"docComment":"Checks if there are any more elements in this cursor","signature":"public MongoCursor::hasNext( )","inheritdoc":0,"modifier":["public"],"return":""},"hint":{"params":{"$index":""},"docComment":"Gives the database a hint about the query","signature":"public MongoCursor::hint(mixed $index )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"immortal":{"params":{"$liveForever":""},"docComment":"Sets whether this cursor will timeout","signature":"public MongoCursor::immortal([bool $liveForever] )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"info":{"params":[],"docComment":"Gets the query, fields, limit, and skip for this cursor","signature":"public MongoCursor::info( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Returns the current result's _id","signature":"public MongoCursor::key( )","inheritdoc":0,"modifier":["public"],"return":""},"limit":{"params":{"$num":""},"docComment":"Limits the number of results returned","signature":"public MongoCursor::limit(int $num )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"next":{"params":[],"docComment":"Advances the cursor to the next result","signature":"public MongoCursor::next( )","inheritdoc":0,"modifier":["public"],"return":""},"partial":{"params":{"$okay":""},"docComment":"If this query should fetch partial results from  if a shard is down","signature":"public MongoCursor::partial([bool $okay] )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"reset":{"params":[],"docComment":"Clears the cursor","signature":"public MongoCursor::reset( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Returns the cursor to the beginning of the result set","signature":"public MongoCursor::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"setFlag":{"params":{"$flag":"","$set":""},"docComment":"Sets arbitrary flags in case there is no method available the specific flag","signature":"public MongoCursor::setFlag(int $flag ,[bool $set] )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"setReadPreference":{"params":{"$read_preference":"","$tags":""},"docComment":"Set the read preference for this query","signature":"public MongoCursor::setReadPreference(string $read_preference ,array $tags )","inheritdoc":0,"modifier":["public"],"return":""},"skip":{"params":{"$num":""},"docComment":"Skips a number of results","signature":"public MongoCursor::skip(int $num )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"slaveOkay":{"params":{"$okay":""},"docComment":"Sets whether this query can be done on a secondary","signature":"public MongoCursor::slaveOkay([bool $okay] )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"snapshot":{"params":[],"docComment":"Use snapshot mode for the query","signature":"public MongoCursor::snapshot( )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"sort":{"params":{"$fields":""},"docComment":"Sorts the results by given fields","signature":"public MongoCursor::sort(array $fields )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"tailable":{"params":{"$tail":""},"docComment":"Sets whether this cursor will be left open after fetching the last results","signature":"public MongoCursor::tailable([bool $tail] )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"timeout":{"params":{"$ms":""},"docComment":"Sets a client-side timeout for this query","signature":"public MongoCursor::timeout(int $ms )","inheritdoc":0,"modifier":["public"],"return":"MongoCursor"},"valid":{"params":[],"docComment":"Checks if the cursor is reading a valid result.","signature":"public MongoCursor::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":["slaveOkay","timeout"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","slaveOkay":{"type":"","Inheritdoc":0,"docComment":"","modifier":["static"]},"timeout":{"type":"","Inheritdoc":0,"docComment":"","modifier":["static"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoId":{"classname":"MongoId","docComment":"","methods":{"modifier":{"public":["__construct","getHostname","getInc","getPID","getTimestamp","__set_state","__toString"],"private":[],"protected":[],"final":[],"static":["getHostname","__set_state"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$id":""},"docComment":"Creates a new id","signature":"public MongoId::__construct([string $id] )","inheritdoc":0,"modifier":["public"],"return":""},"getHostname":{"params":[],"docComment":"Gets the hostname being used for this machine's ids","signature":"static MongoId::getHostname( )","inheritdoc":0,"modifier":["public","static"],"return":""},"getInc":{"params":[],"docComment":"Gets the incremented value to create this id","signature":"public MongoId::getInc( )","inheritdoc":0,"modifier":["public"],"return":""},"getPID":{"params":[],"docComment":"Gets the process ID","signature":"public MongoId::getPID( )","inheritdoc":0,"modifier":["public"],"return":""},"getTimestamp":{"params":[],"docComment":"Gets the number of seconds since the epoch that this id was created","signature":"public MongoId::getTimestamp( )","inheritdoc":0,"modifier":["public"],"return":""},"__set_state":{"params":{"$props":""},"docComment":"Create a dummy MongoId","signature":"static MongoId::__set_state(array $props )","inheritdoc":0,"modifier":["public","static"],"return":"MongoId"},"__toString":{"params":[],"docComment":"Returns a hexidecimal representation of this id","signature":"public MongoId::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["id"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","id":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoCode":{"classname":"MongoCode","docComment":"","methods":{"modifier":{"public":["__construct","__toString"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$code":"","$scope":""},"docComment":"Creates a new code object","signature":"public MongoCode::__construct(string $code ,[array $scope] )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Returns this code as a string","signature":"public MongoCode::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoDate":{"classname":"MongoDate","docComment":"","methods":{"modifier":{"public":["__construct","__toString"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$sec":"","$usec":""},"docComment":"Creates a new date.","signature":"public MongoDate::__construct([int $sec] ,[int $usec] )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Returns a string representation of this date","signature":"public MongoDate::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["sec","usec"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","sec":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"usec":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoRegex":{"classname":"MongoRegex","docComment":"","methods":{"modifier":{"public":["__construct","__toString"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$regex":""},"docComment":"Creates a new regular expression","signature":"public MongoRegex::__construct(string $regex )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"A string representation of this regular expression","signature":"public MongoRegex::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["regex","flags"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","regex":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"flags":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoBinData":{"classname":"MongoBinData","docComment":"","methods":{"modifier":{"public":["__construct","__toString"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$data":"","$type":""},"docComment":"Creates a new binary data object.","signature":"public MongoBinData::__construct(string $data ,[int $type] )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"The string representation of this binary data object.","signature":"public MongoBinData::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["bin","type"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["FUNC","BYTE_ARRAY","UUID","MD5","CUSTOM"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","FUNC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"BYTE_ARRAY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"UUID":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"MD5":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"CUSTOM":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"bin":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"type":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoInt32":{"classname":"MongoInt32","docComment":"","methods":{"modifier":{"public":["__construct","__toString"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$value":""},"docComment":"Creates a new 32-bit integer.","signature":"public MongoInt32::__construct(string $value )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Returns the string representation of this 32-bit integer.","signature":"public MongoInt32::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["value"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","value":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoInt64":{"classname":"MongoInt64","docComment":"","methods":{"modifier":{"public":["__construct","__toString"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$value":""},"docComment":"Creates a new 64-bit integer.","signature":"public MongoInt64::__construct(string $value )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Returns the string representation of this 64-bit integer.","signature":"public MongoInt64::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["value"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","value":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoDBRef":{"classname":"MongoDBRef","docComment":"","methods":{"modifier":{"public":["create","get","isRef"],"private":[],"protected":[],"final":[],"static":["create","get","isRef"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","create":{"params":{"$collection":"","$id":"","$database":""},"docComment":"Creates a new database reference","signature":"static MongoDBRef::create(string $collection ,mixed $id ,string $database )","inheritdoc":0,"modifier":["public","static"],"return":""},"get":{"params":{"$db":"MongoDB","$ref":""},"docComment":"Fetches the object pointed to by a reference","signature":"static MongoDBRef::get(MongoDB $db ,array $ref )","inheritdoc":0,"modifier":["public","static"],"return":""},"isRef":{"params":{"$ref":""},"docComment":"Checks if an array is a database reference","signature":"static MongoDBRef::isRef(mixed $ref )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoMinKey":{"classname":"MongoMinKey","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoMaxKey":{"classname":"MongoMaxKey","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoTimestamp":{"classname":"MongoTimestamp","docComment":"","methods":{"modifier":{"public":["__construct","__toString"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$sec":"","$inc":""},"docComment":"Creates a new timestamp.","signature":"public MongoTimestamp::__construct([int $sec] ,int $inc )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Returns a string representation of this timestamp","signature":"public MongoTimestamp::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["sec","inc"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","sec":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"inc":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoGridFS":{"classname":"","docComment":"","methods":{"modifier":{"public":["__construct","delete","drop","find","findOne","get","put","remove","storeBytes","storeFile","storeUpload"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$db":"MongoDB","$prefix":"","$chunks":""},"docComment":"Creates new file collections","signature":"public MongoGridFS::__construct(MongoDB $db ,[string $prefix] ,[mixed $chunks] )","inheritdoc":0,"modifier":["public"],"return":""},"delete":{"params":{"$id":""},"docComment":"Delete a file from the database","signature":"public MongoGridFS::delete(mixed $id )","inheritdoc":0,"modifier":["public"],"return":""},"drop":{"params":[],"docComment":"Drops the files and chunks collections","signature":"public MongoGridFS::drop( )","inheritdoc":0,"modifier":["public"],"return":""},"find":{"params":{"$query":"","$fields":""},"docComment":"Queries for files","signature":"public MongoGridFS::find([array $query] ,[array $fields] )","inheritdoc":0,"modifier":["public"],"return":"MongoGridFSCursor"},"findOne":{"params":{"$query":"","$fields":""},"docComment":"Returns a single file matching the criteria","signature":"public MongoGridFS::findOne([mixed $query] ,[mixed $fields] )","inheritdoc":0,"modifier":["public"],"return":"MongoGridFSFile"},"get":{"params":{"$id":""},"docComment":"Retrieve a file from the database","signature":"public MongoGridFS::get(mixed $id )","inheritdoc":0,"modifier":["public"],"return":"MongoGridFSFile"},"put":{"params":{"$filename":"","$metadata":""},"docComment":"Stores a file in the database","signature":"public MongoGridFS::put(string $filename ,[array $metadata] )","inheritdoc":0,"modifier":["public"],"return":""},"remove":{"params":{"$criteria":"","$options":""},"docComment":"Removes files from the collections","signature":"public MongoGridFS::remove([array $criteria] ,[array $options] )","inheritdoc":0,"modifier":["public"],"return":""},"storeBytes":{"params":{"$bytes":"","$metadata":"","$options":""},"docComment":"Stores a string of bytes in the database","signature":"public MongoGridFS::storeBytes(string $bytes ,[array $metadata] ,[array $options] )","inheritdoc":0,"modifier":["public"],"return":""},"storeFile":{"params":{"$filename":"","$metadata":"","$options":""},"docComment":"Stores a file in the database","signature":"public MongoGridFS::storeFile(string $filename ,[array $metadata] ,[array $options] )","inheritdoc":0,"modifier":["public"],"return":""},"storeUpload":{"params":{"$name":"","$metadata":""},"docComment":"Stores an uploaded file in the database","signature":"public MongoGridFS::storeUpload(string $name ,array $metadata )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["chunks"],"private":[],"protected":["filesName","chunksName"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","chunks":{"type":"MongoCollection","Inheritdoc":0,"docComment":"","modifier":["public"]},"filesName":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"chunksName":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoGridFSFile":{"classname":"MongoGridFSFile","docComment":"","methods":{"modifier":{"public":["__construct","getBytes","getFilename","getResource","getSize","write"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$gridfs":"MongoGridFS","$file":""},"docComment":"Create a new GridFS file","signature":"public MongoGridfsFile::__construct(MongoGridFS $gridfs ,array $file )","inheritdoc":0,"modifier":["public"],"return":""},"getBytes":{"params":[],"docComment":"Returns this file's contents as a string of bytes","signature":"public MongoGridFSFile::getBytes( )","inheritdoc":0,"modifier":["public"],"return":""},"getFilename":{"params":[],"docComment":"Returns this file's filename","signature":"public MongoGridFSFile::getFilename( )","inheritdoc":0,"modifier":["public"],"return":""},"getResource":{"params":[],"docComment":"Returns a resource that can be used to read the stored file","signature":"public MongoGridFSFile::getResource( )","inheritdoc":0,"modifier":["public"],"return":""},"getSize":{"params":[],"docComment":"Returns this file's size","signature":"public MongoGridFSFile::getSize( )","inheritdoc":0,"modifier":["public"],"return":""},"write":{"params":{"$filename":""},"docComment":"Writes this file to the filesystem","signature":"public MongoGridFSFile::write([string $filename] )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["file"],"private":[],"protected":["gridfs"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"gridfs":{"type":"MongoGridFS","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoGridFSCursor":{"classname":"","docComment":"","methods":{"modifier":{"public":["__construct","current","getNext","key"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$gridfs":"MongoGridFS","$connection":"","$ns":"","$query":"","$fields":""},"docComment":"Create a new cursor","signature":"public MongoGridFSCursor::__construct(MongoGridFS $gridfs ,resource $connection ,string $ns ,array $query ,array $fields )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Returns the current file","signature":"public MongoGridFSCursor::current( )","inheritdoc":0,"modifier":["public"],"return":"MongoGridFSFile"},"getNext":{"params":[],"docComment":"Return the next file to which this cursor points, and advance the cursor","signature":"public MongoGridFSCursor::getNext( )","inheritdoc":0,"modifier":["public"],"return":"MongoGridFSFile"},"key":{"params":[],"docComment":"Returns the current result's filename","signature":"public MongoGridFSCursor::key( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["gridfs"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","gridfs":{"type":"MongoGridFS","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoLog":{"classname":"MongoLog","docComment":"","methods":{"modifier":{"public":["getCallback","getLevel","getModule","setCallback","setLevel","setModule"],"private":[],"protected":[],"final":[],"static":["getCallback","getLevel","getModule","setCallback","setLevel","setModule"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getCallback":{"params":[],"docComment":"Retrieve the previously set callback function name","signature":"static MongoLog::getCallback( )","inheritdoc":0,"modifier":["public","static"],"return":""},"getLevel":{"params":[],"docComment":"Gets the log level","signature":"static MongoLog::getLevel( )","inheritdoc":0,"modifier":["public","static"],"return":""},"getModule":{"params":[],"docComment":"Gets the modules currently being logged","signature":"static MongoLog::getModule( )","inheritdoc":0,"modifier":["public","static"],"return":""},"setCallback":{"params":{"$log_function":""},"docComment":"Set a callback function to be called on events","signature":"static MongoLog::setCallback(callable $log_function )","inheritdoc":0,"modifier":["public","static"],"return":""},"setLevel":{"params":{"$level":""},"docComment":"Sets logging level","signature":"static MongoLog::setLevel(int $level )","inheritdoc":0,"modifier":["public","static"],"return":""},"setModule":{"params":{"$module":""},"docComment":"Sets driver functionality to log","signature":"static MongoLog::setModule(int $module )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":["level","module"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["NONE","ALL","WARNING","INFO","FINE","RS","POOL","IO","SERVER","PARSE"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","NONE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ALL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"WARNING":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"INFO":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FINE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"POOL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"IO":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SERVER":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PARSE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"level":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"module":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoPool":{"classname":"MongoPool","docComment":"","methods":{"modifier":{"public":["getSize","info","setSize"],"private":[],"protected":[],"final":[],"static":["getSize","setSize"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getSize":{"params":[],"docComment":"Get pool size for connection pools","signature":"static MongoPool::getSize( )","inheritdoc":0,"modifier":["public","static"],"return":""},"info":{"params":[],"docComment":"Returns information about all connection pools.","signature":"public MongoPool::info( )","inheritdoc":0,"modifier":["public"],"return":""},"setSize":{"params":{"$size":""},"docComment":"Set the size for future connection pools.","signature":"static MongoPool::setSize(int $size )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Mongo":{"classname":"Mongo","docComment":"","methods":{"modifier":{"public":["getPoolSize","getSlave","getSlaveOkay","poolDebug","setPoolSize","setSlaveOkay","switchSlave","close","connect","dropDB","__get","getConnections","getHosts","getReadPreference","killCursor","listDBs","selectCollection","selectDB","setReadPreference","__toString"],"private":[],"protected":["connectUtil"],"final":[],"static":["getPoolSize","setPoolSize","getConnections"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","connectUtil":{"params":[],"docComment":"Connects with a database server","signature":"protected Mongo::connectUtil( )","inheritdoc":0,"modifier":["protected"],"return":""},"getPoolSize":{"params":[],"docComment":"Get pool size for connection pools","signature":"static Mongo::getPoolSize( )","inheritdoc":0,"modifier":["public","static"],"return":""},"getSlave":{"params":[],"docComment":"Returns the address being used by this for slaveOkay reads","signature":"public Mongo::getSlave( )","inheritdoc":0,"modifier":["public"],"return":""},"getSlaveOkay":{"params":[],"docComment":"Get slaveOkay setting for this connection","signature":"public Mongo::getSlaveOkay( )","inheritdoc":0,"modifier":["public"],"return":""},"poolDebug":{"params":[],"docComment":"Returns information about all connection pools.","signature":"public Mongo::poolDebug( )","inheritdoc":0,"modifier":["public"],"return":""},"setPoolSize":{"params":{"$size":""},"docComment":"Set the size for future connection pools.","signature":"static Mongo::setPoolSize(int $size )","inheritdoc":0,"modifier":["public","static"],"return":""},"setSlaveOkay":{"params":{"$ok":""},"docComment":"Change slaveOkay setting for this connection","signature":"public Mongo::setSlaveOkay([bool $ok] )","inheritdoc":0,"modifier":["public"],"return":""},"switchSlave":{"params":[],"docComment":"Choose a new secondary for slaveOkay reads","signature":"public Mongo::switchSlave( )","inheritdoc":0,"modifier":["public"],"return":""},"close":{"params":{"$connection":""},"docComment":"Closes this connection","signature":"public MongoClient::close( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"connect":{"params":[],"docComment":"Connects to a database server","signature":"public MongoClient::connect( )","inheritdoc":0,"modifier":["public"],"return":""},"dropDB":{"params":{"$db":""},"docComment":"Drops a database [deprecated]","signature":"public MongoClient::dropDB(mixed $db )","inheritdoc":0,"modifier":["public"],"return":""},"__get":{"params":{"$dbname":""},"docComment":"Gets a database","signature":"public MongoClient::__get(string $dbname )","inheritdoc":0,"modifier":["public"],"return":"MongoDB"},"getConnections":{"params":[],"docComment":"Return info about all open connections","signature":"static MongoClient::getConnections( )","inheritdoc":0,"modifier":["public","static"],"return":""},"getHosts":{"params":[],"docComment":"Updates status for all associated hosts","signature":"public MongoClient::getHosts( )","inheritdoc":0,"modifier":["public"],"return":""},"getReadPreference":{"params":[],"docComment":"Get the read preference for this connection","signature":"public MongoClient::getReadPreference( )","inheritdoc":0,"modifier":["public"],"return":""},"killCursor":{"params":{"$server_hash":"","$id":""},"docComment":"Kills a specific cursor on the server","signature":"public MongoClient::killCursor(string $server_hash , $id )","inheritdoc":0,"modifier":["public"],"return":""},"listDBs":{"params":[],"docComment":"Lists all of the databases available.","signature":"public MongoClient::listDBs( )","inheritdoc":0,"modifier":["public"],"return":""},"selectCollection":{"params":{"$db":"","$collection":""},"docComment":"Gets a database collection","signature":"public MongoClient::selectCollection(string $db ,string $collection )","inheritdoc":0,"modifier":["public"],"return":"MongoCollection"},"selectDB":{"params":{"$name":""},"docComment":"Gets a database","signature":"public MongoClient::selectDB(string $name )","inheritdoc":0,"modifier":["public"],"return":"MongoDB"},"setReadPreference":{"params":{"$read_preference":"","$tags":""},"docComment":"Set the read preference for this connection","signature":"public MongoClient::setReadPreference(string $read_preference ,array $tags )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"String representation of this connection","signature":"public MongoClient::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoException":{"classname":"MongoException","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoResultException":{"classname":"MongoResultException","docComment":"","methods":{"modifier":{"public":["getDocument"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getDocument":{"params":[],"docComment":"Retrieve the full result document","signature":"public MongoResultException::getDocument( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["document"],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","document":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoCursorException":{"classname":"MongoCursorException","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoCursorTimeoutException":{"classname":"MongoCursorTimeoutException","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoConnectionException":{"classname":"MongoConnectionException","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MongoGridFSException":{"classname":"MongoGridFSException","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MysqlndUhConnection":{"classname":"MysqlndUhConnection","docComment":"","methods":{"modifier":{"public":["changeUser","charsetName","close","connect","__construct","endPSession","escapeString","getAffectedRows","getErrorNumber","getErrorString","getFieldCount","getHostInformation","getLastInsertId","getLastMessage","getProtocolInformation","getServerInformation","getServerStatistics","getServerVersion","getSqlstate","getStatistics","getThreadId","getWarningCount","init","killConnection","listFields","listMethod","moreResults","nextResult","ping","query","queryReadResultsetHeader","reapQuery","refreshServer","restartPSession","selectDb","sendClose","sendQuery","serverDumpDebugInformation","setAutocommit","setCharset","setClientOption","setServerOption","shutdownServer","simpleCommand","simpleCommandHandleResponse","sslSet","stmtInit","storeResult","txCommit","txRollback","useResult"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","changeUser":{"params":{"$connection":"","$user":"","$password":"","$database":"","$silent":"","$passwd_len":""},"docComment":"Changes the user of the specified mysqlnd database connection","signature":"public MysqlndUhConnection::changeUser( $connection ,string $user ,string $password ,string $database ,bool $silent ,int $passwd_len )","inheritdoc":0,"modifier":["public"],"return":""},"charsetName":{"params":{"$connection":""},"docComment":"Returns the default character set for the database connection","signature":"public MysqlndUhConnection::charsetName( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"close":{"params":{"$connection":"","$close_type":""},"docComment":"Closes a previously opened database connection","signature":"public MysqlndUhConnection::close( $connection ,int $close_type )","inheritdoc":0,"modifier":["public"],"return":""},"connect":{"params":{"$connection":"","$host":"","$use\"":"","$password":"","$database":"","$port":"","$socket":"","$mysql_flags":""},"docComment":"Open a new connection to the MySQL server","signature":"public MysqlndUhConnection::connect( $connection ,string $host ,string $use\" ,string $password ,string $database ,int $port ,string $socket ,int $mysql_flags )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"The __construct purpose","signature":"public MysqlndUhConnection::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"endPSession":{"params":{"$connection":""},"docComment":"End a persistent connection","signature":"public MysqlndUhConnection::endPSession( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"escapeString":{"params":{"$connection":"","$escape_string":""},"docComment":"\n   Escapes special characters in a string for use in an SQL statement,\n   taking into account the current charset of the connection\n  ","signature":"public MysqlndUhConnection::escapeString( $connection ,string $escape_string )","inheritdoc":0,"modifier":["public"],"return":""},"getAffectedRows":{"params":{"$connection":""},"docComment":"Gets the number of affected rows in a previous MySQL operation","signature":"public MysqlndUhConnection::getAffectedRows( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorNumber":{"params":{"$connection":""},"docComment":"Returns the error code for the most recent function call","signature":"public MysqlndUhConnection::getErrorNumber( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"getErrorString":{"params":{"$connection":""},"docComment":"Returns a string description of the last error","signature":"public MysqlndUhConnection::getErrorString( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"getFieldCount":{"params":{"$connection":""},"docComment":"Returns the number of columns for the most recent query","signature":"public MysqlndUhConnection::getFieldCount( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"getHostInformation":{"params":{"$connection":""},"docComment":"Returns a string representing the type of connection used","signature":"public MysqlndUhConnection::getHostInformation( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"getLastInsertId":{"params":{"$connection":""},"docComment":"Returns the auto generated id used in the last query.","signature":"public MysqlndUhConnection::getLastInsertId( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"getLastMessage":{"params":{"$connection":""},"docComment":"Retrieves information about the most recently executed query","signature":"public MysqlndUhConnection::getLastMessage( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"getProtocolInformation":{"params":{"$connection":""},"docComment":"Returns the version of the MySQL protocol used","signature":"public MysqlndUhConnection::getProtocolInformation( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"getServerInformation":{"params":{"$connection":""},"docComment":"Returns the version of the MySQL server","signature":"public MysqlndUhConnection::getServerInformation( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"getServerStatistics":{"params":{"$connection":""},"docComment":"Gets the current system status","signature":"public MysqlndUhConnection::getServerStatistics( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"getServerVersion":{"params":{"$connection":""},"docComment":"Returns the version of the MySQL server as an integer","signature":"public MysqlndUhConnection::getServerVersion( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"getSqlstate":{"params":{"$connection":""},"docComment":"Returns the SQLSTATE error from previous MySQL operation","signature":"public MysqlndUhConnection::getSqlstate( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"getStatistics":{"params":{"$connection":""},"docComment":"Returns statistics about the client connection.","signature":"public MysqlndUhConnection::getStatistics( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"getThreadId":{"params":{"$connection":""},"docComment":"Returns the thread ID for the current connection","signature":"public MysqlndUhConnection::getThreadId( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"getWarningCount":{"params":{"$connection":""},"docComment":"Returns the number of warnings from the last query for the given link","signature":"public MysqlndUhConnection::getWarningCount( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"init":{"params":{"$connection":""},"docComment":"Initialize mysqlnd connection","signature":"public MysqlndUhConnection::init( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"killConnection":{"params":{"$connection":"","$pid":""},"docComment":"Asks the server to kill a MySQL thread","signature":"public MysqlndUhConnection::killConnection( $connection ,int $pid )","inheritdoc":0,"modifier":["public"],"return":""},"listFields":{"params":{"$connection":"","$table":"","$achtung_wild":""},"docComment":"List MySQL table fields","signature":"public MysqlndUhConnection::listFields( $connection ,string $table ,string $achtung_wild )","inheritdoc":0,"modifier":["public"],"return":""},"listMethod":{"params":{"$connection":"","$query":"","$achtung_wild":"","$par1":""},"docComment":"Wrapper for assorted list commands","signature":"public MysqlndUhConnection::listMethod( $connection ,string $query ,string $achtung_wild ,string $par1 )","inheritdoc":0,"modifier":["public"],"return":""},"moreResults":{"params":{"$connection":""},"docComment":"Check if there are any more query results from a multi query","signature":"public MysqlndUhConnection::moreResults( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"nextResult":{"params":{"$connection":""},"docComment":"Prepare next result from multi_query","signature":"public MysqlndUhConnection::nextResult( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"ping":{"params":{"$connection":""},"docComment":"Pings a server connection, or tries to reconnect if the connection has gone down","signature":"public MysqlndUhConnection::ping( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"query":{"params":{"$connection":"","$query":""},"docComment":"Performs a query on the database","signature":"public MysqlndUhConnection::query( $connection ,string $query )","inheritdoc":0,"modifier":["public"],"return":""},"queryReadResultsetHeader":{"params":{"$connection":"","$mysqlnd_stmt":""},"docComment":"Read a result set header","signature":"public MysqlndUhConnection::queryReadResultsetHeader( $connection , $mysqlnd_stmt )","inheritdoc":0,"modifier":["public"],"return":""},"reapQuery":{"params":{"$connection":""},"docComment":"Get result from async query","signature":"public MysqlndUhConnection::reapQuery( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"refreshServer":{"params":{"$connection":"","$options":""},"docComment":"Flush or reset tables and caches","signature":"public MysqlndUhConnection::refreshServer( $connection ,int $options )","inheritdoc":0,"modifier":["public"],"return":""},"restartPSession":{"params":{"$connection":""},"docComment":"Restart a persistent mysqlnd connection","signature":"public MysqlndUhConnection::restartPSession( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"selectDb":{"params":{"$connection":"","$database":""},"docComment":"Selects the default database for database queries","signature":"public MysqlndUhConnection::selectDb( $connection ,string $database )","inheritdoc":0,"modifier":["public"],"return":""},"sendClose":{"params":{"$connection":""},"docComment":"Sends a close command to MySQL","signature":"public MysqlndUhConnection::sendClose( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"sendQuery":{"params":{"$connection":"","$query":""},"docComment":"Sends a query to MySQL","signature":"public MysqlndUhConnection::sendQuery( $connection ,string $query )","inheritdoc":0,"modifier":["public"],"return":""},"serverDumpDebugInformation":{"params":{"$connection":""},"docComment":"Dump debugging information into the log for the MySQL server","signature":"public MysqlndUhConnection::serverDumpDebugInformation( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"setAutocommit":{"params":{"$connection":"","$mode":""},"docComment":"Turns on or off auto-committing database modifications","signature":"public MysqlndUhConnection::setAutocommit( $connection ,int $mode )","inheritdoc":0,"modifier":["public"],"return":""},"setCharset":{"params":{"$connection":"","$charset":""},"docComment":"Sets the default client character set","signature":"public MysqlndUhConnection::setCharset( $connection ,string $charset )","inheritdoc":0,"modifier":["public"],"return":""},"setClientOption":{"params":{"$connection":"","$option":"","$value":""},"docComment":"Sets a client option","signature":"public MysqlndUhConnection::setClientOption( $connection ,int $option ,int $value )","inheritdoc":0,"modifier":["public"],"return":""},"setServerOption":{"params":{"$connection":"","$option":""},"docComment":"Sets a server option","signature":"public MysqlndUhConnection::setServerOption( $connection ,int $option )","inheritdoc":0,"modifier":["public"],"return":""},"shutdownServer":{"params":{"$MYSQLND_UH_RES_MYSQLND_NAME":"","$\"level\"":""},"docComment":"The shutdownServer purpose","signature":"public MysqlndUhConnection::shutdownServer(string $MYSQLND_UH_RES_MYSQLND_NAME ,string $\"level\" )","inheritdoc":0,"modifier":["public"],"return":""},"simpleCommand":{"params":{"$connection":"","$command":"","$arg":"","$ok_packet":"","$silent":"","$ignore_upsert_status":""},"docComment":"Sends a basic COM_* command","signature":"public MysqlndUhConnection::simpleCommand( $connection ,int $command ,string $arg ,int $ok_packet ,bool $silent ,bool $ignore_upsert_status )","inheritdoc":0,"modifier":["public"],"return":""},"simpleCommandHandleResponse":{"params":{"$connection":"","$ok_packet":"","$silent":"","$command":"","$ignore_upsert_status":""},"docComment":"Process a response for a basic COM_* command send to the client","signature":"public MysqlndUhConnection::simpleCommandHandleResponse( $connection ,int $ok_packet ,bool $silent ,int $command ,bool $ignore_upsert_status )","inheritdoc":0,"modifier":["public"],"return":""},"sslSet":{"params":{"$connection":"","$key":"","$cert":"","$ca":"","$capath":"","$cipher":""},"docComment":"Used for establishing secure connections using SSL","signature":"public MysqlndUhConnection::sslSet( $connection ,string $key ,string $cert ,string $ca ,string $capath ,string $cipher )","inheritdoc":0,"modifier":["public"],"return":""},"stmtInit":{"params":{"$connection":""},"docComment":"Initializes a statement and returns a resource for use with mysqli_statement::prepare","signature":"public MysqlndUhConnection::stmtInit( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"storeResult":{"params":{"$connection":""},"docComment":"Transfers a result set from the last query","signature":"public MysqlndUhConnection::storeResult( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"txCommit":{"params":{"$connection":""},"docComment":"Commits the current transaction","signature":"public MysqlndUhConnection::txCommit( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"txRollback":{"params":{"$connection":""},"docComment":"Rolls back current transaction","signature":"public MysqlndUhConnection::txRollback( $connection )","inheritdoc":0,"modifier":["public"],"return":""},"useResult":{"params":{"$connection":""},"docComment":"Initiate a result set retrieval","signature":"public MysqlndUhConnection::useResult( $connection )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"MysqlndUhPreparedStatement":{"classname":"MysqlndUhPreparedStatement","docComment":"","methods":{"modifier":{"public":["__construct","execute","prepare"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public MysqlndUhPreparedStatement::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"execute":{"params":{"$statement":""},"docComment":"Executes a prepared Query","signature":"public MysqlndUhPreparedStatement::execute( $statement )","inheritdoc":0,"modifier":["public"],"return":""},"prepare":{"params":{"$statement":"","$query":""},"docComment":"Prepare an SQL statement for execution","signature":"public MysqlndUhPreparedStatement::prepare( $statement ,string $query )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"OAuth":{"classname":"OAuth","docComment":"","methods":{"modifier":{"public":["__construct","__destruct","disableDebug","disableRedirects","disableSSLChecks","enableDebug","enableRedirects","enableSSLChecks","fetch","generateSignature","getAccessToken","getCAPath","getLastResponse","getLastResponseHeaders","getLastResponseInfo","getRequestHeader","getRequestToken","setAuthType","setCAPath","setNonce","setRequestEngine","setRSACertificate","setSSLChecks","setTimestamp","setToken","setVersion"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$consumer_key":"","$consumer_secret":"","$signature_method":"","$auth_type":""},"docComment":"Create a new OAuth object","signature":"public OAuth::__construct(string $consumer_key ,string $consumer_secret ,[string $signature_method] ,[int $auth_type] )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":[],"docComment":"The destructor","signature":"public OAuth::__destruct( )","inheritdoc":0,"modifier":["public"],"return":""},"disableDebug":{"params":[],"docComment":"Turn off verbose debugging","signature":"public OAuth::disableDebug( )","inheritdoc":0,"modifier":["public"],"return":""},"disableRedirects":{"params":[],"docComment":"Turn off redirects","signature":"public OAuth::disableRedirects( )","inheritdoc":0,"modifier":["public"],"return":""},"disableSSLChecks":{"params":[],"docComment":"Turn off SSL checks","signature":"public OAuth::disableSSLChecks( )","inheritdoc":0,"modifier":["public"],"return":""},"enableDebug":{"params":[],"docComment":"Turn on verbose debugging","signature":"public OAuth::enableDebug( )","inheritdoc":0,"modifier":["public"],"return":""},"enableRedirects":{"params":[],"docComment":"Turn on redirects","signature":"public OAuth::enableRedirects( )","inheritdoc":0,"modifier":["public"],"return":""},"enableSSLChecks":{"params":[],"docComment":"Turn on SSL checks","signature":"public OAuth::enableSSLChecks( )","inheritdoc":0,"modifier":["public"],"return":""},"fetch":{"params":{"$protected_resource_url":"","$extra_parameters":"","$http_method":"","$http_headers":""},"docComment":"Fetch an OAuth protected resource","signature":"public OAuth::fetch(string $protected_resource_url ,array $extra_parameters ,string $http_method ,array $http_headers )","inheritdoc":0,"modifier":["public"],"return":""},"generateSignature":{"params":{"$http_method":"","$url":"","$extra_parameters":""},"docComment":"Generate a signature","signature":"public OAuth::generateSignature(string $http_method ,string $url ,mixed $extra_parameters )","inheritdoc":0,"modifier":["public"],"return":""},"getAccessToken":{"params":{"$access_token_url":"","$auth_session_handle":"","$verifier_token":""},"docComment":"Fetch an access token","signature":"public OAuth::getAccessToken(string $access_token_url ,string $auth_session_handle ,string $verifier_token )","inheritdoc":0,"modifier":["public"],"return":""},"getCAPath":{"params":[],"docComment":"Gets CA information","signature":"public OAuth::getCAPath( )","inheritdoc":0,"modifier":["public"],"return":""},"getLastResponse":{"params":[],"docComment":"Get the last response","signature":"public OAuth::getLastResponse( )","inheritdoc":0,"modifier":["public"],"return":""},"getLastResponseHeaders":{"params":[],"docComment":"Get headers for last response","signature":"public OAuth::getLastResponseHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getLastResponseInfo":{"params":[],"docComment":"Get HTTP information about the last response","signature":"public OAuth::getLastResponseInfo( )","inheritdoc":0,"modifier":["public"],"return":""},"getRequestHeader":{"params":{"$http_method":"","$url":"","$extra_parameters":""},"docComment":"Generate OAuth header string signature","signature":"public OAuth::getRequestHeader(string $http_method ,string $url ,mixed $extra_parameters )","inheritdoc":0,"modifier":["public"],"return":""},"getRequestToken":{"params":{"$request_token_url":"","$callback_url":""},"docComment":"Fetch a request token","signature":"public OAuth::getRequestToken(string $request_token_url ,string $callback_url )","inheritdoc":0,"modifier":["public"],"return":""},"setAuthType":{"params":{"$auth_type":""},"docComment":"Set authorization type","signature":"public OAuth::setAuthType(int $auth_type )","inheritdoc":0,"modifier":["public"],"return":""},"setCAPath":{"params":{"$ca_path":"","$ca_info":""},"docComment":"Set CA path and info","signature":"public OAuth::setCAPath(string $ca_path ,string $ca_info )","inheritdoc":0,"modifier":["public"],"return":""},"setNonce":{"params":{"$nonce":""},"docComment":"Set the nonce for subsequent requests","signature":"public OAuth::setNonce(string $nonce )","inheritdoc":0,"modifier":["public"],"return":""},"setRequestEngine":{"params":{"$reqengine":""},"docComment":"The setRequestEngine purpose","signature":"public OAuth::setRequestEngine(int $reqengine )","inheritdoc":0,"modifier":["public"],"return":""},"setRSACertificate":{"params":{"$cert":""},"docComment":"Set the RSA certificate","signature":"public OAuth::setRSACertificate(string $cert )","inheritdoc":0,"modifier":["public"],"return":""},"setSSLChecks":{"params":{"$sslcheck":""},"docComment":"Tweak specific SSL checks for requests.","signature":"public OAuth::setSSLChecks(int $sslcheck )","inheritdoc":0,"modifier":["public"],"return":""},"setTimestamp":{"params":{"$timestamp":""},"docComment":"Set the timestamp","signature":"public OAuth::setTimestamp(string $timestamp )","inheritdoc":0,"modifier":["public"],"return":""},"setToken":{"params":{"$token":"","$token_secret":""},"docComment":"Sets the token and secret","signature":"public OAuth::setToken(string $token ,string $token_secret )","inheritdoc":0,"modifier":["public"],"return":""},"setVersion":{"params":{"$version":""},"docComment":"Set the OAuth version","signature":"public OAuth::setVersion(string $version )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["debug","sslChecks","debugInfo"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","debug":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"sslChecks":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"debugInfo":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"OAuthProvider":{"classname":"OAuthProvider","docComment":"","methods":{"modifier":{"public":["addRequiredParameter","callconsumerHandler","callTimestampNonceHandler","calltokenHandler","checkOAuthRequest","__construct","consumerHandler","generateToken","is2LeggedEndpoint","isRequestTokenEndpoint","removeRequiredParameter","reportProblem","setParam","setRequestTokenPath","timestampNonceHandler","tokenHandler"],"private":[],"protected":[],"final":["addRequiredParameter","generateToken","removeRequiredParameter","reportProblem","setParam","setRequestTokenPath"],"static":["generateToken","reportProblem"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addRequiredParameter":{"params":{"$req_params":""},"docComment":"Add required parameters","signature":"public OAuthProvider::addRequiredParameter(string $req_params )","inheritdoc":0,"modifier":["final","public"],"return":""},"callconsumerHandler":{"params":[],"docComment":"Calls the consumerNonceHandler callback","signature":"public OAuthProvider::callconsumerHandler( )","inheritdoc":0,"modifier":["public"],"return":""},"callTimestampNonceHandler":{"params":[],"docComment":"Calls the timestampNonceHandler callback","signature":"public OAuthProvider::callTimestampNonceHandler( )","inheritdoc":0,"modifier":["public"],"return":""},"calltokenHandler":{"params":[],"docComment":"Calls the tokenNonceHandler callback","signature":"public OAuthProvider::calltokenHandler( )","inheritdoc":0,"modifier":["public"],"return":""},"checkOAuthRequest":{"params":{"$uri":"","$method":""},"docComment":"Check an oauth request","signature":"public OAuthProvider::checkOAuthRequest(string $uri ,string $method )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$params_array":""},"docComment":"Constructs a new OAuthProvider object","signature":"public OAuthProvider::__construct(array $params_array )","inheritdoc":0,"modifier":["public"],"return":""},"consumerHandler":{"params":{"$callback_function":""},"docComment":"Set the consumerHandler handler callback","signature":"public OAuthProvider::consumerHandler(callable $callback_function )","inheritdoc":0,"modifier":["public"],"return":""},"generateToken":{"params":{"$size":"","$strong":""},"docComment":"Generate a random token","signature":"static OAuthProvider::generateToken(int $size ,[bool $strong] )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"is2LeggedEndpoint":{"params":{"$params_array":""},"docComment":"is2LeggedEndpoint","signature":"public OAuthProvider::is2LeggedEndpoint(mixed $params_array )","inheritdoc":0,"modifier":["public"],"return":""},"isRequestTokenEndpoint":{"params":{"$will_issue_request_token":""},"docComment":"Sets isRequestTokenEndpoint","signature":"public OAuthProvider::isRequestTokenEndpoint(bool $will_issue_request_token )","inheritdoc":0,"modifier":["public"],"return":""},"removeRequiredParameter":{"params":{"$req_params":""},"docComment":"Remove a required parameter","signature":"public OAuthProvider::removeRequiredParameter(string $req_params )","inheritdoc":0,"modifier":["final","public"],"return":""},"reportProblem":{"params":{"$oauthexception":"","$send_headers":""},"docComment":"Report a problem","signature":"static OAuthProvider::reportProblem(string $oauthexception ,[bool $send_headers] )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"setParam":{"params":{"$param_key":"","$param_val":""},"docComment":"Set a parameter","signature":"public OAuthProvider::setParam(string $param_key ,mixed $param_val )","inheritdoc":0,"modifier":["final","public"],"return":""},"setRequestTokenPath":{"params":{"$path":""},"docComment":"Set request token path","signature":"public OAuthProvider::setRequestTokenPath(string $path )","inheritdoc":0,"modifier":["final","public"],"return":""},"timestampNonceHandler":{"params":{"$callback_function":""},"docComment":"Set the timestampNonceHandler handler callback","signature":"public OAuthProvider::timestampNonceHandler(callable $callback_function )","inheritdoc":0,"modifier":["public"],"return":""},"tokenHandler":{"params":{"$callback_function":""},"docComment":"Set the tokenHandler handler callback","signature":"public OAuthProvider::tokenHandler(callable $callback_function )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"OAuthException":{"classname":"OAuthException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":["lastResponse","debugInfo"],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","lastResponse":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"debugInfo":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Thread":{"classname":"Thread","docComment":"","methods":{"modifier":{"public":["getCreatorId","getThreadId","isJoined","isRunning","isStarted","isTerminated","isWaiting","join","lock","notify","run","start","synchronized","unlock","wait"],"private":[],"protected":[],"final":["getCreatorId","getThreadId","isJoined","isRunning","isStarted","isTerminated","isWaiting","join","lock","notify","start","synchronized","unlock","wait"],"static":[],"interface":[],"abstract":["run"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getCreatorId":{"params":[],"docComment":"Identification","signature":"public Thread::getCreatorId( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getThreadId":{"params":[],"docComment":"Identification","signature":"public Thread::getThreadId( )","inheritdoc":0,"modifier":["final","public"],"return":""},"isJoined":{"params":[],"docComment":"State Detection","signature":"public Thread::isJoined( )","inheritdoc":0,"modifier":["final","public"],"return":""},"isRunning":{"params":[],"docComment":"State Detection","signature":"public Thread::isRunning( )","inheritdoc":0,"modifier":["final","public"],"return":""},"isStarted":{"params":[],"docComment":"State Detection","signature":"public Thread::isStarted( )","inheritdoc":0,"modifier":["final","public"],"return":""},"isTerminated":{"params":[],"docComment":"State Detection","signature":"public Thread::isTerminated( )","inheritdoc":0,"modifier":["final","public"],"return":""},"isWaiting":{"params":[],"docComment":"State Detection","signature":"public Thread::isWaiting( )","inheritdoc":0,"modifier":["final","public"],"return":""},"join":{"params":[],"docComment":"Synchronization","signature":"public Thread::join( )","inheritdoc":0,"modifier":["final","public"],"return":""},"lock":{"params":[],"docComment":"Synchronization","signature":"public Thread::lock( )","inheritdoc":0,"modifier":["final","public"],"return":""},"notify":{"params":[],"docComment":"Synchronization","signature":"public Thread::notify( )","inheritdoc":0,"modifier":["final","public"],"return":""},"run":{"params":[],"docComment":"Execution","signature":"public Thread::run( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"start":{"params":{"$options":""},"docComment":"Execution","signature":"public Thread::start( $options )","inheritdoc":0,"modifier":["final","public"],"return":""},"synchronized":{"params":{"$block":"Closure","$...":""},"docComment":"Synchronization","signature":"public Thread::synchronized(Closure $block ,mixed $... )","inheritdoc":0,"modifier":["final","public"],"return":""},"unlock":{"params":[],"docComment":"Synchronization","signature":"public Thread::unlock( )","inheritdoc":0,"modifier":["final","public"],"return":""},"wait":{"params":{"$timeout":""},"docComment":"Synchronization","signature":"public Thread::wait( $timeout )","inheritdoc":0,"modifier":["final","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Worker":{"classname":"Worker","docComment":"","methods":{"modifier":{"public":["getCreatorId","getStacked","getThreadId","isShutdown","isWorking","run","shutdown","stack","start","unstack"],"private":[],"protected":[],"final":["getCreatorId","getStacked","getThreadId","isShutdown","isWorking","shutdown","stack","start","unstack"],"static":[],"interface":[],"abstract":["run"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getCreatorId":{"params":[],"docComment":"Identification","signature":"public Worker::getCreatorId( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getStacked":{"params":[],"docComment":"Stack Analysis","signature":"public Worker::getStacked( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getThreadId":{"params":[],"docComment":"Identification","signature":"public Worker::getThreadId( )","inheritdoc":0,"modifier":["final","public"],"return":""},"isShutdown":{"params":[],"docComment":"State Detection","signature":"public Worker::isShutdown( )","inheritdoc":0,"modifier":["final","public"],"return":""},"isWorking":{"params":[],"docComment":"State Detection","signature":"public Worker::isWorking( )","inheritdoc":0,"modifier":["final","public"],"return":""},"run":{"params":[],"docComment":"Execution","signature":"public Worker::run( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"shutdown":{"params":[],"docComment":"Synchronization","signature":"public Worker::shutdown( )","inheritdoc":0,"modifier":["final","public"],"return":""},"stack":{"params":{"$work":"Stackable"},"docComment":"Stacking","signature":"public Worker::stack(Stackable $work )","inheritdoc":0,"modifier":["final","public"],"return":""},"start":{"params":{"$options":""},"docComment":"Execution","signature":"public Worker::start( $options )","inheritdoc":0,"modifier":["final","public"],"return":""},"unstack":{"params":{"$work":"Stackable"},"docComment":"Stacking","signature":"public Worker::unstack(Stackable $work )","inheritdoc":0,"modifier":["final","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Stackable":{"classname":"Stackable","docComment":"","methods":{"modifier":{"public":["isRunning","isTerminated","isWaiting","lock","notify","run","synchronized","unlock","wait"],"private":[],"protected":[],"final":["isRunning","isTerminated","isWaiting","lock","notify","synchronized","unlock","wait"],"static":[],"interface":[],"abstract":["run"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","isRunning":{"params":[],"docComment":"State Detection","signature":"public Stackable::isRunning( )","inheritdoc":0,"modifier":["final","public"],"return":""},"isTerminated":{"params":[],"docComment":"State Detection","signature":"public Stackable::isTerminated( )","inheritdoc":0,"modifier":["final","public"],"return":""},"isWaiting":{"params":[],"docComment":"State Detection","signature":"public Stackable::isWaiting( )","inheritdoc":0,"modifier":["final","public"],"return":""},"lock":{"params":[],"docComment":"Synchronization","signature":"public Stackable::lock( )","inheritdoc":0,"modifier":["final","public"],"return":""},"notify":{"params":[],"docComment":"Synchronization","signature":"public Stackable::notify( )","inheritdoc":0,"modifier":["final","public"],"return":""},"run":{"params":[],"docComment":"Execution","signature":"public Stackable::run( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"synchronized":{"params":{"$block":"Closure","$...":""},"docComment":"Synchronization","signature":"public Stackable::synchronized(Closure $block ,mixed $... )","inheritdoc":0,"modifier":["final","public"],"return":""},"unlock":{"params":[],"docComment":"Synchronization","signature":"public Stackable::unlock( )","inheritdoc":0,"modifier":["final","public"],"return":""},"wait":{"params":{"$timeout":""},"docComment":"Synchronization","signature":"public Stackable::wait(string $timeout )","inheritdoc":0,"modifier":["final","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Mutex":{"classname":"Mutex","docComment":"","methods":{"modifier":{"public":["create","destroy","lock","trylock","unlock"],"private":[],"protected":[],"final":["create","destroy","lock","trylock","unlock"],"static":["create","destroy","lock","trylock","unlock"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","create":{"params":{"$lock":""},"docComment":"Create a Mutex","signature":"static Mutex::create(boolean $lock )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"destroy":{"params":{"$mutex":""},"docComment":"Destroy Mutex","signature":"static Mutex::destroy( $mutex )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"lock":{"params":{"$mutex":""},"docComment":"Acquire Mutex","signature":"static Mutex::lock( $mutex )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"trylock":{"params":{"$mutex":""},"docComment":"Attempt to Acquire Mutex","signature":"static Mutex::trylock( $mutex )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"unlock":{"params":{"$mutex":"","$destroy":""},"docComment":"Release Mutex","signature":"static Mutex::unlock( $mutex ,boolean $destroy )","inheritdoc":0,"modifier":["final","public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Cond":{"classname":"Cond","docComment":"","methods":{"modifier":{"public":["broadcast","create","destroy","signal","wait"],"private":[],"protected":[],"final":["broadcast","create","destroy","signal","wait"],"static":["broadcast","create","destroy","signal","wait"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","broadcast":{"params":{"$condition":""},"docComment":"Broadcast a Condition","signature":"static Cond::broadcast( $condition )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"create":{"params":[],"docComment":"Create a Condition","signature":"static Cond::create( )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"destroy":{"params":{"$condition":""},"docComment":"Destroy a Condition","signature":"static Cond::destroy( $condition )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"signal":{"params":{"$condition":""},"docComment":"Signal a Condition","signature":"static Cond::signal( $condition )","inheritdoc":0,"modifier":["final","public","static"],"return":""},"wait":{"params":{"$condition":"","$mutex":"","$timeout":""},"docComment":"Wait for Condition","signature":"static Cond::wait( $condition , $mutex , $timeout )","inheritdoc":0,"modifier":["final","public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"QuickHashIntSet":{"classname":"QuickHashIntSet","docComment":"","methods":{"modifier":{"public":["add","__construct","delete","exists","getSize","loadFromFile","loadFromString","saveToFile","saveToString"],"private":[],"protected":[],"final":[],"static":["loadFromFile","loadFromString"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$key":""},"docComment":"This method adds a new entry to the set","signature":"public QuickHashIntSet::add(int $key )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$size":"","$options":""},"docComment":"Creates a new QuickHashIntSet object","signature":"public QuickHashIntSet::__construct(int $size ,int $options )","inheritdoc":0,"modifier":["public"],"return":""},"delete":{"params":{"$key":""},"docComment":"This method deletes an entry from the set","signature":"public QuickHashIntSet::delete(int $key )","inheritdoc":0,"modifier":["public"],"return":""},"exists":{"params":{"$key":""},"docComment":"This method checks whether a key is part of the set","signature":"public QuickHashIntSet::exists(int $key )","inheritdoc":0,"modifier":["public"],"return":""},"getSize":{"params":[],"docComment":"Returns the number of elements in the set","signature":"public QuickHashIntSet::getSize( )","inheritdoc":0,"modifier":["public"],"return":""},"loadFromFile":{"params":{"$filename":"","$size":"","$options":""},"docComment":"This factory method creates a set from a file","signature":"static QuickHashIntSet::loadFromFile(string $filename ,int $size ,int $options )","inheritdoc":0,"modifier":["public","static"],"return":"QuickHashIntSet"},"loadFromString":{"params":{"$contents":"","$size":"","$options":""},"docComment":"This factory method creates a set from a string","signature":"static QuickHashIntSet::loadFromString(string $contents ,int $size ,int $options )","inheritdoc":0,"modifier":["public","static"],"return":"QuickHashIntSet"},"saveToFile":{"params":{"$filename":""},"docComment":"This method stores an in-memory set to disk","signature":"public QuickHashIntSet::saveToFile(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"saveToString":{"params":[],"docComment":"This method returns a serialized version of the set","signature":"public QuickHashIntSet::saveToString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["CHECK_FOR_DUPES","DO_NOT_USE_ZEND_ALLOC","HASHER_NO_HASH","HASHER_JENKINS1","HASHER_JENKINS2"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","CHECK_FOR_DUPES":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DO_NOT_USE_ZEND_ALLOC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HASHER_NO_HASH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HASHER_JENKINS1":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HASHER_JENKINS2":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"QuickHashIntHash":{"classname":"QuickHashIntHash","docComment":"","methods":{"modifier":{"public":["add","__construct","delete","exists","get","getSize","loadFromFile","loadFromString","saveToFile","saveToString","set","update"],"private":[],"protected":[],"final":[],"static":["loadFromFile","loadFromString"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$key":"","$value":""},"docComment":"This method adds a new entry to the hash","signature":"public QuickHashIntHash::add(int $key ,int $value )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$size":"","$options":""},"docComment":"Creates a new QuickHashIntHash object","signature":"public QuickHashIntHash::__construct(int $size ,int $options )","inheritdoc":0,"modifier":["public"],"return":""},"delete":{"params":{"$key":""},"docComment":"This method deletes am entry from the hash","signature":"public QuickHashIntHash::delete(int $key )","inheritdoc":0,"modifier":["public"],"return":""},"exists":{"params":{"$key":""},"docComment":"This method checks whether a key is part of the hash","signature":"public QuickHashIntHash::exists(int $key )","inheritdoc":0,"modifier":["public"],"return":""},"get":{"params":{"$key":""},"docComment":"This method retrieves a value from the hash by its key","signature":"public QuickHashIntHash::get(int $key )","inheritdoc":0,"modifier":["public"],"return":""},"getSize":{"params":[],"docComment":"Returns the number of elements in the hash","signature":"public QuickHashIntHash::getSize( )","inheritdoc":0,"modifier":["public"],"return":""},"loadFromFile":{"params":{"$filename":"","$options":""},"docComment":"This factory method creates a hash from a file","signature":"static QuickHashIntHash::loadFromFile(string $filename ,int $options )","inheritdoc":0,"modifier":["public","static"],"return":"QuickHashIntHash"},"loadFromString":{"params":{"$contents":"","$options":""},"docComment":"This factory method creates a hash from a string","signature":"static QuickHashIntHash::loadFromString(string $contents ,int $options )","inheritdoc":0,"modifier":["public","static"],"return":"QuickHashIntHash"},"saveToFile":{"params":{"$filename":""},"docComment":"This method stores an in-memory hash to disk","signature":"public QuickHashIntHash::saveToFile(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"saveToString":{"params":[],"docComment":"This method returns a serialized version of the hash","signature":"public QuickHashIntHash::saveToString( )","inheritdoc":0,"modifier":["public"],"return":""},"set":{"params":{"$key":"","$value":""},"docComment":"This method updates an entry in the hash with a new value, or\n  adds a new one if the entry doesn't exist","signature":"public QuickHashIntHash::set(int $key ,int $value )","inheritdoc":0,"modifier":["public"],"return":""},"update":{"params":{"$key":"","$value":""},"docComment":"This method updates an entry in the hash with a new value","signature":"public QuickHashIntHash::update(int $key ,int $value )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["CHECK_FOR_DUPES","DO_NOT_USE_ZEND_ALLOC","HASHER_NO_HASH","HASHER_JENKINS1","HASHER_JENKINS2"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","CHECK_FOR_DUPES":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DO_NOT_USE_ZEND_ALLOC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HASHER_NO_HASH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HASHER_JENKINS1":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HASHER_JENKINS2":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"QuickHashStringIntHash":{"classname":"QuickHashStringIntHash","docComment":"","methods":{"modifier":{"public":["add","__construct","delete","exists","get","getSize","loadFromFile","loadFromString","saveToFile","saveToString","set","update"],"private":[],"protected":[],"final":[],"static":["loadFromFile","loadFromString"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$key":"","$value":""},"docComment":"This method adds a new entry to the hash","signature":"public QuickHashStringIntHash::add(string $key ,int $value )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$size":"","$options":""},"docComment":"Creates a new QuickHashStringIntHash object","signature":"public QuickHashStringIntHash::__construct(int $size ,[int $options] )","inheritdoc":0,"modifier":["public"],"return":""},"delete":{"params":{"$key":""},"docComment":"This method deletes am entry from the hash","signature":"public QuickHashStringIntHash::delete(string $key )","inheritdoc":0,"modifier":["public"],"return":""},"exists":{"params":{"$key":""},"docComment":"This method checks whether a key is part of the hash","signature":"public QuickHashStringIntHash::exists(string $key )","inheritdoc":0,"modifier":["public"],"return":""},"get":{"params":{"$key":""},"docComment":"This method retrieves a value from the hash by its key","signature":"public QuickHashStringIntHash::get(string $key )","inheritdoc":0,"modifier":["public"],"return":""},"getSize":{"params":[],"docComment":"Returns the number of elements in the hash","signature":"public QuickHashStringIntHash::getSize( )","inheritdoc":0,"modifier":["public"],"return":""},"loadFromFile":{"params":{"$filename":"","$size":"","$options":""},"docComment":"This factory method creates a hash from a file","signature":"static QuickHashStringIntHash::loadFromFile(string $filename ,[int $size] ,[int $options] )","inheritdoc":0,"modifier":["public","static"],"return":"QuickHashStringIntHash"},"loadFromString":{"params":{"$contents":"","$size":"","$options":""},"docComment":"This factory method creates a hash from a string","signature":"static QuickHashStringIntHash::loadFromString(string $contents ,[int $size] ,[int $options] )","inheritdoc":0,"modifier":["public","static"],"return":"QuickHashStringIntHash"},"saveToFile":{"params":{"$filename":""},"docComment":"This method stores an in-memory hash to disk","signature":"public QuickHashStringIntHash::saveToFile(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"saveToString":{"params":[],"docComment":"This method returns a serialized version of the hash","signature":"public QuickHashStringIntHash::saveToString( )","inheritdoc":0,"modifier":["public"],"return":""},"set":{"params":{"$key":"","$value":""},"docComment":"This method updates an entry in the hash with a new value, or\n  adds a new one if the entry doesn't exist","signature":"public QuickHashStringIntHash::set(string $key ,int $value )","inheritdoc":0,"modifier":["public"],"return":""},"update":{"params":{"$key":"","$value":""},"docComment":"This method updates an entry in the hash with a new value","signature":"public QuickHashStringIntHash::update(string $key ,int $value )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["CHECK_FOR_DUPES","DO_NOT_USE_ZEND_ALLOC"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","CHECK_FOR_DUPES":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DO_NOT_USE_ZEND_ALLOC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"QuickHashIntStringHash":{"classname":"QuickHashIntStringHash","docComment":"","methods":{"modifier":{"public":["add","__construct","delete","exists","get","getSize","loadFromFile","loadFromString","saveToFile","saveToString","set","update"],"private":[],"protected":[],"final":[],"static":["loadFromFile","loadFromString"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$key":"","$value":""},"docComment":"This method adds a new entry to the hash","signature":"public QuickHashIntStringHash::add(int $key ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$size":"","$options":""},"docComment":"Creates a new QuickHashIntStringHash object","signature":"public QuickHashIntStringHash::__construct(int $size ,[int $options] )","inheritdoc":0,"modifier":["public"],"return":""},"delete":{"params":{"$key":""},"docComment":"This method deletes am entry from the hash","signature":"public QuickHashIntStringHash::delete(int $key )","inheritdoc":0,"modifier":["public"],"return":""},"exists":{"params":{"$key":""},"docComment":"This method checks whether a key is part of the hash","signature":"public QuickHashIntStringHash::exists(int $key )","inheritdoc":0,"modifier":["public"],"return":""},"get":{"params":{"$key":""},"docComment":"This method retrieves a value from the hash by its key","signature":"public QuickHashIntStringHash::get(int $key )","inheritdoc":0,"modifier":["public"],"return":""},"getSize":{"params":[],"docComment":"Returns the number of elements in the hash","signature":"public QuickHashIntStringHash::getSize( )","inheritdoc":0,"modifier":["public"],"return":""},"loadFromFile":{"params":{"$filename":"","$size":"","$options":""},"docComment":"This factory method creates a hash from a file","signature":"static QuickHashIntStringHash::loadFromFile(string $filename ,[int $size] ,[int $options] )","inheritdoc":0,"modifier":["public","static"],"return":"QuickHashIntStringHash"},"loadFromString":{"params":{"$contents":"","$size":"","$options":""},"docComment":"This factory method creates a hash from a string","signature":"static QuickHashIntStringHash::loadFromString(string $contents ,[int $size] ,[int $options] )","inheritdoc":0,"modifier":["public","static"],"return":"QuickHashIntStringHash"},"saveToFile":{"params":{"$filename":""},"docComment":"This method stores an in-memory hash to disk","signature":"public QuickHashIntStringHash::saveToFile(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"saveToString":{"params":[],"docComment":"This method returns a serialized version of the hash","signature":"public QuickHashIntStringHash::saveToString( )","inheritdoc":0,"modifier":["public"],"return":""},"set":{"params":{"$key":"","$value":""},"docComment":"This method updates an entry in the hash with a new value, or\n  adds a new one if the entry doesn't exist","signature":"public QuickHashIntStringHash::set(int $key ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"update":{"params":{"$key":"","$value":""},"docComment":"This method updates an entry in the hash with a new value","signature":"public QuickHashIntStringHash::update(int $key ,string $value )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["CHECK_FOR_DUPES","DO_NOT_USE_ZEND_ALLOC","HASHER_NO_HASH","HASHER_JENKINS1","HASHER_JENKINS2"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","CHECK_FOR_DUPES":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DO_NOT_USE_ZEND_ALLOC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HASHER_NO_HASH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HASHER_JENKINS1":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HASHER_JENKINS2":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RarArchive":{"classname":"RarArchive","docComment":"","methods":{"modifier":{"public":["close","getComment","getEntries","getEntry","isBroken","isSolid","open","setAllowBroken","__toString"],"private":[],"protected":[],"final":[],"static":["open"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","close":{"params":{"$rarfile":"RarArchive"},"docComment":"Close RAR archive and free all resources","signature":"rar_close(RarArchive $rarfile )","inheritdoc":0,"modifier":["public"],"return":""},"getComment":{"params":{"$rarfile":"RarArchive"},"docComment":"Get comment text from the RAR archive","signature":"rar_comment_get(RarArchive $rarfile )","inheritdoc":0,"modifier":["public"],"return":""},"getEntries":{"params":{"$rarfile":"RarArchive"},"docComment":"Get full list of entries from the RAR archive","signature":"rar_list(RarArchive $rarfile )","inheritdoc":0,"modifier":["public"],"return":""},"getEntry":{"params":{"$entryname":"","$rarfile":"RarArchive"},"docComment":"Get entry object from the RAR archive","signature":"rar_entry_get(RarArchive $rarfile ,string $entryname )","inheritdoc":0,"modifier":["public"],"return":"RarEntry"},"isBroken":{"params":{"$rarfile":"RarArchive"},"docComment":"Test whether an archive is broken (incomplete)","signature":"rar_broken_is(RarArchive $rarfile )","inheritdoc":0,"modifier":["public"],"return":""},"isSolid":{"params":{"$rarfile":"RarArchive"},"docComment":"Check whether the RAR archive is solid","signature":"rar_solid_is(RarArchive $rarfile )","inheritdoc":0,"modifier":["public"],"return":""},"open":{"params":{"$filename":"","$password":"","$volume_callback":""},"docComment":"Open RAR archive","signature":"rar_open(string $filename ,[string $password] ,[callable $volume_callback] )","inheritdoc":0,"modifier":["public","static"],"return":"RarArchive"},"setAllowBroken":{"params":{"$allow_broken":"","$rarfile":"RarArchive"},"docComment":"Whether opening broken archives is allowed","signature":"rar_allow_broken_set(RarArchive $rarfile ,bool $allow_broken )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Get text representation","signature":"public RarArchive::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RarEntry":{"classname":"RarEntry","docComment":"","methods":{"modifier":{"public":["extract","getAttr","getCrc","getFileTime","getHostOs","getMethod","getName","getPackedSize","getStream","getUnpackedSize","getVersion","isDirectory","isEncrypted","__toString"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","extract":{"params":{"$dir":"","$filepath":"","$password":"","$extended_data":""},"docComment":"Extract entry from the archive","signature":"public RarEntry::extract(string $dir ,[string $filepath] ,[string $password] ,[bool $extended_data] )","inheritdoc":0,"modifier":["public"],"return":""},"getAttr":{"params":[],"docComment":"Get attributes of the entry","signature":"public RarEntry::getAttr( )","inheritdoc":0,"modifier":["public"],"return":""},"getCrc":{"params":[],"docComment":"Get CRC of the entry","signature":"public RarEntry::getCrc( )","inheritdoc":0,"modifier":["public"],"return":""},"getFileTime":{"params":[],"docComment":"Get entry last modification time","signature":"public RarEntry::getFileTime( )","inheritdoc":0,"modifier":["public"],"return":""},"getHostOs":{"params":[],"docComment":"Get entry host OS","signature":"public RarEntry::getHostOs( )","inheritdoc":0,"modifier":["public"],"return":""},"getMethod":{"params":[],"docComment":"Get pack method of the entry","signature":"public RarEntry::getMethod( )","inheritdoc":0,"modifier":["public"],"return":""},"getName":{"params":[],"docComment":"Get name of the entry","signature":"public RarEntry::getName( )","inheritdoc":0,"modifier":["public"],"return":""},"getPackedSize":{"params":[],"docComment":"Get packed size of the entry","signature":"public RarEntry::getPackedSize( )","inheritdoc":0,"modifier":["public"],"return":""},"getStream":{"params":{"$password":""},"docComment":"Get file handler for entry","signature":"public RarEntry::getStream(string $password )","inheritdoc":0,"modifier":["public"],"return":""},"getUnpackedSize":{"params":[],"docComment":"Get unpacked size of the entry","signature":"public RarEntry::getUnpackedSize( )","inheritdoc":0,"modifier":["public"],"return":""},"getVersion":{"params":[],"docComment":"Get minimum version of RAR program required to unpack the entry","signature":"public RarEntry::getVersion( )","inheritdoc":0,"modifier":["public"],"return":""},"isDirectory":{"params":[],"docComment":"Test whether an entry represents a directory","signature":"public RarEntry::isDirectory( )","inheritdoc":0,"modifier":["public"],"return":""},"isEncrypted":{"params":[],"docComment":"Test whether an entry is encrypted","signature":"public RarEntry::isEncrypted( )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"Get text representation of entry","signature":"public RarEntry::__toString( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["HOST_MSDOS","HOST_OS2","HOST_WIN32","HOST_UNIX","HOST_MACOS","HOST_BEOS","ATTRIBUTE_WIN_READONLY","ATTRIBUTE_WIN_HIDDEN","ATTRIBUTE_WIN_SYSTEM","ATTRIBUTE_WIN_DIRECTORY","ATTRIBUTE_WIN_ARCHIVE","ATTRIBUTE_WIN_DEVICE","ATTRIBUTE_WIN_NORMAL","ATTRIBUTE_WIN_TEMPORARY","ATTRIBUTE_WIN_SPARSE_FILE","ATTRIBUTE_WIN_REPARSE_POINT","ATTRIBUTE_WIN_COMPRESSED","ATTRIBUTE_WIN_OFFLINE","ATTRIBUTE_WIN_NOT_CONTENT_INDEXED","ATTRIBUTE_WIN_ENCRYPTED","ATTRIBUTE_WIN_VIRTUAL","ATTRIBUTE_UNIX_WORLD_EXECUTE","ATTRIBUTE_UNIX_WORLD_WRITE","ATTRIBUTE_UNIX_WORLD_READ","ATTRIBUTE_UNIX_GROUP_EXECUTE","ATTRIBUTE_UNIX_GROUP_WRITE","ATTRIBUTE_UNIX_GROUP_READ","ATTRIBUTE_UNIX_OWNER_EXECUTE","ATTRIBUTE_UNIX_OWNER_WRITE","ATTRIBUTE_UNIX_OWNER_READ","ATTRIBUTE_UNIX_STICKY","ATTRIBUTE_UNIX_SETGID","ATTRIBUTE_UNIX_SETUID","ATTRIBUTE_UNIX_FINAL_QUARTET","ATTRIBUTE_UNIX_FIFO","ATTRIBUTE_UNIX_CHAR_DEV","ATTRIBUTE_UNIX_DIRECTORY","ATTRIBUTE_UNIX_BLOCK_DEV","ATTRIBUTE_UNIX_REGULAR_FILE","ATTRIBUTE_UNIX_SYM_LINK","ATTRIBUTE_UNIX_SOCKET"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","HOST_MSDOS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HOST_OS2":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HOST_WIN32":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HOST_UNIX":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HOST_MACOS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"HOST_BEOS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_WIN_READONLY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_WIN_HIDDEN":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_WIN_SYSTEM":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_WIN_DIRECTORY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_WIN_ARCHIVE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_WIN_DEVICE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_WIN_NORMAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_WIN_TEMPORARY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_WIN_SPARSE_FILE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_WIN_REPARSE_POINT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_WIN_COMPRESSED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_WIN_OFFLINE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_WIN_NOT_CONTENT_INDEXED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_WIN_ENCRYPTED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_WIN_VIRTUAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_WORLD_EXECUTE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_WORLD_WRITE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_WORLD_READ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_GROUP_EXECUTE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_GROUP_WRITE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_GROUP_READ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_OWNER_EXECUTE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_OWNER_WRITE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_OWNER_READ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_STICKY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_SETGID":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_SETUID":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_FINAL_QUARTET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_FIFO":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_CHAR_DEV":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_DIRECTORY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_BLOCK_DEV":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_REGULAR_FILE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_SYM_LINK":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ATTRIBUTE_UNIX_SOCKET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RarException":{"classname":"RarException","docComment":"","methods":{"modifier":{"public":["isUsingExceptions","setUsingExceptions","getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":["isUsingExceptions","setUsingExceptions"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","isUsingExceptions":{"params":[],"docComment":"Check whether error handling with exceptions is in use","signature":"static RarException::isUsingExceptions( )","inheritdoc":0,"modifier":["public","static"],"return":""},"setUsingExceptions":{"params":{"$using_exceptions":""},"docComment":"Activate and deactivate error handling with exceptions","signature":"static RarException::setUsingExceptions(bool $using_exceptions )","inheritdoc":0,"modifier":["public","static"],"return":""},"getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RRDCreator":{"classname":"RRDCreator","docComment":"","methods":{"modifier":{"public":["addArchive","addDataSource","__construct","save"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addArchive":{"params":{"$description":""},"docComment":"Adds RRA - archive of data values for each data source.","signature":"public RRDCreator::addArchive(string $description )","inheritdoc":0,"modifier":["public"],"return":""},"addDataSource":{"params":{"$description":""},"docComment":"Adds data source definition for RRD database.","signature":"public RRDCreator::addDataSource(string $description )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$path":"","$startTime":"","$step":""},"docComment":"Creates new  instance","signature":"public RRDCreator::__construct(string $path ,string $startTime ,[int $step] )","inheritdoc":0,"modifier":["public"],"return":""},"save":{"params":[],"docComment":"Saves the RRD database to a file","signature":"public RRDCreator::save( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RRDGraph":{"classname":"RRDGraph","docComment":"","methods":{"modifier":{"public":["__construct","save","saveVerbose","setOptions"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$path":""},"docComment":"Creates new  instance","signature":"public RRDGraph::__construct(string $path )","inheritdoc":0,"modifier":["public"],"return":""},"save":{"params":[],"docComment":"Saves the result of query into image","signature":"public RRDGraph::save( )","inheritdoc":0,"modifier":["public"],"return":""},"saveVerbose":{"params":[],"docComment":"Saves the RRD database query into image and returns the verbose\n   information about generated graph.\n  ","signature":"public RRDGraph::saveVerbose( )","inheritdoc":0,"modifier":["public"],"return":""},"setOptions":{"params":{"$options":""},"docComment":"Sets the options for rrd graph export","signature":"public RRDGraph::setOptions(array $options )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"RRDUpdater":{"classname":"RRDUpdater","docComment":"","methods":{"modifier":{"public":["__construct","update"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$path":""},"docComment":"Creates new  instance","signature":"public RRDUpdater::__construct(string $path )","inheritdoc":0,"modifier":["public"],"return":""},"update":{"params":{"$values":"","$time":""},"docComment":"Update the RRD database file","signature":"public RRDUpdater::update(array $values ,[string $time] )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrUtils":{"classname":"SolrUtils","docComment":"","methods":{"modifier":{"public":["digestXmlResponse","escapeQueryChars","getSolrVersion","queryPhrase"],"private":[],"protected":[],"final":[],"static":["digestXmlResponse","escapeQueryChars","getSolrVersion","queryPhrase"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","digestXmlResponse":{"params":{"$xmlresponse":"","$parse_mode":""},"docComment":"Parses an response XML string into a SolrObject","signature":"static SolrUtils::digestXmlResponse(string $xmlresponse ,[int $parse_mode] )","inheritdoc":0,"modifier":["public","static"],"return":"SolrObject"},"escapeQueryChars":{"params":{"$str":""},"docComment":"Escapes a lucene query string","signature":"static SolrUtils::escapeQueryChars(string $str )","inheritdoc":0,"modifier":["public","static"],"return":""},"getSolrVersion":{"params":[],"docComment":"Returns the current version of the Solr extension","signature":"static SolrUtils::getSolrVersion( )","inheritdoc":0,"modifier":["public","static"],"return":""},"queryPhrase":{"params":{"$str":""},"docComment":"Prepares a phrase from an unescaped lucene string","signature":"static SolrUtils::queryPhrase(string $str )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrInputDocument":{"classname":"SolrInputDocument","docComment":"","methods":{"modifier":{"public":["addField","clear","__clone","__construct","deleteField","__destruct","fieldExists","getBoost","getField","getFieldBoost","getFieldCount","getFieldNames","merge","reset","setBoost","setFieldBoost","sort","toArray"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addField":{"params":{"$fieldName":"","$fieldValue":"","$fieldBoostValue":""},"docComment":"Adds a field to the document","signature":"public SolrInputDocument::addField(string $fieldName ,string $fieldValue ,[float $fieldBoostValue] )","inheritdoc":0,"modifier":["public"],"return":""},"clear":{"params":[],"docComment":"Resets the input document","signature":"public SolrInputDocument::clear( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Creates a copy of a SolrDocument","signature":"public SolrInputDocument::__clone( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"Constructor","signature":"public SolrInputDocument::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"deleteField":{"params":{"$fieldName":""},"docComment":"Removes a field from the document","signature":"public SolrInputDocument::deleteField(string $fieldName )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":[],"docComment":"Destructor","signature":"public SolrInputDocument::__destruct( )","inheritdoc":0,"modifier":["public"],"return":""},"fieldExists":{"params":{"$fieldName":""},"docComment":"Checks if a field exists","signature":"public SolrInputDocument::fieldExists(string $fieldName )","inheritdoc":0,"modifier":["public"],"return":""},"getBoost":{"params":[],"docComment":"Retrieves the current boost value for the document","signature":"public SolrInputDocument::getBoost( )","inheritdoc":0,"modifier":["public"],"return":""},"getField":{"params":{"$fieldName":""},"docComment":"Retrieves a field by name","signature":"public SolrInputDocument::getField(string $fieldName )","inheritdoc":0,"modifier":["public"],"return":"SolrDocumentField"},"getFieldBoost":{"params":{"$fieldName":""},"docComment":"Retrieves the boost value for a particular field","signature":"public SolrInputDocument::getFieldBoost(string $fieldName )","inheritdoc":0,"modifier":["public"],"return":""},"getFieldCount":{"params":[],"docComment":"Returns the number of fields in the document","signature":"public SolrInputDocument::getFieldCount( )","inheritdoc":0,"modifier":["public"],"return":""},"getFieldNames":{"params":[],"docComment":"Returns an array containing all the fields in the document","signature":"public SolrInputDocument::getFieldNames( )","inheritdoc":0,"modifier":["public"],"return":""},"merge":{"params":{"$sourceDoc":"SolrInputDocument","$overwrite":""},"docComment":"Merges one input document into another","signature":"public SolrInputDocument::merge(SolrInputDocument $sourceDoc ,[bool $overwrite] )","inheritdoc":0,"modifier":["public"],"return":""},"reset":{"params":[],"docComment":"This is an alias of SolrInputDocument::clear","signature":"public SolrInputDocument::reset( )","inheritdoc":0,"modifier":["public"],"return":""},"setBoost":{"params":{"$documentBoostValue":""},"docComment":"Sets the boost value for this document","signature":"public SolrInputDocument::setBoost(float $documentBoostValue )","inheritdoc":0,"modifier":["public"],"return":""},"setFieldBoost":{"params":{"$fieldName":"","$fieldBoostValue":""},"docComment":"Sets the index-time boost value for a field","signature":"public SolrInputDocument::setFieldBoost(string $fieldName ,float $fieldBoostValue )","inheritdoc":0,"modifier":["public"],"return":""},"sort":{"params":{"$sortOrderBy":"","$sortDirection":""},"docComment":"Sorts the fields within the document","signature":"public SolrInputDocument::sort(int $sortOrderBy ,[int $sortDirection] )","inheritdoc":0,"modifier":["public"],"return":""},"toArray":{"params":[],"docComment":"Returns an array representation of the input document","signature":"public SolrInputDocument::toArray( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["SORT_DEFAULT","SORT_ASC","SORT_DESC","SORT_FIELD_NAME","SORT_FIELD_VALUE_COUNT","SORT_FIELD_BOOST_VALUE"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","SORT_DEFAULT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SORT_ASC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SORT_DESC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SORT_FIELD_NAME":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SORT_FIELD_VALUE_COUNT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SORT_FIELD_BOOST_VALUE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrDocument":{"classname":"SolrDocument","docComment":"","methods":{"modifier":{"public":["addField","clear","__clone","__construct","current","deleteField","__destruct","fieldExists","__get","getField","getFieldCount","getFieldNames","getInputDocument","__isset","key","merge","next","offsetExists","offsetGet","offsetSet","offsetUnset","reset","rewind","serialize","__set","sort","toArray","unserialize","__unset","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addField":{"params":{"$fieldName":"","$fieldValue":""},"docComment":"Adds a field to the document","signature":"public SolrDocument::addField(string $fieldName ,string $fieldValue )","inheritdoc":0,"modifier":["public"],"return":""},"clear":{"params":[],"docComment":"Drops all the fields in the document","signature":"public SolrDocument::clear( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Creates a copy of a SolrDocument object","signature":"public SolrDocument::__clone( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"Constructor","signature":"public SolrDocument::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Retrieves the current field","signature":"public SolrDocument::current( )","inheritdoc":0,"modifier":["public"],"return":"SolrDocumentField"},"deleteField":{"params":{"$fieldName":""},"docComment":"Removes a field from the document","signature":"public SolrDocument::deleteField(string $fieldName )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":[],"docComment":"Destructor","signature":"public SolrDocument::__destruct( )","inheritdoc":0,"modifier":["public"],"return":""},"fieldExists":{"params":{"$fieldName":""},"docComment":"Checks if a field exists in the document","signature":"public SolrDocument::fieldExists(string $fieldName )","inheritdoc":0,"modifier":["public"],"return":""},"__get":{"params":{"$fieldName":""},"docComment":"Access the field as a property","signature":"public SolrDocument::__get(string $fieldName )","inheritdoc":0,"modifier":["public"],"return":"SolrDocumentField"},"getField":{"params":{"$fieldName":""},"docComment":"Retrieves a field by name","signature":"public SolrDocument::getField(string $fieldName )","inheritdoc":0,"modifier":["public"],"return":"SolrDocumentField"},"getFieldCount":{"params":[],"docComment":"Returns the number of fields in this document","signature":"public SolrDocument::getFieldCount( )","inheritdoc":0,"modifier":["public"],"return":""},"getFieldNames":{"params":[],"docComment":"Returns an array of fields names in the document","signature":"public SolrDocument::getFieldNames( )","inheritdoc":0,"modifier":["public"],"return":""},"getInputDocument":{"params":[],"docComment":"Returns a SolrInputDocument equivalent of the object","signature":"public SolrDocument::getInputDocument( )","inheritdoc":0,"modifier":["public"],"return":"SolrInputDocument"},"__isset":{"params":{"$fieldName":""},"docComment":"Checks if a field exists","signature":"public SolrDocument::__isset(string $fieldName )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Retrieves the current key","signature":"public SolrDocument::key( )","inheritdoc":0,"modifier":["public"],"return":""},"merge":{"params":{"$sourceDoc":"SolrDocument","$overwrite":""},"docComment":"Merges source to the current SolrDocument","signature":"public SolrDocument::merge(SolrDocument $sourceDoc ,[bool $overwrite] )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Moves the internal pointer to the next field","signature":"public SolrDocument::next( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$fieldName":""},"docComment":"Checks if a particular field exists","signature":"public SolrDocument::offsetExists(string $fieldName )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$fieldName":""},"docComment":"Retrieves a field","signature":"public SolrDocument::offsetGet(string $fieldName )","inheritdoc":0,"modifier":["public"],"return":"SolrDocumentField"},"offsetSet":{"params":{"$fieldName":"","$fieldValue":""},"docComment":"Adds a field to the document","signature":"public SolrDocument::offsetSet(string $fieldName ,string $fieldValue )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$fieldName":""},"docComment":"Removes a field","signature":"public SolrDocument::offsetUnset(string $fieldName )","inheritdoc":0,"modifier":["public"],"return":""},"reset":{"params":[],"docComment":"This is an alias to SolrDocument::clear()","signature":"public SolrDocument::reset( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Resets the internal pointer to the beginning","signature":"public SolrDocument::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"serialize":{"params":[],"docComment":"Used for custom serialization","signature":"public SolrDocument::serialize( )","inheritdoc":0,"modifier":["public"],"return":""},"__set":{"params":{"$fieldName":"","$fieldValue":""},"docComment":"Adds another field to the document","signature":"public SolrDocument::__set(string $fieldName ,string $fieldValue )","inheritdoc":0,"modifier":["public"],"return":""},"sort":{"params":{"$sortOrderBy":"","$sortDirection":""},"docComment":"Sorts the fields in the document","signature":"public SolrDocument::sort(int $sortOrderBy ,[int $sortDirection] )","inheritdoc":0,"modifier":["public"],"return":""},"toArray":{"params":[],"docComment":"Returns an array representation of the document","signature":"public SolrDocument::toArray( )","inheritdoc":0,"modifier":["public"],"return":""},"unserialize":{"params":{"$serialized":""},"docComment":"Custom serialization of SolrDocument objects","signature":"public SolrDocument::unserialize(string $serialized )","inheritdoc":0,"modifier":["public"],"return":""},"__unset":{"params":{"$fieldName":""},"docComment":"Removes a field from the document","signature":"public SolrDocument::__unset(string $fieldName )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Checks if the current position internally is still valid","signature":"public SolrDocument::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["SORT_DEFAULT","SORT_ASC","SORT_DESC","SORT_FIELD_NAME","SORT_FIELD_VALUE_COUNT","SORT_FIELD_BOOST_VALUE"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","SORT_DEFAULT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SORT_ASC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SORT_DESC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SORT_FIELD_NAME":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SORT_FIELD_VALUE_COUNT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SORT_FIELD_BOOST_VALUE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrDocumentField":{"classname":"SolrDocumentField","docComment":"","methods":{"modifier":{"public":["__construct","__destruct"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Constructor","signature":"public SolrDocumentField::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":[],"docComment":"Destructor","signature":"public SolrDocumentField::__destruct( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["name","boost","values"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"boost":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"values":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrObject":{"classname":"SolrObject","docComment":"","methods":{"modifier":{"public":["__construct","__destruct","getPropertyNames","offsetExists","offsetGet","offsetSet","offsetUnset"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Creates Solr object","signature":"public SolrObject::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":[],"docComment":"Destructor","signature":"public SolrObject::__destruct( )","inheritdoc":0,"modifier":["public"],"return":""},"getPropertyNames":{"params":[],"docComment":"Returns an array of all the names of the properties","signature":"public SolrObject::getPropertyNames( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$property_name":""},"docComment":"Checks if the property exists","signature":"public SolrObject::offsetExists(string $property_name )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$property_name":""},"docComment":"Used to retrieve a property","signature":"public SolrObject::offsetGet(string $property_name )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$property_name":"","$property_value":""},"docComment":"Sets the value for a property","signature":"public SolrObject::offsetSet(string $property_name ,string $property_value )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$property_name":""},"docComment":"Sets the value for the property","signature":"public SolrObject::offsetUnset(string $property_name )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrClient":{"classname":"SolrClient","docComment":"","methods":{"modifier":{"public":["addDocument","addDocuments","commit","__construct","deleteById","deleteByIds","deleteByQueries","deleteByQuery","__destruct","getDebug","getOptions","optimize","ping","query","request","rollback","setResponseWriter","setServlet","threads"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addDocument":{"params":{"$doc":"SolrInputDocument","$allowDups":"","$commitWithin":""},"docComment":"Adds a document to the index","signature":"public SolrClient::addDocument(SolrInputDocument $doc ,[bool $allowDups] ,[int $commitWithin] )","inheritdoc":0,"modifier":["public"],"return":"SolrUpdateResponse"},"addDocuments":{"params":{"$docs":"","$allowDups":"","$commitWithin":""},"docComment":"Adds a collection of SolrInputDocument instances to the index","signature":"public SolrClient::addDocuments(array $docs ,[bool $allowDups] ,[int $commitWithin] )","inheritdoc":0,"modifier":["public"],"return":""},"commit":{"params":{"$maxSegments":"","$waitFlush":"","$waitSearcher":""},"docComment":"Finalizes all add\/deletes made to the index","signature":"public SolrClient::commit([int $maxSegments] ,[bool $waitFlush] ,[bool $waitSearcher] )","inheritdoc":0,"modifier":["public"],"return":"SolrUpdateResponse"},"__construct":{"params":{"$clientOptions":""},"docComment":"Constructor for the SolrClient object","signature":"public SolrClient::__construct(array $clientOptions )","inheritdoc":0,"modifier":["public"],"return":""},"deleteById":{"params":{"$id":""},"docComment":"Delete by Id","signature":"public SolrClient::deleteById(string $id )","inheritdoc":0,"modifier":["public"],"return":"SolrUpdateResponse"},"deleteByIds":{"params":{"$ids":""},"docComment":"Deletes by Ids","signature":"public SolrClient::deleteByIds(array $ids )","inheritdoc":0,"modifier":["public"],"return":"SolrUpdateResponse"},"deleteByQueries":{"params":{"$queries":""},"docComment":"Removes all documents matching any of the queries","signature":"public SolrClient::deleteByQueries(array $queries )","inheritdoc":0,"modifier":["public"],"return":"SolrUpdateResponse"},"deleteByQuery":{"params":{"$query":""},"docComment":"Deletes all documents matching the given query","signature":"public SolrClient::deleteByQuery(string $query )","inheritdoc":0,"modifier":["public"],"return":"SolrUpdateResponse"},"__destruct":{"params":[],"docComment":"Destructor for SolrClient","signature":"public SolrClient::__destruct( )","inheritdoc":0,"modifier":["public"],"return":""},"getDebug":{"params":[],"docComment":"Returns the debug data for the last connection attempt","signature":"public SolrClient::getDebug( )","inheritdoc":0,"modifier":["public"],"return":""},"getOptions":{"params":[],"docComment":"Returns the client options set internally","signature":"public SolrClient::getOptions( )","inheritdoc":0,"modifier":["public"],"return":""},"optimize":{"params":{"$maxSegments":"","$waitFlush":"","$waitSearcher":""},"docComment":"Defragments the index","signature":"public SolrClient::optimize([int $maxSegments] ,[bool $waitFlush] ,[bool $waitSearcher] )","inheritdoc":0,"modifier":["public"],"return":"SolrUpdateResponse"},"ping":{"params":[],"docComment":"Checks if Solr server is still up","signature":"public SolrClient::ping( )","inheritdoc":0,"modifier":["public"],"return":"SolrPingResponse"},"query":{"params":{"$query":"SolrParams"},"docComment":"Sends a query to the server","signature":"public SolrClient::query(SolrParams $query )","inheritdoc":0,"modifier":["public"],"return":"SolrQueryResponse"},"request":{"params":{"$raw_request":""},"docComment":"Sends a raw update request","signature":"public SolrClient::request(string $raw_request )","inheritdoc":0,"modifier":["public"],"return":""},"rollback":{"params":[],"docComment":"Rollbacks all add\/deletes made to the index since the last commit","signature":"public SolrClient::rollback( )","inheritdoc":0,"modifier":["public"],"return":"SolrUpdateResponse"},"setResponseWriter":{"params":{"$responseWriter":""},"docComment":"Sets the response writer used to prepare the response from Solr","signature":"public SolrClient::setResponseWriter(string $responseWriter )","inheritdoc":0,"modifier":["public"],"return":""},"setServlet":{"params":{"$type":"","$value":""},"docComment":"Changes the specified servlet type to a new value","signature":"public SolrClient::setServlet(int $type ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"threads":{"params":[],"docComment":"Checks the threads status","signature":"public SolrClient::threads( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["SEARCH_SERVLET_TYPE","UPDATE_SERVLET_TYPE","THREADS_SERVLET_TYPE","PING_SERVLET_TYPE","TERMS_SERVLET_TYPE","DEFAULT_SEARCH_SERVLET","DEFAULT_UPDATE_SERVLET","DEFAULT_THREADS_SERVLET","DEFAULT_PING_SERVLET","DEFAULT_TERMS_SERVLET"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","SEARCH_SERVLET_TYPE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"UPDATE_SERVLET_TYPE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"THREADS_SERVLET_TYPE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PING_SERVLET_TYPE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TERMS_SERVLET_TYPE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DEFAULT_SEARCH_SERVLET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DEFAULT_UPDATE_SERVLET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DEFAULT_THREADS_SERVLET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DEFAULT_PING_SERVLET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"DEFAULT_TERMS_SERVLET":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrResponse":{"classname":"SolrResponse","docComment":"","methods":{"modifier":{"public":["getDigestedResponse","getHttpStatus","getHttpStatusMessage","getRawRequest","getRawRequestHeaders","getRawResponse","getRawResponseHeaders","getRequestUrl","getResponse","setParseMode","success"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getDigestedResponse":{"params":[],"docComment":"Returns the XML response as serialized PHP data","signature":"public SolrResponse::getDigestedResponse( )","inheritdoc":0,"modifier":["public"],"return":""},"getHttpStatus":{"params":[],"docComment":"Returns the HTTP status of the response","signature":"public SolrResponse::getHttpStatus( )","inheritdoc":0,"modifier":["public"],"return":""},"getHttpStatusMessage":{"params":[],"docComment":"Returns more details on the HTTP status","signature":"public SolrResponse::getHttpStatusMessage( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawRequest":{"params":[],"docComment":"Returns the raw request sent to the Solr server","signature":"public SolrResponse::getRawRequest( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawRequestHeaders":{"params":[],"docComment":"Returns the raw request headers sent to the Solr server","signature":"public SolrResponse::getRawRequestHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawResponse":{"params":[],"docComment":"Returns the raw response from the server","signature":"public SolrResponse::getRawResponse( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawResponseHeaders":{"params":[],"docComment":"Returns the raw response headers from the server","signature":"public SolrResponse::getRawResponseHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getRequestUrl":{"params":[],"docComment":"Returns the full URL the request was sent to","signature":"public SolrResponse::getRequestUrl( )","inheritdoc":0,"modifier":["public"],"return":""},"getResponse":{"params":[],"docComment":"Returns a SolrObject representing the XML response from the server","signature":"public SolrResponse::getResponse( )","inheritdoc":0,"modifier":["public"],"return":"SolrObject"},"setParseMode":{"params":{"$parser_mode":""},"docComment":"Sets the parse mode","signature":"public SolrResponse::setParseMode([int $parser_mode] )","inheritdoc":0,"modifier":["public"],"return":""},"success":{"params":[],"docComment":"Was the request a success","signature":"public SolrResponse::success( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["http_status","parser_mode","success","http_status_message","http_request_url","http_raw_request_headers","http_raw_request","http_raw_response_headers","http_raw_response","http_digested_response"],"final":[],"static":[],"interface":[],"abstract":[],"const":["PARSE_SOLR_OBJ","PARSE_SOLR_DOC"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","PARSE_SOLR_OBJ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PARSE_SOLR_DOC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"http_status":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"parser_mode":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"success":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_status_message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_request_url":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_request_headers":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_request":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_response_headers":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_response":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_digested_response":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrQueryResponse":{"classname":"SolrQueryResponse","docComment":"","methods":{"modifier":{"public":["__construct","__destruct","getDigestedResponse","getHttpStatus","getHttpStatusMessage","getRawRequest","getRawRequestHeaders","getRawResponse","getRawResponseHeaders","getRequestUrl","getResponse","setParseMode","success"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Constructor","signature":"public SolrQueryResponse::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":[],"docComment":"Destructor","signature":"public SolrQueryResponse::__destruct( )","inheritdoc":0,"modifier":["public"],"return":""},"getDigestedResponse":{"params":[],"docComment":"Returns the XML response as serialized PHP data","signature":"public SolrResponse::getDigestedResponse( )","inheritdoc":0,"modifier":["public"],"return":""},"getHttpStatus":{"params":[],"docComment":"Returns the HTTP status of the response","signature":"public SolrResponse::getHttpStatus( )","inheritdoc":0,"modifier":["public"],"return":""},"getHttpStatusMessage":{"params":[],"docComment":"Returns more details on the HTTP status","signature":"public SolrResponse::getHttpStatusMessage( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawRequest":{"params":[],"docComment":"Returns the raw request sent to the Solr server","signature":"public SolrResponse::getRawRequest( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawRequestHeaders":{"params":[],"docComment":"Returns the raw request headers sent to the Solr server","signature":"public SolrResponse::getRawRequestHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawResponse":{"params":[],"docComment":"Returns the raw response from the server","signature":"public SolrResponse::getRawResponse( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawResponseHeaders":{"params":[],"docComment":"Returns the raw response headers from the server","signature":"public SolrResponse::getRawResponseHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getRequestUrl":{"params":[],"docComment":"Returns the full URL the request was sent to","signature":"public SolrResponse::getRequestUrl( )","inheritdoc":0,"modifier":["public"],"return":""},"getResponse":{"params":[],"docComment":"Returns a SolrObject representing the XML response from the server","signature":"public SolrResponse::getResponse( )","inheritdoc":0,"modifier":["public"],"return":"SolrObject"},"setParseMode":{"params":{"$parser_mode":""},"docComment":"Sets the parse mode","signature":"public SolrResponse::setParseMode([int $parser_mode] )","inheritdoc":0,"modifier":["public"],"return":""},"success":{"params":[],"docComment":"Was the request a success","signature":"public SolrResponse::success( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["http_status","parser_mode","success","http_status_message","http_request_url","http_raw_request_headers","http_raw_request","http_raw_response_headers","http_raw_response","http_digested_response"],"final":[],"static":[],"interface":[],"abstract":[],"const":["PARSE_SOLR_OBJ","PARSE_SOLR_DOC","SolrResponse::PARSE_SOLR_OBJ","SolrResponse::PARSE_SOLR_DOC"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","PARSE_SOLR_OBJ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PARSE_SOLR_DOC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SolrResponse::PARSE_SOLR_OBJ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SolrResponse::PARSE_SOLR_DOC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"http_status":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"parser_mode":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"success":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_status_message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_request_url":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_request_headers":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_request":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_response_headers":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_response":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_digested_response":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrUpdateResponse":{"classname":"SolrUpdateResponse","docComment":"","methods":{"modifier":{"public":["__construct","__destruct","getDigestedResponse","getHttpStatus","getHttpStatusMessage","getRawRequest","getRawRequestHeaders","getRawResponse","getRawResponseHeaders","getRequestUrl","getResponse","setParseMode","success"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Constructor","signature":"public SolrUpdateResponse::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":[],"docComment":"Destructor","signature":"public SolrUpdateResponse::__destruct( )","inheritdoc":0,"modifier":["public"],"return":""},"getDigestedResponse":{"params":[],"docComment":"Returns the XML response as serialized PHP data","signature":"public SolrResponse::getDigestedResponse( )","inheritdoc":0,"modifier":["public"],"return":""},"getHttpStatus":{"params":[],"docComment":"Returns the HTTP status of the response","signature":"public SolrResponse::getHttpStatus( )","inheritdoc":0,"modifier":["public"],"return":""},"getHttpStatusMessage":{"params":[],"docComment":"Returns more details on the HTTP status","signature":"public SolrResponse::getHttpStatusMessage( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawRequest":{"params":[],"docComment":"Returns the raw request sent to the Solr server","signature":"public SolrResponse::getRawRequest( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawRequestHeaders":{"params":[],"docComment":"Returns the raw request headers sent to the Solr server","signature":"public SolrResponse::getRawRequestHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawResponse":{"params":[],"docComment":"Returns the raw response from the server","signature":"public SolrResponse::getRawResponse( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawResponseHeaders":{"params":[],"docComment":"Returns the raw response headers from the server","signature":"public SolrResponse::getRawResponseHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getRequestUrl":{"params":[],"docComment":"Returns the full URL the request was sent to","signature":"public SolrResponse::getRequestUrl( )","inheritdoc":0,"modifier":["public"],"return":""},"getResponse":{"params":[],"docComment":"Returns a SolrObject representing the XML response from the server","signature":"public SolrResponse::getResponse( )","inheritdoc":0,"modifier":["public"],"return":"SolrObject"},"setParseMode":{"params":{"$parser_mode":""},"docComment":"Sets the parse mode","signature":"public SolrResponse::setParseMode([int $parser_mode] )","inheritdoc":0,"modifier":["public"],"return":""},"success":{"params":[],"docComment":"Was the request a success","signature":"public SolrResponse::success( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["http_status","parser_mode","success","http_status_message","http_request_url","http_raw_request_headers","http_raw_request","http_raw_response_headers","http_raw_response","http_digested_response"],"final":[],"static":[],"interface":[],"abstract":[],"const":["PARSE_SOLR_OBJ","PARSE_SOLR_DOC","SolrResponse::PARSE_SOLR_OBJ","SolrResponse::PARSE_SOLR_DOC"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","PARSE_SOLR_OBJ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PARSE_SOLR_DOC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SolrResponse::PARSE_SOLR_OBJ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SolrResponse::PARSE_SOLR_DOC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"http_status":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"parser_mode":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"success":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_status_message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_request_url":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_request_headers":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_request":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_response_headers":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_response":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_digested_response":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrPingResponse":{"classname":"SolrPingResponse","docComment":"","methods":{"modifier":{"public":["__construct","__destruct","getResponse","getDigestedResponse","getHttpStatus","getHttpStatusMessage","getRawRequest","getRawRequestHeaders","getRawResponse","getRawResponseHeaders","getRequestUrl","getResponse","setParseMode","success"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Constructor","signature":"public SolrPingResponse::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":[],"docComment":"Destructor","signature":"public SolrPingResponse::__destruct( )","inheritdoc":0,"modifier":["public"],"return":""},"getResponse":{"params":[],"docComment":"Returns a SolrObject representing the XML response from the server","signature":"public SolrResponse::getResponse( )","inheritdoc":0,"modifier":["public"],"return":"SolrObject"},"getDigestedResponse":{"params":[],"docComment":"Returns the XML response as serialized PHP data","signature":"public SolrResponse::getDigestedResponse( )","inheritdoc":0,"modifier":["public"],"return":""},"getHttpStatus":{"params":[],"docComment":"Returns the HTTP status of the response","signature":"public SolrResponse::getHttpStatus( )","inheritdoc":0,"modifier":["public"],"return":""},"getHttpStatusMessage":{"params":[],"docComment":"Returns more details on the HTTP status","signature":"public SolrResponse::getHttpStatusMessage( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawRequest":{"params":[],"docComment":"Returns the raw request sent to the Solr server","signature":"public SolrResponse::getRawRequest( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawRequestHeaders":{"params":[],"docComment":"Returns the raw request headers sent to the Solr server","signature":"public SolrResponse::getRawRequestHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawResponse":{"params":[],"docComment":"Returns the raw response from the server","signature":"public SolrResponse::getRawResponse( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawResponseHeaders":{"params":[],"docComment":"Returns the raw response headers from the server","signature":"public SolrResponse::getRawResponseHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getRequestUrl":{"params":[],"docComment":"Returns the full URL the request was sent to","signature":"public SolrResponse::getRequestUrl( )","inheritdoc":0,"modifier":["public"],"return":""},"setParseMode":{"params":{"$parser_mode":""},"docComment":"Sets the parse mode","signature":"public SolrResponse::setParseMode([int $parser_mode] )","inheritdoc":0,"modifier":["public"],"return":""},"success":{"params":[],"docComment":"Was the request a success","signature":"public SolrResponse::success( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["PARSE_SOLR_OBJ","PARSE_SOLR_DOC"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","PARSE_SOLR_OBJ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PARSE_SOLR_DOC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrGenericResponse":{"classname":"SolrGenericResponse","docComment":"","methods":{"modifier":{"public":["__construct","__destruct","getDigestedResponse","getHttpStatus","getHttpStatusMessage","getRawRequest","getRawRequestHeaders","getRawResponse","getRawResponseHeaders","getRequestUrl","getResponse","setParseMode","success"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Constructor","signature":"public SolrGenericResponse::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":[],"docComment":"Destructor","signature":"public SolrGenericResponse::__destruct( )","inheritdoc":0,"modifier":["public"],"return":""},"getDigestedResponse":{"params":[],"docComment":"Returns the XML response as serialized PHP data","signature":"public SolrResponse::getDigestedResponse( )","inheritdoc":0,"modifier":["public"],"return":""},"getHttpStatus":{"params":[],"docComment":"Returns the HTTP status of the response","signature":"public SolrResponse::getHttpStatus( )","inheritdoc":0,"modifier":["public"],"return":""},"getHttpStatusMessage":{"params":[],"docComment":"Returns more details on the HTTP status","signature":"public SolrResponse::getHttpStatusMessage( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawRequest":{"params":[],"docComment":"Returns the raw request sent to the Solr server","signature":"public SolrResponse::getRawRequest( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawRequestHeaders":{"params":[],"docComment":"Returns the raw request headers sent to the Solr server","signature":"public SolrResponse::getRawRequestHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawResponse":{"params":[],"docComment":"Returns the raw response from the server","signature":"public SolrResponse::getRawResponse( )","inheritdoc":0,"modifier":["public"],"return":""},"getRawResponseHeaders":{"params":[],"docComment":"Returns the raw response headers from the server","signature":"public SolrResponse::getRawResponseHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"getRequestUrl":{"params":[],"docComment":"Returns the full URL the request was sent to","signature":"public SolrResponse::getRequestUrl( )","inheritdoc":0,"modifier":["public"],"return":""},"getResponse":{"params":[],"docComment":"Returns a SolrObject representing the XML response from the server","signature":"public SolrResponse::getResponse( )","inheritdoc":0,"modifier":["public"],"return":"SolrObject"},"setParseMode":{"params":{"$parser_mode":""},"docComment":"Sets the parse mode","signature":"public SolrResponse::setParseMode([int $parser_mode] )","inheritdoc":0,"modifier":["public"],"return":""},"success":{"params":[],"docComment":"Was the request a success","signature":"public SolrResponse::success( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["http_status","parser_mode","success","http_status_message","http_request_url","http_raw_request_headers","http_raw_request","http_raw_response_headers","http_raw_response","http_digested_response"],"final":[],"static":[],"interface":[],"abstract":[],"const":["PARSE_SOLR_OBJ","PARSE_SOLR_DOC","SolrResponse::PARSE_SOLR_OBJ","SolrResponse::PARSE_SOLR_DOC"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","PARSE_SOLR_OBJ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"PARSE_SOLR_DOC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SolrResponse::PARSE_SOLR_OBJ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SolrResponse::PARSE_SOLR_DOC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"http_status":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"parser_mode":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"success":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_status_message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_request_url":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_request_headers":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_request":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_response_headers":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_raw_response":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"http_digested_response":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrParams":{"classname":"SolrParams","docComment":"","methods":{"modifier":{"public":["add","addParam","get","getParam","getParams","getPreparedParams","serialize","set","setParam","toString","unserialize"],"private":[],"protected":[],"final":["add","get","getParam","getParams","getPreparedParams","serialize","set","toString","unserialize"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$name":"","$value":""},"docComment":"This is an alias for SolrParams::addParam","signature":"public SolrParams::add(string $name ,string $value )","inheritdoc":0,"modifier":["final","public"],"return":"SolrParams"},"addParam":{"params":{"$name":"","$value":""},"docComment":"Adds a parameter to the object","signature":"public SolrParams::addParam(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":"SolrParams"},"get":{"params":{"$param_name":""},"docComment":"This is an alias for SolrParams::getParam","signature":"public SolrParams::get(string $param_name )","inheritdoc":0,"modifier":["final","public"],"return":""},"getParam":{"params":{"$param_name":""},"docComment":" Returns a parameter value","signature":"public SolrParams::getParam(string $param_name )","inheritdoc":0,"modifier":["final","public"],"return":""},"getParams":{"params":[],"docComment":"Returns an array of non URL-encoded parameters","signature":"public SolrParams::getParams( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPreparedParams":{"params":[],"docComment":"Returns an array of URL-encoded parameters","signature":"public SolrParams::getPreparedParams( )","inheritdoc":0,"modifier":["final","public"],"return":""},"serialize":{"params":[],"docComment":"Used for custom serialization","signature":"public SolrParams::serialize( )","inheritdoc":0,"modifier":["final","public"],"return":""},"set":{"params":{"$name":"","$value":""},"docComment":"An alias of SolrParams::setParam","signature":"public SolrParams::set(string $name ,string $value )","inheritdoc":0,"modifier":["final","public"],"return":""},"setParam":{"params":{"$name":"","$value":""},"docComment":"Sets the parameter to the specified value","signature":"public SolrParams::setParam(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":"SolrParams"},"toString":{"params":{"$url_encode":""},"docComment":"Returns all the name-value pair parameters in the object","signature":"public SolrParams::toString([bool $url_encode] )","inheritdoc":0,"modifier":["final","public"],"return":""},"unserialize":{"params":{"$serialized":""},"docComment":"Used for custom serialization","signature":"public SolrParams::unserialize(string $serialized )","inheritdoc":0,"modifier":["final","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrModifiableParams":{"classname":"SolrModifiableParams","docComment":"","methods":{"modifier":{"public":["__construct","__destruct","add","addParam","get","getParam","getParams","getPreparedParams","serialize","set","setParam","toString","unserialize"],"private":[],"protected":[],"final":["add","get","getParam","getParams","getPreparedParams","serialize","set","toString","unserialize"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Constructor","signature":"public SolrModifiableParams::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":[],"docComment":"Destructor","signature":"public SolrModifiableParams::__destruct( )","inheritdoc":0,"modifier":["public"],"return":""},"add":{"params":{"$name":"","$value":""},"docComment":"This is an alias for SolrParams::addParam","signature":"public SolrParams::add(string $name ,string $value )","inheritdoc":0,"modifier":["final","public"],"return":"SolrParams"},"addParam":{"params":{"$name":"","$value":""},"docComment":"Adds a parameter to the object","signature":"public SolrParams::addParam(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":"SolrParams"},"get":{"params":{"$param_name":""},"docComment":"This is an alias for SolrParams::getParam","signature":"public SolrParams::get(string $param_name )","inheritdoc":0,"modifier":["final","public"],"return":""},"getParam":{"params":{"$param_name":""},"docComment":" Returns a parameter value","signature":"public SolrParams::getParam(string $param_name )","inheritdoc":0,"modifier":["final","public"],"return":""},"getParams":{"params":[],"docComment":"Returns an array of non URL-encoded parameters","signature":"public SolrParams::getParams( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPreparedParams":{"params":[],"docComment":"Returns an array of URL-encoded parameters","signature":"public SolrParams::getPreparedParams( )","inheritdoc":0,"modifier":["final","public"],"return":""},"serialize":{"params":[],"docComment":"Used for custom serialization","signature":"public SolrParams::serialize( )","inheritdoc":0,"modifier":["final","public"],"return":""},"set":{"params":{"$name":"","$value":""},"docComment":"An alias of SolrParams::setParam","signature":"public SolrParams::set(string $name ,string $value )","inheritdoc":0,"modifier":["final","public"],"return":""},"setParam":{"params":{"$name":"","$value":""},"docComment":"Sets the parameter to the specified value","signature":"public SolrParams::setParam(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":"SolrParams"},"toString":{"params":{"$url_encode":""},"docComment":"Returns all the name-value pair parameters in the object","signature":"public SolrParams::toString([bool $url_encode] )","inheritdoc":0,"modifier":["final","public"],"return":""},"unserialize":{"params":{"$serialized":""},"docComment":"Used for custom serialization","signature":"public SolrParams::unserialize(string $serialized )","inheritdoc":0,"modifier":["final","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrQuery":{"classname":"SolrQuery","docComment":"","methods":{"modifier":{"public":["addFacetDateField","addFacetDateOther","addFacetField","addFacetQuery","addField","addFilterQuery","addHighlightField","addMltField","addMltQueryField","addSortField","addStatsFacet","addStatsField","__construct","__destruct","getFacet","getFacetDateEnd","getFacetDateFields","getFacetDateGap","getFacetDateHardEnd","getFacetDateOther","getFacetDateStart","getFacetFields","getFacetLimit","getFacetMethod","getFacetMinCount","getFacetMissing","getFacetOffset","getFacetPrefix","getFacetQueries","getFacetSort","getFields","getFilterQueries","getHighlight","getHighlightAlternateField","getHighlightFields","getHighlightFormatter","getHighlightFragmenter","getHighlightFragsize","getHighlightHighlightMultiTerm","getHighlightMaxAlternateFieldLength","getHighlightMaxAnalyzedChars","getHighlightMergeContiguous","getHighlightRegexMaxAnalyzedChars","getHighlightRegexPattern","getHighlightRegexSlop","getHighlightRequireFieldMatch","getHighlightSimplePost","getHighlightSimplePre","getHighlightSnippets","getHighlightUsePhraseHighlighter","getMlt","getMltBoost","getMltCount","getMltFields","getMltMaxNumQueryTerms","getMltMaxNumTokens","getMltMaxWordLength","getMltMinDocFrequency","getMltMinTermFrequency","getMltMinWordLength","getMltQueryFields","getQuery","getRows","getSortFields","getStart","getStats","getStatsFacets","getStatsFields","getTerms","getTermsField","getTermsIncludeLowerBound","getTermsIncludeUpperBound","getTermsLimit","getTermsLowerBound","getTermsMaxCount","getTermsMinCount","getTermsPrefix","getTermsReturnRaw","getTermsSort","getTermsUpperBound","getTimeAllowed","removeFacetDateField","removeFacetDateOther","removeFacetField","removeFacetQuery","removeField","removeFilterQuery","removeHighlightField","removeMltField","removeMltQueryField","removeSortField","removeStatsFacet","removeStatsField","setEchoHandler","setEchoParams","setExplainOther","setFacet","setFacetDateEnd","setFacetDateGap","setFacetDateHardEnd","setFacetDateStart","setFacetEnumCacheMinDefaultFrequency","setFacetLimit","setFacetMethod","setFacetMinCount","setFacetMissing","setFacetOffset","setFacetPrefix","setFacetSort","setHighlight","setHighlightAlternateField","setHighlightFormatter","setHighlightFragmenter","setHighlightFragsize","setHighlightHighlightMultiTerm","setHighlightMaxAlternateFieldLength","setHighlightMaxAnalyzedChars","setHighlightMergeContiguous","setHighlightRegexMaxAnalyzedChars","setHighlightRegexPattern","setHighlightRegexSlop","setHighlightRequireFieldMatch","setHighlightSimplePost","setHighlightSimplePre","setHighlightSnippets","setHighlightUsePhraseHighlighter","setMlt","setMltBoost","setMltCount","setMltMaxNumQueryTerms","setMltMaxNumTokens","setMltMaxWordLength","setMltMinDocFrequency","setMltMinTermFrequency","setMltMinWordLength","setOmitHeader","setQuery","setRows","setShowDebugInfo","setStart","setStats","setTerms","setTermsField","setTermsIncludeLowerBound","setTermsIncludeUpperBound","setTermsLimit","setTermsLowerBound","setTermsMaxCount","setTermsMinCount","setTermsPrefix","setTermsReturnRaw","setTermsSort","setTermsUpperBound","setTimeAllowed","__construct","__destruct"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addFacetDateField":{"params":{"$dateField":""},"docComment":"Maps to facet.date","signature":"public SolrQuery::addFacetDateField(string $dateField )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"addFacetDateOther":{"params":{"$value":"","$field_override":""},"docComment":"Adds another facet.date.other parameter","signature":"public SolrQuery::addFacetDateOther(string $value ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"addFacetField":{"params":{"$field":""},"docComment":"Adds another field to the facet","signature":"public SolrQuery::addFacetField(string $field )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"addFacetQuery":{"params":{"$facetQuery":""},"docComment":"Adds a facet query","signature":"public SolrQuery::addFacetQuery(string $facetQuery )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"addField":{"params":{"$field":""},"docComment":"Specifies which fields to return in the result","signature":"public SolrQuery::addField(string $field )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"addFilterQuery":{"params":{"$fq":""},"docComment":"Specifies a filter query","signature":"public SolrQuery::addFilterQuery(string $fq )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"addHighlightField":{"params":{"$field":""},"docComment":"Maps to hl.fl","signature":"public SolrQuery::addHighlightField(string $field )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"addMltField":{"params":{"$field":""},"docComment":"Sets a field to use for similarity","signature":"public SolrQuery::addMltField(string $field )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"addMltQueryField":{"params":{"$field":"","$boost":""},"docComment":"Maps to mlt.qf","signature":"public SolrQuery::addMltQueryField(string $field ,float $boost )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"addSortField":{"params":{"$field":"","$order":""},"docComment":"Used to control how the results should be sorted","signature":"public SolrQuery::addSortField(string $field ,[int $order] )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"addStatsFacet":{"params":{"$field":""},"docComment":"Requests a return of sub results for values within the given facet ","signature":"public SolrQuery::addStatsFacet(string $field )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"addStatsField":{"params":{"$field":""},"docComment":"Maps to stats.field parameter","signature":"public SolrQuery::addStatsField(string $field )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"__construct":{"params":[],"docComment":"Constructor","signature":"public SolrModifiableParams::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":[],"docComment":"Destructor","signature":"public SolrModifiableParams::__destruct( )","inheritdoc":0,"modifier":["public"],"return":""},"getFacet":{"params":[],"docComment":"Returns the value of the facet parameter","signature":"public SolrQuery::getFacet( )","inheritdoc":0,"modifier":["public"],"return":""},"getFacetDateEnd":{"params":{"$field_override":""},"docComment":"Returns the value for the facet.date.end parameter","signature":"public SolrQuery::getFacetDateEnd(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getFacetDateFields":{"params":[],"docComment":"Returns all the facet.date fields","signature":"public SolrQuery::getFacetDateFields( )","inheritdoc":0,"modifier":["public"],"return":""},"getFacetDateGap":{"params":{"$field_override":""},"docComment":"Returns the value of the facet.date.gap parameter","signature":"public SolrQuery::getFacetDateGap(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getFacetDateHardEnd":{"params":{"$field_override":""},"docComment":"Returns the value of the facet.date.hardend parameter","signature":"public SolrQuery::getFacetDateHardEnd(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getFacetDateOther":{"params":{"$field_override":""},"docComment":"Returns the value for the facet.date.other parameter","signature":"public SolrQuery::getFacetDateOther(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getFacetDateStart":{"params":{"$field_override":""},"docComment":"Returns the  lower bound for the first date range for all date faceting on this field","signature":"public SolrQuery::getFacetDateStart(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getFacetFields":{"params":[],"docComment":"Returns all the facet fields","signature":"public SolrQuery::getFacetFields( )","inheritdoc":0,"modifier":["public"],"return":""},"getFacetLimit":{"params":{"$field_override":""},"docComment":"Returns the maximum number of constraint counts that should be returned for the facet fields","signature":"public SolrQuery::getFacetLimit(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getFacetMethod":{"params":{"$field_override":""},"docComment":"Returns the value of the facet.method parameter","signature":"public SolrQuery::getFacetMethod(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getFacetMinCount":{"params":{"$field_override":""},"docComment":"Returns the minimum counts for facet fields should be included in the response","signature":"public SolrQuery::getFacetMinCount(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getFacetMissing":{"params":{"$field_override":""},"docComment":"Returns the current state of the facet.missing parameter","signature":"public SolrQuery::getFacetMissing(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getFacetOffset":{"params":{"$field_override":""},"docComment":"Returns an offset into the list of constraints to be used for pagination","signature":"public SolrQuery::getFacetOffset(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getFacetPrefix":{"params":{"$field_override":""},"docComment":"Returns the facet prefix","signature":"public SolrQuery::getFacetPrefix(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getFacetQueries":{"params":[],"docComment":"Returns all the facet queries","signature":"public SolrQuery::getFacetQueries( )","inheritdoc":0,"modifier":["public"],"return":""},"getFacetSort":{"params":{"$field_override":""},"docComment":"Returns the facet sort type","signature":"public SolrQuery::getFacetSort(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getFields":{"params":[],"docComment":"Returns the list of fields that will be returned in the response","signature":"public SolrQuery::getFields( )","inheritdoc":0,"modifier":["public"],"return":""},"getFilterQueries":{"params":[],"docComment":"Returns an array of filter queries","signature":"public SolrQuery::getFilterQueries( )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlight":{"params":[],"docComment":"Returns the state of the hl parameter","signature":"public SolrQuery::getHighlight( )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightAlternateField":{"params":{"$field_override":""},"docComment":"Returns the highlight field to use as backup or default","signature":"public SolrQuery::getHighlightAlternateField(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightFields":{"params":[],"docComment":"Returns all the fields that Solr should generate highlighted snippets for","signature":"public SolrQuery::getHighlightFields( )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightFormatter":{"params":{"$field_override":""},"docComment":"Returns the formatter for the highlighted output","signature":"public SolrQuery::getHighlightFormatter(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightFragmenter":{"params":{"$field_override":""},"docComment":"Returns the text snippet generator for highlighted text","signature":"public SolrQuery::getHighlightFragmenter(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightFragsize":{"params":{"$field_override":""},"docComment":"Returns the number of characters of fragments to consider for highlighting","signature":"public SolrQuery::getHighlightFragsize(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightHighlightMultiTerm":{"params":[],"docComment":"Returns whether or not to enable highlighting for range\/wildcard\/fuzzy\/prefix queries","signature":"public SolrQuery::getHighlightHighlightMultiTerm( )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightMaxAlternateFieldLength":{"params":{"$field_override":""},"docComment":"Returns the maximum number of characters of the field to return","signature":"public SolrQuery::getHighlightMaxAlternateFieldLength(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightMaxAnalyzedChars":{"params":[],"docComment":"Returns the maximum number of characters into a document to look for suitable snippets","signature":"public SolrQuery::getHighlightMaxAnalyzedChars( )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightMergeContiguous":{"params":{"$field_override":""},"docComment":"Returns whether or not the collapse contiguous fragments into a single fragment","signature":"public SolrQuery::getHighlightMergeContiguous(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightRegexMaxAnalyzedChars":{"params":[],"docComment":"Returns the maximum number of characters from a field when using the regex fragmenter","signature":"public SolrQuery::getHighlightRegexMaxAnalyzedChars( )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightRegexPattern":{"params":[],"docComment":"Returns the regular expression for fragmenting","signature":"public SolrQuery::getHighlightRegexPattern( )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightRegexSlop":{"params":[],"docComment":"Returns the deviation factor from the ideal fragment size","signature":"public SolrQuery::getHighlightRegexSlop( )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightRequireFieldMatch":{"params":[],"docComment":"Returns if a field will only be highlighted if the query matched in this particular field","signature":"public SolrQuery::getHighlightRequireFieldMatch( )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightSimplePost":{"params":{"$field_override":""},"docComment":"Returns the text which appears after a highlighted term","signature":"public SolrQuery::getHighlightSimplePost(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightSimplePre":{"params":{"$field_override":""},"docComment":"Returns the text which appears before a highlighted term","signature":"public SolrQuery::getHighlightSimplePre(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightSnippets":{"params":{"$field_override":""},"docComment":"Returns the maximum number of highlighted snippets to generate per field","signature":"public SolrQuery::getHighlightSnippets(string $field_override )","inheritdoc":0,"modifier":["public"],"return":""},"getHighlightUsePhraseHighlighter":{"params":[],"docComment":"Returns the state of the hl.usePhraseHighlighter parameter","signature":"public SolrQuery::getHighlightUsePhraseHighlighter( )","inheritdoc":0,"modifier":["public"],"return":""},"getMlt":{"params":[],"docComment":"Returns whether or not MoreLikeThis results should be enabled","signature":"public SolrQuery::getMlt( )","inheritdoc":0,"modifier":["public"],"return":""},"getMltBoost":{"params":[],"docComment":"Returns whether or not the query will be boosted by the interesting term relevance","signature":"public SolrQuery::getMltBoost( )","inheritdoc":0,"modifier":["public"],"return":""},"getMltCount":{"params":[],"docComment":"Returns the number of similar documents to return for each result","signature":"public SolrQuery::getMltCount( )","inheritdoc":0,"modifier":["public"],"return":""},"getMltFields":{"params":[],"docComment":"Returns all the fields to use for similarity","signature":"public SolrQuery::getMltFields( )","inheritdoc":0,"modifier":["public"],"return":""},"getMltMaxNumQueryTerms":{"params":[],"docComment":"Returns the maximum number of query terms that will be included in any generated query","signature":"public SolrQuery::getMltMaxNumQueryTerms( )","inheritdoc":0,"modifier":["public"],"return":""},"getMltMaxNumTokens":{"params":[],"docComment":"Returns the maximum number of tokens to parse in each document field that is not stored with TermVector support","signature":"public SolrQuery::getMltMaxNumTokens( )","inheritdoc":0,"modifier":["public"],"return":""},"getMltMaxWordLength":{"params":[],"docComment":" Returns the maximum word length above which words will be ignored","signature":"public SolrQuery::getMltMaxWordLength( )","inheritdoc":0,"modifier":["public"],"return":""},"getMltMinDocFrequency":{"params":[],"docComment":"Returns the treshold frequency at which words will be ignored which do not occur in at least this many docs","signature":"public SolrQuery::getMltMinDocFrequency( )","inheritdoc":0,"modifier":["public"],"return":""},"getMltMinTermFrequency":{"params":[],"docComment":"Returns the frequency below which terms will be ignored in the source document","signature":"public SolrQuery::getMltMinTermFrequency( )","inheritdoc":0,"modifier":["public"],"return":""},"getMltMinWordLength":{"params":[],"docComment":"Returns the minimum word length below which words will be ignored","signature":"public SolrQuery::getMltMinWordLength( )","inheritdoc":0,"modifier":["public"],"return":""},"getMltQueryFields":{"params":[],"docComment":"Returns the query fields and their boosts","signature":"public SolrQuery::getMltQueryFields( )","inheritdoc":0,"modifier":["public"],"return":""},"getQuery":{"params":[],"docComment":"Returns the main query","signature":"public SolrQuery::getQuery( )","inheritdoc":0,"modifier":["public"],"return":""},"getRows":{"params":[],"docComment":"Returns the maximum number of documents","signature":"public SolrQuery::getRows( )","inheritdoc":0,"modifier":["public"],"return":""},"getSortFields":{"params":[],"docComment":"Returns all the sort fields","signature":"public SolrQuery::getSortFields( )","inheritdoc":0,"modifier":["public"],"return":""},"getStart":{"params":[],"docComment":"Returns the offset in the complete result set ","signature":"public SolrQuery::getStart( )","inheritdoc":0,"modifier":["public"],"return":""},"getStats":{"params":[],"docComment":"Returns whether or not stats is enabled","signature":"public SolrQuery::getStats( )","inheritdoc":0,"modifier":["public"],"return":""},"getStatsFacets":{"params":[],"docComment":"Returns all the stats facets that were set","signature":"public SolrQuery::getStatsFacets( )","inheritdoc":0,"modifier":["public"],"return":""},"getStatsFields":{"params":[],"docComment":"Returns all the statistics fields","signature":"public SolrQuery::getStatsFields( )","inheritdoc":0,"modifier":["public"],"return":""},"getTerms":{"params":[],"docComment":"Returns whether or not the TermsComponent is enabled","signature":"public SolrQuery::getTerms( )","inheritdoc":0,"modifier":["public"],"return":""},"getTermsField":{"params":[],"docComment":"Returns the field from which the terms are retrieved","signature":"public SolrQuery::getTermsField( )","inheritdoc":0,"modifier":["public"],"return":""},"getTermsIncludeLowerBound":{"params":[],"docComment":"Returns whether or not to include the lower bound in the result set","signature":"public SolrQuery::getTermsIncludeLowerBound( )","inheritdoc":0,"modifier":["public"],"return":""},"getTermsIncludeUpperBound":{"params":[],"docComment":"Returns whether or not to include the upper bound term in the result set","signature":"public SolrQuery::getTermsIncludeUpperBound( )","inheritdoc":0,"modifier":["public"],"return":""},"getTermsLimit":{"params":[],"docComment":"Returns the maximum number of terms Solr should return","signature":"public SolrQuery::getTermsLimit( )","inheritdoc":0,"modifier":["public"],"return":""},"getTermsLowerBound":{"params":[],"docComment":"Returns the term to start at","signature":"public SolrQuery::getTermsLowerBound( )","inheritdoc":0,"modifier":["public"],"return":""},"getTermsMaxCount":{"params":[],"docComment":"Returns the maximum document frequency","signature":"public SolrQuery::getTermsMaxCount( )","inheritdoc":0,"modifier":["public"],"return":""},"getTermsMinCount":{"params":[],"docComment":"Returns the minimum document frequency to return in order to be included","signature":"public SolrQuery::getTermsMinCount( )","inheritdoc":0,"modifier":["public"],"return":""},"getTermsPrefix":{"params":[],"docComment":"Returns the term prefix","signature":"public SolrQuery::getTermsPrefix( )","inheritdoc":0,"modifier":["public"],"return":""},"getTermsReturnRaw":{"params":[],"docComment":"Whether or not to return raw characters","signature":"public SolrQuery::getTermsReturnRaw( )","inheritdoc":0,"modifier":["public"],"return":""},"getTermsSort":{"params":[],"docComment":"Returns an integer indicating how terms are sorted","signature":"public SolrQuery::getTermsSort( )","inheritdoc":0,"modifier":["public"],"return":""},"getTermsUpperBound":{"params":[],"docComment":"Returns the term to stop at","signature":"public SolrQuery::getTermsUpperBound( )","inheritdoc":0,"modifier":["public"],"return":""},"getTimeAllowed":{"params":[],"docComment":"Returns the time in milliseconds allowed for the query to finish","signature":"public SolrQuery::getTimeAllowed( )","inheritdoc":0,"modifier":["public"],"return":""},"removeFacetDateField":{"params":{"$field":""},"docComment":"Removes one of the facet date fields","signature":"public SolrQuery::removeFacetDateField(string $field )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"removeFacetDateOther":{"params":{"$value":"","$field_override":""},"docComment":"Removes one of the facet.date.other parameters","signature":"public SolrQuery::removeFacetDateOther(string $value ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"removeFacetField":{"params":{"$field":""},"docComment":"Removes one of the facet.date parameters","signature":"public SolrQuery::removeFacetField(string $field )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"removeFacetQuery":{"params":{"$value":""},"docComment":"Removes one of the facet.query parameters","signature":"public SolrQuery::removeFacetQuery(string $value )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"removeField":{"params":{"$field":""},"docComment":"Removes a field from the list of fields","signature":"public SolrQuery::removeField(string $field )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"removeFilterQuery":{"params":{"$fq":""},"docComment":"Removes a filter query","signature":"public SolrQuery::removeFilterQuery(string $fq )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"removeHighlightField":{"params":{"$field":""},"docComment":"Removes one of the fields used for highlighting","signature":"public SolrQuery::removeHighlightField(string $field )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"removeMltField":{"params":{"$field":""},"docComment":"Removes one of the moreLikeThis fields","signature":"public SolrQuery::removeMltField(string $field )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"removeMltQueryField":{"params":{"$queryField":""},"docComment":"Removes one of the moreLikeThis query fields","signature":"public SolrQuery::removeMltQueryField(string $queryField )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"removeSortField":{"params":{"$field":""},"docComment":"Removes one of the sort fields","signature":"public SolrQuery::removeSortField(string $field )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"removeStatsFacet":{"params":{"$value":""},"docComment":"Removes one of the stats.facet parameters","signature":"public SolrQuery::removeStatsFacet(string $value )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"removeStatsField":{"params":{"$field":""},"docComment":"Removes one of the stats.field parameters","signature":"public SolrQuery::removeStatsField(string $field )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setEchoHandler":{"params":{"$flag":""},"docComment":"Toggles the echoHandler parameter","signature":"public SolrQuery::setEchoHandler(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setEchoParams":{"params":{"$type":""},"docComment":"Determines what kind of parameters to include in the response","signature":"public SolrQuery::setEchoParams(string $type )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setExplainOther":{"params":{"$query":""},"docComment":"Sets the explainOther common query parameter","signature":"public SolrQuery::setExplainOther(string $query )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setFacet":{"params":{"$flag":""},"docComment":"Maps to the facet parameter. Enables or disables facetting","signature":"public SolrQuery::setFacet(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setFacetDateEnd":{"params":{"$value":"","$field_override":""},"docComment":"Maps to facet.date.end","signature":"public SolrQuery::setFacetDateEnd(string $value ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setFacetDateGap":{"params":{"$value":"","$field_override":""},"docComment":"Maps to facet.date.gap","signature":"public SolrQuery::setFacetDateGap(string $value ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setFacetDateHardEnd":{"params":{"$value":"","$field_override":""},"docComment":"Maps to facet.date.hardend","signature":"public SolrQuery::setFacetDateHardEnd(bool $value ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setFacetDateStart":{"params":{"$value":"","$field_override":""},"docComment":"Maps to facet.date.start","signature":"public SolrQuery::setFacetDateStart(string $value ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setFacetEnumCacheMinDefaultFrequency":{"params":{"$frequency":"","$field_override":""},"docComment":"Sets the minimum document frequency used for determining term count","signature":"public SolrQuery::setFacetEnumCacheMinDefaultFrequency(int $frequency ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setFacetLimit":{"params":{"$limit":"","$field_override":""},"docComment":"Maps to facet.limit","signature":"public SolrQuery::setFacetLimit(int $limit ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setFacetMethod":{"params":{"$method":"","$field_override":""},"docComment":"Specifies the type of algorithm to use when faceting a field","signature":"public SolrQuery::setFacetMethod(string $method ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setFacetMinCount":{"params":{"$mincount":"","$field_override":""},"docComment":"Maps to facet.mincount","signature":"public SolrQuery::setFacetMinCount(int $mincount ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setFacetMissing":{"params":{"$flag":"","$field_override":""},"docComment":"Maps to facet.missing","signature":"public SolrQuery::setFacetMissing(bool $flag ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setFacetOffset":{"params":{"$offset":"","$field_override":""},"docComment":"Sets the offset into the list of constraints to allow for pagination","signature":"public SolrQuery::setFacetOffset(int $offset ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setFacetPrefix":{"params":{"$prefix":"","$field_override":""},"docComment":"Specifies a string prefix with which to limits the terms on which to facet","signature":"public SolrQuery::setFacetPrefix(string $prefix ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setFacetSort":{"params":{"$facetSort":"","$field_override":""},"docComment":"Determines the ordering of the facet field constraints","signature":"public SolrQuery::setFacetSort(int $facetSort ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlight":{"params":{"$flag":""},"docComment":"Enables or disables highlighting","signature":"public SolrQuery::setHighlight(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightAlternateField":{"params":{"$field":"","$field_override":""},"docComment":"Specifies the backup field to use","signature":"public SolrQuery::setHighlightAlternateField(string $field ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightFormatter":{"params":{"$formatter":"","$field_override":""},"docComment":"Specify a formatter for the highlight output","signature":"public SolrQuery::setHighlightFormatter(string $formatter ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightFragmenter":{"params":{"$fragmenter":"","$field_override":""},"docComment":"Sets a text snippet generator for highlighted text","signature":"public SolrQuery::setHighlightFragmenter(string $fragmenter ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightFragsize":{"params":{"$size":"","$field_override":""},"docComment":"The size of fragments to consider for highlighting","signature":"public SolrQuery::setHighlightFragsize(int $size ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightHighlightMultiTerm":{"params":{"$flag":""},"docComment":"Use SpanScorer to highlight phrase terms","signature":"public SolrQuery::setHighlightHighlightMultiTerm(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightMaxAlternateFieldLength":{"params":{"$fieldLength":"","$field_override":""},"docComment":"Sets the maximum number of characters of the field to return","signature":"public SolrQuery::setHighlightMaxAlternateFieldLength(int $fieldLength ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightMaxAnalyzedChars":{"params":{"$value":""},"docComment":"Specifies the number of characters into a document to look for suitable snippets","signature":"public SolrQuery::setHighlightMaxAnalyzedChars(int $value )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightMergeContiguous":{"params":{"$flag":"","$field_override":""},"docComment":"Whether or not to collapse contiguous fragments into a single fragment","signature":"public SolrQuery::setHighlightMergeContiguous(bool $flag ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightRegexMaxAnalyzedChars":{"params":{"$maxAnalyzedChars":""},"docComment":"Specify the maximum number of characters to analyze","signature":"public SolrQuery::setHighlightRegexMaxAnalyzedChars(int $maxAnalyzedChars )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightRegexPattern":{"params":{"$value":""},"docComment":"Specify the regular expression for fragmenting","signature":"public SolrQuery::setHighlightRegexPattern(string $value )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightRegexSlop":{"params":{"$factor":""},"docComment":"Sets the factor by which the regex fragmenter can stray from the ideal fragment size","signature":"public SolrQuery::setHighlightRegexSlop(float $factor )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightRequireFieldMatch":{"params":{"$flag":""},"docComment":"Require field matching during highlighting","signature":"public SolrQuery::setHighlightRequireFieldMatch(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightSimplePost":{"params":{"$simplePost":"","$field_override":""},"docComment":"Sets the text which appears after a highlighted term","signature":"public SolrQuery::setHighlightSimplePost(string $simplePost ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightSimplePre":{"params":{"$simplePre":"","$field_override":""},"docComment":"Sets the text which appears before a highlighted term","signature":"public SolrQuery::setHighlightSimplePre(string $simplePre ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightSnippets":{"params":{"$value":"","$field_override":""},"docComment":"Sets the maximum number of highlighted snippets to generate per field","signature":"public SolrQuery::setHighlightSnippets(int $value ,string $field_override )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setHighlightUsePhraseHighlighter":{"params":{"$flag":""},"docComment":"Whether to highlight phrase terms only when they appear within the query phrase","signature":"public SolrQuery::setHighlightUsePhraseHighlighter(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setMlt":{"params":{"$flag":""},"docComment":"Enables or disables moreLikeThis","signature":"public SolrQuery::setMlt(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setMltBoost":{"params":{"$flag":""},"docComment":"Set if the query will be boosted by the interesting term relevance","signature":"public SolrQuery::setMltBoost(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setMltCount":{"params":{"$count":""},"docComment":"Set the number of similar documents to return for each result","signature":"public SolrQuery::setMltCount(int $count )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setMltMaxNumQueryTerms":{"params":{"$value":""},"docComment":"Sets the maximum number of query terms included","signature":"public SolrQuery::setMltMaxNumQueryTerms(int $value )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setMltMaxNumTokens":{"params":{"$value":""},"docComment":"Specifies the maximum number of tokens to parse","signature":"public SolrQuery::setMltMaxNumTokens(int $value )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setMltMaxWordLength":{"params":{"$maxWordLength":""},"docComment":"Sets the maximum word length","signature":"public SolrQuery::setMltMaxWordLength(int $maxWordLength )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setMltMinDocFrequency":{"params":{"$minDocFrequency":""},"docComment":"Sets the mltMinDoc frequency","signature":"public SolrQuery::setMltMinDocFrequency(int $minDocFrequency )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setMltMinTermFrequency":{"params":{"$minTermFrequency":""},"docComment":"Sets the frequency below which terms will be ignored in the source docs","signature":"public SolrQuery::setMltMinTermFrequency(int $minTermFrequency )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setMltMinWordLength":{"params":{"$minWordLength":""},"docComment":"Sets the minimum word length","signature":"public SolrQuery::setMltMinWordLength(int $minWordLength )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setOmitHeader":{"params":{"$flag":""},"docComment":"Exclude the header from the returned results","signature":"public SolrQuery::setOmitHeader(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setQuery":{"params":{"$query":""},"docComment":"Sets the search query","signature":"public SolrQuery::setQuery(string $query )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setRows":{"params":{"$rows":""},"docComment":"Specifies the maximum number of rows to return in the result","signature":"public SolrQuery::setRows(int $rows )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setShowDebugInfo":{"params":{"$flag":""},"docComment":"Flag to show debug information","signature":"public SolrQuery::setShowDebugInfo(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setStart":{"params":{"$start":""},"docComment":"Specifies the number of rows to skip","signature":"public SolrQuery::setStart(int $start )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setStats":{"params":{"$flag":""},"docComment":"Enables or disables the Stats component","signature":"public SolrQuery::setStats(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setTerms":{"params":{"$flag":""},"docComment":"Enables or disables the TermsComponent","signature":"public SolrQuery::setTerms(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setTermsField":{"params":{"$fieldname":""},"docComment":"Sets the name of the field to get the Terms from","signature":"public SolrQuery::setTermsField(string $fieldname )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setTermsIncludeLowerBound":{"params":{"$flag":""},"docComment":"Include the lower bound term in the result set","signature":"public SolrQuery::setTermsIncludeLowerBound(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setTermsIncludeUpperBound":{"params":{"$flag":""},"docComment":"Include the upper bound term in the result set","signature":"public SolrQuery::setTermsIncludeUpperBound(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setTermsLimit":{"params":{"$limit":""},"docComment":"Sets the maximum number of terms to return","signature":"public SolrQuery::setTermsLimit(int $limit )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setTermsLowerBound":{"params":{"$lowerBound":""},"docComment":"Specifies the Term to start from","signature":"public SolrQuery::setTermsLowerBound(string $lowerBound )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setTermsMaxCount":{"params":{"$frequency":""},"docComment":"Sets the maximum document frequency","signature":"public SolrQuery::setTermsMaxCount(int $frequency )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setTermsMinCount":{"params":{"$frequency":""},"docComment":"Sets the minimum document frequency","signature":"public SolrQuery::setTermsMinCount(int $frequency )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setTermsPrefix":{"params":{"$prefix":""},"docComment":"Restrict matches to terms that start with the prefix","signature":"public SolrQuery::setTermsPrefix(string $prefix )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setTermsReturnRaw":{"params":{"$flag":""},"docComment":"Return the raw characters of the indexed term","signature":"public SolrQuery::setTermsReturnRaw(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setTermsSort":{"params":{"$sortType":""},"docComment":"Specifies how to sort the returned terms","signature":"public SolrQuery::setTermsSort(int $sortType )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setTermsUpperBound":{"params":{"$upperBound":""},"docComment":"Sets the term to stop at","signature":"public SolrQuery::setTermsUpperBound(string $upperBound )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"},"setTimeAllowed":{"params":{"$timeAllowed":""},"docComment":"The time allowed for search to finish","signature":"public SolrQuery::setTimeAllowed(int $timeAllowed )","inheritdoc":0,"modifier":["public"],"return":"SolrQuery"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["ORDER_ASC","ORDER_DESC","FACET_SORT_INDEX","FACET_SORT_COUNT","TERMS_SORT_INDEX","TERMS_SORT_COUNT"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","ORDER_ASC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ORDER_DESC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FACET_SORT_INDEX":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FACET_SORT_COUNT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TERMS_SORT_INDEX":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TERMS_SORT_COUNT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrException":{"classname":"SolrException","docComment":"","methods":{"modifier":{"public":["getInternalInfo","getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getInternalInfo":{"params":[],"docComment":"Returns internal information where the Exception was thrown","signature":"public SolrException::getInternalInfo( )","inheritdoc":0,"modifier":["public"],"return":""},"getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["sourceline","sourcefile","zif_name","message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","sourceline":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"sourcefile":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"zif_name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrClientException":{"classname":"SolrClientException","docComment":"","methods":{"modifier":{"public":["getInternalInfo","getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString","getInternalInfo"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getInternalInfo":{"params":[],"docComment":"Returns internal information where the Exception was thrown","signature":"public SolrException::getInternalInfo( )","inheritdoc":0,"modifier":["public"],"return":""},"getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line","sourceline","sourcefile","zif_name"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"sourceline":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"sourcefile":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"zif_name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrIllegalArgumentException":{"classname":"SolrIllegalArgumentException","docComment":"","methods":{"modifier":{"public":["getInternalInfo","getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString","getInternalInfo"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getInternalInfo":{"params":[],"docComment":"Returns internal information where the Exception was thrown","signature":"public SolrException::getInternalInfo( )","inheritdoc":0,"modifier":["public"],"return":""},"getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line","sourceline","sourcefile","zif_name"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"sourceline":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"sourcefile":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"zif_name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SolrIllegalOperationException":{"classname":"SolrIllegalOperationException","docComment":"","methods":{"modifier":{"public":["getInternalInfo","getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString","getInternalInfo"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getInternalInfo":{"params":[],"docComment":"Returns internal information where the Exception was thrown","signature":"public SolrException::getInternalInfo( )","inheritdoc":0,"modifier":["public"],"return":""},"getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line","sourceline","sourcefile","zif_name"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"sourceline":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"sourcefile":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"zif_name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SphinxClient":{"classname":"SphinxClient","docComment":"","methods":{"modifier":{"public":["addQuery","buildExcerpts","buildKeywords","close","__construct","escapeString","getLastError","getLastWarning","open","query","resetFilters","resetGroupBy","runQueries","setArrayResult","setConnectTimeout","setFieldWeights","setFilter","setFilterFloatRange","setFilterRange","setGeoAnchor","setGroupBy","setGroupDistinct","setIDRange","setIndexWeights","setLimits","setMatchMode","setMaxQueryTime","setOverride","setRankingMode","setRetries","setSelect","setServer","setSortMode","status","updateAttributes"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addQuery":{"params":{"$query":"","$index":"","$comment":""},"docComment":"Add query to multi-query batch","signature":"public SphinxClient::addQuery(string $query ,[string $index] ,[string $comment] )","inheritdoc":0,"modifier":["public"],"return":""},"buildExcerpts":{"params":{"$docs":"","$index":"","$words":"","$opts":""},"docComment":"Build text snippets","signature":"public SphinxClient::buildExcerpts(array $docs ,string $index ,string $words ,array $opts )","inheritdoc":0,"modifier":["public"],"return":""},"buildKeywords":{"params":{"$query":"","$index":"","$hits":""},"docComment":"Extract keywords from query","signature":"public SphinxClient::buildKeywords(string $query ,string $index ,bool $hits )","inheritdoc":0,"modifier":["public"],"return":""},"close":{"params":[],"docComment":"Closes previously opened persistent connection","signature":"public SphinxClient::close( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"Create a new SphinxClient object","signature":"public SphinxClient::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"escapeString":{"params":{"$string":""},"docComment":"Escape special characters","signature":"public SphinxClient::escapeString(string $string )","inheritdoc":0,"modifier":["public"],"return":""},"getLastError":{"params":[],"docComment":"Get the last error message","signature":"public SphinxClient::getLastError( )","inheritdoc":0,"modifier":["public"],"return":""},"getLastWarning":{"params":[],"docComment":"Get the last warning","signature":"public SphinxClient::getLastWarning( )","inheritdoc":0,"modifier":["public"],"return":""},"open":{"params":[],"docComment":"Opens persistent connection to the server","signature":"public SphinxClient::open( )","inheritdoc":0,"modifier":["public"],"return":""},"query":{"params":{"$query":"","$index":"","$comment":""},"docComment":"Execute search query","signature":"public SphinxClient::query(string $query ,[string $index] ,[string $comment] )","inheritdoc":0,"modifier":["public"],"return":""},"resetFilters":{"params":[],"docComment":"Clear all filters","signature":"public SphinxClient::resetFilters( )","inheritdoc":0,"modifier":["public"],"return":""},"resetGroupBy":{"params":[],"docComment":"Clear all group-by settings","signature":"public SphinxClient::resetGroupBy( )","inheritdoc":0,"modifier":["public"],"return":""},"runQueries":{"params":[],"docComment":"Run a batch of search queries","signature":"public SphinxClient::runQueries( )","inheritdoc":0,"modifier":["public"],"return":""},"setArrayResult":{"params":{"$array_result":""},"docComment":"Change the format of result set array","signature":"public SphinxClient::setArrayResult([bool $array_result] )","inheritdoc":0,"modifier":["public"],"return":""},"setConnectTimeout":{"params":{"$timeout":""},"docComment":"Set connection timeout","signature":"public SphinxClient::setConnectTimeout(float $timeout )","inheritdoc":0,"modifier":["public"],"return":""},"setFieldWeights":{"params":{"$weights":""},"docComment":"Set field weights","signature":"public SphinxClient::setFieldWeights(array $weights )","inheritdoc":0,"modifier":["public"],"return":""},"setFilter":{"params":{"$attribute":"","$values":"","$exclude":""},"docComment":"Add new integer values set filter","signature":"public SphinxClient::setFilter(string $attribute ,array $values ,[bool $exclude] )","inheritdoc":0,"modifier":["public"],"return":""},"setFilterFloatRange":{"params":{"$attribute":"","$min":"","$max":"","$exclude":""},"docComment":"Add new float range filter","signature":"public SphinxClient::setFilterFloatRange(string $attribute ,float $min ,float $max ,[bool $exclude] )","inheritdoc":0,"modifier":["public"],"return":""},"setFilterRange":{"params":{"$attribute":"","$min":"","$max":"","$exclude":""},"docComment":"Add new integer range filter","signature":"public SphinxClient::setFilterRange(string $attribute ,int $min ,int $max ,[bool $exclude] )","inheritdoc":0,"modifier":["public"],"return":""},"setGeoAnchor":{"params":{"$attrlat":"","$attrlong":"","$latitude":"","$longitude":""},"docComment":"Set anchor point for a geosphere distance calculations","signature":"public SphinxClient::setGeoAnchor(string $attrlat ,string $attrlong ,float $latitude ,float $longitude )","inheritdoc":0,"modifier":["public"],"return":""},"setGroupBy":{"params":{"$attribute":"","$func":"","$groupsort":""},"docComment":"Set grouping attribute","signature":"public SphinxClient::setGroupBy(string $attribute ,int $func ,[string $groupsort] )","inheritdoc":0,"modifier":["public"],"return":""},"setGroupDistinct":{"params":{"$attribute":""},"docComment":"Set attribute name for per-group distinct values count calculations","signature":"public SphinxClient::setGroupDistinct(string $attribute )","inheritdoc":0,"modifier":["public"],"return":""},"setIDRange":{"params":{"$min":"","$max":""},"docComment":"Set a range of accepted document IDs","signature":"public SphinxClient::setIDRange(int $min ,int $max )","inheritdoc":0,"modifier":["public"],"return":""},"setIndexWeights":{"params":{"$weights":""},"docComment":"Set per-index weights","signature":"public SphinxClient::setIndexWeights(array $weights )","inheritdoc":0,"modifier":["public"],"return":""},"setLimits":{"params":{"$offset":"","$limit":"","$max_matches":"","$cutoff":""},"docComment":"Set offset and limit of the result set","signature":"public SphinxClient::setLimits(int $offset ,int $limit ,[int $max_matches] ,[int $cutoff] )","inheritdoc":0,"modifier":["public"],"return":""},"setMatchMode":{"params":{"$mode":""},"docComment":"Set full-text query matching mode","signature":"public SphinxClient::setMatchMode(int $mode )","inheritdoc":0,"modifier":["public"],"return":""},"setMaxQueryTime":{"params":{"$qtime":""},"docComment":"Set maximum query time","signature":"public SphinxClient::setMaxQueryTime(int $qtime )","inheritdoc":0,"modifier":["public"],"return":""},"setOverride":{"params":{"$attribute":"","$type":"","$values":""},"docComment":"Sets temporary per-document attribute value\n   overrides","signature":"public SphinxClient::setOverride(string $attribute ,int $type ,array $values )","inheritdoc":0,"modifier":["public"],"return":""},"setRankingMode":{"params":{"$ranker":""},"docComment":"Set ranking mode","signature":"public SphinxClient::setRankingMode(int $ranker )","inheritdoc":0,"modifier":["public"],"return":""},"setRetries":{"params":{"$count":"","$delay":""},"docComment":"Set retry count and delay","signature":"public SphinxClient::setRetries(int $count ,[int $delay] )","inheritdoc":0,"modifier":["public"],"return":""},"setSelect":{"params":{"$clause":""},"docComment":"Set select clause","signature":"public SphinxClient::setSelect(string $clause )","inheritdoc":0,"modifier":["public"],"return":""},"setServer":{"params":{"$server":"","$port":""},"docComment":"Set searchd host and port","signature":"public SphinxClient::setServer(string $server ,int $port )","inheritdoc":0,"modifier":["public"],"return":""},"setSortMode":{"params":{"$mode":"","$sortby":""},"docComment":"Set matches sorting mode","signature":"public SphinxClient::setSortMode(int $mode ,string $sortby )","inheritdoc":0,"modifier":["public"],"return":""},"status":{"params":[],"docComment":"Queries searchd status","signature":"public SphinxClient::status( )","inheritdoc":0,"modifier":["public"],"return":""},"updateAttributes":{"params":{"$index":"","$attributes":"","$values":"","$mva":""},"docComment":"Update document attributes","signature":"public SphinxClient::updateAttributes(string $index ,array $attributes ,array $values ,[bool $mva] )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplType":{"classname":"SplType","docComment":"","methods":{"modifier":{"public":["__construct"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$initial_value":"","$strict":""},"docComment":"Creates a new value of some type","signature":"SplType::__construct(mixed $initial_value ,bool $strict )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["__default"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__default":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplInt":{"classname":"SplInt","docComment":"","methods":{"modifier":{"public":["__construct"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$initial_value":"","$strict":""},"docComment":"Creates a new value of some type","signature":"SplType::__construct(mixed $initial_value ,bool $strict )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["__default"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__default":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplFloat":{"classname":"SplFloat","docComment":"","methods":{"modifier":{"public":["__construct"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$initial_value":"","$strict":""},"docComment":"Creates a new value of some type","signature":"SplType::__construct(mixed $initial_value ,bool $strict )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["__default"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__default":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplEnum":{"classname":"SplEnum","docComment":"","methods":{"modifier":{"public":["getConstList","__construct"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getConstList":{"params":{"$include_default":""},"docComment":"Returns all consts (possible values) as an array.","signature":"public SplEnum::getConstList([bool $include_default] )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$initial_value":"","$strict":""},"docComment":"Creates a new value of some type","signature":"SplType::__construct(mixed $initial_value ,bool $strict )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["__default"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__default":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplBool":{"classname":"SplBool","docComment":"","methods":{"modifier":{"public":["getConstList"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getConstList":{"params":{"$include_default":""},"docComment":"Returns all consts (possible values) as an array.","signature":"public SplEnum::getConstList([bool $include_default] )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["__default","false","true"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__default":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"false":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"true":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SplString":{"classname":"SplString","docComment":"","methods":{"modifier":{"public":["__construct"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$initial_value":"","$strict":""},"docComment":"Creates a new value of some type","signature":"SplType::__construct(mixed $initial_value ,bool $strict )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["__default"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__default":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Stomp":{"classname":"Stomp","docComment":"","methods":{"modifier":{"public":["abort","ack","begin","commit","__construct","__destruct","error","getReadTimeout","getSessionId","hasFrame","readFrame","send","setReadTimeout","subscribe","unsubscribe"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","abort":{"params":{"$transaction_id":"","$headers":"","$link":""},"docComment":"Rolls back a transaction in progress","signature":"stomp_abort(resource $link ,string $transaction_id ,array $headers )","inheritdoc":0,"modifier":["public"],"return":""},"ack":{"params":{"$msg":"","$headers":"","$link":""},"docComment":"Acknowledges consumption of a message","signature":"stomp_ack(resource $link ,mixed $msg ,array $headers )","inheritdoc":0,"modifier":["public"],"return":""},"begin":{"params":{"$transaction_id":"","$headers":"","$link":""},"docComment":"Starts a transaction","signature":"stomp_begin(resource $link ,string $transaction_id ,array $headers )","inheritdoc":0,"modifier":["public"],"return":""},"commit":{"params":{"$transaction_id":"","$headers":"","$link":""},"docComment":"Commits a transaction in progress","signature":"stomp_commit(resource $link ,string $transaction_id ,array $headers )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$broker":"","$username":"","$password":"","$headers":""},"docComment":"Opens a connection","signature":"stomp_connect([string $broker] ,string $username ,string $password ,array $headers )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":{"$link":""},"docComment":"Closes stomp connection","signature":"stomp_close(resource $link )","inheritdoc":0,"modifier":["public"],"return":""},"error":{"params":{"$link":""},"docComment":"Gets the last stomp error","signature":"stomp_error(resource $link )","inheritdoc":0,"modifier":["public"],"return":""},"getReadTimeout":{"params":{"$link":""},"docComment":"Gets read timeout","signature":"stomp_get_read_timeout(resource $link )","inheritdoc":0,"modifier":["public"],"return":""},"getSessionId":{"params":{"$link":""},"docComment":"Gets the current stomp session ID","signature":"stomp_get_session_id(resource $link )","inheritdoc":0,"modifier":["public"],"return":""},"hasFrame":{"params":{"$link":""},"docComment":"Indicates whether or not there is a frame ready to read","signature":"stomp_has_frame(resource $link )","inheritdoc":0,"modifier":["public"],"return":""},"readFrame":{"params":{"$class_name":"","$link":""},"docComment":"Reads the next frame","signature":"stomp_read_frame(resource $link )","inheritdoc":0,"modifier":["public"],"return":""},"send":{"params":{"$destination":"","$msg":"","$headers":"","$link":""},"docComment":"Sends a message","signature":"stomp_send(resource $link ,string $destination ,mixed $msg ,array $headers )","inheritdoc":0,"modifier":["public"],"return":""},"setReadTimeout":{"params":{"$seconds":"","$microseconds":"","$link":""},"docComment":"Sets read timeout","signature":"stomp_set_read_timeout(resource $link ,int $seconds ,int $microseconds )","inheritdoc":0,"modifier":["public"],"return":""},"subscribe":{"params":{"$destination":"","$headers":"","$link":""},"docComment":"Registers to listen to a given destination","signature":"stomp_subscribe(resource $link ,string $destination ,array $headers )","inheritdoc":0,"modifier":["public"],"return":""},"unsubscribe":{"params":{"$destination":"","$headers":"","$link":""},"docComment":"Removes an existing subscription","signature":"stomp_unsubscribe(resource $link ,string $destination ,array $headers )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"StompFrame":{"classname":"StompFrame","docComment":"","methods":{"modifier":{"public":["__construct"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$command":"","$headers":"","$body":""},"docComment":"Constructor","signature":"StompFrame::__construct(string $command ,array $headers ,string $body )","inheritdoc":0,"modifier":[],"return":""}}},"properties":{"modifier":{"public":["command","headers","body"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","command":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"headers":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"body":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"StompException":{"classname":"StompException","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString","getDetails"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""},"getDetails":{"params":[],"docComment":"Get exception details","signature":"public StompException::getDetails( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SVM":{"classname":"SVM","docComment":"","methods":{"modifier":{"public":["__construct","crossvalidate","getOptions","setOptions","train"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Construct a new SVM object","signature":"public SVM::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"crossvalidate":{"params":{"$problem":"","$number_of_folds":""},"docComment":"Test training params on subsets of the training data.","signature":"public svm::crossvalidate(array $problem ,int $number_of_folds )","inheritdoc":0,"modifier":["public"],"return":""},"getOptions":{"params":[],"docComment":"Return the current training parameters","signature":"public SVM::getOptions( )","inheritdoc":0,"modifier":["public"],"return":""},"setOptions":{"params":{"$params":""},"docComment":"Set training parameters","signature":"public SVM::setOptions(array $params )","inheritdoc":0,"modifier":["public"],"return":""},"train":{"params":{"$problem":"","$weights":""},"docComment":"Create a SVMModel based on training data","signature":"public svm::train(array $problem ,array $weights )","inheritdoc":0,"modifier":["public"],"return":"SVMModel"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["C_SVC","NU_SVC","ONE_CLASS","EPSILON_SVR","NU_SVR","KERNEL_LINEAR","KERNEL_POLY","KERNEL_RBF","KERNEL_SIGMOID","KERNEL_PRECOMPUTED","OPT_TYPE","OPT_KERNEL_TYPE","OPT_DEGREE","OPT_SHRINKING","OPT_PROPABILITY","OPT_GAMMA","OPT_NU","OPT_EPS","OPT_P","OPT_COEF_ZERO","OPT_C","OPT_CACHE_SIZE"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","C_SVC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"NU_SVC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"ONE_CLASS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"EPSILON_SVR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"NU_SVR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"KERNEL_LINEAR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"KERNEL_POLY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"KERNEL_RBF":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"KERNEL_SIGMOID":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"KERNEL_PRECOMPUTED":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_TYPE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_KERNEL_TYPE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_DEGREE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_SHRINKING":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_PROPABILITY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_GAMMA":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_NU":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_EPS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_P":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_COEF_ZERO":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_C":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"OPT_CACHE_SIZE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"SVMModel":{"classname":"SVMModel","docComment":"","methods":{"modifier":{"public":["checkProbabilityModel","__construct","getLabels","getNrClass","getSvmType","getSvrProbability","load","predict_probability","predict","save"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","checkProbabilityModel":{"params":[],"docComment":"Returns true if the model has probability information","signature":"public SVMModel::checkProbabilityModel( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$filename":""},"docComment":"Construct a new SVMModel","signature":"public SVMModel::__construct(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"getLabels":{"params":[],"docComment":"Get the labels the model was trained on","signature":"public SVMModel::getLabels( )","inheritdoc":0,"modifier":["public"],"return":""},"getNrClass":{"params":[],"docComment":"Returns the number of classes the model was trained with","signature":"public SVMModel::getNrClass( )","inheritdoc":0,"modifier":["public"],"return":""},"getSvmType":{"params":[],"docComment":"Get the SVM type the model was trained with","signature":"public SVMModel::getSvmType( )","inheritdoc":0,"modifier":["public"],"return":""},"getSvrProbability":{"params":[],"docComment":"Get the sigma value for regression types","signature":"public SVMModel::getSvrProbability( )","inheritdoc":0,"modifier":["public"],"return":""},"load":{"params":{"$filename":""},"docComment":"Load a saved SVM Model","signature":"public SVMModel::load(string $filename )","inheritdoc":0,"modifier":["public"],"return":""},"predict_probability":{"params":{"$data":""},"docComment":"Return class probabilities for previous unseen data","signature":"public SVMModel::predict_probability(array $data )","inheritdoc":0,"modifier":["public"],"return":""},"predict":{"params":{"$data":""},"docComment":"Predict a value for previously unseen data","signature":"public SVMModel::predict(array $data )","inheritdoc":0,"modifier":["public"],"return":""},"save":{"params":{"$filename":""},"docComment":"Save a model to a file","signature":"public SVMModel::save(string $filename )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"TokyoTyrant":{"classname":"TokyoTyrant","docComment":"","methods":{"modifier":{"public":["add","connect","connectUri","__construct","copy","ext","fwmKeys","get","getIterator","num","out","put","putCat","putKeep","putNr","putShl","restore","setMaster","size","stat","sync","tune","vanish"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$key":"","$increment":"","$type":""},"docComment":"Adds to a numeric key","signature":"public TokyoTyrant::add(string $key ,number $increment ,[int $type] )","inheritdoc":0,"modifier":["public"],"return":""},"connect":{"params":{"$host":"","$port":"","$options":""},"docComment":"Connect to a database","signature":"public TokyoTyrant::connect(string $host ,[int $port] ,array $options )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"connectUri":{"params":{"$uri":""},"docComment":"Connects to a database","signature":"public TokyoTyrant::connectUri(string $uri )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"__construct":{"params":{"$host":"","$port":"","$options":""},"docComment":"Construct a new TokyoTyrant object","signature":"public TokyoTyrant::__construct(string $host ,[int $port] ,array $options )","inheritdoc":0,"modifier":["public"],"return":""},"copy":{"params":{"$path":""},"docComment":"Copies the database","signature":"public TokyoTyrant::copy(string $path )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"ext":{"params":{"$name":"","$options":"","$key":"","$value":""},"docComment":"Execute a remote script","signature":"public TokyoTyrant::ext(string $name ,int $options ,string $key ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"fwmKeys":{"params":{"$prefix":"","$max_recs":""},"docComment":"Returns the forward matching keys","signature":"public TokyoTyrant::fwmKeys(string $prefix ,int $max_recs )","inheritdoc":0,"modifier":["public"],"return":""},"get":{"params":{"$keys":""},"docComment":"The get purpose","signature":"public TokyoTyrant::get(mixed $keys )","inheritdoc":0,"modifier":["public"],"return":""},"getIterator":{"params":[],"docComment":"Get an iterator","signature":"public TokyoTyrant::getIterator( )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrantIterator"},"num":{"params":[],"docComment":"Number of records in the database","signature":"public TokyoTyrant::num( )","inheritdoc":0,"modifier":["public"],"return":""},"out":{"params":{"$keys":""},"docComment":"Removes records","signature":"public TokyoTyrant::out(mixed $keys )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"put":{"params":{"$keys":"","$value":""},"docComment":"Puts values","signature":"public TokyoTyrant::put(mixed $keys ,[string $value] )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"putCat":{"params":{"$keys":"","$value":""},"docComment":"Concatenates to a record","signature":"public TokyoTyrant::putCat(mixed $keys ,string $value )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"putKeep":{"params":{"$keys":"","$value":""},"docComment":"Puts a record","signature":"public TokyoTyrant::putKeep(mixed $keys ,string $value )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"putNr":{"params":{"$keys":"","$value":""},"docComment":"Puts value","signature":"public TokyoTyrant::putNr(mixed $keys ,[string $value] )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"putShl":{"params":{"$key":"","$value":"","$width":""},"docComment":"Concatenates to a record","signature":"public TokyoTyrant::putShl(string $key ,string $value ,int $width )","inheritdoc":0,"modifier":["public"],"return":""},"restore":{"params":{"$log_dir":"","$timestamp":"","$check_consistency":""},"docComment":"Restore the database","signature":"public TokyoTyrant::restore(string $log_dir ,int $timestamp ,[bool $check_consistency] )","inheritdoc":0,"modifier":["public"],"return":""},"setMaster":{"params":{"$host":"","$port":"","$timestamp":"","$check_consistency":""},"docComment":"Set the replication master","signature":"public TokyoTyrant::setMaster(string $host ,int $port ,int $timestamp ,[bool $check_consistency] )","inheritdoc":0,"modifier":["public"],"return":""},"size":{"params":{"$key":""},"docComment":"Returns the size of the value","signature":"public TokyoTyrant::size(string $key )","inheritdoc":0,"modifier":["public"],"return":""},"stat":{"params":[],"docComment":"Get statistics","signature":"public TokyoTyrant::stat( )","inheritdoc":0,"modifier":["public"],"return":""},"sync":{"params":[],"docComment":"Synchronize the database","signature":"public TokyoTyrant::sync( )","inheritdoc":0,"modifier":["public"],"return":""},"tune":{"params":{"$timeout":"","$options":""},"docComment":"Tunes connection values","signature":"public TokyoTyrant::tune(float $timeout ,[int $options] )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"vanish":{"params":[],"docComment":"Empties the database","signature":"public TokyoTyrant::vanish( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["RDBDEF_PORT","RDBQC_STREQ","RDBQC_STRINC","RDBQC_STRBW","RDBQC_STREW","RDBQC_STRAND","RDBQC_STROR","RDBQC_STROREQ","RDBQC_STRRX","RDBQC_NUMEQ","RDBQC_NUMGT","RDBQC_NUMGE","RDBQC_NUMLT","RDBQC_NUMLE","RDBQC_NUMBT","RDBQC_NUMOREQ","RDBQC_NEGATE","RDBQC_NOIDX","RDBQO_STRASC","RDBQO_STRDESC","RDBQO_NUMASC","RDBQO_NUMDESC","RDBIT_LEXICAL","RDBIT_DECIMAL","RDBIT_TOKEN","RDBIT_QGRAM","RDBIT_OPT","RDBIT_VOID","RDBIT_KEEP","RDBQCFTS_PH","RDBQCFTS_AND","RDBQCFTS_OR","RDBQCFTS_EX","RDBXO_LCKREC","RDBXOLCK_GLB","RDBREC_INT","RDBREC_DBL","RDBMS_UNION","RDBMS_ISECT","RDBMS_DIFF","RDBT_RECON"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","RDBDEF_PORT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_STREQ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_STRINC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_STRBW":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_STREW":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_STRAND":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_STROR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_STROREQ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_STRRX":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_NUMEQ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_NUMGT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_NUMGE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_NUMLT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_NUMLE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_NUMBT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_NUMOREQ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_NEGATE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQC_NOIDX":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQO_STRASC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQO_STRDESC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQO_NUMASC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQO_NUMDESC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBIT_LEXICAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBIT_DECIMAL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBIT_TOKEN":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBIT_QGRAM":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBIT_OPT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBIT_VOID":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBIT_KEEP":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQCFTS_PH":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQCFTS_AND":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQCFTS_OR":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBQCFTS_EX":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBXO_LCKREC":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBXOLCK_GLB":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBREC_INT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBREC_DBL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBMS_UNION":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBMS_ISECT":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBMS_DIFF":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"RDBT_RECON":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"TokyoTyrantTable":{"classname":"TokyoTyrantTable","docComment":"","methods":{"modifier":{"public":["add","genUid","get","getIterator","getQuery","out","put","putCat","putKeep","putNr","putShl","setIndex","add","connect","connectUri","__construct","copy","ext","fwmKeys","get","getIterator","num","out","put","putCat","putKeep","putNr","putShl","restore","setMaster","size","stat","sync","tune","vanish"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","add":{"params":{"$key":"","$increment":"","$type":""},"docComment":"Adds to a numeric key","signature":"public TokyoTyrant::add(string $key ,number $increment ,[int $type] )","inheritdoc":0,"modifier":["public"],"return":""},"genUid":{"params":[],"docComment":"Generate unique id","signature":"public TokyoTyrantTable::genUid( )","inheritdoc":0,"modifier":["public"],"return":""},"get":{"params":{"$keys":""},"docComment":"The get purpose","signature":"public TokyoTyrant::get(mixed $keys )","inheritdoc":0,"modifier":["public"],"return":""},"getIterator":{"params":[],"docComment":"Get an iterator","signature":"public TokyoTyrant::getIterator( )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrantIterator"},"getQuery":{"params":[],"docComment":"Get a query object","signature":"public TokyoTyrantTable::getQuery( )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrantQuery"},"out":{"params":{"$keys":""},"docComment":"Removes records","signature":"public TokyoTyrant::out(mixed $keys )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"put":{"params":{"$keys":"","$value":""},"docComment":"Puts values","signature":"public TokyoTyrant::put(mixed $keys ,[string $value] )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"putCat":{"params":{"$keys":"","$value":""},"docComment":"Concatenates to a record","signature":"public TokyoTyrant::putCat(mixed $keys ,string $value )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"putKeep":{"params":{"$keys":"","$value":""},"docComment":"Puts a record","signature":"public TokyoTyrant::putKeep(mixed $keys ,string $value )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"putNr":{"params":{"$keys":"","$value":""},"docComment":"Puts value","signature":"public TokyoTyrant::putNr(mixed $keys ,[string $value] )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"putShl":{"params":{"$key":"","$value":"","$width":""},"docComment":"Concatenates to a record","signature":"public TokyoTyrant::putShl(string $key ,string $value ,int $width )","inheritdoc":0,"modifier":["public"],"return":""},"setIndex":{"params":{"$column":"","$type":""},"docComment":"Sets index","signature":"public TokyoTyrantTable::setIndex(string $column ,int $type )","inheritdoc":0,"modifier":["public"],"return":""},"connect":{"params":{"$host":"","$port":"","$options":""},"docComment":"Connect to a database","signature":"public TokyoTyrant::connect(string $host ,[int $port] ,array $options )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"connectUri":{"params":{"$uri":""},"docComment":"Connects to a database","signature":"public TokyoTyrant::connectUri(string $uri )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"__construct":{"params":{"$host":"","$port":"","$options":""},"docComment":"Construct a new TokyoTyrant object","signature":"public TokyoTyrant::__construct(string $host ,[int $port] ,array $options )","inheritdoc":0,"modifier":["public"],"return":""},"copy":{"params":{"$path":""},"docComment":"Copies the database","signature":"public TokyoTyrant::copy(string $path )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"ext":{"params":{"$name":"","$options":"","$key":"","$value":""},"docComment":"Execute a remote script","signature":"public TokyoTyrant::ext(string $name ,int $options ,string $key ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"fwmKeys":{"params":{"$prefix":"","$max_recs":""},"docComment":"Returns the forward matching keys","signature":"public TokyoTyrant::fwmKeys(string $prefix ,int $max_recs )","inheritdoc":0,"modifier":["public"],"return":""},"num":{"params":[],"docComment":"Number of records in the database","signature":"public TokyoTyrant::num( )","inheritdoc":0,"modifier":["public"],"return":""},"restore":{"params":{"$log_dir":"","$timestamp":"","$check_consistency":""},"docComment":"Restore the database","signature":"public TokyoTyrant::restore(string $log_dir ,int $timestamp ,[bool $check_consistency] )","inheritdoc":0,"modifier":["public"],"return":""},"setMaster":{"params":{"$host":"","$port":"","$timestamp":"","$check_consistency":""},"docComment":"Set the replication master","signature":"public TokyoTyrant::setMaster(string $host ,int $port ,int $timestamp ,[bool $check_consistency] )","inheritdoc":0,"modifier":["public"],"return":""},"size":{"params":{"$key":""},"docComment":"Returns the size of the value","signature":"public TokyoTyrant::size(string $key )","inheritdoc":0,"modifier":["public"],"return":""},"stat":{"params":[],"docComment":"Get statistics","signature":"public TokyoTyrant::stat( )","inheritdoc":0,"modifier":["public"],"return":""},"sync":{"params":[],"docComment":"Synchronize the database","signature":"public TokyoTyrant::sync( )","inheritdoc":0,"modifier":["public"],"return":""},"tune":{"params":{"$timeout":"","$options":""},"docComment":"Tunes connection values","signature":"public TokyoTyrant::tune(float $timeout ,[int $options] )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"vanish":{"params":[],"docComment":"Empties the database","signature":"public TokyoTyrant::vanish( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"TokyoTyrantQuery":{"classname":"TokyoTyrantQuery","docComment":"","methods":{"modifier":{"public":["addCond","__construct","count","current","hint","key","metaSearch","next","out","rewind","search","setLimit","setOrder","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addCond":{"params":{"$name":"","$op":"","$expr":""},"docComment":"Adds a condition to the query","signature":"public TokyoTyrantQuery::addCond(string $name ,int $op ,string $expr )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$table":"TokyoTyrantTable"},"docComment":"Construct a new query","signature":"public TokyoTyrantQuery::__construct(TokyoTyrantTable $table )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"Counts records","signature":"public TokyoTyrantQuery::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Returns the current element","signature":"public TokyoTyrantQuery::current( )","inheritdoc":0,"modifier":["public"],"return":""},"hint":{"params":[],"docComment":"Get the hint string of the query","signature":"public TokyoTyrantQuery::hint( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Returns the current key","signature":"public TokyoTyrantQuery::key( )","inheritdoc":0,"modifier":["public"],"return":""},"metaSearch":{"params":{"$queries":"","$type":""},"docComment":"Retrieve records with multiple queries","signature":"public TokyoTyrantQuery::metaSearch(array $queries ,int $type )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Moves the iterator to next entry","signature":"public TokyoTyrantQuery::next( )","inheritdoc":0,"modifier":["public"],"return":""},"out":{"params":[],"docComment":"Removes records based on query","signature":"public TokyoTyrantQuery::out( )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrantQuery"},"rewind":{"params":[],"docComment":"Rewinds the iterator","signature":"public TokyoTyrantQuery::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"search":{"params":[],"docComment":"Searches records","signature":"public TokyoTyrantQuery::search( )","inheritdoc":0,"modifier":["public"],"return":""},"setLimit":{"params":{"$max":"","$skip":""},"docComment":"Limit results","signature":"public TokyoTyrantQuery::setLimit(int $max ,int $skip )","inheritdoc":0,"modifier":["public"],"return":""},"setOrder":{"params":{"$name":"","$type":""},"docComment":"Orders results","signature":"public TokyoTyrantQuery::setOrder(string $name ,int $type )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Checks the validity of current item","signature":"public TokyoTyrantQuery::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"TokyoTyrantIterator":{"classname":"TokyoTyrantIterator","docComment":"","methods":{"modifier":{"public":["__construct","current","key","next","rewind","valid","add","connect","connectUri","__construct","copy","ext","fwmKeys","get","getIterator","num","out","put","putCat","putKeep","putNr","putShl","restore","setMaster","size","stat","sync","tune","vanish"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$host":"","$port":"","$options":""},"docComment":"Construct a new TokyoTyrant object","signature":"public TokyoTyrant::__construct(string $host ,[int $port] ,array $options )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Get the current value","signature":"public TokyoTyrantIterator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Returns the current key","signature":"public TokyoTyrantIterator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Move to next key","signature":"public TokyoTyrantIterator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewinds the iterator","signature":"public TokyoTyrantIterator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Rewinds the iterator","signature":"public TokyoTyrantIterator::valid( )","inheritdoc":0,"modifier":["public"],"return":""},"add":{"params":{"$key":"","$increment":"","$type":""},"docComment":"Adds to a numeric key","signature":"public TokyoTyrant::add(string $key ,number $increment ,[int $type] )","inheritdoc":0,"modifier":["public"],"return":""},"connect":{"params":{"$host":"","$port":"","$options":""},"docComment":"Connect to a database","signature":"public TokyoTyrant::connect(string $host ,[int $port] ,array $options )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"connectUri":{"params":{"$uri":""},"docComment":"Connects to a database","signature":"public TokyoTyrant::connectUri(string $uri )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"copy":{"params":{"$path":""},"docComment":"Copies the database","signature":"public TokyoTyrant::copy(string $path )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"ext":{"params":{"$name":"","$options":"","$key":"","$value":""},"docComment":"Execute a remote script","signature":"public TokyoTyrant::ext(string $name ,int $options ,string $key ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"fwmKeys":{"params":{"$prefix":"","$max_recs":""},"docComment":"Returns the forward matching keys","signature":"public TokyoTyrant::fwmKeys(string $prefix ,int $max_recs )","inheritdoc":0,"modifier":["public"],"return":""},"get":{"params":{"$keys":""},"docComment":"The get purpose","signature":"public TokyoTyrant::get(mixed $keys )","inheritdoc":0,"modifier":["public"],"return":""},"getIterator":{"params":[],"docComment":"Get an iterator","signature":"public TokyoTyrant::getIterator( )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrantIterator"},"num":{"params":[],"docComment":"Number of records in the database","signature":"public TokyoTyrant::num( )","inheritdoc":0,"modifier":["public"],"return":""},"out":{"params":{"$keys":""},"docComment":"Removes records","signature":"public TokyoTyrant::out(mixed $keys )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"put":{"params":{"$keys":"","$value":""},"docComment":"Puts values","signature":"public TokyoTyrant::put(mixed $keys ,[string $value] )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"putCat":{"params":{"$keys":"","$value":""},"docComment":"Concatenates to a record","signature":"public TokyoTyrant::putCat(mixed $keys ,string $value )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"putKeep":{"params":{"$keys":"","$value":""},"docComment":"Puts a record","signature":"public TokyoTyrant::putKeep(mixed $keys ,string $value )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"putNr":{"params":{"$keys":"","$value":""},"docComment":"Puts value","signature":"public TokyoTyrant::putNr(mixed $keys ,[string $value] )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"putShl":{"params":{"$key":"","$value":"","$width":""},"docComment":"Concatenates to a record","signature":"public TokyoTyrant::putShl(string $key ,string $value ,int $width )","inheritdoc":0,"modifier":["public"],"return":""},"restore":{"params":{"$log_dir":"","$timestamp":"","$check_consistency":""},"docComment":"Restore the database","signature":"public TokyoTyrant::restore(string $log_dir ,int $timestamp ,[bool $check_consistency] )","inheritdoc":0,"modifier":["public"],"return":""},"setMaster":{"params":{"$host":"","$port":"","$timestamp":"","$check_consistency":""},"docComment":"Set the replication master","signature":"public TokyoTyrant::setMaster(string $host ,int $port ,int $timestamp ,[bool $check_consistency] )","inheritdoc":0,"modifier":["public"],"return":""},"size":{"params":{"$key":""},"docComment":"Returns the size of the value","signature":"public TokyoTyrant::size(string $key )","inheritdoc":0,"modifier":["public"],"return":""},"stat":{"params":[],"docComment":"Get statistics","signature":"public TokyoTyrant::stat( )","inheritdoc":0,"modifier":["public"],"return":""},"sync":{"params":[],"docComment":"Synchronize the database","signature":"public TokyoTyrant::sync( )","inheritdoc":0,"modifier":["public"],"return":""},"tune":{"params":{"$timeout":"","$options":""},"docComment":"Tunes connection values","signature":"public TokyoTyrant::tune(float $timeout ,[int $options] )","inheritdoc":0,"modifier":["public"],"return":"TokyoTyrant"},"vanish":{"params":[],"docComment":"Empties the database","signature":"public TokyoTyrant::vanish( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"TokyoTyrantException":{"classname":"tokyotyrantexception","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["code","message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"V8Js":{"classname":"V8Js","docComment":"","methods":{"modifier":{"public":["__construct","executeString","getExtensions","getPendingException","registerExtension"],"private":[],"protected":[],"final":[],"static":["getExtensions","registerExtension"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$object_name":"","$variables":"","$extensions":"","$report_uncaught_exceptions":""},"docComment":"Construct a new  object","signature":"public V8Js::__construct([string $object_name] ,[array $variables] ,[array $extensions] ,[bool $report_uncaught_exceptions] )","inheritdoc":0,"modifier":["public"],"return":""},"executeString":{"params":{"$script":"","$identifier":"","$flags":""},"docComment":"Execute a string as Javascript code","signature":"public V8Js::executeString(string $script ,[string $identifier] ,[int $flags] )","inheritdoc":0,"modifier":["public"],"return":""},"getExtensions":{"params":[],"docComment":"Return an array of registered extensions","signature":"static V8Js::getExtensions( )","inheritdoc":0,"modifier":["public","static"],"return":""},"getPendingException":{"params":[],"docComment":"Return pending uncaught Javascript exception","signature":"public V8Js::getPendingException( )","inheritdoc":0,"modifier":["public"],"return":"V8JsException"},"registerExtension":{"params":{"$extension_name":"","$script":"","$dependencies":"","$auto_enable":""},"docComment":"Register Javascript extensions for V8Js","signature":"static V8Js::registerExtension(string $extension_name ,string $script ,[array $dependencies] ,[bool $auto_enable] )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["V8_VERSION","FLAG_NONE","FLAG_FORCE_ARRAY"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","V8_VERSION":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FLAG_NONE":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"FLAG_FORCE_ARRAY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"V8JsException":{"classname":"V8JsException","docComment":"","methods":{"modifier":{"public":["getJsFileName","getJsLineNumber","getJsSourceLine","getJsTrace","getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getJsFileName","getJsLineNumber","getJsSourceLine","getJsTrace","getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getJsFileName":{"params":[],"docComment":"The getJsFileName purpose","signature":"public V8JsException::getJsFileName( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getJsLineNumber":{"params":[],"docComment":"The getJsLineNumber purpose","signature":"public V8JsException::getJsLineNumber( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getJsSourceLine":{"params":[],"docComment":"The getJsSourceLine purpose","signature":"public V8JsException::getJsSourceLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getJsTrace":{"params":[],"docComment":"The getJsTrace purpose","signature":"public V8JsException::getJsTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["JsFileName","JsLineNumber","JsSourceLine","JsTrace","message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","JsFileName":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"JsLineNumber":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"JsSourceLine":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"JsTrace":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"VarnishAdmin":{"classname":"VarnishAdmin","docComment":"","methods":{"modifier":{"public":["auth","ban","banUrl","clearPanic","connect","__construct","disconnect","getPanic","getParams","isRunning","setCompat","setHost","setIdent","setParam","setPort","setSecret","setTimeout","start","stop"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","auth":{"params":[],"docComment":"Authenticate on a varnish instance","signature":"public VarnishAdmin::auth( )","inheritdoc":0,"modifier":["public"],"return":""},"ban":{"params":{"$vcl_regex":""},"docComment":"Ban URLs using a VCL expression","signature":"public VarnishAdmin::ban(string $vcl_regex )","inheritdoc":0,"modifier":["public"],"return":""},"banUrl":{"params":{"$vcl_regex":""},"docComment":"Ban an URL using a VCL expression","signature":"public VarnishAdmin::banUrl(string $vcl_regex )","inheritdoc":0,"modifier":["public"],"return":""},"clearPanic":{"params":[],"docComment":"Clear varnish instance panic messages","signature":"public VarnishAdmin::clearPanic( )","inheritdoc":0,"modifier":["public"],"return":""},"connect":{"params":[],"docComment":"Connect to a varnish instance administration interface","signature":"public VarnishAdmin::connect( )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$args":""},"docComment":"VarnishAdmin constructor","signature":"public VarnishAdmin::__construct(array $args )","inheritdoc":0,"modifier":["public"],"return":""},"disconnect":{"params":[],"docComment":"Disconnect from a varnish instance administration interface","signature":"public VarnishAdmin::disconnect( )","inheritdoc":0,"modifier":["public"],"return":""},"getPanic":{"params":[],"docComment":"Get the last panic message on a varnish instance","signature":"public VarnishAdmin::getPanic( )","inheritdoc":0,"modifier":["public"],"return":""},"getParams":{"params":[],"docComment":"Fetch current varnish instance configuration parameters","signature":"public VarnishAdmin::getParams( )","inheritdoc":0,"modifier":["public"],"return":""},"isRunning":{"params":[],"docComment":"Check if the varnish slave process is currently running","signature":"public VarnishAdmin::isRunning( )","inheritdoc":0,"modifier":["public"],"return":""},"setCompat":{"params":{"$compat":""},"docComment":"Set the class compat configuration param","signature":"public VarnishAdmin::setCompat(int $compat )","inheritdoc":0,"modifier":["public"],"return":""},"setHost":{"params":{"$host":""},"docComment":"Set the class host configuration param","signature":"public VarnishAdmin::setHost(string $host )","inheritdoc":0,"modifier":["public"],"return":""},"setIdent":{"params":{"$ident":""},"docComment":"Set the class ident configuration param","signature":"public VarnishAdmin::setIdent(string $ident )","inheritdoc":0,"modifier":["public"],"return":""},"setParam":{"params":{"$name":"","$value":""},"docComment":"Set configuration param on the current varnish instance","signature":"public VarnishAdmin::setParam(string $name , $value )","inheritdoc":0,"modifier":["public"],"return":""},"setPort":{"params":{"$port":""},"docComment":"Set the class port configuration param","signature":"public VarnishAdmin::setPort(int $port )","inheritdoc":0,"modifier":["public"],"return":""},"setSecret":{"params":{"$secret":""},"docComment":"Set the class secret configuration param","signature":"public VarnishAdmin::setSecret(string $secret )","inheritdoc":0,"modifier":["public"],"return":""},"setTimeout":{"params":{"$timeout":""},"docComment":"Set the class timeout configuration param","signature":"public VarnishAdmin::setTimeout(int $timeout )","inheritdoc":0,"modifier":["public"],"return":""},"start":{"params":[],"docComment":"Start varnish worker process","signature":"public VarnishAdmin::start( )","inheritdoc":0,"modifier":["public"],"return":""},"stop":{"params":[],"docComment":"Stop varnish worker process","signature":"public VarnishAdmin::stop( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"VarnishStat":{"classname":"VarnishStat","docComment":"","methods":{"modifier":{"public":["__construct","getSnapshot"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$args":""},"docComment":"VarnishStat constructor","signature":"public VarnishStat::__construct(array $args )","inheritdoc":0,"modifier":["public"],"return":""},"getSnapshot":{"params":[],"docComment":"Get the current varnish instance statistics snapshot","signature":"public VarnishStat::getSnapshot( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"VarnishLog":{"classname":"VarnishLog","docComment":"","methods":{"modifier":{"public":["__construct","getLine","getTagName"],"private":[],"protected":[],"final":[],"static":["getTagName"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$args":""},"docComment":"Varnishlog constructor","signature":"public VarnishLog::__construct(array $args )","inheritdoc":0,"modifier":["public"],"return":""},"getLine":{"params":[],"docComment":"Get next log line","signature":"public VarnishLog::getLine( )","inheritdoc":0,"modifier":["public"],"return":""},"getTagName":{"params":{"$index":""},"docComment":"Get the log tag string representation by its index","signature":"static VarnishLog::getTagName(int $index )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["TAG_Debug","TAG_Error","TAG_CLI","TAG_StatSess","TAG_ReqEnd","TAG_SessionOpen","TAG_SessionClose","TAG_BackendOpen","TAG_BackendXID","TAG_BackendReuse","TAG_BackendClose","TAG_HttpGarbage","TAG_Backend","TAG_Length","TAG_FetchError","TAG_RxRequest","TAG_RxResponse","TAG_RxStatus","TAG_RxURL","TAG_RxProtocol","TAG_RxHeader","TAG_TxRequest","TAG_TxResponse","TAG_TxStatus","TAG_TxURL","TAG_TxProtocol","TAG_TxHeader","TAG_ObjRequest","TAG_ObjResponse","TAG_ObjStatus","TAG_ObjURL","TAG_ObjProtocol","TAG_ObjHeader","TAG_LostHeader","TAG_TTL","TAG_Fetch_Body","TAG_VCL_acl","TAG_VCL_call","TAG_VCL_trace","TAG_VCL_return","TAG_VCL_error","TAG_ReqStart","TAG_Hit","TAG_HitPass","TAG_ExpBan","TAG_ExpKill","TAG_WorkThread","TAG_ESI_xmlerror","TAG_Hash","TAG_Backend_health","TAG_VCL_Log","TAG_Gzip"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","TAG_Debug":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_Error":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_CLI":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_StatSess":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_ReqEnd":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_SessionOpen":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_SessionClose":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_BackendOpen":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_BackendXID":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_BackendReuse":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_BackendClose":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_HttpGarbage":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_Backend":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_Length":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_FetchError":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_RxRequest":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_RxResponse":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_RxStatus":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_RxURL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_RxProtocol":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_RxHeader":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_TxRequest":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_TxResponse":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_TxStatus":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_TxURL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_TxProtocol":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_TxHeader":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_ObjRequest":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_ObjResponse":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_ObjStatus":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_ObjURL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_ObjProtocol":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_ObjHeader":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_LostHeader":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_TTL":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_Fetch_Body":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_VCL_acl":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_VCL_call":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_VCL_trace":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_VCL_return":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_VCL_error":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_ReqStart":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_Hit":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_HitPass":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_ExpBan":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_ExpKill":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_WorkThread":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_ESI_xmlerror":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_Hash":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_Backend_health":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_VCL_Log":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"TAG_Gzip":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"WeakRef":{"classname":"WeakRef","docComment":"","methods":{"modifier":{"public":["acquire","get","release","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","acquire":{"params":[],"docComment":"Acquires a strong reference on that object","signature":"public Weakref::acquire( )","inheritdoc":0,"modifier":["public"],"return":""},"get":{"params":[],"docComment":"Returns the object pointed to by the weak reference","signature":"public Weakref::get( )","inheritdoc":0,"modifier":["public"],"return":""},"release":{"params":[],"docComment":"Releases a previously acquired reference","signature":"public Weakref::release( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Checks whether the object referenced still exists","signature":"public Weakref::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"WeakMap":{"classname":"WeakMap","docComment":"","methods":{"modifier":{"public":["__construct","count","current","key","next","offsetExists","offsetGet","offsetSet","offsetUnset","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Constructs a new map","signature":"public WeakMap::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"Counts the number of live entries in the map","signature":"public WeakMap::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"Returns the current value under iteration","signature":"public WeakMap::current( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Returns the current key under iteration.","signature":"public WeakMap::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Advances to the next map element","signature":"public WeakMap::next( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$object":""},"docComment":"Checks whether a certain object is in the map","signature":"public WeakMap::offsetExists(object $object )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$object":""},"docComment":"Returns the value pointed to by a certain object","signature":"public WeakMap::offsetGet(object $object )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$object":"","$value":""},"docComment":"Updates the map with a new key-value pair","signature":"public WeakMap::offsetSet(object $object ,mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$object":""},"docComment":"Removes an entry from the map","signature":"public WeakMap::offsetUnset(object $object )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewinds the iterator to the beginning of the map","signature":"public WeakMap::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Returns whether the iterator is still on a valid map element","signature":"public WeakMap::valid( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Application":{"classname":"","docComment":"","methods":{"modifier":{"public":["app","bootstrap","clearLastError","__construct","__destruct","environ","execute","getAppDirectory","getConfig","getDispatcher","getLastErrorMsg","getLastErrorNo","getModules","run","setAppDirectory"],"private":["__clone","__sleep","__wakeup"],"protected":[],"final":[],"static":["app"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","app":{"params":[],"docComment":"Retrieve an Application instance","signature":"static Yaf_Application::app( )","inheritdoc":0,"modifier":["public","static"],"return":""},"bootstrap":{"params":{"$bootstrap":"Yaf_Bootstrap_Abstract"},"docComment":"Call bootstrap","signature":"public Yaf_Application::bootstrap(Yaf_Bootstrap_Abstract $bootstrap )","inheritdoc":0,"modifier":["public"],"return":""},"clearLastError":{"params":[],"docComment":"Clear the last error info","signature":"public Yaf_Application::clearLastError( )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Application"},"__clone":{"params":[],"docComment":"Yaf_Application can not be cloned","signature":"private Yaf_Application::__clone( )","inheritdoc":0,"modifier":["private"],"return":""},"__construct":{"params":{"$config":"","$envrion":""},"docComment":"Yaf_Application constructor","signature":"public Yaf_Application::__construct(mixed $config ,string $envrion )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":[],"docComment":"The __destruct purpose","signature":"public Yaf_Application::__destruct( )","inheritdoc":0,"modifier":["public"],"return":""},"environ":{"params":[],"docComment":"Retrive environ","signature":"public Yaf_Application::environ( )","inheritdoc":0,"modifier":["public"],"return":""},"execute":{"params":{"$entry":"","$...":""},"docComment":"Execute a callback","signature":"public Yaf_Application::execute(callable $entry ,string $... )","inheritdoc":0,"modifier":["public"],"return":""},"getAppDirectory":{"params":[],"docComment":"Get the application directory","signature":"public Yaf_Application::getAppDirectory( )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Application"},"getConfig":{"params":[],"docComment":"Retrive the config instance","signature":"public Yaf_Application::getConfig( )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Config_Abstract"},"getDispatcher":{"params":[],"docComment":"Get Yaf_Dispatcher instance","signature":"public Yaf_Application::getDispatcher( )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Dispatcher"},"getLastErrorMsg":{"params":[],"docComment":"Get message of the last occurred error","signature":"public Yaf_Application::getLastErrorMsg( )","inheritdoc":0,"modifier":["public"],"return":""},"getLastErrorNo":{"params":[],"docComment":"Get code of last occurred error","signature":"public Yaf_Application::getLastErrorNo( )","inheritdoc":0,"modifier":["public"],"return":""},"getModules":{"params":[],"docComment":"Get defined module names","signature":"public Yaf_Application::getModules( )","inheritdoc":0,"modifier":["public"],"return":""},"run":{"params":[],"docComment":"Start Yaf_Application","signature":"public Yaf_Application::run( )","inheritdoc":0,"modifier":["public"],"return":""},"setAppDirectory":{"params":{"$directory":""},"docComment":"Change the application directory","signature":"public Yaf_Application::setAppDirectory(string $directory )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Application"},"__sleep":{"params":[],"docComment":"Yaf_Application can not be serialized","signature":"private Yaf_Application::__sleep( )","inheritdoc":0,"modifier":["private"],"return":""},"__wakeup":{"params":[],"docComment":"Yaf_Application can not be unserialized","signature":"private Yaf_Application::__wakeup( )","inheritdoc":0,"modifier":["private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["config","dispatcher","_app","_modules","_running","_environ"],"final":[],"static":["_app"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","config":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"dispatcher":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_app":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected","static"]},"_modules":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_running":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_environ":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Bootstrap_Abstract":{"classname":"Yaf_Bootstrap_Abstract","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Dispatcher":{"classname":"Yaf_Dispatcher","docComment":"","methods":{"modifier":{"public":["autoRender","catchException","__construct","disableView","dispatch","enableView","flushInstantly","getApplication","getInstance","getRequest","getRouter","initView","registerPlugin","returnResponse","setDefaultAction","setDefaultController","setDefaultModule","setErrorHandler","setRequest","setView","throwException"],"private":["__clone","__sleep","__wakeup"],"protected":[],"final":[],"static":["getInstance"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","autoRender":{"params":{"$flag":""},"docComment":"Switch on\/off autorendering","signature":"public Yaf_Dispatcher::autoRender(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Dispatcher"},"catchException":{"params":{"$flag":""},"docComment":"Switch on\/off exception catching","signature":"public Yaf_Dispatcher::catchException(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Dispatcher"},"__clone":{"params":[],"docComment":"Yaf_Dispatcher can not be cloned","signature":"private Yaf_Dispatcher::__clone( )","inheritdoc":0,"modifier":["private"],"return":""},"__construct":{"params":[],"docComment":"Yaf_Dispatcher constructor","signature":"public Yaf_Dispatcher::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"disableView":{"params":[],"docComment":"Disable view rendering","signature":"public Yaf_Dispatcher::disableView( )","inheritdoc":0,"modifier":["public"],"return":""},"dispatch":{"params":{"$request":"Yaf_Request_Abstract"},"docComment":"Dispatch a request","signature":"public Yaf_Dispatcher::dispatch(Yaf_Request_Abstract $request )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Response_Abstract"},"enableView":{"params":[],"docComment":"enable view rendering","signature":"public Yaf_Dispatcher::enableView( )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Dispatcher"},"flushInstantly":{"params":{"$flag":""},"docComment":"Switch on\/off the instant flushing","signature":"public Yaf_Dispatcher::flushInstantly(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Dispatcher"},"getApplication":{"params":[],"docComment":"Retrive the application","signature":"public Yaf_Dispatcher::getApplication( )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Application"},"getInstance":{"params":[],"docComment":"Retrive the dispatcher instance","signature":"static Yaf_Dispatcher::getInstance( )","inheritdoc":0,"modifier":["public","static"],"return":"Yaf_Dispatcher"},"getRequest":{"params":[],"docComment":"Retrive the request instance","signature":"public Yaf_Dispatcher::getRequest( )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Request_Abstract"},"getRouter":{"params":[],"docComment":"Retrive router instance","signature":"public Yaf_Dispatcher::getRouter( )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Router"},"initView":{"params":{"$templates_dir":"","$options":""},"docComment":"Initialize view and return it","signature":"public Yaf_Dispatcher::initView(string $templates_dir ,array $options )","inheritdoc":0,"modifier":["public"],"return":"Yaf_View_Interface"},"registerPlugin":{"params":{"$plugin":"Yaf_Plugin_Abstract"},"docComment":"Register a plugin","signature":"public Yaf_Dispatcher::registerPlugin(Yaf_Plugin_Abstract $plugin )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Dispatcher"},"returnResponse":{"params":{"$flag":""},"docComment":"The returnResponse purpose","signature":"public Yaf_Dispatcher::returnResponse(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Dispatcher"},"setDefaultAction":{"params":{"$action":""},"docComment":"Change default action name","signature":"public Yaf_Dispatcher::setDefaultAction(string $action )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Dispatcher"},"setDefaultController":{"params":{"$controller":""},"docComment":"Change default controller name","signature":"public Yaf_Dispatcher::setDefaultController(string $controller )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Dispatcher"},"setDefaultModule":{"params":{"$module":""},"docComment":"Change default module name","signature":"public Yaf_Dispatcher::setDefaultModule(string $module )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Dispatcher"},"setErrorHandler":{"params":{"$callback":"","$error_types":""},"docComment":"Set error handler","signature":"public Yaf_Dispatcher::setErrorHandler( $callback ,int $error_types )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Dispatcher"},"setRequest":{"params":{"$request":"Yaf_Request_Abstract"},"docComment":"The setRequest purpose","signature":"public Yaf_Dispatcher::setRequest(Yaf_Request_Abstract $request )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Dispatcher"},"setView":{"params":{"$view":"Yaf_View_Interface"},"docComment":"Set a custom view engine","signature":"public Yaf_Dispatcher::setView(Yaf_View_Interface $view )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Dispatcher"},"__sleep":{"params":[],"docComment":"Yaf_Dispatcher can not be serialized","signature":"private Yaf_Dispatcher::__sleep( )","inheritdoc":0,"modifier":["private"],"return":""},"throwException":{"params":{"$flag":""},"docComment":"Switch on\/off exception throwing","signature":"public Yaf_Dispatcher::throwException(bool $flag )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Dispatcher"},"__wakeup":{"params":[],"docComment":"Yaf_Dispatcher can not be unserialized","signature":"private Yaf_Dispatcher::__wakeup( )","inheritdoc":0,"modifier":["private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["_router","_view","_request","_plugins","_instance","_auto_render","_return_response","_instantly_flush","_default_module","_default_controller","_default_action"],"final":[],"static":["_instance"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","_router":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_view":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_request":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_plugins":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_instance":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected","static"]},"_auto_render":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_return_response":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_instantly_flush":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_default_module":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_default_controller":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_default_action":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Config_Abstract":{"classname":"Yaf_Config_Abstract","docComment":"","methods":{"modifier":{"public":["get","readonly","set","toArray"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["get","readonly","set","toArray"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","get":{"params":{"$name":"","$value":""},"docComment":"Getter","signature":"public Yaf_Config_Abstract::get(string $name ,mixed $value )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"readonly":{"params":[],"docComment":"Find a config whether readonly","signature":"public Yaf_Config_Abstract::readonly( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"set":{"params":[],"docComment":"Setter","signature":"public Yaf_Config_Abstract::set( )","inheritdoc":0,"modifier":["abstract","public"],"return":"Yaf_Config_Abstract"},"toArray":{"params":[],"docComment":"Cast to array","signature":"public Yaf_Config_Abstract::toArray( )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["_config","_readonly"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","_config":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_readonly":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Config_Ini":{"classname":"Yaf_Config_Ini","docComment":"","methods":{"modifier":{"public":["__construct","count","current","__get","__isset","key","next","offsetExists","offsetGet","offsetSet","offsetUnset","readonly","rewind","__set","toArray","valid","get","readonly","set","toArray"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["get","readonly","set","toArray"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$config_file":"","$section":""},"docComment":"Yaf_Config_Ini constructor","signature":"public Yaf_Config_Ini::__construct(string $config_file ,string $section )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"The count purpose","signature":"public Yaf_Config_Ini::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"The current purpose","signature":"public Yaf_Config_Ini::current( )","inheritdoc":0,"modifier":["public"],"return":""},"__get":{"params":{"$name":""},"docComment":"The __get purpose","signature":"public Yaf_Config_Ini::__get(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"__isset":{"params":{"$name":""},"docComment":"The __isset purpose","signature":"public Yaf_Config_Ini::__isset(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"The key purpose","signature":"public Yaf_Config_Ini::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"The next purpose","signature":"public Yaf_Config_Ini::next( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$name":""},"docComment":"The offsetExists purpose","signature":"public Yaf_Config_Ini::offsetExists(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$name":""},"docComment":"The offsetGet purpose","signature":"public Yaf_Config_Ini::offsetGet(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$name":"","$value":""},"docComment":"The offsetSet purpose","signature":"public Yaf_Config_Ini::offsetSet(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$name":""},"docComment":"The offsetUnset purpose","signature":"public Yaf_Config_Ini::offsetUnset(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"readonly":{"params":[],"docComment":"Find a config whether readonly","signature":"public Yaf_Config_Abstract::readonly( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"rewind":{"params":[],"docComment":"The rewind purpose","signature":"public Yaf_Config_Ini::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"__set":{"params":{"$name":"","$value":""},"docComment":"The __set purpose","signature":"public Yaf_Config_Ini::__set(string $name ,mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"toArray":{"params":[],"docComment":"Cast to array","signature":"public Yaf_Config_Abstract::toArray( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"valid":{"params":[],"docComment":"The valid purpose","signature":"public Yaf_Config_Ini::valid( )","inheritdoc":0,"modifier":["public"],"return":""},"get":{"params":{"$name":"","$value":""},"docComment":"Getter","signature":"public Yaf_Config_Abstract::get(string $name ,mixed $value )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"set":{"params":[],"docComment":"Setter","signature":"public Yaf_Config_Abstract::set( )","inheritdoc":0,"modifier":["abstract","public"],"return":"Yaf_Config_Abstract"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Config_Simple":{"classname":"Yaf_Config_Simple","docComment":"","methods":{"modifier":{"public":["__construct","count","current","__get","__isset","key","next","offsetExists","offsetGet","offsetSet","offsetUnset","readonly","rewind","__set","toArray","valid","get","readonly","set","toArray"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["get","readonly","set","toArray"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$config_file":"","$section":""},"docComment":"The __construct purpose","signature":"public Yaf_Config_Simple::__construct(string $config_file ,string $section )","inheritdoc":0,"modifier":["public"],"return":""},"count":{"params":[],"docComment":"The count purpose","signature":"public Yaf_Config_Simple::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"The current purpose","signature":"public Yaf_Config_Simple::current( )","inheritdoc":0,"modifier":["public"],"return":""},"__get":{"params":{"$name":""},"docComment":"The __get purpose","signature":"public Yaf_Config_Simple::__get(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"__isset":{"params":{"$name":""},"docComment":"The __isset purpose","signature":"public Yaf_Config_Simple::__isset(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"The key purpose","signature":"public Yaf_Config_Simple::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"The next purpose","signature":"public Yaf_Config_Simple::next( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$name":""},"docComment":"The offsetExists purpose","signature":"public Yaf_Config_Simple::offsetExists(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$name":""},"docComment":"The offsetGet purpose","signature":"public Yaf_Config_Simple::offsetGet(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$name":"","$value":""},"docComment":"The offsetSet purpose","signature":"public Yaf_Config_Simple::offsetSet(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$name":""},"docComment":"The offsetUnset purpose","signature":"public Yaf_Config_Simple::offsetUnset(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"readonly":{"params":[],"docComment":"Find a config whether readonly","signature":"public Yaf_Config_Abstract::readonly( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"rewind":{"params":[],"docComment":"The rewind purpose","signature":"public Yaf_Config_Simple::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"__set":{"params":{"$name":"","$value":""},"docComment":"The __set purpose","signature":"public Yaf_Config_Simple::__set(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"toArray":{"params":[],"docComment":"Cast to array","signature":"public Yaf_Config_Abstract::toArray( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"valid":{"params":[],"docComment":"The valid purpose","signature":"public Yaf_Config_Simple::valid( )","inheritdoc":0,"modifier":["public"],"return":""},"get":{"params":{"$name":"","$value":""},"docComment":"Getter","signature":"public Yaf_Config_Abstract::get(string $name ,mixed $value )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"set":{"params":[],"docComment":"Setter","signature":"public Yaf_Config_Abstract::set( )","inheritdoc":0,"modifier":["abstract","public"],"return":"Yaf_Config_Abstract"}}},"properties":{"modifier":{"public":[],"private":[],"protected":["_readonly"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","_readonly":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Controller_Abstract":{"classname":"Yaf_Controller_Abstract","docComment":"","methods":{"modifier":{"public":["forward","forward","forward","getInvokeArg","getInvokeArgs","getModuleName","getRequest","getResponse","getView","getViewpath","init","initView","redirect","setViewpath"],"private":["__clone","__construct"],"protected":["display","render"],"final":["__clone","__construct"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__clone":{"params":[],"docComment":"Yaf_Controller_Abstract can not be cloned","signature":"private Yaf_Controller_Abstract::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""},"__construct":{"params":[],"docComment":"Yaf_Controller_Abstract constructor","signature":"private Yaf_Controller_Abstract::__construct( )","inheritdoc":0,"modifier":["final","private"],"return":""},"display":{"params":{"$tpl":"","$parameters":""},"docComment":"The display purpose","signature":"protected Yaf_Controller_Abstract::display(string $tpl ,array $parameters )","inheritdoc":0,"modifier":["protected"],"return":""},"forward":{"params":{"$action":"","$paramters":"","$controller":"","$module":""},"docComment":"foward to another action","signature":"public Yaf_Controller_Abstract::forward(string $module ,string $controller ,string $action ,array $paramters )","inheritdoc":0,"modifier":["public","public","public"],"return":""},"getInvokeArg":{"params":{"$name":""},"docComment":"The getInvokeArg purpose","signature":"public Yaf_Controller_Abstract::getInvokeArg(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"getInvokeArgs":{"params":[],"docComment":"The getInvokeArgs purpose","signature":"public Yaf_Controller_Abstract::getInvokeArgs( )","inheritdoc":0,"modifier":["public"],"return":""},"getModuleName":{"params":[],"docComment":"Get module name","signature":"public Yaf_Controller_Abstract::getModuleName( )","inheritdoc":0,"modifier":["public"],"return":""},"getRequest":{"params":[],"docComment":"Retrieve current request object","signature":"public Yaf_Controller_Abstract::getRequest( )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Request_Abstract"},"getResponse":{"params":[],"docComment":"Retrieve current response object","signature":"public Yaf_Controller_Abstract::getResponse( )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Response_Abstract"},"getView":{"params":[],"docComment":"Retrieve the view engine","signature":"public Yaf_Controller_Abstract::getView( )","inheritdoc":0,"modifier":["public"],"return":"Yaf_View_Interface"},"getViewpath":{"params":[],"docComment":"The getViewpath purpose","signature":"public Yaf_Controller_Abstract::getViewpath( )","inheritdoc":0,"modifier":["public"],"return":""},"init":{"params":[],"docComment":"Controller initializer","signature":"public Yaf_Controller_Abstract::init( )","inheritdoc":0,"modifier":["public"],"return":""},"initView":{"params":{"$options":""},"docComment":"The initView purpose","signature":"public Yaf_Controller_Abstract::initView(array $options )","inheritdoc":0,"modifier":["public"],"return":""},"redirect":{"params":{"$url":""},"docComment":"Redirect to a URL","signature":"public Yaf_Controller_Abstract::redirect(string $url )","inheritdoc":0,"modifier":["public"],"return":""},"render":{"params":{"$tpl":"","$parameters":""},"docComment":"Render view template","signature":"protected Yaf_Controller_Abstract::render(string $tpl ,array $parameters )","inheritdoc":0,"modifier":["protected"],"return":""},"setViewpath":{"params":{"$view_directory":""},"docComment":"The setViewpath purpose","signature":"public Yaf_Controller_Abstract::setViewpath(string $view_directory )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["actions"],"private":[],"protected":["_module","_name","_request","_response","_invoke_args","_view"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","actions":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"_module":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_request":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_response":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_invoke_args":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_view":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Action_Abstract":{"classname":"Yaf_Action_Abstract","docComment":"","methods":{"modifier":{"public":["execute","getController","forward","forward","forward","getInvokeArg","getInvokeArgs","getModuleName","getRequest","getResponse","getView","getViewpath","init","initView","redirect","setViewpath"],"private":["__clone","__construct"],"protected":["display","render"],"final":["__clone","__construct"],"static":[],"interface":[],"abstract":["execute"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","execute":{"params":{"$arg":"","$...":""},"docComment":"Action entry point","signature":"public Yaf_Action_Abstract::execute(mixed $arg ,mixed $... )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"getController":{"params":[],"docComment":"Retrieve controller object","signature":"public Yaf_Action_Abstract::getController( )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Controller_Abstract"},"__clone":{"params":[],"docComment":"Yaf_Controller_Abstract can not be cloned","signature":"private Yaf_Controller_Abstract::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""},"__construct":{"params":[],"docComment":"Yaf_Controller_Abstract constructor","signature":"private Yaf_Controller_Abstract::__construct( )","inheritdoc":0,"modifier":["final","private"],"return":""},"display":{"params":{"$tpl":"","$parameters":""},"docComment":"The display purpose","signature":"protected Yaf_Controller_Abstract::display(string $tpl ,array $parameters )","inheritdoc":0,"modifier":["protected"],"return":""},"forward":{"params":{"$action":"","$paramters":"","$controller":"","$module":""},"docComment":"foward to another action","signature":"public Yaf_Controller_Abstract::forward(string $module ,string $controller ,string $action ,array $paramters )","inheritdoc":0,"modifier":["public","public","public"],"return":""},"getInvokeArg":{"params":{"$name":""},"docComment":"The getInvokeArg purpose","signature":"public Yaf_Controller_Abstract::getInvokeArg(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"getInvokeArgs":{"params":[],"docComment":"The getInvokeArgs purpose","signature":"public Yaf_Controller_Abstract::getInvokeArgs( )","inheritdoc":0,"modifier":["public"],"return":""},"getModuleName":{"params":[],"docComment":"Get module name","signature":"public Yaf_Controller_Abstract::getModuleName( )","inheritdoc":0,"modifier":["public"],"return":""},"getRequest":{"params":[],"docComment":"Retrieve current request object","signature":"public Yaf_Controller_Abstract::getRequest( )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Request_Abstract"},"getResponse":{"params":[],"docComment":"Retrieve current response object","signature":"public Yaf_Controller_Abstract::getResponse( )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Response_Abstract"},"getView":{"params":[],"docComment":"Retrieve the view engine","signature":"public Yaf_Controller_Abstract::getView( )","inheritdoc":0,"modifier":["public"],"return":"Yaf_View_Interface"},"getViewpath":{"params":[],"docComment":"The getViewpath purpose","signature":"public Yaf_Controller_Abstract::getViewpath( )","inheritdoc":0,"modifier":["public"],"return":""},"init":{"params":[],"docComment":"Controller initializer","signature":"public Yaf_Controller_Abstract::init( )","inheritdoc":0,"modifier":["public"],"return":""},"initView":{"params":{"$options":""},"docComment":"The initView purpose","signature":"public Yaf_Controller_Abstract::initView(array $options )","inheritdoc":0,"modifier":["public"],"return":""},"redirect":{"params":{"$url":""},"docComment":"Redirect to a URL","signature":"public Yaf_Controller_Abstract::redirect(string $url )","inheritdoc":0,"modifier":["public"],"return":""},"render":{"params":{"$tpl":"","$parameters":""},"docComment":"Render view template","signature":"protected Yaf_Controller_Abstract::render(string $tpl ,array $parameters )","inheritdoc":0,"modifier":["protected"],"return":""},"setViewpath":{"params":{"$view_directory":""},"docComment":"The setViewpath purpose","signature":"public Yaf_Controller_Abstract::setViewpath(string $view_directory )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["_controller"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","_controller":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_View_Interface":{"classname":"Yaf_View_Interface","docComment":"","methods":{"modifier":{"public":["assign","display","getScriptPath","render","setScriptPath"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["assign","display","getScriptPath","render","setScriptPath"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","assign":{"params":{"$name":"","$value":""},"docComment":"Assign value to View engine","signature":"public Yaf_View_Interface::assign(string $name ,string $value )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"display":{"params":{"$tpl":"","$tpl_vars":""},"docComment":"Render and output a template","signature":"public Yaf_View_Interface::display(string $tpl ,array $tpl_vars )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"getScriptPath":{"params":[],"docComment":"The getScriptPath purpose","signature":"public Yaf_View_Interface::getScriptPath( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"render":{"params":{"$tpl":"","$tpl_vars":""},"docComment":"Render a template","signature":"public Yaf_View_Interface::render(string $tpl ,array $tpl_vars )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"setScriptPath":{"params":{"$template_dir":""},"docComment":"The setScriptPath purpose","signature":"public Yaf_View_Interface::setScriptPath(string $template_dir )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_View_Simple":{"classname":"Yaf_View_Simple","docComment":"","methods":{"modifier":{"public":["assign","assignRef","clear","__construct","display","eval","__get","getScriptPath","__isset","render","__set","setScriptPath"],"private":[],"protected":[],"final":["__construct"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","assign":{"params":{"$name":"","$value":""},"docComment":"Assign values","signature":"public Yaf_View_Simple::assign(string $name ,mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"assignRef":{"params":{"$name":"","&$value":""},"docComment":"The assignRef purpose","signature":"public Yaf_View_Simple::assignRef(string $name ,mixed &$value )","inheritdoc":0,"modifier":["public"],"return":""},"clear":{"params":{"$name":""},"docComment":"Clear Assigned values","signature":"public Yaf_View_Simple::clear(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":{"$tempalte_dir":"","$options":""},"docComment":"Constructor of Yaf_View_Simple","signature":"public Yaf_View_Simple::__construct(string $tempalte_dir ,array $options )","inheritdoc":0,"modifier":["final","public"],"return":""},"display":{"params":{"$tpl":"","$tpl_vars":""},"docComment":"Render and display","signature":"public Yaf_View_Simple::display(string $tpl ,array $tpl_vars )","inheritdoc":0,"modifier":["public"],"return":""},"eval":{"params":{"$tpl_content":"","$tpl_vars":""},"docComment":"Render template","signature":"public Yaf_View_Simple::eval(string $tpl_content ,array $tpl_vars )","inheritdoc":0,"modifier":["public"],"return":""},"__get":{"params":{"$name":""},"docComment":"Retrieve assigned variable","signature":"public Yaf_View_Simple::__get(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"getScriptPath":{"params":[],"docComment":"Get templates directory","signature":"public Yaf_View_Simple::getScriptPath( )","inheritdoc":0,"modifier":["public"],"return":""},"__isset":{"params":{"$name":""},"docComment":"The __isset purpose","signature":"public Yaf_View_Simple::__isset(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"render":{"params":{"$tpl":"","$tpl_vars":""},"docComment":"Render template","signature":"public Yaf_View_Simple::render(string $tpl ,array $tpl_vars )","inheritdoc":0,"modifier":["public"],"return":""},"__set":{"params":{"$name":"","$value":""},"docComment":"Set value to engine","signature":"public Yaf_View_Simple::__set(string $name ,mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"setScriptPath":{"params":{"$template_dir":""},"docComment":"Set tempaltes directory","signature":"public Yaf_View_Simple::setScriptPath(string $template_dir )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["_tpl_vars","_tpl_dir"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","_tpl_vars":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_tpl_dir":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Loader":{"classname":"Yaf_Loader","docComment":"","methods":{"modifier":{"public":["autoload","clearLocalNamespace","__construct","getInstance","getLibraryPath","getLocalNamespace","import","isLocalName","registerLocalNamespace","setLibraryPath"],"private":["__clone","__sleep","__wakeup"],"protected":[],"final":[],"static":["getInstance","import"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","autoload":{"params":[],"docComment":"The autoload purpose","signature":"public Yaf_Loader::autoload( )","inheritdoc":0,"modifier":["public"],"return":""},"clearLocalNamespace":{"params":[],"docComment":"The clearLocalNamespace purpose","signature":"public Yaf_Loader::clearLocalNamespace( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"The __clone purpose","signature":"private Yaf_Loader::__clone( )","inheritdoc":0,"modifier":["private"],"return":""},"__construct":{"params":[],"docComment":"The __construct purpose","signature":"public Yaf_Loader::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getInstance":{"params":[],"docComment":"The getInstance purpose","signature":"static Yaf_Loader::getInstance( )","inheritdoc":0,"modifier":["public","static"],"return":""},"getLibraryPath":{"params":{"$is_global":""},"docComment":"get the library path","signature":"public Yaf_Loader::getLibraryPath([bool $is_global] )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Loader"},"getLocalNamespace":{"params":[],"docComment":"The getLocalNamespace purpose","signature":"public Yaf_Loader::getLocalNamespace( )","inheritdoc":0,"modifier":["public"],"return":""},"import":{"params":[],"docComment":"The import purpose","signature":"static Yaf_Loader::import( )","inheritdoc":0,"modifier":["public","static"],"return":""},"isLocalName":{"params":[],"docComment":"The isLocalName purpose","signature":"public Yaf_Loader::isLocalName( )","inheritdoc":0,"modifier":["public"],"return":""},"registerLocalNamespace":{"params":{"$prefix":""},"docComment":"register local class prefix","signature":"public Yaf_Loader::registerLocalNamespace(mixed $prefix )","inheritdoc":0,"modifier":["public"],"return":""},"setLibraryPath":{"params":{"$directory":"","$is_global":""},"docComment":"Change the library path","signature":"public Yaf_Loader::setLibraryPath(string $directory ,[bool $is_global] )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Loader"},"__sleep":{"params":[],"docComment":"The __sleep purpose","signature":"private Yaf_Loader::__sleep( )","inheritdoc":0,"modifier":["private"],"return":""},"__wakeup":{"params":[],"docComment":"The __wakeup purpose","signature":"private Yaf_Loader::__wakeup( )","inheritdoc":0,"modifier":["private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["_local_ns","_library","_global_library"],"final":[],"static":["_instance"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","_local_ns":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_library":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_global_library":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_instance":{"type":"","Inheritdoc":0,"docComment":"","modifier":["static"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Plugin_Abstract":{"classname":"Yaf_Plugin_Abstract","docComment":"","methods":{"modifier":{"public":["dispatchLoopShutdown","dispatchLoopStartup","postDispatch","preDispatch","preResponse","routerShutdown","routerStartup"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","dispatchLoopShutdown":{"params":{"$request":"Yaf_Request_Abstract","$response":"Yaf_Response_Abstract"},"docComment":"The dispatchLoopShutdown purpose","signature":"public Yaf_Plugin_Abstract::dispatchLoopShutdown(Yaf_Request_Abstract $request ,Yaf_Response_Abstract $response )","inheritdoc":0,"modifier":["public"],"return":""},"dispatchLoopStartup":{"params":{"$request":"Yaf_Request_Abstract","$response":"Yaf_Response_Abstract"},"docComment":"The dispatchLoopStartup purpose","signature":"public Yaf_Plugin_Abstract::dispatchLoopStartup(Yaf_Request_Abstract $request ,Yaf_Response_Abstract $response )","inheritdoc":0,"modifier":["public"],"return":""},"postDispatch":{"params":{"$request":"Yaf_Request_Abstract","$response":"Yaf_Response_Abstract"},"docComment":"The postDispatch purpose","signature":"public Yaf_Plugin_Abstract::postDispatch(Yaf_Request_Abstract $request ,Yaf_Response_Abstract $response )","inheritdoc":0,"modifier":["public"],"return":""},"preDispatch":{"params":{"$request":"Yaf_Request_Abstract","$response":"Yaf_Response_Abstract"},"docComment":"The preDispatch purpose","signature":"public Yaf_Plugin_Abstract::preDispatch(Yaf_Request_Abstract $request ,Yaf_Response_Abstract $response )","inheritdoc":0,"modifier":["public"],"return":""},"preResponse":{"params":{"$request":"Yaf_Request_Abstract","$response":"Yaf_Response_Abstract"},"docComment":"The preResponse purpose","signature":"public Yaf_Plugin_Abstract::preResponse(Yaf_Request_Abstract $request ,Yaf_Response_Abstract $response )","inheritdoc":0,"modifier":["public"],"return":""},"routerShutdown":{"params":{"$request":"Yaf_Request_Abstract","$response":"Yaf_Response_Abstract"},"docComment":"The routerShutdown purpose","signature":"public Yaf_Plugin_Abstract::routerShutdown(Yaf_Request_Abstract $request ,Yaf_Response_Abstract $response )","inheritdoc":0,"modifier":["public"],"return":""},"routerStartup":{"params":{"$request":"Yaf_Request_Abstract","$response":"Yaf_Response_Abstract"},"docComment":"RouterStartup hook","signature":"public Yaf_Plugin_Abstract::routerStartup(Yaf_Request_Abstract $request ,Yaf_Response_Abstract $response )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Registry":{"classname":"Yaf_Registry","docComment":"","methods":{"modifier":{"public":["__construct","del","get","has","set"],"private":["__clone"],"protected":[],"final":[],"static":["del","get","has","set"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__clone":{"params":[],"docComment":"The __clone purpose","signature":"private Yaf_Registry::__clone( )","inheritdoc":0,"modifier":["private"],"return":""},"__construct":{"params":[],"docComment":"Yaf_Registry implements singleton","signature":"Yaf_Registry::__construct( )","inheritdoc":0,"modifier":[],"return":""},"del":{"params":{"$name":""},"docComment":"Remove an item from registry","signature":"static Yaf_Registry::del(string $name )","inheritdoc":0,"modifier":["public","static"],"return":""},"get":{"params":{"$name":""},"docComment":"Retrieve an item from registry","signature":"static Yaf_Registry::get(string $name )","inheritdoc":0,"modifier":["public","static"],"return":""},"has":{"params":{"$name":""},"docComment":"Check whether an item exists","signature":"static Yaf_Registry::has(string $name )","inheritdoc":0,"modifier":["public","static"],"return":""},"set":{"params":{"$name":"","$value":""},"docComment":"Add an item into registry","signature":"static Yaf_Registry::set(string $name ,string $value )","inheritdoc":0,"modifier":["public","static"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["_entries"],"final":[],"static":["_instance"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","_instance":{"type":"","Inheritdoc":0,"docComment":"","modifier":["static"]},"_entries":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Request_Abstract":{"classname":"Yaf_Request_Abstract","docComment":"","methods":{"modifier":{"public":["getActionName","getBaseUri","getControllerName","getEnv","getException","getLanguage","getMethod","getModuleName","getParam","getParams","getRequestUri","getServer","isCli","isDispatched","isGet","isHead","isOptions","isPost","isPut","isRouted","isXmlHttpRequest","setActionName","setBaseUri","setControllerName","setDispatched","setModuleName","setParam","setRequestUri","setRouted"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getActionName":{"params":[],"docComment":"The getActionName purpose","signature":"public Yaf_Request_Abstract::getActionName( )","inheritdoc":0,"modifier":["public"],"return":""},"getBaseUri":{"params":[],"docComment":"The getBaseUri purpose","signature":"public Yaf_Request_Abstract::getBaseUri( )","inheritdoc":0,"modifier":["public"],"return":""},"getControllerName":{"params":[],"docComment":"The getControllerName purpose","signature":"public Yaf_Request_Abstract::getControllerName( )","inheritdoc":0,"modifier":["public"],"return":""},"getEnv":{"params":{"$name":"","$default":""},"docComment":"Retrieve ENV varialbe","signature":"public Yaf_Request_Abstract::getEnv(string $name ,string $default )","inheritdoc":0,"modifier":["public"],"return":""},"getException":{"params":[],"docComment":"The getException purpose","signature":"public Yaf_Request_Abstract::getException( )","inheritdoc":0,"modifier":["public"],"return":""},"getLanguage":{"params":[],"docComment":"The getLanguage purpose","signature":"public Yaf_Request_Abstract::getLanguage( )","inheritdoc":0,"modifier":["public"],"return":""},"getMethod":{"params":[],"docComment":"The getMethod purpose","signature":"public Yaf_Request_Abstract::getMethod( )","inheritdoc":0,"modifier":["public"],"return":""},"getModuleName":{"params":[],"docComment":"The getModuleName purpose","signature":"public Yaf_Request_Abstract::getModuleName( )","inheritdoc":0,"modifier":["public"],"return":""},"getParam":{"params":{"$name":"","$default":""},"docComment":"The getParam purpose","signature":"public Yaf_Request_Abstract::getParam(string $name ,string $default )","inheritdoc":0,"modifier":["public"],"return":""},"getParams":{"params":[],"docComment":"The getParams purpose","signature":"public Yaf_Request_Abstract::getParams( )","inheritdoc":0,"modifier":["public"],"return":""},"getRequestUri":{"params":[],"docComment":"The getRequestUri purpose","signature":"public Yaf_Request_Abstract::getRequestUri( )","inheritdoc":0,"modifier":["public"],"return":""},"getServer":{"params":{"$name":"","$default":""},"docComment":"Retrieve SERVER variable","signature":"public Yaf_Request_Abstract::getServer(string $name ,string $default )","inheritdoc":0,"modifier":["public"],"return":""},"isCli":{"params":[],"docComment":"The isCli purpose","signature":"public Yaf_Request_Abstract::isCli( )","inheritdoc":0,"modifier":["public"],"return":""},"isDispatched":{"params":[],"docComment":"The isDispatched purpose","signature":"public Yaf_Request_Abstract::isDispatched( )","inheritdoc":0,"modifier":["public"],"return":""},"isGet":{"params":[],"docComment":"The isGet purpose","signature":"public Yaf_Request_Abstract::isGet( )","inheritdoc":0,"modifier":["public"],"return":""},"isHead":{"params":[],"docComment":"The isHead purpose","signature":"public Yaf_Request_Abstract::isHead( )","inheritdoc":0,"modifier":["public"],"return":""},"isOptions":{"params":[],"docComment":"The isOptions purpose","signature":"public Yaf_Request_Abstract::isOptions( )","inheritdoc":0,"modifier":["public"],"return":""},"isPost":{"params":[],"docComment":"The isPost purpose","signature":"public Yaf_Request_Abstract::isPost( )","inheritdoc":0,"modifier":["public"],"return":""},"isPut":{"params":[],"docComment":"The isPut purpose","signature":"public Yaf_Request_Abstract::isPut( )","inheritdoc":0,"modifier":["public"],"return":""},"isRouted":{"params":[],"docComment":"The isRouted purpose","signature":"public Yaf_Request_Abstract::isRouted( )","inheritdoc":0,"modifier":["public"],"return":""},"isXmlHttpRequest":{"params":[],"docComment":"The isXmlHttpRequest purpose","signature":"public Yaf_Request_Abstract::isXmlHttpRequest( )","inheritdoc":0,"modifier":["public"],"return":""},"setActionName":{"params":{"$action":""},"docComment":"The setActionName purpose","signature":"public Yaf_Request_Abstract::setActionName(string $action )","inheritdoc":0,"modifier":["public"],"return":""},"setBaseUri":{"params":{"$uir":""},"docComment":"set base URI","signature":"public Yaf_Request_Abstract::setBaseUri(string $uir )","inheritdoc":0,"modifier":["public"],"return":""},"setControllerName":{"params":{"$controller":""},"docComment":"The setControllerName purpose","signature":"public Yaf_Request_Abstract::setControllerName(string $controller )","inheritdoc":0,"modifier":["public"],"return":""},"setDispatched":{"params":[],"docComment":"The setDispatched purpose","signature":"public Yaf_Request_Abstract::setDispatched( )","inheritdoc":0,"modifier":["public"],"return":""},"setModuleName":{"params":{"$module":""},"docComment":"The setModuleName purpose","signature":"public Yaf_Request_Abstract::setModuleName(string $module )","inheritdoc":0,"modifier":["public"],"return":""},"setParam":{"params":{"$name":"","$value":""},"docComment":"The setParam purpose","signature":"public Yaf_Request_Abstract::setParam(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"setRequestUri":{"params":{"$uir":""},"docComment":"The setRequestUri purpose","signature":"public Yaf_Request_Abstract::setRequestUri(string $uir )","inheritdoc":0,"modifier":["public"],"return":""},"setRouted":{"params":{"$flag":""},"docComment":"The setRouted purpose","signature":"public Yaf_Request_Abstract::setRouted(string $flag )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":["module","controller","action","method"],"private":[],"protected":["params","language","_exception","_base_uri","uri","dispatched","routed"],"final":[],"static":[],"interface":[],"abstract":[],"const":["SCHEME_HTTP","SCHEME_HTTPS"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","SCHEME_HTTP":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SCHEME_HTTPS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"module":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"controller":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"action":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"method":{"type":"","Inheritdoc":0,"docComment":"","modifier":["public"]},"params":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"language":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_exception":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_base_uri":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"uri":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"dispatched":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"routed":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Request_Http":{"classname":"Yaf_Request_Http","docComment":"","methods":{"modifier":{"public":["__construct","get","getCookie","getFiles","getPost","getQuery","getRequest","isXmlHttpRequest","getActionName","getBaseUri","getControllerName","getEnv","getException","getLanguage","getMethod","getModuleName","getParam","getParams","getRequestUri","getServer","isCli","isDispatched","isGet","isHead","isOptions","isPost","isPut","isRouted","isXmlHttpRequest","setActionName","setBaseUri","setControllerName","setDispatched","setModuleName","setParam","setRequestUri","setRouted"],"private":["__clone"],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__clone":{"params":[],"docComment":"The __clone purpose","signature":"private Yaf_Request_Http::__clone( )","inheritdoc":0,"modifier":["private"],"return":""},"__construct":{"params":[],"docComment":"The __construct purpose","signature":"Yaf_Request_Http::__construct( )","inheritdoc":0,"modifier":[],"return":""},"get":{"params":{"$name":"","$default":""},"docComment":"Retrieve variable from client","signature":"public Yaf_Request_Http::get(string $name ,string $default )","inheritdoc":0,"modifier":["public"],"return":""},"getCookie":{"params":{"$name":"","$default":""},"docComment":"Retrieve Cookie varialbe","signature":"public Yaf_Request_Http::getCookie(string $name ,string $default )","inheritdoc":0,"modifier":["public"],"return":""},"getFiles":{"params":[],"docComment":"The getFiles purpose","signature":"public Yaf_Request_Http::getFiles( )","inheritdoc":0,"modifier":["public"],"return":""},"getPost":{"params":{"$name":"","$default":""},"docComment":"Retrieve POST variable","signature":"public Yaf_Request_Http::getPost(string $name ,string $default )","inheritdoc":0,"modifier":["public"],"return":""},"getQuery":{"params":{"$name":"","$default":""},"docComment":"Fetch a query parameter","signature":"public Yaf_Request_Http::getQuery(string $name ,string $default )","inheritdoc":0,"modifier":["public"],"return":""},"getRequest":{"params":[],"docComment":"The getRequest purpose","signature":"public Yaf_Request_Http::getRequest( )","inheritdoc":0,"modifier":["public"],"return":""},"isXmlHttpRequest":{"params":[],"docComment":"The isXmlHttpRequest purpose","signature":"public Yaf_Request_Abstract::isXmlHttpRequest( )","inheritdoc":0,"modifier":["public"],"return":""},"getActionName":{"params":[],"docComment":"The getActionName purpose","signature":"public Yaf_Request_Abstract::getActionName( )","inheritdoc":0,"modifier":["public"],"return":""},"getBaseUri":{"params":[],"docComment":"The getBaseUri purpose","signature":"public Yaf_Request_Abstract::getBaseUri( )","inheritdoc":0,"modifier":["public"],"return":""},"getControllerName":{"params":[],"docComment":"The getControllerName purpose","signature":"public Yaf_Request_Abstract::getControllerName( )","inheritdoc":0,"modifier":["public"],"return":""},"getEnv":{"params":{"$name":"","$default":""},"docComment":"Retrieve ENV varialbe","signature":"public Yaf_Request_Abstract::getEnv(string $name ,string $default )","inheritdoc":0,"modifier":["public"],"return":""},"getException":{"params":[],"docComment":"The getException purpose","signature":"public Yaf_Request_Abstract::getException( )","inheritdoc":0,"modifier":["public"],"return":""},"getLanguage":{"params":[],"docComment":"The getLanguage purpose","signature":"public Yaf_Request_Abstract::getLanguage( )","inheritdoc":0,"modifier":["public"],"return":""},"getMethod":{"params":[],"docComment":"The getMethod purpose","signature":"public Yaf_Request_Abstract::getMethod( )","inheritdoc":0,"modifier":["public"],"return":""},"getModuleName":{"params":[],"docComment":"The getModuleName purpose","signature":"public Yaf_Request_Abstract::getModuleName( )","inheritdoc":0,"modifier":["public"],"return":""},"getParam":{"params":{"$name":"","$default":""},"docComment":"The getParam purpose","signature":"public Yaf_Request_Abstract::getParam(string $name ,string $default )","inheritdoc":0,"modifier":["public"],"return":""},"getParams":{"params":[],"docComment":"The getParams purpose","signature":"public Yaf_Request_Abstract::getParams( )","inheritdoc":0,"modifier":["public"],"return":""},"getRequestUri":{"params":[],"docComment":"The getRequestUri purpose","signature":"public Yaf_Request_Abstract::getRequestUri( )","inheritdoc":0,"modifier":["public"],"return":""},"getServer":{"params":{"$name":"","$default":""},"docComment":"Retrieve SERVER variable","signature":"public Yaf_Request_Abstract::getServer(string $name ,string $default )","inheritdoc":0,"modifier":["public"],"return":""},"isCli":{"params":[],"docComment":"The isCli purpose","signature":"public Yaf_Request_Abstract::isCli( )","inheritdoc":0,"modifier":["public"],"return":""},"isDispatched":{"params":[],"docComment":"The isDispatched purpose","signature":"public Yaf_Request_Abstract::isDispatched( )","inheritdoc":0,"modifier":["public"],"return":""},"isGet":{"params":[],"docComment":"The isGet purpose","signature":"public Yaf_Request_Abstract::isGet( )","inheritdoc":0,"modifier":["public"],"return":""},"isHead":{"params":[],"docComment":"The isHead purpose","signature":"public Yaf_Request_Abstract::isHead( )","inheritdoc":0,"modifier":["public"],"return":""},"isOptions":{"params":[],"docComment":"The isOptions purpose","signature":"public Yaf_Request_Abstract::isOptions( )","inheritdoc":0,"modifier":["public"],"return":""},"isPost":{"params":[],"docComment":"The isPost purpose","signature":"public Yaf_Request_Abstract::isPost( )","inheritdoc":0,"modifier":["public"],"return":""},"isPut":{"params":[],"docComment":"The isPut purpose","signature":"public Yaf_Request_Abstract::isPut( )","inheritdoc":0,"modifier":["public"],"return":""},"isRouted":{"params":[],"docComment":"The isRouted purpose","signature":"public Yaf_Request_Abstract::isRouted( )","inheritdoc":0,"modifier":["public"],"return":""},"setActionName":{"params":{"$action":""},"docComment":"The setActionName purpose","signature":"public Yaf_Request_Abstract::setActionName(string $action )","inheritdoc":0,"modifier":["public"],"return":""},"setBaseUri":{"params":{"$uir":""},"docComment":"set base URI","signature":"public Yaf_Request_Abstract::setBaseUri(string $uir )","inheritdoc":0,"modifier":["public"],"return":""},"setControllerName":{"params":{"$controller":""},"docComment":"The setControllerName purpose","signature":"public Yaf_Request_Abstract::setControllerName(string $controller )","inheritdoc":0,"modifier":["public"],"return":""},"setDispatched":{"params":[],"docComment":"The setDispatched purpose","signature":"public Yaf_Request_Abstract::setDispatched( )","inheritdoc":0,"modifier":["public"],"return":""},"setModuleName":{"params":{"$module":""},"docComment":"The setModuleName purpose","signature":"public Yaf_Request_Abstract::setModuleName(string $module )","inheritdoc":0,"modifier":["public"],"return":""},"setParam":{"params":{"$name":"","$value":""},"docComment":"The setParam purpose","signature":"public Yaf_Request_Abstract::setParam(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"setRequestUri":{"params":{"$uir":""},"docComment":"The setRequestUri purpose","signature":"public Yaf_Request_Abstract::setRequestUri(string $uir )","inheritdoc":0,"modifier":["public"],"return":""},"setRouted":{"params":{"$flag":""},"docComment":"The setRouted purpose","signature":"public Yaf_Request_Abstract::setRouted(string $flag )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Request_Simple":{"classname":"Yaf_Request_Simple","docComment":"","methods":{"modifier":{"public":["__construct","get","getCookie","getFiles","getPost","getQuery","getRequest","isXmlHttpRequest","getActionName","getBaseUri","getControllerName","getEnv","getException","getLanguage","getMethod","getModuleName","getParam","getParams","getRequestUri","getServer","isCli","isDispatched","isGet","isHead","isOptions","isPost","isPut","isRouted","isXmlHttpRequest","setActionName","setBaseUri","setControllerName","setDispatched","setModuleName","setParam","setRequestUri","setRouted"],"private":["__clone"],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__clone":{"params":[],"docComment":"The __clone purpose","signature":"private Yaf_Request_Simple::__clone( )","inheritdoc":0,"modifier":["private"],"return":""},"__construct":{"params":[],"docComment":"The __construct purpose","signature":"Yaf_Request_Simple::__construct( )","inheritdoc":0,"modifier":[],"return":""},"get":{"params":[],"docComment":"The get purpose","signature":"public Yaf_Request_Simple::get( )","inheritdoc":0,"modifier":["public"],"return":""},"getCookie":{"params":[],"docComment":"The getCookie purpose","signature":"public Yaf_Request_Simple::getCookie( )","inheritdoc":0,"modifier":["public"],"return":""},"getFiles":{"params":[],"docComment":"The getFiles purpose","signature":"public Yaf_Request_Simple::getFiles( )","inheritdoc":0,"modifier":["public"],"return":""},"getPost":{"params":[],"docComment":"The getPost purpose","signature":"public Yaf_Request_Simple::getPost( )","inheritdoc":0,"modifier":["public"],"return":""},"getQuery":{"params":[],"docComment":"The getQuery purpose","signature":"public Yaf_Request_Simple::getQuery( )","inheritdoc":0,"modifier":["public"],"return":""},"getRequest":{"params":[],"docComment":"The getRequest purpose","signature":"public Yaf_Request_Simple::getRequest( )","inheritdoc":0,"modifier":["public"],"return":""},"isXmlHttpRequest":{"params":[],"docComment":"The isXmlHttpRequest purpose","signature":"public Yaf_Request_Abstract::isXmlHttpRequest( )","inheritdoc":0,"modifier":["public"],"return":""},"getActionName":{"params":[],"docComment":"The getActionName purpose","signature":"public Yaf_Request_Abstract::getActionName( )","inheritdoc":0,"modifier":["public"],"return":""},"getBaseUri":{"params":[],"docComment":"The getBaseUri purpose","signature":"public Yaf_Request_Abstract::getBaseUri( )","inheritdoc":0,"modifier":["public"],"return":""},"getControllerName":{"params":[],"docComment":"The getControllerName purpose","signature":"public Yaf_Request_Abstract::getControllerName( )","inheritdoc":0,"modifier":["public"],"return":""},"getEnv":{"params":{"$name":"","$default":""},"docComment":"Retrieve ENV varialbe","signature":"public Yaf_Request_Abstract::getEnv(string $name ,string $default )","inheritdoc":0,"modifier":["public"],"return":""},"getException":{"params":[],"docComment":"The getException purpose","signature":"public Yaf_Request_Abstract::getException( )","inheritdoc":0,"modifier":["public"],"return":""},"getLanguage":{"params":[],"docComment":"The getLanguage purpose","signature":"public Yaf_Request_Abstract::getLanguage( )","inheritdoc":0,"modifier":["public"],"return":""},"getMethod":{"params":[],"docComment":"The getMethod purpose","signature":"public Yaf_Request_Abstract::getMethod( )","inheritdoc":0,"modifier":["public"],"return":""},"getModuleName":{"params":[],"docComment":"The getModuleName purpose","signature":"public Yaf_Request_Abstract::getModuleName( )","inheritdoc":0,"modifier":["public"],"return":""},"getParam":{"params":{"$name":"","$default":""},"docComment":"The getParam purpose","signature":"public Yaf_Request_Abstract::getParam(string $name ,string $default )","inheritdoc":0,"modifier":["public"],"return":""},"getParams":{"params":[],"docComment":"The getParams purpose","signature":"public Yaf_Request_Abstract::getParams( )","inheritdoc":0,"modifier":["public"],"return":""},"getRequestUri":{"params":[],"docComment":"The getRequestUri purpose","signature":"public Yaf_Request_Abstract::getRequestUri( )","inheritdoc":0,"modifier":["public"],"return":""},"getServer":{"params":{"$name":"","$default":""},"docComment":"Retrieve SERVER variable","signature":"public Yaf_Request_Abstract::getServer(string $name ,string $default )","inheritdoc":0,"modifier":["public"],"return":""},"isCli":{"params":[],"docComment":"The isCli purpose","signature":"public Yaf_Request_Abstract::isCli( )","inheritdoc":0,"modifier":["public"],"return":""},"isDispatched":{"params":[],"docComment":"The isDispatched purpose","signature":"public Yaf_Request_Abstract::isDispatched( )","inheritdoc":0,"modifier":["public"],"return":""},"isGet":{"params":[],"docComment":"The isGet purpose","signature":"public Yaf_Request_Abstract::isGet( )","inheritdoc":0,"modifier":["public"],"return":""},"isHead":{"params":[],"docComment":"The isHead purpose","signature":"public Yaf_Request_Abstract::isHead( )","inheritdoc":0,"modifier":["public"],"return":""},"isOptions":{"params":[],"docComment":"The isOptions purpose","signature":"public Yaf_Request_Abstract::isOptions( )","inheritdoc":0,"modifier":["public"],"return":""},"isPost":{"params":[],"docComment":"The isPost purpose","signature":"public Yaf_Request_Abstract::isPost( )","inheritdoc":0,"modifier":["public"],"return":""},"isPut":{"params":[],"docComment":"The isPut purpose","signature":"public Yaf_Request_Abstract::isPut( )","inheritdoc":0,"modifier":["public"],"return":""},"isRouted":{"params":[],"docComment":"The isRouted purpose","signature":"public Yaf_Request_Abstract::isRouted( )","inheritdoc":0,"modifier":["public"],"return":""},"setActionName":{"params":{"$action":""},"docComment":"The setActionName purpose","signature":"public Yaf_Request_Abstract::setActionName(string $action )","inheritdoc":0,"modifier":["public"],"return":""},"setBaseUri":{"params":{"$uir":""},"docComment":"set base URI","signature":"public Yaf_Request_Abstract::setBaseUri(string $uir )","inheritdoc":0,"modifier":["public"],"return":""},"setControllerName":{"params":{"$controller":""},"docComment":"The setControllerName purpose","signature":"public Yaf_Request_Abstract::setControllerName(string $controller )","inheritdoc":0,"modifier":["public"],"return":""},"setDispatched":{"params":[],"docComment":"The setDispatched purpose","signature":"public Yaf_Request_Abstract::setDispatched( )","inheritdoc":0,"modifier":["public"],"return":""},"setModuleName":{"params":{"$module":""},"docComment":"The setModuleName purpose","signature":"public Yaf_Request_Abstract::setModuleName(string $module )","inheritdoc":0,"modifier":["public"],"return":""},"setParam":{"params":{"$name":"","$value":""},"docComment":"The setParam purpose","signature":"public Yaf_Request_Abstract::setParam(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"setRequestUri":{"params":{"$uir":""},"docComment":"The setRequestUri purpose","signature":"public Yaf_Request_Abstract::setRequestUri(string $uir )","inheritdoc":0,"modifier":["public"],"return":""},"setRouted":{"params":{"$flag":""},"docComment":"The setRouted purpose","signature":"public Yaf_Request_Abstract::setRouted(string $flag )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[],"const":["SCHEME_HTTP","SCHEME_HTTPS"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","SCHEME_HTTP":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"SCHEME_HTTPS":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Response_Abstract":{"classname":"Yaf_Response_Abstract","docComment":"","methods":{"modifier":{"public":["appendBody","clearBody","clearHeaders","__construct","__destruct","getBody","getHeader","prependBody","response","setBody","setHeader","setRedirect"],"private":["__clone","__toString"],"protected":["setAllHeaders"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","appendBody":{"params":{"$content":"","$key":""},"docComment":"append to body","signature":"public Yaf_Response_Abstract::appendBody(string $content ,string $key )","inheritdoc":0,"modifier":["public"],"return":""},"clearBody":{"params":{"$key":""},"docComment":"The clearBody purpose","signature":"public Yaf_Response_Abstract::clearBody(string $key )","inheritdoc":0,"modifier":["public"],"return":""},"clearHeaders":{"params":[],"docComment":"The clearHeaders purpose","signature":"public Yaf_Response_Abstract::clearHeaders( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"The __clone purpose","signature":"private Yaf_Response_Abstract::__clone( )","inheritdoc":0,"modifier":["private"],"return":""},"__construct":{"params":[],"docComment":"The __construct purpose","signature":"public Yaf_Response_Abstract::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"__destruct":{"params":[],"docComment":"The __destruct purpose","signature":"public Yaf_Response_Abstract::__destruct( )","inheritdoc":0,"modifier":["public"],"return":""},"getBody":{"params":{"$key":""},"docComment":"Retrieve a exists content","signature":"public Yaf_Response_Abstract::getBody(string $key )","inheritdoc":0,"modifier":["public"],"return":""},"getHeader":{"params":[],"docComment":"The getHeader purpose","signature":"public Yaf_Response_Abstract::getHeader( )","inheritdoc":0,"modifier":["public"],"return":""},"prependBody":{"params":{"$content":"","$key":""},"docComment":"The prependBody purpose","signature":"public Yaf_Response_Abstract::prependBody(string $content ,string $key )","inheritdoc":0,"modifier":["public"],"return":""},"response":{"params":[],"docComment":"send response","signature":"public Yaf_Response_Abstract::response( )","inheritdoc":0,"modifier":["public"],"return":""},"setAllHeaders":{"params":[],"docComment":"The setAllHeaders purpose","signature":"protected Yaf_Response_Abstract::setAllHeaders( )","inheritdoc":0,"modifier":["protected"],"return":""},"setBody":{"params":{"$content":"","$key":""},"docComment":"Set content to response","signature":"public Yaf_Response_Abstract::setBody(string $content ,string $key )","inheritdoc":0,"modifier":["public"],"return":""},"setHeader":{"params":[],"docComment":"The setHeader purpose","signature":"public Yaf_Response_Abstract::setHeader( )","inheritdoc":0,"modifier":["public"],"return":""},"setRedirect":{"params":[],"docComment":"The setRedirect purpose","signature":"public Yaf_Response_Abstract::setRedirect( )","inheritdoc":0,"modifier":["public"],"return":""},"__toString":{"params":[],"docComment":"The __toString purpose","signature":"private Yaf_Response_Abstract::__toString( )","inheritdoc":0,"modifier":["private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["_header","_body","_sendheader"],"final":[],"static":[],"interface":[],"abstract":[],"const":["DEFAULT_BODY"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","DEFAULT_BODY":{"type":"","Inheritdoc":0,"docComment":"","modifier":["const"]},"_header":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_body":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_sendheader":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Route_Interface":{"classname":"Yaf_Route_Interface","docComment":"","methods":{"modifier":{"public":["route"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["route"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","route":{"params":{"$request":"Yaf_Request_Abstract"},"docComment":"route a request","signature":"public Yaf_Route_Interface::route(Yaf_Request_Abstract $request )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Route_Map":{"classname":"Yaf_Route_Map","docComment":"","methods":{"modifier":{"public":["__construct","route"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$controller_prefer":"","$delimiter":""},"docComment":"The __construct purpose","signature":"public Yaf_Route_Map::__construct([string $controller_prefer] ,[string $delimiter] )","inheritdoc":0,"modifier":["public"],"return":""},"route":{"params":{"$request":"Yaf_Request_Abstract"},"docComment":"The route purpose","signature":"public Yaf_Route_Map::route(Yaf_Request_Abstract $request )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["_ctl_router","_delimeter"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","_ctl_router":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_delimeter":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Route_Regex":{"classname":"Yaf_Route_Regex","docComment":"","methods":{"modifier":{"public":["__construct","route","route"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["route"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$match":"","$route":"","$map":"","$verify":""},"docComment":"The __construct purpose","signature":"public Yaf_Route_Regex::__construct(string $match ,array $route ,array $map ,array $verify )","inheritdoc":0,"modifier":["public"],"return":""},"route":{"params":{"$request":"Yaf_Request_Abstract"},"docComment":"route a request","signature":"public Yaf_Route_Interface::route(Yaf_Request_Abstract $request )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["_route","_default","_maps","_verify"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","_route":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_default":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_maps":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_verify":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Route_Rewrite":{"classname":"Yaf_Route_Rewrite","docComment":"","methods":{"modifier":{"public":["__construct","route","route"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["route"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$match":"","$route":"","$verify":""},"docComment":"Yaf_Route_Rewrite constructor","signature":"public Yaf_Route_Rewrite::__construct(string $match ,array $route ,array $verify )","inheritdoc":0,"modifier":["public"],"return":""},"route":{"params":{"$request":"Yaf_Request_Abstract"},"docComment":"route a request","signature":"public Yaf_Route_Interface::route(Yaf_Request_Abstract $request )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["_route","_default","_verify"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","_route":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_default":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_verify":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Router":{"classname":"Yaf_Router","docComment":"","methods":{"modifier":{"public":["addConfig","addRoute","__construct","getCurrentRoute","getRoute","getRoutes","route"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","addConfig":{"params":{"$config":"Yaf_Config_Abstract"},"docComment":"Add config-defined routes into Router","signature":"public Yaf_Router::addConfig(Yaf_Config_Abstract $config )","inheritdoc":0,"modifier":["public"],"return":""},"addRoute":{"params":{"$name":"","$route":""},"docComment":"Add new Route into Router","signature":"public Yaf_Router::addRoute(string $name , $route )","inheritdoc":0,"modifier":["public"],"return":""},"__construct":{"params":[],"docComment":"Yaf_Router constructor","signature":"public Yaf_Router::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getCurrentRoute":{"params":[],"docComment":"Get the effective route name","signature":"public Yaf_Router::getCurrentRoute( )","inheritdoc":0,"modifier":["public"],"return":""},"getRoute":{"params":{"$name":""},"docComment":"Retrieve a route by name","signature":"public Yaf_Router::getRoute(string $name )","inheritdoc":0,"modifier":["public"],"return":"Yaf_Route_Interface"},"getRoutes":{"params":[],"docComment":"Retrieve registered routes","signature":"public Yaf_Router::getRoutes( )","inheritdoc":0,"modifier":["public"],"return":""},"route":{"params":{"$request":"Yaf_Request_Abstract"},"docComment":"The route purpose","signature":"public Yaf_Router::route(Yaf_Request_Abstract $request )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["_routes","_current"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","_routes":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_current":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Route_Simple":{"classname":"Yaf_Route_Simple","docComment":"","methods":{"modifier":{"public":["__construct","route"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$module_name":"","$controller_name":"","$action_name":""},"docComment":"Yaf_Route_Simple constructor","signature":"public Yaf_Route_Simple::__construct(string $module_name ,string $controller_name ,string $action_name )","inheritdoc":0,"modifier":["public"],"return":""},"route":{"params":{"$request":"Yaf_Request_Abstract"},"docComment":"Route a request","signature":"public Yaf_Route_Simple::route(Yaf_Request_Abstract $request )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["controller","module","action"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","controller":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"module":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"action":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Route_Static":{"classname":"Yaf_Route_Static","docComment":"","methods":{"modifier":{"public":["match","route"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","match":{"params":{"$uri":""},"docComment":"The match purpose","signature":"public Yaf_Route_Static::match(string $uri )","inheritdoc":0,"modifier":["public"],"return":""},"route":{"params":{"$request":"Yaf_Request_Abstract"},"docComment":"Route a request","signature":"public Yaf_Route_Static::route(Yaf_Request_Abstract $request )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Route_Supervar":{"classname":"Yaf_Route_Supervar","docComment":"","methods":{"modifier":{"public":["__construct","route"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":{"$supervar_name":""},"docComment":"The __construct purpose","signature":"public Yaf_Route_Supervar::__construct(string $supervar_name )","inheritdoc":0,"modifier":["public"],"return":""},"route":{"params":{"$request":"Yaf_Request_Abstract"},"docComment":"The route purpose","signature":"public Yaf_Route_Supervar::route(Yaf_Request_Abstract $request )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["_var_name"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","_var_name":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Session":{"classname":"Yaf_Session","docComment":"","methods":{"modifier":{"public":["__construct","count","current","del","__get","getInstance","has","__isset","key","next","offsetExists","offsetGet","offsetSet","offsetUnset","rewind","__set","start","__unset","valid"],"private":["__clone","__sleep","__wakeup"],"protected":[],"final":[],"static":["getInstance"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__clone":{"params":[],"docComment":"The __clone purpose","signature":"private Yaf_Session::__clone( )","inheritdoc":0,"modifier":["private"],"return":""},"__construct":{"params":[],"docComment":"The __construct purpose","signature":"Yaf_Session::__construct( )","inheritdoc":0,"modifier":[],"return":""},"count":{"params":[],"docComment":"The count purpose","signature":"public Yaf_Session::count( )","inheritdoc":0,"modifier":["public"],"return":""},"current":{"params":[],"docComment":"The current purpose","signature":"public Yaf_Session::current( )","inheritdoc":0,"modifier":["public"],"return":""},"del":{"params":{"$name":""},"docComment":"The del purpose","signature":"public Yaf_Session::del(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"__get":{"params":{"$name":""},"docComment":"The __get purpose","signature":"public Yaf_Session::__get(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"getInstance":{"params":[],"docComment":"The getInstance purpose","signature":"static Yaf_Session::getInstance( )","inheritdoc":0,"modifier":["public","static"],"return":""},"has":{"params":{"$name":""},"docComment":"The has purpose","signature":"public Yaf_Session::has(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"__isset":{"params":{"$name":""},"docComment":"The __isset purpose","signature":"public Yaf_Session::__isset(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"The key purpose","signature":"public Yaf_Session::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"The next purpose","signature":"public Yaf_Session::next( )","inheritdoc":0,"modifier":["public"],"return":""},"offsetExists":{"params":{"$name":""},"docComment":"The offsetExists purpose","signature":"public Yaf_Session::offsetExists(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"offsetGet":{"params":{"$name":""},"docComment":"The offsetGet purpose","signature":"public Yaf_Session::offsetGet(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"offsetSet":{"params":{"$name":"","$value":""},"docComment":"The offsetSet purpose","signature":"public Yaf_Session::offsetSet(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"offsetUnset":{"params":{"$name":""},"docComment":"The offsetUnset purpose","signature":"public Yaf_Session::offsetUnset(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"The rewind purpose","signature":"public Yaf_Session::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"__set":{"params":{"$name":"","$value":""},"docComment":"The __set purpose","signature":"public Yaf_Session::__set(string $name ,string $value )","inheritdoc":0,"modifier":["public"],"return":""},"__sleep":{"params":[],"docComment":"The __sleep purpose","signature":"private Yaf_Session::__sleep( )","inheritdoc":0,"modifier":["private"],"return":""},"start":{"params":[],"docComment":"The start purpose","signature":"public Yaf_Session::start( )","inheritdoc":0,"modifier":["public"],"return":""},"__unset":{"params":{"$name":""},"docComment":"The __unset purpose","signature":"public Yaf_Session::__unset(string $name )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"The valid purpose","signature":"public Yaf_Session::valid( )","inheritdoc":0,"modifier":["public"],"return":""},"__wakeup":{"params":[],"docComment":"The __wakeup purpose","signature":"private Yaf_Session::__wakeup( )","inheritdoc":0,"modifier":["private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["_instance","_session","_started"],"final":[],"static":["_instance"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","_instance":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected","static"]},"_session":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"_started":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Exception":{"classname":"Yaf_Exception","docComment":"","methods":{"modifier":{"public":["__construct","getPrevious","getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public Yaf_Exception::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Exception_TypeError":{"classname":"Yaf_Exception_TypeError","docComment":"","methods":{"modifier":{"public":["__construct","getPrevious"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public Yaf_Exception::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getPrevious":{"params":[],"docComment":"The getPrevious purpose","signature":"public Yaf_Exception::getPrevious( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Exception_StartupError":{"classname":"Yaf_Exception_StartupError","docComment":"","methods":{"modifier":{"public":["__construct","getPrevious"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public Yaf_Exception::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getPrevious":{"params":[],"docComment":"The getPrevious purpose","signature":"public Yaf_Exception::getPrevious( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Exception_DispatchFailed":{"classname":"Yaf_Exception_DispatchFailed","docComment":"","methods":{"modifier":{"public":["__construct","getPrevious"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public Yaf_Exception::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getPrevious":{"params":[],"docComment":"The getPrevious purpose","signature":"public Yaf_Exception::getPrevious( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Exception_RouterFailed":{"classname":"Yaf_Exception_RouterFailed","docComment":"","methods":{"modifier":{"public":["__construct","getPrevious"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public Yaf_Exception::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getPrevious":{"params":[],"docComment":"The getPrevious purpose","signature":"public Yaf_Exception::getPrevious( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Exception_LoadFailed":{"classname":"Yaf_Exception_LoadFailed","docComment":"","methods":{"modifier":{"public":["__construct","getPrevious"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public Yaf_Exception::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getPrevious":{"params":[],"docComment":"The getPrevious purpose","signature":"public Yaf_Exception::getPrevious( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Exception_LoadFailed_Module":{"classname":"Yaf_Exception_LoadFailed_Module","docComment":"","methods":{"modifier":{"public":["__construct","getPrevious"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public Yaf_Exception::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getPrevious":{"params":[],"docComment":"The getPrevious purpose","signature":"public Yaf_Exception::getPrevious( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Exception_LoadFailed_Controller":{"classname":"Yaf_Exception_LoadFailed_Controller","docComment":"","methods":{"modifier":{"public":["__construct","getPrevious"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public Yaf_Exception::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getPrevious":{"params":[],"docComment":"The getPrevious purpose","signature":"public Yaf_Exception::getPrevious( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Exception_LoadFailed_Action":{"classname":"Yaf_Exception_LoadFailed_Action","docComment":"","methods":{"modifier":{"public":["__construct","getPrevious"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public Yaf_Exception::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getPrevious":{"params":[],"docComment":"The getPrevious purpose","signature":"public Yaf_Exception::getPrevious( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Yaf_Exception_LoadFailed_View":{"classname":"Yaf_Exception_LoadFailed_View","docComment":"","methods":{"modifier":{"public":["__construct","getPrevious"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"The __construct purpose","signature":"public Yaf_Exception::__construct( )","inheritdoc":0,"modifier":["public"],"return":""},"getPrevious":{"params":[],"docComment":"The getPrevious purpose","signature":"public Yaf_Exception::getPrevious( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Traversable":{"classname":"Traversable","docComment":"","methods":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Iterator":{"classname":"Iterator","docComment":"","methods":{"modifier":{"public":["current","key","next","rewind","valid"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["current","key","next","rewind","valid"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","current":{"params":[],"docComment":"Return the current element","signature":"public Iterator::current( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"key":{"params":[],"docComment":"Return the key of the current element","signature":"public Iterator::key( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"next":{"params":[],"docComment":"Move forward to next element","signature":"public Iterator::next( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the Iterator to the first element","signature":"public Iterator::rewind( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"valid":{"params":[],"docComment":"Checks if current position is valid","signature":"public Iterator::valid( )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"IteratorAggregate":{"classname":"IteratorAggregate","docComment":"","methods":{"modifier":{"public":["getIterator"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["getIterator"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getIterator":{"params":[],"docComment":"Retrieve an external iterator","signature":"public IteratorAggregate::getIterator( )","inheritdoc":0,"modifier":["abstract","public"],"return":"Traversable"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ArrayAccess":{"classname":"ArrayAccess","docComment":"","methods":{"modifier":{"public":["offsetExists","offsetGet","offsetSet","offsetUnset"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["offsetExists","offsetGet","offsetSet","offsetUnset"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","offsetExists":{"params":{"$offset":""},"docComment":"Whether a offset exists","signature":"public ArrayAccess::offsetExists(mixed $offset )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"offsetGet":{"params":{"$offset":""},"docComment":"Offset to retrieve","signature":"public ArrayAccess::offsetGet(mixed $offset )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"offsetSet":{"params":{"$offset":"","$value":""},"docComment":"Offset to set","signature":"public ArrayAccess::offsetSet(mixed $offset ,mixed $value )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"offsetUnset":{"params":{"$offset":""},"docComment":"Offset to unset","signature":"public ArrayAccess::offsetUnset(mixed $offset )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Serializable":{"classname":"Serializable","docComment":"","methods":{"modifier":{"public":["serialize","unserialize"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":["serialize","unserialize"]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","serialize":{"params":[],"docComment":"String representation of object","signature":"public Serializable::serialize( )","inheritdoc":0,"modifier":["abstract","public"],"return":""},"unserialize":{"params":{"$serialized":""},"docComment":"Constructs the object","signature":"public Serializable::unserialize(string $serialized )","inheritdoc":0,"modifier":["abstract","public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Closure":{"classname":"Closure","docComment":"","methods":{"modifier":{"public":["__construct","bind","bindTo"],"private":[],"protected":[],"final":[],"static":["bind"],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","__construct":{"params":[],"docComment":"Constructor that disallows instantiation","signature":"Closure::__construct( )","inheritdoc":0,"modifier":[],"return":""},"bind":{"params":{"$closure":"Closure","$newthis":"","$newscope":""},"docComment":"\n   Duplicates a closure with a specific bound object and class scope\n  ","signature":"static Closure::bind(Closure $closure ,object $newthis ,[mixed $newscope] )","inheritdoc":0,"modifier":["public","static"],"return":"Closure"},"bindTo":{"params":{"$newthis":"","$newscope":""},"docComment":"\n   Duplicates the closure with a new bound object and class scope\n  ","signature":"public Closure::bindTo(object $newthis ,[mixed $newscope] )","inheritdoc":0,"modifier":["public"],"return":"Closure"}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Generator":{"classname":"Generator","docComment":"","methods":{"modifier":{"public":["current","key","next","rewind","send","throw","valid","__wakeup"],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","current":{"params":[],"docComment":"Get the yielded value","signature":"public Generator::current( )","inheritdoc":0,"modifier":["public"],"return":""},"key":{"params":[],"docComment":"Get the yielded key","signature":"public Generator::key( )","inheritdoc":0,"modifier":["public"],"return":""},"next":{"params":[],"docComment":"Resume execution of the generator","signature":"public Generator::next( )","inheritdoc":0,"modifier":["public"],"return":""},"rewind":{"params":[],"docComment":"Rewind the iterator","signature":"public Generator::rewind( )","inheritdoc":0,"modifier":["public"],"return":""},"send":{"params":{"$value":""},"docComment":"Send a value to the generator","signature":"public Generator::send(mixed $value )","inheritdoc":0,"modifier":["public"],"return":""},"throw":{"params":{"$exception":"Exception"},"docComment":"Throw an exception into the generator","signature":"public Generator::throw(Exception $exception )","inheritdoc":0,"modifier":["public"],"return":""},"valid":{"params":[],"docComment":"Check if the iterator has been closed","signature":"public Generator::valid( )","inheritdoc":0,"modifier":["public"],"return":""},"__wakeup":{"params":[],"docComment":"Serialize callback","signature":"public Generator::__wakeup( )","inheritdoc":0,"modifier":["public"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":[],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn"}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"Exception":{"classname":"Exception","docComment":"","methods":{"modifier":{"public":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]},"ErrorException":{"classname":"ErrorException","docComment":"","methods":{"modifier":{"public":["getSeverity","getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__toString"],"private":["__clone"],"protected":[],"final":["getSeverity","getMessage","getPrevious","getCode","getFile","getLine","getTrace","getTraceAsString","__clone"],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","getSeverity":{"params":[],"docComment":"Gets the exception severity","signature":"public ErrorException::getSeverity( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getMessage":{"params":[],"docComment":"Gets the Exception message","signature":"public Exception::getMessage( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getPrevious":{"params":[],"docComment":"Returns previous Exception","signature":"public Exception::getPrevious( )","inheritdoc":0,"modifier":["final","public"],"return":"Exception"},"getCode":{"params":[],"docComment":"Gets the Exception code","signature":"public Exception::getCode( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getFile":{"params":[],"docComment":"Gets the file in which the exception occurred","signature":"public Exception::getFile( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getLine":{"params":[],"docComment":"Gets the line in which the exception occurred","signature":"public Exception::getLine( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTrace":{"params":[],"docComment":"Gets the stack trace","signature":"public Exception::getTrace( )","inheritdoc":0,"modifier":["final","public"],"return":""},"getTraceAsString":{"params":[],"docComment":"Gets the stack trace as a string","signature":"public Exception::getTraceAsString( )","inheritdoc":0,"modifier":["final","public"],"return":""},"__toString":{"params":[],"docComment":"String representation of the exception","signature":"public Exception::__toString( )","inheritdoc":0,"modifier":["public"],"return":""},"__clone":{"params":[],"docComment":"Clone the exception","signature":"private Exception::__clone( )","inheritdoc":0,"modifier":["final","private"],"return":""}}},"properties":{"modifier":{"public":[],"private":[],"protected":["severity","message","code","file","line"],"final":[],"static":[],"interface":[],"abstract":[]},"all":{"nnnnnnnn":"nnnnnnnnnnnn","severity":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"message":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"code":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"file":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]},"line":{"type":"","Inheritdoc":0,"docComment":"","modifier":["protected"]}}},"parentclass":"","parentclasses":[],"interfaces":[],"file":"","namespaces":{"uses":[]},"constants":[]}},"function_list":["Constants for PDO_4D","Examples with PDO_4D","FrenchToJD","GregorianToJD","JDDayOfWeek","JDMonthName","JDToFrench","JDToGregorian","JDToJulian","JewishToJD","JulianToJD","OCI-Collection::append","OCI-Collection::assign","OCI-Collection::assignElem","OCI-Collection::free","OCI-Collection::getElem","OCI-Collection::max","OCI-Collection::size","OCI-Collection::trim","OCI-Lob::append","OCI-Lob::close","OCI-Lob::eof","OCI-Lob::erase","OCI-Lob::export","OCI-Lob::flush","OCI-Lob::free","OCI-Lob::getBuffering","OCI-Lob::import","OCI-Lob::load","OCI-Lob::read","OCI-Lob::rewind","OCI-Lob::save","OCI-Lob::saveFile","OCI-Lob::seek","OCI-Lob::setBuffering","OCI-Lob::size","OCI-Lob::tell","OCI-Lob::truncate","OCI-Lob::write","OCI-Lob::writeTemporary","OCI-Lob::writeToFile","PDF_activate_item","PDF_add_annotation","PDF_add_bookmark","PDF_add_launchlink","PDF_add_locallink","PDF_add_nameddest","PDF_add_note","PDF_add_outline","PDF_add_pdflink","PDF_add_table_cell","PDF_add_textflow","PDF_add_thumbnail","PDF_add_weblink","PDF_arc","PDF_arcn","PDF_attach_file","PDF_begin_document","PDF_begin_font","PDF_begin_glyph","PDF_begin_item","PDF_begin_layer","PDF_begin_page","PDF_begin_page_ext","PDF_begin_pattern","PDF_begin_template","PDF_begin_template_ext","PDF_circle","PDF_clip","PDF_close","PDF_close_image","PDF_close_pdi","PDF_close_pdi_page","PDF_closepath","PDF_closepath_fill_stroke","PDF_closepath_stroke","PDF_concat","PDF_continue_text","PDF_create_3dview","PDF_create_action","PDF_create_annotation","PDF_create_bookmark","PDF_create_field","PDF_create_fieldgroup","PDF_create_gstate","PDF_create_pvf","PDF_create_textflow","PDF_curveto","PDF_define_layer","PDF_delete","PDF_delete_pvf","PDF_delete_table","PDF_delete_textflow","PDF_encoding_set_char","PDF_end_document","PDF_end_font","PDF_end_glyph","PDF_end_item","PDF_end_layer","PDF_end_page","PDF_end_page_ext","PDF_end_pattern","PDF_end_template","PDF_endpath","PDF_fill","PDF_fill_imageblock","PDF_fill_pdfblock","PDF_fill_stroke","PDF_fill_textblock","PDF_findfont","PDF_fit_image","PDF_fit_pdi_page","PDF_fit_table","PDF_fit_textflow","PDF_fit_textline","PDF_get_apiname","PDF_get_buffer","PDF_get_errmsg","PDF_get_errnum","PDF_get_font","PDF_get_fontname","PDF_get_fontsize","PDF_get_image_height","PDF_get_image_width","PDF_get_majorversion","PDF_get_minorversion","PDF_get_parameter","PDF_get_pdi_parameter","PDF_get_pdi_value","PDF_get_value","PDF_info_font","PDF_info_matchbox","PDF_info_table","PDF_info_textflow","PDF_info_textline","PDF_initgraphics","PDF_lineto","PDF_load_3ddata","PDF_load_font","PDF_load_iccprofile","PDF_load_image","PDF_makespotcolor","PDF_moveto","PDF_new","PDF_open_ccitt","PDF_open_file","PDF_open_gif","PDF_open_image","PDF_open_image_file","PDF_open_jpeg","PDF_open_memory_image","PDF_open_pdi","PDF_open_pdi_document","PDF_open_pdi_page","PDF_open_tiff","PDF_pcos_get_number","PDF_pcos_get_stream","PDF_pcos_get_string","PDF_place_image","PDF_place_pdi_page","PDF_process_pdi","PDF_rect","PDF_restore","PDF_resume_page","PDF_rotate","PDF_save","PDF_scale","PDF_set_border_color","PDF_set_border_dash","PDF_set_border_style","PDF_set_char_spacing","PDF_set_duration","PDF_set_gstate","PDF_set_horiz_scaling","PDF_set_info","PDF_set_info_author","PDF_set_info_creator","PDF_set_info_keywords","PDF_set_info_subject","PDF_set_info_title","PDF_set_layer_dependency","PDF_set_leading","PDF_set_parameter","PDF_set_text_matrix","PDF_set_text_pos","PDF_set_text_rendering","PDF_set_text_rise","PDF_set_value","PDF_set_word_spacing","PDF_setcolor","PDF_setdash","PDF_setdashpattern","PDF_setflat","PDF_setfont","PDF_setgray","PDF_setgray_fill","PDF_setgray_stroke","PDF_setlinecap","PDF_setlinejoin","PDF_setlinewidth","PDF_setmatrix","PDF_setmiterlimit","PDF_setpolydash","PDF_setrgbcolor","PDF_setrgbcolor_fill","PDF_setrgbcolor_stroke","PDF_shading","PDF_shading_pattern","PDF_shfill","PDF_show","PDF_show_boxed","PDF_show_xy","PDF_skew","PDF_stringwidth","PDF_stroke","PDF_suspend_page","PDF_translate","PDF_utf16_to_utf8","PDF_utf32_to_utf16","PDF_utf8_to_utf16","PDO::cubrid_schema","PDO::pgsqlLOBCreate","PDO::pgsqlLOBOpen","PDO::pgsqlLOBUnlink","PDO::sqliteCreateAggregate","PDO::sqliteCreateFunction","PDO_4D DSN","PDO_CUBRID DSN","PDO_FIREBIRD DSN","PDO_IBM DSN","PDO_INFORMIX DSN","PDO_MYSQL DSN","PDO_OCI DSN","PDO_ODBC DSN","PDO_PGSQL DSN","PDO_SQLITE DSN","PDO_SQLSRV DSN","Runkit_Sandbox","Runkit_Sandbox_Parent","SAMConnection::__construct","SAMConnection::commit","SAMConnection::connect","SAMConnection::disconnect","SAMConnection::errno","SAMConnection::error","SAMConnection::isConnected","SAMConnection::peek","SAMConnection::peekAll","SAMConnection::receive","SAMConnection::remove","SAMConnection::rollback","SAMConnection::send","SAMConnection::setDebug","SAMConnection::subscribe","SAMConnection::unsubscribe","SAMMessage::__construct","SAMMessage::body","SAMMessage::header","SCA::createDataObject","SCA::getService","SCA_LocalProxy::createDataObject","SCA_SoapProxy::createDataObject","SDO_DAS_ChangeSummary::beginLogging","SDO_DAS_ChangeSummary::endLogging","SDO_DAS_ChangeSummary::getChangeType","SDO_DAS_ChangeSummary::getChangedDataObjects","SDO_DAS_ChangeSummary::getOldContainer","SDO_DAS_ChangeSummary::getOldValues","SDO_DAS_ChangeSummary::isLogging","SDO_DAS_DataFactory::addPropertyToType","SDO_DAS_DataFactory::addType","SDO_DAS_DataFactory::getDataFactory","SDO_DAS_DataObject::getChangeSummary","SDO_DAS_Relational::__construct","SDO_DAS_Relational::applyChanges","SDO_DAS_Relational::createRootDataObject","SDO_DAS_Relational::executePreparedQuery","SDO_DAS_Relational::executeQuery","SDO_DAS_Setting::getListIndex","SDO_DAS_Setting::getPropertyIndex","SDO_DAS_Setting::getPropertyName","SDO_DAS_Setting::getValue","SDO_DAS_Setting::isSet","SDO_DAS_XML::addTypes","SDO_DAS_XML::create","SDO_DAS_XML::createDataObject","SDO_DAS_XML::createDocument","SDO_DAS_XML::loadFile","SDO_DAS_XML::loadString","SDO_DAS_XML::saveFile","SDO_DAS_XML::saveString","SDO_DAS_XML_Document::getRootDataObject","SDO_DAS_XML_Document::getRootElementName","SDO_DAS_XML_Document::getRootElementURI","SDO_DAS_XML_Document::setEncoding","SDO_DAS_XML_Document::setXMLDeclaration","SDO_DAS_XML_Document::setXMLVersion","SDO_DataFactory::create","SDO_DataObject::clear","SDO_DataObject::createDataObject","SDO_DataObject::getContainer","SDO_DataObject::getSequence","SDO_DataObject::getTypeName","SDO_DataObject::getTypeNamespaceURI","SDO_Exception::getCause","SDO_List::insert","SDO_Model_Property::getContainingType","SDO_Model_Property::getDefault","SDO_Model_Property::getName","SDO_Model_Property::getType","SDO_Model_Property::isContainment","SDO_Model_Property::isMany","SDO_Model_ReflectionDataObject::__construct","SDO_Model_ReflectionDataObject::export","SDO_Model_ReflectionDataObject::getContainmentProperty","SDO_Model_ReflectionDataObject::getInstanceProperties","SDO_Model_ReflectionDataObject::getType","SDO_Model_Type::getBaseType","SDO_Model_Type::getName","SDO_Model_Type::getNamespaceURI","SDO_Model_Type::getProperties","SDO_Model_Type::getProperty","SDO_Model_Type::isAbstractType","SDO_Model_Type::isDataType","SDO_Model_Type::isInstance","SDO_Model_Type::isOpenType","SDO_Model_Type::isSequencedType","SDO_Sequence::getProperty","SDO_Sequence::insert","SDO_Sequence::move","SQL acceptable by 4D","SQL types with PDO_4D and PHP","Swish::__construct","Swish::getMetaList","Swish::getPropertyList","Swish::prepare","Swish::query","SwishResult::getMetaList","SwishResult::stem","SwishResults::getParsedWords","SwishResults::getRemovedStopwords","SwishResults::nextResult","SwishResults::seekResult","SwishSearch::execute","SwishSearch::resetLimit","SwishSearch::setLimit","SwishSearch::setPhraseDelimiter","SwishSearch::setSort","SwishSearch::setStructure","XMLWriter::endAttribute","XMLWriter::endCData","XMLWriter::endComment","XMLWriter::endDTD","XMLWriter::endDTDAttlist","XMLWriter::endDTDElement","XMLWriter::endDTDEntity","XMLWriter::endDocument","XMLWriter::endElement","XMLWriter::endPI","XMLWriter::flush","XMLWriter::fullEndElement","XMLWriter::openMemory","XMLWriter::openURI","XMLWriter::outputMemory","XMLWriter::setIndent","XMLWriter::setIndentString","XMLWriter::startAttribute","XMLWriter::startAttributeNS","XMLWriter::startCData","XMLWriter::startComment","XMLWriter::startDTD","XMLWriter::startDTDAttlist","XMLWriter::startDTDElement","XMLWriter::startDTDEntity","XMLWriter::startDocument","XMLWriter::startElement","XMLWriter::startElementNS","XMLWriter::startPI","XMLWriter::text","XMLWriter::writeAttribute","XMLWriter::writeAttributeNS","XMLWriter::writeCData","XMLWriter::writeComment","XMLWriter::writeDTD","XMLWriter::writeDTDAttlist","XMLWriter::writeDTDElement","XMLWriter::writeDTDEntity","XMLWriter::writeElement","XMLWriter::writeElementNS","XMLWriter::writePI","XMLWriter::writeRaw","__autoload","__halt_compiler","abs","acos","acosh","addcslashes","addslashes","aggregate","aggregate_info","aggregate_methods","aggregate_methods_by_list","aggregate_methods_by_regexp","aggregate_properties","aggregate_properties_by_list","aggregate_properties_by_regexp","aggregation_info","apache_child_terminate","apache_get_modules","apache_get_version","apache_getenv","apache_lookup_uri","apache_note","apache_request_headers","apache_reset_timeout","apache_response_headers","apache_setenv","apc_add","apc_bin_dump","apc_bin_dumpfile","apc_bin_load","apc_bin_loadfile","apc_cache_info","apc_cas","apc_clear_cache","apc_compile_file","apc_dec","apc_define_constants","apc_delete","apc_delete_file","apc_exists","apc_fetch","apc_inc","apc_load_constants","apc_sma_info","apc_store","apd_breakpoint","apd_callstack","apd_clunk","apd_continue","apd_croak","apd_dump_function_table","apd_dump_persistent_resources","apd_dump_regular_resources","apd_echo","apd_get_active_symbols","apd_set_pprof_trace","apd_set_session","apd_set_session_trace","apd_set_session_trace_socket","array","array_change_key_case","array_chunk","array_column","array_combine","array_count_values","array_diff","array_diff_assoc","array_diff_key","array_diff_uassoc","array_diff_ukey","array_fill","array_fill_keys","array_filter","array_flip","array_intersect","array_intersect_assoc","array_intersect_key","array_intersect_uassoc","array_intersect_ukey","array_key_exists","array_keys","array_map","array_merge","array_merge_recursive","array_multisort","array_pad","array_pop","array_product","array_push","array_rand","array_reduce","array_replace","array_replace_recursive","array_reverse","array_search","array_shift","array_slice","array_splice","array_sum","array_udiff","array_udiff_assoc","array_udiff_uassoc","array_uintersect","array_uintersect_assoc","array_uintersect_uassoc","array_unique","array_unshift","array_values","array_walk","array_walk_recursive","arsort","asin","asinh","asort","assert","assert_options","atan","atan2","atanh","base64_decode","base64_encode","base_convert","basename","bbcode_add_element","bbcode_add_smiley","bbcode_create","bbcode_destroy","bbcode_parse","bbcode_set_arg_parser","bbcode_set_flags","bcadd","bccomp","bcdiv","bcmod","bcmul","bcompiler_load","bcompiler_load_exe","bcompiler_parse_class","bcompiler_read","bcompiler_write_class","bcompiler_write_constant","bcompiler_write_exe_footer","bcompiler_write_file","bcompiler_write_footer","bcompiler_write_function","bcompiler_write_functions_from_file","bcompiler_write_header","bcompiler_write_included_filename","bcpow","bcpowmod","bcscale","bcsqrt","bcsub","bin2hex","bind_textdomain_codeset","bindec","bindtextdomain","boolval","bson_decode","bson_encode","bzclose","bzcompress","bzdecompress","bzerrno","bzerror","bzerrstr","bzflush","bzopen","bzread","bzwrite","cairo_create","cairo_font_face_get_type","cairo_font_face_status","cairo_font_options_create","cairo_font_options_equal","cairo_font_options_get_antialias","cairo_font_options_get_hint_metrics","cairo_font_options_get_hint_style","cairo_font_options_get_subpixel_order","cairo_font_options_hash","cairo_font_options_merge","cairo_font_options_set_antialias","cairo_font_options_set_hint_metrics","cairo_font_options_set_hint_style","cairo_font_options_set_subpixel_order","cairo_font_options_status","cairo_format_stride_for_width","cairo_image_surface_create","cairo_image_surface_create_for_data","cairo_image_surface_create_from_png","cairo_image_surface_get_data","cairo_image_surface_get_format","cairo_image_surface_get_height","cairo_image_surface_get_stride","cairo_image_surface_get_width","cairo_matrix_create_scale","cairo_matrix_create_translate","cairo_matrix_invert","cairo_matrix_multiply","cairo_matrix_rotate","cairo_matrix_transform_distance","cairo_matrix_transform_point","cairo_matrix_translate","cairo_pattern_add_color_stop_rgb","cairo_pattern_add_color_stop_rgba","cairo_pattern_create_for_surface","cairo_pattern_create_linear","cairo_pattern_create_radial","cairo_pattern_create_rgb","cairo_pattern_create_rgba","cairo_pattern_get_color_stop_count","cairo_pattern_get_color_stop_rgba","cairo_pattern_get_extend","cairo_pattern_get_filter","cairo_pattern_get_linear_points","cairo_pattern_get_matrix","cairo_pattern_get_radial_circles","cairo_pattern_get_rgba","cairo_pattern_get_surface","cairo_pattern_get_type","cairo_pattern_set_extend","cairo_pattern_set_filter","cairo_pattern_set_matrix","cairo_pattern_status","cairo_pdf_surface_create","cairo_pdf_surface_set_size","cairo_ps_get_levels","cairo_ps_level_to_string","cairo_ps_surface_create","cairo_ps_surface_dsc_begin_page_setup","cairo_ps_surface_dsc_begin_setup","cairo_ps_surface_dsc_comment","cairo_ps_surface_get_eps","cairo_ps_surface_restrict_to_level","cairo_ps_surface_set_eps","cairo_ps_surface_set_size","cairo_scaled_font_create","cairo_scaled_font_extents","cairo_scaled_font_get_ctm","cairo_scaled_font_get_font_face","cairo_scaled_font_get_font_matrix","cairo_scaled_font_get_font_options","cairo_scaled_font_get_scale_matrix","cairo_scaled_font_get_type","cairo_scaled_font_glyph_extents","cairo_scaled_font_status","cairo_scaled_font_text_extents","cairo_surface_copy_page","cairo_surface_create_similar","cairo_surface_finish","cairo_surface_flush","cairo_surface_get_content","cairo_surface_get_device_offset","cairo_surface_get_font_options","cairo_surface_get_type","cairo_surface_mark_dirty","cairo_surface_mark_dirty_rectangle","cairo_surface_set_device_offset","cairo_surface_set_fallback_resolution","cairo_surface_show_page","cairo_surface_status","cairo_surface_write_to_png","cairo_svg_surface_create","cairo_svg_surface_restrict_to_version","cairo_svg_version_to_string","cal_days_in_month","cal_from_jd","cal_info","cal_to_jd","calcul_hmac","calculhmac","call_user_func","call_user_func_array","call_user_method","call_user_method_array","ceil","chdb_create","chdir","checkdate","checkdnsrr","chgrp","chmod","chop","chown","chr","chroot","chunk_split","class_alias","class_exists","class_implements","class_parents","class_uses","classkit_import","classkit_method_add","classkit_method_copy","classkit_method_redefine","classkit_method_remove","classkit_method_rename","clearstatcache","cli_get_process_title","cli_set_process_title","closedir","closelog","com_addref","com_create_guid","com_event_sink","com_get","com_get_active_object","com_invoke","com_isenum","com_load","com_load_typelib","com_message_pump","com_print_typeinfo","com_propget","com_propput","com_propset","com_release","com_set","compact","connection_aborted","connection_status","connection_timeout","constant","convert_cyr_string","convert_uudecode","convert_uuencode","copy","cos","cosh","count","count_chars","crack_check","crack_closedict","crack_getlastmessage","crack_opendict","crc32","create_function","crypt","ctype_alnum","ctype_alpha","ctype_cntrl","ctype_digit","ctype_graph","ctype_lower","ctype_print","ctype_punct","ctype_space","ctype_upper","ctype_xdigit","cubrid_bind","cubrid_close_prepare","cubrid_close_request","cubrid_col_get","cubrid_col_size","cubrid_column_names","cubrid_column_types","cubrid_commit","cubrid_connect","cubrid_connect_with_url","cubrid_current_oid","cubrid_disconnect","cubrid_drop","cubrid_error_code","cubrid_error_code_facility","cubrid_error_msg","cubrid_execute","cubrid_fetch","cubrid_free_result","cubrid_get","cubrid_get_autocommit","cubrid_get_charset","cubrid_get_class_name","cubrid_get_client_info","cubrid_get_db_parameter","cubrid_get_query_timeout","cubrid_get_server_info","cubrid_insert_id","cubrid_is_instance","cubrid_lob2_bind","cubrid_lob2_close","cubrid_lob2_export","cubrid_lob2_import","cubrid_lob2_new","cubrid_lob2_read","cubrid_lob2_seek","cubrid_lob2_seek64","cubrid_lob2_size","cubrid_lob2_size64","cubrid_lob2_tell","cubrid_lob2_tell64","cubrid_lob2_write","cubrid_lob_close","cubrid_lob_export","cubrid_lob_get","cubrid_lob_send","cubrid_lob_size","cubrid_lock_read","cubrid_lock_write","cubrid_move_cursor","cubrid_next_result","cubrid_num_cols","cubrid_num_rows","cubrid_pconnect","cubrid_pconnect_with_url","cubrid_prepare","cubrid_put","cubrid_rollback","cubrid_schema","cubrid_seq_drop","cubrid_seq_insert","cubrid_seq_put","cubrid_set_add","cubrid_set_autocommit","cubrid_set_db_parameter","cubrid_set_drop","cubrid_set_query_timeout","cubrid_version","curl_close","curl_copy_handle","curl_errno","curl_error","curl_escape","curl_exec","curl_file_create","curl_getinfo","curl_init","curl_multi_add_handle","curl_multi_close","curl_multi_exec","curl_multi_getcontent","curl_multi_info_read","curl_multi_init","curl_multi_remove_handle","curl_multi_select","curl_multi_setopt","curl_multi_strerror","curl_pause","curl_reset","curl_setopt","curl_setopt_array","curl_share_close","curl_share_init","curl_share_setopt","curl_strerror","curl_unescape","curl_version","current","cyrus_authenticate","cyrus_bind","cyrus_close","cyrus_connect","cyrus_query","cyrus_unbind","date","date_add","date_create","date_create_from_format","date_create_immutable","date_create_immutable_from_format","date_date_set","date_default_timezone_get","date_default_timezone_set","date_diff","date_format","date_get_last_errors","date_interval_create_from_date_string","date_interval_format","date_isodate_set","date_modify","date_offset_get","date_parse","date_parse_from_format","date_sub","date_sun_info","date_sunrise","date_sunset","date_time_set","date_timestamp_get","date_timestamp_set","date_timezone_get","date_timezone_set","db2_autocommit","db2_bind_param","db2_client_info","db2_close","db2_column_privileges","db2_columns","db2_commit","db2_conn_error","db2_conn_errormsg","db2_connect","db2_cursor_type","db2_escape_string","db2_exec","db2_execute","db2_fetch_array","db2_fetch_assoc","db2_fetch_both","db2_fetch_object","db2_fetch_row","db2_field_display_size","db2_field_name","db2_field_num","db2_field_precision","db2_field_scale","db2_field_type","db2_field_width","db2_foreign_keys","db2_free_result","db2_free_stmt","db2_get_option","db2_last_insert_id","db2_lob_read","db2_next_result","db2_num_fields","db2_num_rows","db2_pclose","db2_pconnect","db2_prepare","db2_primary_keys","db2_procedure_columns","db2_procedures","db2_result","db2_rollback","db2_server_info","db2_set_option","db2_special_columns","db2_statistics","db2_stmt_error","db2_stmt_errormsg","db2_table_privileges","db2_tables","dba_close","dba_delete","dba_exists","dba_fetch","dba_firstkey","dba_handlers","dba_insert","dba_key_split","dba_list","dba_nextkey","dba_open","dba_optimize","dba_popen","dba_replace","dba_sync","dbase_add_record","dbase_close","dbase_create","dbase_delete_record","dbase_get_header_info","dbase_get_record","dbase_get_record_with_names","dbase_numfields","dbase_numrecords","dbase_open","dbase_pack","dbase_replace_record","dbplus_add","dbplus_aql","dbplus_chdir","dbplus_close","dbplus_curr","dbplus_errcode","dbplus_errno","dbplus_find","dbplus_first","dbplus_flush","dbplus_freealllocks","dbplus_freelock","dbplus_freerlocks","dbplus_getlock","dbplus_getunique","dbplus_info","dbplus_last","dbplus_lockrel","dbplus_next","dbplus_open","dbplus_prev","dbplus_rchperm","dbplus_rcreate","dbplus_rcrtexact","dbplus_rcrtlike","dbplus_resolve","dbplus_restorepos","dbplus_rkeys","dbplus_ropen","dbplus_rquery","dbplus_rrename","dbplus_rsecindex","dbplus_runlink","dbplus_rzap","dbplus_savepos","dbplus_setindex","dbplus_setindexbynumber","dbplus_sql","dbplus_tcl","dbplus_tremove","dbplus_undo","dbplus_undoprepare","dbplus_unlockrel","dbplus_unselect","dbplus_update","dbplus_xlockrel","dbplus_xunlockrel","dbx_close","dbx_compare","dbx_connect","dbx_error","dbx_escape_string","dbx_fetch_row","dbx_query","dbx_sort","dcgettext","dcngettext","deaggregate","debug_backtrace","debug_print_backtrace","debug_zval_dump","decbin","dechex","decoct","define","define_syslog_variables","defined","deg2rad","delete","dgettext","die","dio_close","dio_fcntl","dio_open","dio_read","dio_seek","dio_stat","dio_tcsetattr","dio_truncate","dio_write","dir","dirname","disk_free_space","disk_total_space","diskfreespace","dl","dngettext","dns_check_record","dns_get_mx","dns_get_record","dom_import_simplexml","dotnet_load","doubleval","each","easter_date","easter_days","echo","eio_busy","eio_cancel","eio_chmod","eio_chown","eio_close","eio_custom","eio_dup2","eio_event_loop","eio_fallocate","eio_fchmod","eio_fchown","eio_fdatasync","eio_fstat","eio_fstatvfs","eio_fsync","eio_ftruncate","eio_futime","eio_get_event_stream","eio_get_last_error","eio_grp","eio_grp_add","eio_grp_cancel","eio_grp_limit","eio_init","eio_link","eio_lstat","eio_mkdir","eio_mknod","eio_nop","eio_npending","eio_nready","eio_nreqs","eio_nthreads","eio_open","eio_poll","eio_read","eio_readahead","eio_readdir","eio_readlink","eio_realpath","eio_rename","eio_rmdir","eio_seek","eio_sendfile","eio_set_max_idle","eio_set_max_parallel","eio_set_max_poll_reqs","eio_set_max_poll_time","eio_set_min_parallel","eio_stat","eio_statvfs","eio_symlink","eio_sync","eio_sync_file_range","eio_syncfs","eio_truncate","eio_unlink","eio_utime","eio_write","empty","enchant_broker_describe","enchant_broker_dict_exists","enchant_broker_free","enchant_broker_free_dict","enchant_broker_get_error","enchant_broker_init","enchant_broker_list_dicts","enchant_broker_request_dict","enchant_broker_request_pwl_dict","enchant_broker_set_ordering","enchant_dict_add_to_personal","enchant_dict_add_to_session","enchant_dict_check","enchant_dict_describe","enchant_dict_get_error","enchant_dict_is_in_session","enchant_dict_quick_check","enchant_dict_store_replacement","enchant_dict_suggest","end","ereg","ereg_replace","eregi","eregi_replace","error_get_last","error_log","error_reporting","escapeshellarg","escapeshellcmd","eval","event_add","event_base_free","event_base_loop","event_base_loopbreak","event_base_loopexit","event_base_new","event_base_priority_init","event_base_set","event_buffer_base_set","event_buffer_disable","event_buffer_enable","event_buffer_fd_set","event_buffer_free","event_buffer_new","event_buffer_priority_set","event_buffer_read","event_buffer_set_callback","event_buffer_timeout_set","event_buffer_watermark_set","event_buffer_write","event_del","event_free","event_new","event_set","exec","exif_imagetype","exif_read_data","exif_tagname","exif_thumbnail","exit","exp","expect_expectl","expect_popen","explode","expm1","extension_loaded","extract","ezmlm_hash","fam_cancel_monitor","fam_close","fam_monitor_collection","fam_monitor_directory","fam_monitor_file","fam_next_event","fam_open","fam_pending","fam_resume_monitor","fam_suspend_monitor","fbsql_affected_rows","fbsql_autocommit","fbsql_blob_size","fbsql_change_user","fbsql_clob_size","fbsql_close","fbsql_commit","fbsql_connect","fbsql_create_blob","fbsql_create_clob","fbsql_create_db","fbsql_data_seek","fbsql_database","fbsql_database_password","fbsql_db_query","fbsql_db_status","fbsql_drop_db","fbsql_errno","fbsql_error","fbsql_fetch_array","fbsql_fetch_assoc","fbsql_fetch_field","fbsql_fetch_lengths","fbsql_fetch_object","fbsql_fetch_row","fbsql_field_flags","fbsql_field_len","fbsql_field_name","fbsql_field_seek","fbsql_field_table","fbsql_field_type","fbsql_free_result","fbsql_get_autostart_info","fbsql_hostname","fbsql_insert_id","fbsql_list_dbs","fbsql_list_fields","fbsql_list_tables","fbsql_next_result","fbsql_num_fields","fbsql_num_rows","fbsql_password","fbsql_pconnect","fbsql_query","fbsql_read_blob","fbsql_read_clob","fbsql_result","fbsql_rollback","fbsql_rows_fetched","fbsql_select_db","fbsql_set_characterset","fbsql_set_lob_mode","fbsql_set_password","fbsql_set_transaction","fbsql_start_db","fbsql_stop_db","fbsql_table_name","fbsql_tablename","fbsql_username","fbsql_warnings","fclose","fdf_add_doc_javascript","fdf_add_template","fdf_close","fdf_create","fdf_enum_values","fdf_errno","fdf_error","fdf_get_ap","fdf_get_attachment","fdf_get_encoding","fdf_get_file","fdf_get_flags","fdf_get_opt","fdf_get_status","fdf_get_value","fdf_get_version","fdf_header","fdf_next_field_name","fdf_open","fdf_open_string","fdf_remove_item","fdf_save","fdf_save_string","fdf_set_ap","fdf_set_encoding","fdf_set_file","fdf_set_flags","fdf_set_javascript_action","fdf_set_on_import_javascript","fdf_set_opt","fdf_set_status","fdf_set_submit_form_action","fdf_set_target_frame","fdf_set_value","fdf_set_version","feof","fflush","fgetc","fgetcsv","fgets","fgetss","file","file_exists","file_get_contents","file_put_contents","fileatime","filectime","filegroup","fileinode","filemtime","fileowner","fileperms","filepro","filepro_fieldcount","filepro_fieldname","filepro_fieldtype","filepro_fieldwidth","filepro_retrieve","filepro_rowcount","filesize","filetype","filter_has_var","filter_id","filter_input","filter_input_array","filter_list","filter_var","filter_var_array","finfo_buffer","finfo_close","finfo_file","finfo_open","finfo_set_flags","floatval","flock","floor","flush","fmod","fnmatch","fopen","forward_static_call","forward_static_call_array","fpassthru","fprintf","fputcsv","fputs","fread","fribidi_log2vis","fscanf","fseek","fsockopen","fstat","ftell","ftok","ftp_alloc","ftp_cdup","ftp_chdir","ftp_chmod","ftp_close","ftp_connect","ftp_delete","ftp_exec","ftp_fget","ftp_fput","ftp_get","ftp_get_option","ftp_login","ftp_mdtm","ftp_mkdir","ftp_nb_continue","ftp_nb_fget","ftp_nb_fput","ftp_nb_get","ftp_nb_put","ftp_nlist","ftp_pasv","ftp_put","ftp_pwd","ftp_quit","ftp_raw","ftp_rawlist","ftp_rename","ftp_rmdir","ftp_set_option","ftp_site","ftp_size","ftp_ssl_connect","ftp_systype","ftruncate","func_get_arg","func_get_args","func_num_args","function_exists","fwrite","gc_collect_cycles","gc_disable","gc_enable","gc_enabled","gd_info","geoip_continent_code_by_name","geoip_country_code3_by_name","geoip_country_code_by_name","geoip_country_name_by_name","geoip_database_info","geoip_db_avail","geoip_db_filename","geoip_db_get_all_info","geoip_id_by_name","geoip_isp_by_name","geoip_org_by_name","geoip_record_by_name","geoip_region_by_name","geoip_region_name_by_code","geoip_time_zone_by_country_and_region","get_browser","get_called_class","get_cfg_var","get_class","get_class_methods","get_class_vars","get_current_user","get_declared_classes","get_declared_interfaces","get_declared_traits","get_defined_constants","get_defined_functions","get_defined_vars","get_extension_funcs","get_headers","get_html_translation_table","get_include_path","get_included_files","get_loaded_extensions","get_magic_quotes_gpc","get_magic_quotes_runtime","get_meta_tags","get_object_vars","get_parent_class","get_required_files","get_resource_type","getallheaders","getcwd","getdate","getenv","gethostbyaddr","gethostbyname","gethostbynamel","gethostname","getimagesize","getimagesizefromstring","getlastmod","getmxrr","getmygid","getmyinode","getmypid","getmyuid","getopt","getprotobyname","getprotobynumber","getrandmax","getrusage","getservbyname","getservbyport","gettext","gettimeofday","gettype","glob","gmdate","gmmktime","gmp_abs","gmp_add","gmp_and","gmp_clrbit","gmp_cmp","gmp_com","gmp_div","gmp_div_q","gmp_div_qr","gmp_div_r","gmp_divexact","gmp_fact","gmp_gcd","gmp_gcdext","gmp_hamdist","gmp_init","gmp_intval","gmp_invert","gmp_jacobi","gmp_legendre","gmp_mod","gmp_mul","gmp_neg","gmp_nextprime","gmp_or","gmp_perfect_square","gmp_popcount","gmp_pow","gmp_powm","gmp_prob_prime","gmp_random","gmp_scan0","gmp_scan1","gmp_setbit","gmp_sign","gmp_sqrt","gmp_sqrtrem","gmp_strval","gmp_sub","gmp_testbit","gmp_xor","gmstrftime","gnupg_adddecryptkey","gnupg_addencryptkey","gnupg_addsignkey","gnupg_cleardecryptkeys","gnupg_clearencryptkeys","gnupg_clearsignkeys","gnupg_decrypt","gnupg_decryptverify","gnupg_encrypt","gnupg_encryptsign","gnupg_export","gnupg_geterror","gnupg_getprotocol","gnupg_import","gnupg_init","gnupg_keyinfo","gnupg_setarmor","gnupg_seterrormode","gnupg_setsignmode","gnupg_sign","gnupg_verify","gopher_parsedir","grapheme_extract","grapheme_stripos","grapheme_stristr","grapheme_strlen","grapheme_strpos","grapheme_strripos","grapheme_strrpos","grapheme_strstr","grapheme_substr","gupnp_context_get_host_ip","gupnp_context_get_port","gupnp_context_get_subscription_timeout","gupnp_context_host_path","gupnp_context_new","gupnp_context_set_subscription_timeout","gupnp_context_timeout_add","gupnp_context_unhost_path","gupnp_control_point_browse_start","gupnp_control_point_browse_stop","gupnp_control_point_callback_set","gupnp_control_point_new","gupnp_device_action_callback_set","gupnp_device_info_get","gupnp_device_info_get_service","gupnp_root_device_get_available","gupnp_root_device_get_relative_location","gupnp_root_device_new","gupnp_root_device_set_available","gupnp_root_device_start","gupnp_root_device_stop","gupnp_service_action_get","gupnp_service_action_return","gupnp_service_action_return_error","gupnp_service_action_set","gupnp_service_freeze_notify","gupnp_service_info_get","gupnp_service_info_get_introspection","gupnp_service_introspection_get_state_variable","gupnp_service_notify","gupnp_service_proxy_action_get","gupnp_service_proxy_action_set","gupnp_service_proxy_add_notify","gupnp_service_proxy_callback_set","gupnp_service_proxy_get_subscribed","gupnp_service_proxy_remove_notify","gupnp_service_proxy_send_action","gupnp_service_proxy_set_subscribed","gupnp_service_thaw_notify","gzclose","gzcompress","gzdecode","gzdeflate","gzencode","gzeof","gzfile","gzgetc","gzgets","gzgetss","gzinflate","gzopen","gzpassthru","gzputs","gzread","gzrewind","gzseek","gztell","gzuncompress","gzwrite","hash","hash_algos","hash_copy","hash_file","hash_final","hash_hmac","hash_hmac_file","hash_init","hash_pbkdf2","hash_update","hash_update_file","hash_update_stream","header","header_register_callback","header_remove","headers_list","headers_sent","hebrev","hebrevc","hex2bin","hexdec","highlight_file","highlight_string","html_entity_decode","htmlentities","htmlspecialchars","htmlspecialchars_decode","http_build_cookie","http_build_query","http_build_str","http_build_url","http_cache_etag","http_cache_last_modified","http_chunked_decode","http_date","http_deflate","http_get","http_get_request_body","http_get_request_body_stream","http_get_request_headers","http_head","http_inflate","http_match_etag","http_match_modified","http_match_request_header","http_negotiate_charset","http_negotiate_content_type","http_negotiate_language","http_parse_cookie","http_parse_headers","http_parse_message","http_parse_params","http_persistent_handles_clean","http_persistent_handles_count","http_persistent_handles_ident","http_post_data","http_post_fields","http_put_data","http_put_file","http_put_stream","http_redirect","http_request","http_request_body_encode","http_request_method_exists","http_request_method_name","http_request_method_register","http_request_method_unregister","http_response_code","http_send_content_disposition","http_send_content_type","http_send_data","http_send_file","http_send_last_modified","http_send_status","http_send_stream","http_support","http_throttle","hw_Array2Objrec","hw_Children","hw_ChildrenObj","hw_Close","hw_Connect","hw_Deleteobject","hw_DocByAnchor","hw_DocByAnchorObj","hw_Document_Attributes","hw_Document_BodyTag","hw_Document_Content","hw_Document_SetContent","hw_Document_Size","hw_EditText","hw_Error","hw_ErrorMsg","hw_Free_Document","hw_GetAnchors","hw_GetAnchorsObj","hw_GetAndLock","hw_GetChildColl","hw_GetChildCollObj","hw_GetChildDocColl","hw_GetChildDocCollObj","hw_GetObject","hw_GetObjectByQuery","hw_GetObjectByQueryColl","hw_GetObjectByQueryCollObj","hw_GetObjectByQueryObj","hw_GetParents","hw_GetParentsObj","hw_GetRemote","hw_GetSrcByDestObj","hw_GetText","hw_Identify","hw_InCollections","hw_Info","hw_InsColl","hw_InsDoc","hw_InsertDocument","hw_InsertObject","hw_Modifyobject","hw_New_Document","hw_Output_Document","hw_PipeDocument","hw_Root","hw_Unlock","hw_Who","hw_api::checkin","hw_api::checkout","hw_api::children","hw_api::content","hw_api::copy","hw_api::dbstat","hw_api::dcstat","hw_api::dstanchors","hw_api::dstofsrcanchor","hw_api::find","hw_api::ftstat","hw_api::hwstat","hw_api::identify","hw_api::info","hw_api::insert","hw_api::insertanchor","hw_api::insertcollection","hw_api::insertdocument","hw_api::link","hw_api::lock","hw_api::move","hw_api::object","hw_api::objectbyanchor","hw_api::parents","hw_api::remove","hw_api::replace","hw_api::setcommittedversion","hw_api::srcanchors","hw_api::srcsofdst","hw_api::unlock","hw_api::user","hw_api::userlist","hw_api_attribute::key","hw_api_attribute::langdepvalue","hw_api_attribute::value","hw_api_attribute::values","hw_api_content::mimetype","hw_api_content::read","hw_api_error::count","hw_api_error::reason","hw_api_object::assign","hw_api_object::attreditable","hw_api_object::count","hw_api_object::insert","hw_api_object::remove","hw_api_object::title","hw_api_object::value","hw_api_reason::description","hw_api_reason::type","hw_changeobject","hw_connection_info","hw_cp","hw_dummy","hw_getrellink","hw_getremotechildren","hw_getusername","hw_insertanchors","hw_mapid","hw_mv","hw_objrec2array","hw_pConnect","hw_setlinkroot","hw_stat","hwapi_attribute_new","hwapi_content_new","hwapi_hgcsp","hwapi_object_new","hypot","ibase_add_user","ibase_affected_rows","ibase_backup","ibase_blob_add","ibase_blob_cancel","ibase_blob_close","ibase_blob_create","ibase_blob_echo","ibase_blob_get","ibase_blob_import","ibase_blob_info","ibase_blob_open","ibase_close","ibase_commit","ibase_commit_ret","ibase_connect","ibase_db_info","ibase_delete_user","ibase_drop_db","ibase_errcode","ibase_errmsg","ibase_execute","ibase_fetch_assoc","ibase_fetch_object","ibase_fetch_row","ibase_field_info","ibase_free_event_handler","ibase_free_query","ibase_free_result","ibase_gen_id","ibase_maintain_db","ibase_modify_user","ibase_name_result","ibase_num_fields","ibase_num_params","ibase_param_info","ibase_pconnect","ibase_prepare","ibase_query","ibase_restore","ibase_rollback","ibase_rollback_ret","ibase_server_info","ibase_service_attach","ibase_service_detach","ibase_set_event_handler","ibase_trans","ibase_wait_event","iconv","iconv_get_encoding","iconv_mime_decode","iconv_mime_decode_headers","iconv_mime_encode","iconv_set_encoding","iconv_strlen","iconv_strpos","iconv_strrpos","iconv_substr","id3_get_frame_long_name","id3_get_frame_short_name","id3_get_genre_id","id3_get_genre_list","id3_get_genre_name","id3_get_tag","id3_get_version","id3_remove_tag","id3_set_tag","idate","idn_to_ascii","idn_to_unicode","idn_to_utf8","ifx_affected_rows","ifx_blobinfile_mode","ifx_byteasvarchar","ifx_close","ifx_connect","ifx_copy_blob","ifx_create_blob","ifx_create_char","ifx_do","ifx_error","ifx_errormsg","ifx_fetch_row","ifx_fieldproperties","ifx_fieldtypes","ifx_free_blob","ifx_free_char","ifx_free_result","ifx_get_blob","ifx_get_char","ifx_getsqlca","ifx_htmltbl_result","ifx_nullformat","ifx_num_fields","ifx_num_rows","ifx_pconnect","ifx_prepare","ifx_query","ifx_textasvarchar","ifx_update_blob","ifx_update_char","ifxus_close_slob","ifxus_create_slob","ifxus_free_slob","ifxus_open_slob","ifxus_read_slob","ifxus_seek_slob","ifxus_tell_slob","ifxus_write_slob","ignore_user_abort","iis_add_server","iis_get_dir_security","iis_get_script_map","iis_get_server_by_comment","iis_get_server_by_path","iis_get_server_rights","iis_get_service_state","iis_remove_server","iis_set_app_settings","iis_set_dir_security","iis_set_script_map","iis_set_server_rights","iis_start_server","iis_start_service","iis_stop_server","iis_stop_service","image2wbmp","image_type_to_extension","image_type_to_mime_type","imageaffine","imageaffinematrixconcat","imageaffinematrixget","imagealphablending","imageantialias","imagearc","imagechar","imagecharup","imagecolorallocate","imagecolorallocatealpha","imagecolorat","imagecolorclosest","imagecolorclosestalpha","imagecolorclosesthwb","imagecolordeallocate","imagecolorexact","imagecolorexactalpha","imagecolormatch","imagecolorresolve","imagecolorresolvealpha","imagecolorset","imagecolorsforindex","imagecolorstotal","imagecolortransparent","imageconvolution","imagecopy","imagecopymerge","imagecopymergegray","imagecopyresampled","imagecopyresized","imagecreate","imagecreatefromgd","imagecreatefromgd2","imagecreatefromgd2part","imagecreatefromgif","imagecreatefromjpeg","imagecreatefrompng","imagecreatefromstring","imagecreatefromwbmp","imagecreatefromwebp","imagecreatefromxbm","imagecreatefromxpm","imagecreatetruecolor","imagecrop","imagecropauto","imagedashedline","imagedestroy","imageellipse","imagefill","imagefilledarc","imagefilledellipse","imagefilledpolygon","imagefilledrectangle","imagefilltoborder","imagefilter","imageflip","imagefontheight","imagefontwidth","imageftbbox","imagefttext","imagegammacorrect","imagegd","imagegd2","imagegif","imagegrabscreen","imagegrabwindow","imageinterlace","imageistruecolor","imagejpeg","imagelayereffect","imageline","imageloadfont","imagepalettecopy","imagepalettetotruecolor","imagepng","imagepolygon","imagepsbbox","imagepsencodefont","imagepsextendfont","imagepsfreefont","imagepsloadfont","imagepsslantfont","imagepstext","imagerectangle","imagerotate","imagesavealpha","imagescale","imagesetbrush","imagesetinterpolation","imagesetpixel","imagesetstyle","imagesetthickness","imagesettile","imagestring","imagestringup","imagesx","imagesy","imagetruecolortopalette","imagettfbbox","imagettftext","imagetypes","imagewbmp","imagewebp","imagexbm","imap_8bit","imap_alerts","imap_append","imap_base64","imap_binary","imap_body","imap_bodystruct","imap_check","imap_clearflag_full","imap_close","imap_create","imap_createmailbox","imap_delete","imap_deletemailbox","imap_errors","imap_expunge","imap_fetch_overview","imap_fetchbody","imap_fetchheader","imap_fetchmime","imap_fetchstructure","imap_fetchtext","imap_gc","imap_get_quota","imap_get_quotaroot","imap_getacl","imap_getmailboxes","imap_getsubscribed","imap_header","imap_headerinfo","imap_headers","imap_last_error","imap_list","imap_listmailbox","imap_listscan","imap_listsubscribed","imap_lsub","imap_mail","imap_mail_compose","imap_mail_copy","imap_mail_move","imap_mailboxmsginfo","imap_mime_header_decode","imap_msgno","imap_num_msg","imap_num_recent","imap_open","imap_ping","imap_qprint","imap_rename","imap_renamemailbox","imap_reopen","imap_rfc822_parse_adrlist","imap_rfc822_parse_headers","imap_rfc822_write_address","imap_savebody","imap_scan","imap_scanmailbox","imap_search","imap_set_quota","imap_setacl","imap_setflag_full","imap_sort","imap_status","imap_subscribe","imap_thread","imap_timeout","imap_uid","imap_undelete","imap_unsubscribe","imap_utf7_decode","imap_utf7_encode","imap_utf8","implode","import_request_variables","in_array","inclued_get_data","inet_ntop","inet_pton","ingres_autocommit","ingres_autocommit_state","ingres_charset","ingres_close","ingres_commit","ingres_connect","ingres_cursor","ingres_errno","ingres_error","ingres_errsqlstate","ingres_escape_string","ingres_execute","ingres_fetch_array","ingres_fetch_assoc","ingres_fetch_object","ingres_fetch_proc_return","ingres_fetch_row","ingres_field_length","ingres_field_name","ingres_field_nullable","ingres_field_precision","ingres_field_scale","ingres_field_type","ingres_free_result","ingres_next_error","ingres_num_fields","ingres_num_rows","ingres_pconnect","ingres_prepare","ingres_query","ingres_result_seek","ingres_rollback","ingres_set_environment","ingres_unbuffered_query","ini_alter","ini_get","ini_get_all","ini_restore","ini_set","inotify_add_watch","inotify_init","inotify_queue_len","inotify_read","inotify_rm_watch","interface_exists","intl_error_name","intl_get_error_code","intl_get_error_message","intl_is_failure","intval","ip2long","iptcembed","iptcparse","is_a","is_array","is_bool","is_callable","is_dir","is_double","is_executable","is_file","is_finite","is_float","is_infinite","is_int","is_integer","is_link","is_long","is_nan","is_null","is_numeric","is_object","is_readable","is_real","is_resource","is_scalar","is_soap_fault","is_string","is_subclass_of","is_tainted","is_uploaded_file","is_writable","is_writeable","isset","iterator_apply","iterator_count","iterator_to_array","java_last_exception_clear","java_last_exception_get","jdtojewish","jdtounix","join","jpeg2wbmp","json_decode","json_encode","json_last_error","json_last_error_msg","judy_type","judy_version","kadm5_chpass_principal","kadm5_create_principal","kadm5_delete_principal","kadm5_destroy","kadm5_flush","kadm5_get_policies","kadm5_get_principal","kadm5_get_principals","kadm5_init_with_password","kadm5_modify_principal","key","key_exists","krsort","ksort","lcfirst","lcg_value","lchgrp","lchown","ldap_8859_to_t61","ldap_add","ldap_bind","ldap_close","ldap_compare","ldap_connect","ldap_control_paged_result","ldap_control_paged_result_response","ldap_count_entries","ldap_delete","ldap_dn2ufn","ldap_err2str","ldap_errno","ldap_error","ldap_explode_dn","ldap_first_attribute","ldap_first_entry","ldap_first_reference","ldap_free_result","ldap_get_attributes","ldap_get_dn","ldap_get_entries","ldap_get_option","ldap_get_values","ldap_get_values_len","ldap_list","ldap_mod_add","ldap_mod_del","ldap_mod_replace","ldap_modify","ldap_next_attribute","ldap_next_entry","ldap_next_reference","ldap_parse_reference","ldap_parse_result","ldap_read","ldap_rename","ldap_sasl_bind","ldap_search","ldap_set_option","ldap_set_rebind_proc","ldap_sort","ldap_start_tls","ldap_t61_to_8859","ldap_unbind","levenshtein","libxml_clear_errors","libxml_disable_entity_loader","libxml_get_errors","libxml_get_last_error","libxml_set_external_entity_loader","libxml_set_streams_context","libxml_use_internal_errors","link","linkinfo","list","localeconv","localtime","log","log10","log1p","long2ip","lstat","ltrim","lzf_compress","lzf_decompress","lzf_optimized_for","m_checkstatus","m_completeauthorizations","m_connect","m_connectionerror","m_deletetrans","m_destroyconn","m_destroyengine","m_getcell","m_getcellbynum","m_getcommadelimited","m_getheader","m_initconn","m_initengine","m_iscommadelimited","m_maxconntimeout","m_monitor","m_numcolumns","m_numrows","m_parsecommadelimited","m_responsekeys","m_responseparam","m_returnstatus","m_setblocking","m_setdropfile","m_setip","m_setssl","m_setssl_cafile","m_setssl_files","m_settimeout","m_sslcert_gen_hash","m_transactionssent","m_transinqueue","m_transkeyval","m_transnew","m_transsend","m_uwait","m_validateidentifier","m_verifyconnection","m_verifysslcert","magic_quotes_runtime","mail","mailparse_determine_best_xfer_encoding","mailparse_msg_create","mailparse_msg_extract_part","mailparse_msg_extract_part_file","mailparse_msg_extract_whole_part_file","mailparse_msg_free","mailparse_msg_get_part","mailparse_msg_get_part_data","mailparse_msg_get_structure","mailparse_msg_parse","mailparse_msg_parse_file","mailparse_rfc822_parse_addresses","mailparse_stream_encode","mailparse_uudecode_all","main","max","maxdb_affected_rows","maxdb_autocommit","maxdb_bind_param","maxdb_bind_result","maxdb_change_user","maxdb_character_set_name","maxdb_client_encoding","maxdb_close","maxdb_close_long_data","maxdb_commit","maxdb_connect","maxdb_connect_errno","maxdb_connect_error","maxdb_data_seek","maxdb_debug","maxdb_disable_reads_from_master","maxdb_disable_rpl_parse","maxdb_dump_debug_info","maxdb_embedded_connect","maxdb_enable_reads_from_master","maxdb_enable_rpl_parse","maxdb_errno","maxdb_error","maxdb_escape_string","maxdb_execute","maxdb_fetch","maxdb_fetch_array","maxdb_fetch_assoc","maxdb_fetch_field","maxdb_fetch_field_direct","maxdb_fetch_fields","maxdb_fetch_lengths","maxdb_fetch_object","maxdb_fetch_row","maxdb_field_count","maxdb_field_seek","maxdb_field_tell","maxdb_free_result","maxdb_get_client_info","maxdb_get_client_version","maxdb_get_host_info","maxdb_get_metadata","maxdb_get_proto_info","maxdb_get_server_info","maxdb_get_server_version","maxdb_info","maxdb_init","maxdb_insert_id","maxdb_kill","maxdb_master_query","maxdb_more_results","maxdb_multi_query","maxdb_next_result","maxdb_num_fields","maxdb_num_rows","maxdb_options","maxdb_param_count","maxdb_ping","maxdb_prepare","maxdb_query","maxdb_real_connect","maxdb_real_escape_string","maxdb_real_query","maxdb_report","maxdb_rollback","maxdb_rpl_parse_enabled","maxdb_rpl_probe","maxdb_rpl_query_type","maxdb_select_db","maxdb_send_long_data","maxdb_send_query","maxdb_server_end","maxdb_server_init","maxdb_set_opt","maxdb_sqlstate","maxdb_ssl_set","maxdb_stat","maxdb_stmt_affected_rows","maxdb_stmt_bind_param","maxdb_stmt_bind_result","maxdb_stmt_close","maxdb_stmt_close_long_data","maxdb_stmt_data_seek","maxdb_stmt_errno","maxdb_stmt_error","maxdb_stmt_execute","maxdb_stmt_fetch","maxdb_stmt_free_result","maxdb_stmt_init","maxdb_stmt_num_rows","maxdb_stmt_param_count","maxdb_stmt_prepare","maxdb_stmt_reset","maxdb_stmt_result_metadata","maxdb_stmt_send_long_data","maxdb_stmt_sqlstate","maxdb_stmt_store_result","maxdb_store_result","maxdb_thread_id","maxdb_thread_safe","maxdb_use_result","maxdb_warning_count","mb_check_encoding","mb_convert_case","mb_convert_encoding","mb_convert_kana","mb_convert_variables","mb_decode_mimeheader","mb_decode_numericentity","mb_detect_encoding","mb_detect_order","mb_encode_mimeheader","mb_encode_numericentity","mb_encoding_aliases","mb_ereg","mb_ereg_match","mb_ereg_replace","mb_ereg_replace_callback","mb_ereg_search","mb_ereg_search_getpos","mb_ereg_search_getregs","mb_ereg_search_init","mb_ereg_search_pos","mb_ereg_search_regs","mb_ereg_search_setpos","mb_eregi","mb_eregi_replace","mb_get_info","mb_http_input","mb_http_output","mb_internal_encoding","mb_language","mb_list_encodings","mb_output_handler","mb_parse_str","mb_preferred_mime_name","mb_regex_encoding","mb_regex_set_options","mb_send_mail","mb_split","mb_strcut","mb_strimwidth","mb_stripos","mb_stristr","mb_strlen","mb_strpos","mb_strrchr","mb_strrichr","mb_strripos","mb_strrpos","mb_strstr","mb_strtolower","mb_strtoupper","mb_strwidth","mb_substitute_character","mb_substr","mb_substr_count","mcrypt_cbc","mcrypt_cfb","mcrypt_create_iv","mcrypt_decrypt","mcrypt_ecb","mcrypt_enc_get_algorithms_name","mcrypt_enc_get_block_size","mcrypt_enc_get_iv_size","mcrypt_enc_get_key_size","mcrypt_enc_get_modes_name","mcrypt_enc_get_supported_key_sizes","mcrypt_enc_is_block_algorithm","mcrypt_enc_is_block_algorithm_mode","mcrypt_enc_is_block_mode","mcrypt_enc_self_test","mcrypt_encrypt","mcrypt_generic","mcrypt_generic_deinit","mcrypt_generic_end","mcrypt_generic_init","mcrypt_get_block_size","mcrypt_get_cipher_name","mcrypt_get_iv_size","mcrypt_get_key_size","mcrypt_list_algorithms","mcrypt_list_modes","mcrypt_module_close","mcrypt_module_get_algo_block_size","mcrypt_module_get_algo_key_size","mcrypt_module_get_supported_key_sizes","mcrypt_module_is_block_algorithm","mcrypt_module_is_block_algorithm_mode","mcrypt_module_is_block_mode","mcrypt_module_open","mcrypt_module_self_test","mcrypt_ofb","md5","md5_file","mdecrypt_generic","memcache_debug","memory_get_peak_usage","memory_get_usage","metaphone","method_exists","mhash","mhash_count","mhash_get_block_size","mhash_get_hash_name","mhash_keygen_s2k","microtime","mime_content_type","min","ming_keypress","ming_setcubicthreshold","ming_setscale","ming_setswfcompression","ming_useconstants","ming_useswfversion","mkdir","mktime","money_format","move_uploaded_file","mqseries_back","mqseries_begin","mqseries_close","mqseries_cmit","mqseries_conn","mqseries_connx","mqseries_disc","mqseries_get","mqseries_inq","mqseries_open","mqseries_put","mqseries_put1","mqseries_set","mqseries_strerror","msession_connect","msession_count","msession_create","msession_destroy","msession_disconnect","msession_find","msession_get","msession_get_array","msession_get_data","msession_inc","msession_list","msession_listvar","msession_lock","msession_plugin","msession_randstr","msession_set","msession_set_array","msession_set_data","msession_timeout","msession_uniq","msession_unlock","msg_get_queue","msg_queue_exists","msg_receive","msg_remove_queue","msg_send","msg_set_queue","msg_stat_queue","msql","msql_affected_rows","msql_close","msql_connect","msql_create_db","msql_createdb","msql_data_seek","msql_db_query","msql_dbname","msql_drop_db","msql_error","msql_fetch_array","msql_fetch_field","msql_fetch_object","msql_fetch_row","msql_field_flags","msql_field_len","msql_field_name","msql_field_seek","msql_field_table","msql_field_type","msql_fieldflags","msql_fieldlen","msql_fieldname","msql_fieldtable","msql_fieldtype","msql_free_result","msql_list_dbs","msql_list_fields","msql_list_tables","msql_num_fields","msql_num_rows","msql_numfields","msql_numrows","msql_pconnect","msql_query","msql_regcase","msql_result","msql_select_db","msql_tablename","mssql_bind","mssql_close","mssql_connect","mssql_data_seek","mssql_execute","mssql_fetch_array","mssql_fetch_assoc","mssql_fetch_batch","mssql_fetch_field","mssql_fetch_object","mssql_fetch_row","mssql_field_length","mssql_field_name","mssql_field_seek","mssql_field_type","mssql_free_result","mssql_free_statement","mssql_get_last_message","mssql_guid_string","mssql_init","mssql_min_error_severity","mssql_min_message_severity","mssql_next_result","mssql_num_fields","mssql_num_rows","mssql_pconnect","mssql_query","mssql_result","mssql_rows_affected","mssql_select_db","mt_getrandmax","mt_rand","mt_srand","mysql_affected_rows","mysql_client_encoding","mysql_close","mysql_connect","mysql_create_db","mysql_data_seek","mysql_db_name","mysql_db_query","mysql_drop_db","mysql_errno","mysql_error","mysql_escape_string","mysql_fetch_array","mysql_fetch_assoc","mysql_fetch_field","mysql_fetch_lengths","mysql_fetch_object","mysql_fetch_row","mysql_field_flags","mysql_field_len","mysql_field_name","mysql_field_seek","mysql_field_table","mysql_field_type","mysql_free_result","mysql_get_client_info","mysql_get_host_info","mysql_get_proto_info","mysql_get_server_info","mysql_info","mysql_insert_id","mysql_list_dbs","mysql_list_fields","mysql_list_processes","mysql_list_tables","mysql_num_fields","mysql_num_rows","mysql_pconnect","mysql_ping","mysql_query","mysql_real_escape_string","mysql_result","mysql_select_db","mysql_set_charset","mysql_stat","mysql_tablename","mysql_thread_id","mysql_unbuffered_query","mysqli::disable_reads_from_master","mysqli::set_opt","mysqli_bind_param","mysqli_bind_result","mysqli_client_encoding","mysqli_connect","mysqli_disable_rpl_parse","mysqli_enable_reads_from_master","mysqli_enable_rpl_parse","mysqli_escape_string","mysqli_execute","mysqli_fetch","mysqli_get_cache_stats","mysqli_get_metadata","mysqli_master_query","mysqli_param_count","mysqli_report","mysqli_rpl_parse_enabled","mysqli_rpl_probe","mysqli_send_long_data","mysqli_slave_query","mysqlnd_memcache_get_config","mysqlnd_memcache_set","mysqlnd_ms_get_last_gtid","mysqlnd_ms_get_last_used_connection","mysqlnd_ms_get_stats","mysqlnd_ms_match_wild","mysqlnd_ms_query_is_select","mysqlnd_ms_set_qos","mysqlnd_ms_set_user_pick_server","mysqlnd_qc_clear_cache","mysqlnd_qc_get_available_handlers","mysqlnd_qc_get_cache_info","mysqlnd_qc_get_core_stats","mysqlnd_qc_get_normalized_query_trace_log","mysqlnd_qc_get_query_trace_log","mysqlnd_qc_set_cache_condition","mysqlnd_qc_set_is_select","mysqlnd_qc_set_storage_handler","mysqlnd_qc_set_user_handlers","mysqlnd_uh_convert_to_mysqlnd","mysqlnd_uh_set_connection_proxy","mysqlnd_uh_set_statement_proxy","natcasesort","natsort","ncurses_addch","ncurses_addchnstr","ncurses_addchstr","ncurses_addnstr","ncurses_addstr","ncurses_assume_default_colors","ncurses_attroff","ncurses_attron","ncurses_attrset","ncurses_baudrate","ncurses_beep","ncurses_bkgd","ncurses_bkgdset","ncurses_border","ncurses_bottom_panel","ncurses_can_change_color","ncurses_cbreak","ncurses_clear","ncurses_clrtobot","ncurses_clrtoeol","ncurses_color_content","ncurses_color_set","ncurses_curs_set","ncurses_def_prog_mode","ncurses_def_shell_mode","ncurses_define_key","ncurses_del_panel","ncurses_delay_output","ncurses_delch","ncurses_deleteln","ncurses_delwin","ncurses_doupdate","ncurses_echo","ncurses_echochar","ncurses_end","ncurses_erase","ncurses_erasechar","ncurses_filter","ncurses_flash","ncurses_flushinp","ncurses_getch","ncurses_getmaxyx","ncurses_getmouse","ncurses_getyx","ncurses_halfdelay","ncurses_has_colors","ncurses_has_ic","ncurses_has_il","ncurses_has_key","ncurses_hide_panel","ncurses_hline","ncurses_inch","ncurses_init","ncurses_init_color","ncurses_init_pair","ncurses_insch","ncurses_insdelln","ncurses_insertln","ncurses_insstr","ncurses_instr","ncurses_isendwin","ncurses_keyok","ncurses_keypad","ncurses_killchar","ncurses_longname","ncurses_meta","ncurses_mouse_trafo","ncurses_mouseinterval","ncurses_mousemask","ncurses_move","ncurses_move_panel","ncurses_mvaddch","ncurses_mvaddchnstr","ncurses_mvaddchstr","ncurses_mvaddnstr","ncurses_mvaddstr","ncurses_mvcur","ncurses_mvdelch","ncurses_mvgetch","ncurses_mvhline","ncurses_mvinch","ncurses_mvvline","ncurses_mvwaddstr","ncurses_napms","ncurses_new_panel","ncurses_newpad","ncurses_newwin","ncurses_nl","ncurses_nocbreak","ncurses_noecho","ncurses_nonl","ncurses_noqiflush","ncurses_noraw","ncurses_pair_content","ncurses_panel_above","ncurses_panel_below","ncurses_panel_window","ncurses_pnoutrefresh","ncurses_prefresh","ncurses_putp","ncurses_qiflush","ncurses_raw","ncurses_refresh","ncurses_replace_panel","ncurses_reset_prog_mode","ncurses_reset_shell_mode","ncurses_resetty","ncurses_savetty","ncurses_scr_dump","ncurses_scr_init","ncurses_scr_restore","ncurses_scr_set","ncurses_scrl","ncurses_show_panel","ncurses_slk_attr","ncurses_slk_attroff","ncurses_slk_attron","ncurses_slk_attrset","ncurses_slk_clear","ncurses_slk_color","ncurses_slk_init","ncurses_slk_noutrefresh","ncurses_slk_refresh","ncurses_slk_restore","ncurses_slk_set","ncurses_slk_touch","ncurses_standend","ncurses_standout","ncurses_start_color","ncurses_termattrs","ncurses_termname","ncurses_timeout","ncurses_top_panel","ncurses_typeahead","ncurses_ungetch","ncurses_ungetmouse","ncurses_update_panels","ncurses_use_default_colors","ncurses_use_env","ncurses_use_extended_names","ncurses_vidattr","ncurses_vline","ncurses_waddch","ncurses_waddstr","ncurses_wattroff","ncurses_wattron","ncurses_wattrset","ncurses_wborder","ncurses_wclear","ncurses_wcolor_set","ncurses_werase","ncurses_wgetch","ncurses_whline","ncurses_wmouse_trafo","ncurses_wmove","ncurses_wnoutrefresh","ncurses_wrefresh","ncurses_wstandend","ncurses_wstandout","ncurses_wvline","newt_bell","newt_button","newt_button_bar","newt_centered_window","newt_checkbox","newt_checkbox_get_value","newt_checkbox_set_flags","newt_checkbox_set_value","newt_checkbox_tree","newt_checkbox_tree_add_item","newt_checkbox_tree_find_item","newt_checkbox_tree_get_current","newt_checkbox_tree_get_entry_value","newt_checkbox_tree_get_multi_selection","newt_checkbox_tree_get_selection","newt_checkbox_tree_multi","newt_checkbox_tree_set_current","newt_checkbox_tree_set_entry","newt_checkbox_tree_set_entry_value","newt_checkbox_tree_set_width","newt_clear_key_buffer","newt_cls","newt_compact_button","newt_component_add_callback","newt_component_takes_focus","newt_create_grid","newt_cursor_off","newt_cursor_on","newt_delay","newt_draw_form","newt_draw_root_text","newt_entry","newt_entry_get_value","newt_entry_set","newt_entry_set_filter","newt_entry_set_flags","newt_finished","newt_form","newt_form_add_component","newt_form_add_components","newt_form_add_hot_key","newt_form_destroy","newt_form_get_current","newt_form_run","newt_form_set_background","newt_form_set_height","newt_form_set_size","newt_form_set_timer","newt_form_set_width","newt_form_watch_fd","newt_get_screen_size","newt_grid_add_components_to_form","newt_grid_basic_window","newt_grid_free","newt_grid_get_size","newt_grid_h_close_stacked","newt_grid_h_stacked","newt_grid_place","newt_grid_set_field","newt_grid_simple_window","newt_grid_v_close_stacked","newt_grid_v_stacked","newt_grid_wrapped_window","newt_grid_wrapped_window_at","newt_init","newt_label","newt_label_set_text","newt_listbox","newt_listbox_append_entry","newt_listbox_clear","newt_listbox_clear_selection","newt_listbox_delete_entry","newt_listbox_get_current","newt_listbox_get_selection","newt_listbox_insert_entry","newt_listbox_item_count","newt_listbox_select_item","newt_listbox_set_current","newt_listbox_set_current_by_key","newt_listbox_set_data","newt_listbox_set_entry","newt_listbox_set_width","newt_listitem","newt_listitem_get_data","newt_listitem_set","newt_open_window","newt_pop_help_line","newt_pop_window","newt_push_help_line","newt_radio_get_current","newt_radiobutton","newt_redraw_help_line","newt_reflow_text","newt_refresh","newt_resize_screen","newt_resume","newt_run_form","newt_scale","newt_scale_set","newt_scrollbar_set","newt_set_help_callback","newt_set_suspend_callback","newt_suspend","newt_textbox","newt_textbox_get_num_lines","newt_textbox_reflowed","newt_textbox_set_height","newt_textbox_set_text","newt_vertical_scrollbar","newt_wait_for_key","newt_win_choice","newt_win_entries","newt_win_menu","newt_win_message","newt_win_messagev","newt_win_ternary","next","ngettext","nl2br","nl_langinfo","notes_body","notes_copy_db","notes_create_db","notes_create_note","notes_drop_db","notes_find_note","notes_header_info","notes_list_msgs","notes_mark_read","notes_mark_unread","notes_nav_create","notes_search","notes_unread","notes_version","nsapi_request_headers","nsapi_response_headers","nsapi_virtual","nthmac","number_format","oauth_get_sbs","oauth_urlencode","ob_clean","ob_deflatehandler","ob_end_clean","ob_end_flush","ob_etaghandler","ob_flush","ob_get_clean","ob_get_contents","ob_get_flush","ob_get_length","ob_get_level","ob_get_status","ob_gzhandler","ob_iconv_handler","ob_implicit_flush","ob_inflatehandler","ob_list_handlers","ob_start","ob_tidyhandler","oci_bind_array_by_name","oci_bind_by_name","oci_cancel","oci_client_version","oci_close","oci_commit","oci_connect","oci_define_by_name","oci_error","oci_execute","oci_fetch","oci_fetch_all","oci_fetch_array","oci_fetch_assoc","oci_fetch_object","oci_fetch_row","oci_field_is_null","oci_field_name","oci_field_precision","oci_field_scale","oci_field_size","oci_field_type","oci_field_type_raw","oci_free_descriptor","oci_free_statement","oci_internal_debug","oci_lob_copy","oci_lob_is_equal","oci_new_collection","oci_new_connect","oci_new_cursor","oci_new_descriptor","oci_num_fields","oci_num_rows","oci_parse","oci_password_change","oci_pconnect","oci_result","oci_rollback","oci_server_version","oci_set_action","oci_set_client_identifier","oci_set_client_info","oci_set_edition","oci_set_module_name","oci_set_prefetch","oci_statement_type","octdec","odbc_autocommit","odbc_binmode","odbc_close","odbc_close_all","odbc_columnprivileges","odbc_columns","odbc_commit","odbc_connect","odbc_cursor","odbc_data_source","odbc_do","odbc_error","odbc_errormsg","odbc_exec","odbc_execute","odbc_fetch_array","odbc_fetch_into","odbc_fetch_object","odbc_fetch_row","odbc_field_len","odbc_field_name","odbc_field_num","odbc_field_precision","odbc_field_scale","odbc_field_type","odbc_foreignkeys","odbc_free_result","odbc_gettypeinfo","odbc_longreadlen","odbc_next_result","odbc_num_fields","odbc_num_rows","odbc_pconnect","odbc_prepare","odbc_primarykeys","odbc_procedurecolumns","odbc_procedures","odbc_result","odbc_result_all","odbc_rollback","odbc_setoption","odbc_specialcolumns","odbc_statistics","odbc_tableprivileges","odbc_tables","openal_buffer_create","openal_buffer_data","openal_buffer_destroy","openal_buffer_get","openal_buffer_loadwav","openal_context_create","openal_context_current","openal_context_destroy","openal_context_process","openal_context_suspend","openal_device_close","openal_device_open","openal_listener_get","openal_listener_set","openal_source_create","openal_source_destroy","openal_source_get","openal_source_pause","openal_source_play","openal_source_rewind","openal_source_set","openal_source_stop","openal_stream","opendir","openlog","openssl_cipher_iv_length","openssl_csr_export","openssl_csr_export_to_file","openssl_csr_get_public_key","openssl_csr_get_subject","openssl_csr_new","openssl_csr_sign","openssl_decrypt","openssl_dh_compute_key","openssl_digest","openssl_encrypt","openssl_error_string","openssl_free_key","openssl_get_cipher_methods","openssl_get_md_methods","openssl_get_privatekey","openssl_get_publickey","openssl_open","openssl_pbkdf2","openssl_pkcs12_export","openssl_pkcs12_export_to_file","openssl_pkcs12_read","openssl_pkcs7_decrypt","openssl_pkcs7_encrypt","openssl_pkcs7_sign","openssl_pkcs7_verify","openssl_pkey_export","openssl_pkey_export_to_file","openssl_pkey_free","openssl_pkey_get_details","openssl_pkey_get_private","openssl_pkey_get_public","openssl_pkey_new","openssl_private_decrypt","openssl_private_encrypt","openssl_public_decrypt","openssl_public_encrypt","openssl_random_pseudo_bytes","openssl_seal","openssl_sign","openssl_verify","openssl_x509_check_private_key","openssl_x509_checkpurpose","openssl_x509_export","openssl_x509_export_to_file","openssl_x509_free","openssl_x509_parse","openssl_x509_read","ord","output_add_rewrite_var","output_reset_rewrite_vars","override_function","ovrimos_close","ovrimos_commit","ovrimos_connect","ovrimos_cursor","ovrimos_exec","ovrimos_execute","ovrimos_fetch_into","ovrimos_fetch_row","ovrimos_field_len","ovrimos_field_name","ovrimos_field_num","ovrimos_field_type","ovrimos_free_result","ovrimos_longreadlen","ovrimos_num_fields","ovrimos_num_rows","ovrimos_prepare","ovrimos_result","ovrimos_result_all","ovrimos_rollback","pack","parse_ini_file","parse_ini_string","parse_str","parse_url","parsekit_compile_file","parsekit_compile_string","parsekit_func_arginfo","passthru","password_get_info","password_hash","password_needs_rehash","password_verify","pathinfo","pclose","pcntl_alarm","pcntl_errno","pcntl_exec","pcntl_fork","pcntl_get_last_error","pcntl_getpriority","pcntl_setpriority","pcntl_signal","pcntl_signal_dispatch","pcntl_sigprocmask","pcntl_sigtimedwait","pcntl_sigwaitinfo","pcntl_strerror","pcntl_wait","pcntl_waitpid","pcntl_wexitstatus","pcntl_wifexited","pcntl_wifsignaled","pcntl_wifstopped","pcntl_wstopsig","pcntl_wtermsig","pfsockopen","pg_affected_rows","pg_cancel_query","pg_client_encoding","pg_close","pg_connect","pg_connection_busy","pg_connection_reset","pg_connection_status","pg_convert","pg_copy_from","pg_copy_to","pg_dbname","pg_delete","pg_end_copy","pg_escape_bytea","pg_escape_identifier","pg_escape_literal","pg_escape_string","pg_execute","pg_fetch_all","pg_fetch_all_columns","pg_fetch_array","pg_fetch_assoc","pg_fetch_object","pg_fetch_result","pg_fetch_row","pg_field_is_null","pg_field_name","pg_field_num","pg_field_prtlen","pg_field_size","pg_field_table","pg_field_type","pg_field_type_oid","pg_free_result","pg_get_notify","pg_get_pid","pg_get_result","pg_host","pg_insert","pg_last_error","pg_last_notice","pg_last_oid","pg_lo_close","pg_lo_create","pg_lo_export","pg_lo_import","pg_lo_open","pg_lo_read","pg_lo_read_all","pg_lo_seek","pg_lo_tell","pg_lo_unlink","pg_lo_write","pg_meta_data","pg_num_fields","pg_num_rows","pg_options","pg_parameter_status","pg_pconnect","pg_ping","pg_port","pg_prepare","pg_put_line","pg_query","pg_query_params","pg_result_error","pg_result_error_field","pg_result_seek","pg_result_status","pg_select","pg_send_execute","pg_send_prepare","pg_send_query","pg_send_query_params","pg_set_client_encoding","pg_set_error_verbosity","pg_trace","pg_transaction_status","pg_tty","pg_unescape_bytea","pg_untrace","pg_update","pg_version","php_check_syntax","php_ini_loaded_file","php_ini_scanned_files","php_logo_guid","php_sapi_name","php_strip_whitespace","php_uname","phpcredits","phpinfo","phpversion","pi","png2wbmp","popen","pos","posix_access","posix_ctermid","posix_errno","posix_get_last_error","posix_getcwd","posix_getegid","posix_geteuid","posix_getgid","posix_getgrgid","posix_getgrnam","posix_getgroups","posix_getlogin","posix_getpgid","posix_getpgrp","posix_getpid","posix_getppid","posix_getpwnam","posix_getpwuid","posix_getrlimit","posix_getsid","posix_getuid","posix_initgroups","posix_isatty","posix_kill","posix_mkfifo","posix_mknod","posix_setegid","posix_seteuid","posix_setgid","posix_setpgid","posix_setsid","posix_setuid","posix_strerror","posix_times","posix_ttyname","posix_uname","pow","preg_filter","preg_grep","preg_last_error","preg_match","preg_match_all","preg_quote","preg_replace","preg_replace_callback","preg_split","prev","print","print_r","printer_abort","printer_close","printer_create_brush","printer_create_dc","printer_create_font","printer_create_pen","printer_delete_brush","printer_delete_dc","printer_delete_font","printer_delete_pen","printer_draw_bmp","printer_draw_chord","printer_draw_elipse","printer_draw_line","printer_draw_pie","printer_draw_rectangle","printer_draw_roundrect","printer_draw_text","printer_end_doc","printer_end_page","printer_get_option","printer_list","printer_logical_fontheight","printer_open","printer_select_brush","printer_select_font","printer_select_pen","printer_set_option","printer_start_doc","printer_start_page","printer_write","printf","proc_close","proc_get_status","proc_nice","proc_open","proc_terminate","property_exists","ps_add_bookmark","ps_add_launchlink","ps_add_locallink","ps_add_note","ps_add_pdflink","ps_add_weblink","ps_arc","ps_arcn","ps_begin_page","ps_begin_pattern","ps_begin_template","ps_circle","ps_clip","ps_close","ps_close_image","ps_closepath","ps_closepath_stroke","ps_continue_text","ps_curveto","ps_delete","ps_end_page","ps_end_pattern","ps_end_template","ps_fill","ps_fill_stroke","ps_findfont","ps_get_buffer","ps_get_parameter","ps_get_value","ps_hyphenate","ps_include_file","ps_lineto","ps_makespotcolor","ps_moveto","ps_new","ps_open_file","ps_open_image","ps_open_image_file","ps_open_memory_image","ps_place_image","ps_rect","ps_restore","ps_rotate","ps_save","ps_scale","ps_set_border_color","ps_set_border_dash","ps_set_border_style","ps_set_info","ps_set_parameter","ps_set_text_pos","ps_set_value","ps_setcolor","ps_setdash","ps_setflat","ps_setfont","ps_setgray","ps_setlinecap","ps_setlinejoin","ps_setlinewidth","ps_setmiterlimit","ps_setoverprintmode","ps_setpolydash","ps_shading","ps_shading_pattern","ps_shfill","ps_show","ps_show2","ps_show_boxed","ps_show_xy","ps_show_xy2","ps_string_geometry","ps_stringwidth","ps_stroke","ps_symbol","ps_symbol_name","ps_symbol_width","ps_translate","pspell_add_to_personal","pspell_add_to_session","pspell_check","pspell_clear_session","pspell_config_create","pspell_config_data_dir","pspell_config_dict_dir","pspell_config_ignore","pspell_config_mode","pspell_config_personal","pspell_config_repl","pspell_config_runtogether","pspell_config_save_repl","pspell_new","pspell_new_config","pspell_new_personal","pspell_save_wordlist","pspell_store_replacement","pspell_suggest","putenv","px_close","px_create_fp","px_date2string","px_delete","px_delete_record","px_get_field","px_get_info","px_get_parameter","px_get_record","px_get_schema","px_get_value","px_insert_record","px_new","px_numfields","px_numrecords","px_open_fp","px_put_record","px_retrieve_record","px_set_blob_file","px_set_parameter","px_set_tablename","px_set_targetencoding","px_set_value","px_timestamp2string","px_update_record","qdom_error","qdom_tree","quoted_printable_decode","quoted_printable_encode","quotemeta","rad2deg","radius_acct_open","radius_add_server","radius_auth_open","radius_close","radius_config","radius_create_request","radius_cvt_addr","radius_cvt_int","radius_cvt_string","radius_demangle","radius_demangle_mppe_key","radius_get_attr","radius_get_tagged_attr_data","radius_get_tagged_attr_tag","radius_get_vendor_attr","radius_put_addr","radius_put_attr","radius_put_int","radius_put_string","radius_put_vendor_addr","radius_put_vendor_attr","radius_put_vendor_int","radius_put_vendor_string","radius_request_authenticator","radius_salt_encrypt_attr","radius_send_request","radius_server_secret","radius_strerror","rand","range","rar_wrapper_cache_stats","rawurldecode","rawurlencode","read_exif_data","readdir","readfile","readgzfile","readline","readline_add_history","readline_callback_handler_install","readline_callback_handler_remove","readline_callback_read_char","readline_clear_history","readline_completion_function","readline_info","readline_list_history","readline_on_new_line","readline_read_history","readline_redisplay","readline_write_history","readlink","realpath","realpath_cache_get","realpath_cache_size","recode","recode_file","recode_string","register_shutdown_function","register_tick_function","rename","rename_function","reset","restore_error_handler","restore_exception_handler","restore_include_path","rewind","rewinddir","rmdir","round","rpm_close","rpm_get_tag","rpm_is_valid","rpm_open","rpm_version","rrd_create","rrd_error","rrd_fetch","rrd_first","rrd_graph","rrd_info","rrd_last","rrd_lastupdate","rrd_restore","rrd_tune","rrd_update","rrd_version","rrd_xport","rsort","rtrim","runkit_class_adopt","runkit_class_emancipate","runkit_constant_add","runkit_constant_redefine","runkit_constant_remove","runkit_function_add","runkit_function_copy","runkit_function_redefine","runkit_function_remove","runkit_function_rename","runkit_import","runkit_lint","runkit_lint_file","runkit_method_add","runkit_method_copy","runkit_method_redefine","runkit_method_remove","runkit_method_rename","runkit_return_value_used","runkit_sandbox_output_handler","runkit_superglobals","scandir","sem_acquire","sem_get","sem_release","sem_remove","serialize","session_cache_expire","session_cache_limiter","session_commit","session_decode","session_destroy","session_encode","session_get_cookie_params","session_id","session_is_registered","session_module_name","session_name","session_pgsql_add_error","session_pgsql_get_error","session_pgsql_get_field","session_pgsql_reset","session_pgsql_set_field","session_pgsql_status","session_regenerate_id","session_register","session_register_shutdown","session_save_path","session_set_cookie_params","session_set_save_handler","session_start","session_status","session_unregister","session_unset","session_write_close","set_error_handler","set_exception_handler","set_file_buffer","set_include_path","set_magic_quotes_runtime","set_socket_blocking","set_time_limit","setcookie","setlocale","setproctitle","setrawcookie","setthreadtitle","settype","sha1","sha1_file","shell_exec","shm_attach","shm_detach","shm_get_var","shm_has_var","shm_put_var","shm_remove","shm_remove_var","shmop_close","shmop_delete","shmop_open","shmop_read","shmop_size","shmop_write","show_source","shuffle","signeurlpaiement","similar_text","simplexml_import_dom","simplexml_load_file","simplexml_load_string","sin","sinh","sizeof","sleep","snmp2_get","snmp2_getnext","snmp2_real_walk","snmp2_set","snmp2_walk","snmp3_get","snmp3_getnext","snmp3_real_walk","snmp3_set","snmp3_walk","snmp_get_quick_print","snmp_get_valueretrieval","snmp_read_mib","snmp_set_enum_print","snmp_set_oid_numeric_print","snmp_set_oid_output_format","snmp_set_quick_print","snmp_set_valueretrieval","snmpget","snmpgetnext","snmprealwalk","snmpset","snmpwalk","snmpwalkoid","socket_accept","socket_bind","socket_clear_error","socket_close","socket_cmsg_space","socket_connect","socket_create","socket_create_listen","socket_create_pair","socket_get_option","socket_get_status","socket_getpeername","socket_getsockname","socket_import_stream","socket_last_error","socket_listen","socket_read","socket_recv","socket_recvfrom","socket_recvmsg","socket_select","socket_send","socket_sendmsg","socket_sendto","socket_set_block","socket_set_blocking","socket_set_nonblock","socket_set_option","socket_set_timeout","socket_shutdown","socket_strerror","socket_write","solr_get_version","sort","soundex","spl_autoload","spl_autoload_call","spl_autoload_extensions","spl_autoload_functions","spl_autoload_register","spl_autoload_unregister","spl_classes","spl_object_hash","split","spliti","sprintf","sql_regcase","sqlite_array_query","sqlite_busy_timeout","sqlite_changes","sqlite_close","sqlite_column","sqlite_create_aggregate","sqlite_create_function","sqlite_current","sqlite_error_string","sqlite_escape_string","sqlite_exec","sqlite_factory","sqlite_fetch_all","sqlite_fetch_array","sqlite_fetch_column_types","sqlite_fetch_object","sqlite_fetch_single","sqlite_fetch_string","sqlite_field_name","sqlite_has_more","sqlite_has_prev","sqlite_key","sqlite_last_error","sqlite_last_insert_rowid","sqlite_libencoding","sqlite_libversion","sqlite_next","sqlite_num_fields","sqlite_num_rows","sqlite_open","sqlite_popen","sqlite_prev","sqlite_query","sqlite_rewind","sqlite_seek","sqlite_single_query","sqlite_udf_decode_binary","sqlite_udf_encode_binary","sqlite_unbuffered_query","sqlite_valid","sqlsrv_begin_transaction","sqlsrv_cancel","sqlsrv_client_info","sqlsrv_close","sqlsrv_commit","sqlsrv_configure","sqlsrv_connect","sqlsrv_errors","sqlsrv_execute","sqlsrv_fetch","sqlsrv_fetch_array","sqlsrv_fetch_object","sqlsrv_field_metadata","sqlsrv_free_stmt","sqlsrv_get_config","sqlsrv_get_field","sqlsrv_has_rows","sqlsrv_next_result","sqlsrv_num_fields","sqlsrv_num_rows","sqlsrv_prepare","sqlsrv_query","sqlsrv_rollback","sqlsrv_rows_affected","sqlsrv_send_stream_data","sqlsrv_server_info","sqrt","srand","sscanf","ssdeep_fuzzy_compare","ssdeep_fuzzy_hash","ssdeep_fuzzy_hash_filename","ssh2_auth_agent","ssh2_auth_hostbased_file","ssh2_auth_none","ssh2_auth_password","ssh2_auth_pubkey_file","ssh2_connect","ssh2_exec","ssh2_fetch_stream","ssh2_fingerprint","ssh2_methods_negotiated","ssh2_publickey_add","ssh2_publickey_init","ssh2_publickey_list","ssh2_publickey_remove","ssh2_scp_recv","ssh2_scp_send","ssh2_sftp","ssh2_sftp_chmod","ssh2_sftp_lstat","ssh2_sftp_mkdir","ssh2_sftp_readlink","ssh2_sftp_realpath","ssh2_sftp_rename","ssh2_sftp_rmdir","ssh2_sftp_stat","ssh2_sftp_symlink","ssh2_sftp_unlink","ssh2_shell","ssh2_tunnel","stat","stats_absolute_deviation","stats_cdf_beta","stats_cdf_binomial","stats_cdf_cauchy","stats_cdf_chisquare","stats_cdf_exponential","stats_cdf_f","stats_cdf_gamma","stats_cdf_laplace","stats_cdf_logistic","stats_cdf_negative_binomial","stats_cdf_noncentral_chisquare","stats_cdf_noncentral_f","stats_cdf_poisson","stats_cdf_t","stats_cdf_uniform","stats_cdf_weibull","stats_covariance","stats_den_uniform","stats_dens_beta","stats_dens_cauchy","stats_dens_chisquare","stats_dens_exponential","stats_dens_f","stats_dens_gamma","stats_dens_laplace","stats_dens_logistic","stats_dens_negative_binomial","stats_dens_normal","stats_dens_pmf_binomial","stats_dens_pmf_hypergeometric","stats_dens_pmf_poisson","stats_dens_t","stats_dens_weibull","stats_harmonic_mean","stats_kurtosis","stats_rand_gen_beta","stats_rand_gen_chisquare","stats_rand_gen_exponential","stats_rand_gen_f","stats_rand_gen_funiform","stats_rand_gen_gamma","stats_rand_gen_ibinomial","stats_rand_gen_ibinomial_negative","stats_rand_gen_int","stats_rand_gen_ipoisson","stats_rand_gen_iuniform","stats_rand_gen_noncenral_chisquare","stats_rand_gen_noncentral_f","stats_rand_gen_noncentral_t","stats_rand_gen_normal","stats_rand_gen_t","stats_rand_get_seeds","stats_rand_phrase_to_seeds","stats_rand_ranf","stats_rand_setall","stats_skew","stats_standard_deviation","stats_stat_binomial_coef","stats_stat_correlation","stats_stat_gennch","stats_stat_independent_t","stats_stat_innerproduct","stats_stat_noncentral_t","stats_stat_paired_t","stats_stat_percentile","stats_stat_powersum","stats_variance","stomp_connect_error","stomp_version","str_getcsv","str_ireplace","str_pad","str_repeat","str_replace","str_rot13","str_shuffle","str_split","str_word_count","strcasecmp","strchr","strcmp","strcoll","strcspn","stream_bucket_append","stream_bucket_make_writeable","stream_bucket_new","stream_bucket_prepend","stream_context_create","stream_context_get_default","stream_context_get_options","stream_context_get_params","stream_context_set_default","stream_context_set_option","stream_context_set_params","stream_copy_to_stream","stream_encoding","stream_filter_append","stream_filter_prepend","stream_filter_register","stream_filter_remove","stream_get_contents","stream_get_filters","stream_get_line","stream_get_meta_data","stream_get_transports","stream_get_wrappers","stream_is_local","stream_notification_callback","stream_register_wrapper","stream_resolve_include_path","stream_select","stream_set_blocking","stream_set_chunk_size","stream_set_read_buffer","stream_set_timeout","stream_set_write_buffer","stream_socket_accept","stream_socket_client","stream_socket_enable_crypto","stream_socket_get_name","stream_socket_pair","stream_socket_recvfrom","stream_socket_sendto","stream_socket_server","stream_socket_shutdown","stream_supports_lock","stream_wrapper_register","stream_wrapper_restore","stream_wrapper_unregister","strftime","strip_tags","stripcslashes","stripos","stripslashes","stristr","strlen","strnatcasecmp","strnatcmp","strncasecmp","strncmp","strpbrk","strpos","strptime","strrchr","strrev","strripos","strrpos","strspn","strstr","strtok","strtolower","strtotime","strtoupper","strtr","strval","substr","substr_compare","substr_count","substr_replace","svn_add","svn_auth_get_parameter","svn_auth_set_parameter","svn_blame","svn_cat","svn_checkout","svn_cleanup","svn_client_version","svn_commit","svn_delete","svn_diff","svn_export","svn_fs_abort_txn","svn_fs_apply_text","svn_fs_begin_txn2","svn_fs_change_node_prop","svn_fs_check_path","svn_fs_contents_changed","svn_fs_copy","svn_fs_delete","svn_fs_dir_entries","svn_fs_file_contents","svn_fs_file_length","svn_fs_is_dir","svn_fs_is_file","svn_fs_make_dir","svn_fs_make_file","svn_fs_node_created_rev","svn_fs_node_prop","svn_fs_props_changed","svn_fs_revision_prop","svn_fs_revision_root","svn_fs_txn_root","svn_fs_youngest_rev","svn_import","svn_log","svn_ls","svn_mkdir","svn_repos_create","svn_repos_fs","svn_repos_fs_begin_txn_for_commit","svn_repos_fs_commit_txn","svn_repos_hotcopy","svn_repos_open","svn_repos_recover","svn_revert","svn_status","svn_update","swf_actiongeturl","swf_actiongotoframe","swf_actiongotolabel","swf_actionnextframe","swf_actionplay","swf_actionprevframe","swf_actionsettarget","swf_actionstop","swf_actiontogglequality","swf_actionwaitforframe","swf_addbuttonrecord","swf_addcolor","swf_closefile","swf_definebitmap","swf_definefont","swf_defineline","swf_definepoly","swf_definerect","swf_definetext","swf_endbutton","swf_enddoaction","swf_endshape","swf_endsymbol","swf_fontsize","swf_fontslant","swf_fonttracking","swf_getbitmapinfo","swf_getfontinfo","swf_getframe","swf_labelframe","swf_lookat","swf_modifyobject","swf_mulcolor","swf_nextid","swf_oncondition","swf_openfile","swf_ortho","swf_ortho2","swf_perspective","swf_placeobject","swf_polarview","swf_popmatrix","swf_posround","swf_pushmatrix","swf_removeobject","swf_rotate","swf_scale","swf_setfont","swf_setframe","swf_shapearc","swf_shapecurveto","swf_shapecurveto3","swf_shapefillbitmapclip","swf_shapefillbitmaptile","swf_shapefilloff","swf_shapefillsolid","swf_shapelinesolid","swf_shapelineto","swf_shapemoveto","swf_showframe","swf_startbutton","swf_startdoaction","swf_startshape","swf_startsymbol","swf_textwidth","swf_translate","swf_viewport","sybase_affected_rows","sybase_close","sybase_connect","sybase_data_seek","sybase_deadlock_retry_count","sybase_fetch_array","sybase_fetch_assoc","sybase_fetch_field","sybase_fetch_object","sybase_fetch_row","sybase_field_seek","sybase_free_result","sybase_get_last_message","sybase_min_client_severity","sybase_min_error_severity","sybase_min_message_severity","sybase_min_server_severity","sybase_num_fields","sybase_num_rows","sybase_pconnect","sybase_query","sybase_result","sybase_select_db","sybase_set_message_handler","sybase_unbuffered_query","symlink","sys_get_temp_dir","sys_getloadavg","syslog","system","taint","tan","tanh","tcpwrap_check","tempnam","textdomain","tidy_access_count","tidy_config_count","tidy_error_count","tidy_get_output","tidy_load_config","tidy_reset_config","tidy_save_config","tidy_set_encoding","tidy_setopt","tidy_warning_count","time","time_nanosleep","time_sleep_until","timezone_abbreviations_list","timezone_identifiers_list","timezone_location_get","timezone_name_from_abbr","timezone_name_get","timezone_offset_get","timezone_open","timezone_transitions_get","timezone_version_get","tmpfile","token_get_all","token_name","touch","trader_acos","trader_ad","trader_add","trader_adosc","trader_adx","trader_adxr","trader_apo","trader_aroon","trader_aroonosc","trader_asin","trader_atan","trader_atr","trader_avgprice","trader_bbands","trader_beta","trader_bop","trader_cci","trader_cdl2crows","trader_cdl3blackcrows","trader_cdl3inside","trader_cdl3linestrike","trader_cdl3outside","trader_cdl3starsinsouth","trader_cdl3whitesoldiers","trader_cdlabandonedbaby","trader_cdladvanceblock","trader_cdlbelthold","trader_cdlbreakaway","trader_cdlclosingmarubozu","trader_cdlconcealbabyswall","trader_cdlcounterattack","trader_cdldarkcloudcover","trader_cdldoji","trader_cdldojistar","trader_cdldragonflydoji","trader_cdlengulfing","trader_cdleveningdojistar","trader_cdleveningstar","trader_cdlgapsidesidewhite","trader_cdlgravestonedoji","trader_cdlhammer","trader_cdlhangingman","trader_cdlharami","trader_cdlharamicross","trader_cdlhighwave","trader_cdlhikkake","trader_cdlhikkakemod","trader_cdlhomingpigeon","trader_cdlidentical3crows","trader_cdlinneck","trader_cdlinvertedhammer","trader_cdlkicking","trader_cdlkickingbylength","trader_cdlladderbottom","trader_cdllongleggeddoji","trader_cdllongline","trader_cdlmarubozu","trader_cdlmatchinglow","trader_cdlmathold","trader_cdlmorningdojistar","trader_cdlmorningstar","trader_cdlonneck","trader_cdlpiercing","trader_cdlrickshawman","trader_cdlrisefall3methods","trader_cdlseparatinglines","trader_cdlshootingstar","trader_cdlshortline","trader_cdlspinningtop","trader_cdlstalledpattern","trader_cdlsticksandwich","trader_cdltakuri","trader_cdltasukigap","trader_cdlthrusting","trader_cdltristar","trader_cdlunique3river","trader_cdlupsidegap2crows","trader_cdlxsidegap3methods","trader_ceil","trader_cmo","trader_correl","trader_cos","trader_cosh","trader_dema","trader_div","trader_dx","trader_ema","trader_errno","trader_exp","trader_floor","trader_get_compat","trader_get_unstable_period","trader_ht_dcperiod","trader_ht_dcphase","trader_ht_phasor","trader_ht_sine","trader_ht_trendline","trader_ht_trendmode","trader_kama","trader_linearreg","trader_linearreg_angle","trader_linearreg_intercept","trader_linearreg_slope","trader_ln","trader_log10","trader_ma","trader_macd","trader_macdext","trader_macdfix","trader_mama","trader_mavp","trader_max","trader_maxindex","trader_medprice","trader_mfi","trader_midpoint","trader_midprice","trader_min","trader_minindex","trader_minmax","trader_minmaxindex","trader_minus_di","trader_minus_dm","trader_mom","trader_mult","trader_natr","trader_obv","trader_plus_di","trader_plus_dm","trader_ppo","trader_roc","trader_rocp","trader_rocr","trader_rocr100","trader_rsi","trader_sar","trader_sarext","trader_set_compat","trader_set_unstable_period","trader_sin","trader_sinh","trader_sma","trader_sqrt","trader_stddev","trader_stoch","trader_stochf","trader_stochrsi","trader_sub","trader_sum","trader_t3","trader_tan","trader_tanh","trader_tema","trader_trange","trader_trima","trader_trix","trader_tsf","trader_typprice","trader_ultosc","trader_var","trader_wclprice","trader_willr","trader_wma","trait_exists","trigger_error","trim","uasort","ucfirst","ucwords","udm_add_search_limit","udm_alloc_agent","udm_alloc_agent_array","udm_api_version","udm_cat_list","udm_cat_path","udm_check_charset","udm_check_stored","udm_clear_search_limits","udm_close_stored","udm_crc32","udm_errno","udm_error","udm_find","udm_free_agent","udm_free_ispell_data","udm_free_res","udm_get_doc_count","udm_get_res_field","udm_get_res_param","udm_hash32","udm_load_ispell_data","udm_open_stored","udm_set_agent_param","uksort","umask","uniqid","unixtojd","unlink","unpack","unregister_tick_function","unserialize","unset","untaint","urldecode","urlencode","use_soap_error_handler","user_error","usleep","usort","utf8_decode","utf8_encode","var_dump","var_export","variant_abs","variant_add","variant_and","variant_cast","variant_cat","variant_cmp","variant_date_from_timestamp","variant_date_to_timestamp","variant_div","variant_eqv","variant_fix","variant_get_type","variant_idiv","variant_imp","variant_int","variant_mod","variant_mul","variant_neg","variant_not","variant_or","variant_pow","variant_round","variant_set","variant_set_type","variant_sub","variant_xor","version_compare","vfprintf","virtual","vpopmail_add_alias_domain","vpopmail_add_alias_domain_ex","vpopmail_add_domain","vpopmail_add_domain_ex","vpopmail_add_user","vpopmail_alias_add","vpopmail_alias_del","vpopmail_alias_del_domain","vpopmail_alias_get","vpopmail_alias_get_all","vpopmail_auth_user","vpopmail_del_domain","vpopmail_del_domain_ex","vpopmail_del_user","vpopmail_error","vpopmail_passwd","vpopmail_set_user_quota","vprintf","vsprintf","w32api_deftype","w32api_init_dtype","w32api_invoke_function","w32api_register_function","w32api_set_call_method","wddx_add_vars","wddx_deserialize","wddx_packet_end","wddx_packet_start","wddx_serialize_value","wddx_serialize_vars","win32_continue_service","win32_create_service","win32_delete_service","win32_get_last_control_message","win32_pause_service","win32_ps_list_procs","win32_ps_stat_mem","win32_ps_stat_proc","win32_query_service_status","win32_set_service_status","win32_start_service","win32_start_service_ctrl_dispatcher","win32_stop_service","wincache_fcache_fileinfo","wincache_fcache_meminfo","wincache_lock","wincache_ocache_fileinfo","wincache_ocache_meminfo","wincache_refresh_if_changed","wincache_rplist_fileinfo","wincache_rplist_meminfo","wincache_scache_info","wincache_scache_meminfo","wincache_ucache_add","wincache_ucache_cas","wincache_ucache_clear","wincache_ucache_dec","wincache_ucache_delete","wincache_ucache_exists","wincache_ucache_get","wincache_ucache_inc","wincache_ucache_info","wincache_ucache_meminfo","wincache_ucache_set","wincache_unlock","wordwrap","xattr_get","xattr_list","xattr_remove","xattr_set","xattr_supported","xdiff_file_bdiff","xdiff_file_bdiff_size","xdiff_file_bpatch","xdiff_file_diff","xdiff_file_diff_binary","xdiff_file_merge3","xdiff_file_patch","xdiff_file_patch_binary","xdiff_file_rabdiff","xdiff_string_bdiff","xdiff_string_bdiff_size","xdiff_string_bpatch","xdiff_string_diff","xdiff_string_diff_binary","xdiff_string_merge3","xdiff_string_patch","xdiff_string_patch_binary","xdiff_string_rabdiff","xhprof_disable","xhprof_enable","xhprof_sample_disable","xhprof_sample_enable","xml_error_string","xml_get_current_byte_index","xml_get_current_column_number","xml_get_current_line_number","xml_get_error_code","xml_parse","xml_parse_into_struct","xml_parser_create","xml_parser_create_ns","xml_parser_free","xml_parser_get_option","xml_parser_set_option","xml_set_character_data_handler","xml_set_default_handler","xml_set_element_handler","xml_set_end_namespace_decl_handler","xml_set_external_entity_ref_handler","xml_set_notation_decl_handler","xml_set_object","xml_set_processing_instruction_handler","xml_set_start_namespace_decl_handler","xml_set_unparsed_entity_decl_handler","xmlrpc_decode","xmlrpc_decode_request","xmlrpc_encode","xmlrpc_encode_request","xmlrpc_get_type","xmlrpc_is_fault","xmlrpc_parse_method_descriptions","xmlrpc_server_add_introspection_data","xmlrpc_server_call_method","xmlrpc_server_create","xmlrpc_server_destroy","xmlrpc_server_register_introspection_callback","xmlrpc_server_register_method","xmlrpc_set_type","xslt_backend_info","xslt_backend_name","xslt_backend_version","xslt_create","xslt_errno","xslt_error","xslt_free","xslt_getopt","xslt_process","xslt_set_base","xslt_set_encoding","xslt_set_error_handler","xslt_set_log","xslt_set_object","xslt_set_sax_handler","xslt_set_sax_handlers","xslt_set_scheme_handler","xslt_set_scheme_handlers","xslt_setopt","yaml_emit","yaml_emit_file","yaml_parse","yaml_parse_file","yaml_parse_url","yaz_addinfo","yaz_ccl_conf","yaz_ccl_parse","yaz_close","yaz_connect","yaz_database","yaz_element","yaz_errno","yaz_error","yaz_es","yaz_es_result","yaz_get_option","yaz_hits","yaz_itemorder","yaz_present","yaz_range","yaz_record","yaz_scan","yaz_scan_result","yaz_schema","yaz_search","yaz_set_option","yaz_sort","yaz_syntax","yaz_wait","yp_all","yp_cat","yp_err_string","yp_errno","yp_first","yp_get_default_domain","yp_master","yp_match","yp_next","yp_order","zend_logo_guid","zend_thread_id","zend_version","zip_close","zip_entry_close","zip_entry_compressedsize","zip_entry_compressionmethod","zip_entry_filesize","zip_entry_name","zip_entry_open","zip_entry_read","zip_open","zip_read","zlib_decode","zlib_encode","zlib_get_coding_type"],"class_list":["AMQPChannel","AMQPConnection","AMQPEnvelope","AMQPExchange","AMQPQueue","APCIterator","AppendIterator","ArrayAccess","ArrayIterator","ArrayObject","BadFunctionCallException","BadMethodCallException","COM","CURLFile","CachingIterator","Cairo","CairoAntialias","CairoContent","CairoContext","CairoException","CairoExtend","CairoFillRule","CairoFilter","CairoFontFace","CairoFontOptions","CairoFontSlant","CairoFontType","CairoFontWeight","CairoFormat","CairoGradientPattern","CairoHintMetrics","CairoHintStyle","CairoImageSurface","CairoLineCap","CairoLineJoin","CairoLinearGradient","CairoMatrix","CairoOperator","CairoPath","CairoPattern","CairoPatternType","CairoPdfSurface","CairoPsLevel","CairoPsSurface","CairoRadialGradient","CairoScaledFont","CairoSolidPattern","CairoStatus","CairoSubpixelOrder","CairoSurface","CairoSurfacePattern","CairoSurfaceType","CairoSvgSurface","CairoSvgVersion","CairoToyFontFace","CallbackFilterIterator","Closure","Collator","Cond","Countable","DOMAttr","DOMCdataSection","DOMCharacterData","DOMComment","DOMDocument","DOMDocumentFragment","DOMDocumentType","DOMElement","DOMEntity","DOMEntityReference","DOMException","DOMImplementation","DOMNamedNodeMap","DOMNode","DOMNodeList","DOMNotation","DOMProcessingInstruction","DOMText","DOMXPath","DOTNET","DateInterval","DatePeriod","DateTime","DateTimeImmutable","DateTimeInterface","DateTimeZone","Directory","DirectoryIterator","DomainException","EmptyIterator","ErrorException","Ev","EvCheck","EvChild","EvEmbed","EvFork","EvIdle","EvIo","EvLoop","EvPeriodic","EvPrepare","EvSignal","EvStat","EvTimer","EvWatcher","Event","EventBase","EventBuffer","EventBufferEvent","EventConfig","EventDnsBase","EventHttp","EventHttpConnection","EventHttpRequest","EventListener","EventSslContext","EventUtil","Exception","FilesystemIterator","FilterIterator","GearmanClient","GearmanException","GearmanJob","GearmanTask","GearmanWorker","Gender\\Gender","Generator","GlobIterator","Gmagick","GmagickDraw","GmagickPixel","HaruAnnotation","HaruDestination","HaruDoc","HaruEncoder","HaruException","HaruFont","HaruImage","HaruOutline","HaruPage","HttpDeflateStream","HttpInflateStream","HttpMessage","HttpQueryString","HttpRequest","HttpRequestPool","HttpResponse","Imagick","ImagickDraw","ImagickPixel","ImagickPixelIterator","InfiniteIterator","IntlBreakIterator","IntlCalendar","IntlCodePointBreakIterator","IntlDateFormatter","IntlException","IntlIterator","IntlPartsIterator","IntlRuleBasedBreakIterator","IntlTimeZone","InvalidArgumentException","Iterator","IteratorAggregate","IteratorIterator","JsonSerializable","Judy","KTaglib_ID3v2_AttachedPictureFrame","KTaglib_ID3v2_Frame","KTaglib_ID3v2_Tag","KTaglib_MPEG_AudioProperties","KTaglib_MPEG_File","KTaglib_Tag","Lapack","LapackException","LengthException","LimitIterator","Locale","LogicException","Lua","LuaClosure","Memcache","Memcached","MemcachedException","MessageFormatter","Mongo","MongoBinData","MongoClient","MongoCode","MongoCollection","MongoConnectionException","MongoCursor","MongoCursorException","MongoCursorTimeoutException","MongoDB","MongoDBRef","MongoDate","MongoException","MongoGridFS","MongoGridFSCursor","MongoGridFSException","MongoGridFSFile","MongoId","MongoInt32","MongoInt64","MongoLog","MongoMaxKey","MongoMinKey","MongoPool","MongoRegex","MongoResultException","MongoTimestamp","MultipleIterator","Mutex","MysqlndUhConnection","MysqlndUhPreparedStatement","NoRewindIterator","Normalizer","NumberFormatter","OAuth","OAuthException","OAuthProvider","OutOfBoundsException","OutOfRangeException","OuterIterator","OverflowException","PDO","PDOException","PDOStatement","ParentIterator","Phar","PharData","PharException","PharFileInfo","QuickHashIntHash","QuickHashIntSet","QuickHashIntStringHash","QuickHashStringIntHash","RRDCreator","RRDGraph","RRDUpdater","RangeException","RarArchive","RarEntry","RarException","RecursiveArrayIterator","RecursiveCachingIterator","RecursiveCallbackFilterIterator","RecursiveDirectoryIterator","RecursiveFilterIterator","RecursiveIterator","RecursiveIteratorIterator","RecursiveRegexIterator","RecursiveTreeIterator","Reflection","ReflectionClass","ReflectionException","ReflectionExtension","ReflectionFunction","ReflectionFunctionAbstract","ReflectionMethod","ReflectionObject","ReflectionParameter","ReflectionProperty","ReflectionZendExtension","Reflector","RegexIterator","ResourceBundle","RuntimeException","SNMP","SNMPException","SQLite3","SQLite3Result","SQLite3Stmt","SVM","SVMModel","SWFAction","SWFBitmap","SWFButton","SWFDisplayItem","SWFFill","SWFFont","SWFFontChar","SWFGradient","SWFMorph","SWFMovie","SWFPrebuiltClip","SWFShape","SWFSound","SWFSoundInstance","SWFSprite","SWFText","SWFTextField","SWFVideoStream","SeekableIterator","Serializable","SessionHandler","SessionHandlerInterface","SimpleXMLElement","SimpleXMLIterator","SoapClient","SoapFault","SoapHeader","SoapParam","SoapServer","SoapVar","SolrClient","SolrClientException","SolrDocument","SolrDocumentField","SolrException","SolrGenericResponse","SolrIllegalArgumentException","SolrIllegalOperationException","SolrInputDocument","SolrModifiableParams","SolrObject","SolrParams","SolrPingResponse","SolrQuery","SolrQueryResponse","SolrResponse","SolrUpdateResponse","SolrUtils","SphinxClient","SplBool","SplDoublyLinkedList","SplEnum","SplFileInfo","SplFileObject","SplFixedArray","SplFloat","SplHeap","SplInt","SplMaxHeap","SplMinHeap","SplObjectStorage","SplObserver","SplPriorityQueue","SplQueue","SplStack","SplString","SplSubject","SplTempFileObject","SplType","Spoofchecker","Stackable","Stomp","StompException","StompFrame","Thread","TokyoTyrant","TokyoTyrantException","TokyoTyrantIterator","TokyoTyrantQuery","TokyoTyrantTable","Transliterator","Traversable","UConverter","UnderflowException","UnexpectedValueException","V8Js","V8JsException","VARIANT","VarnishAdmin","VarnishLog","VarnishStat","WeakMap","WeakRef","Worker","XMLReader","XSLTProcessor","Yaf_Action_Abstract","Yaf_Application","Yaf_Bootstrap_Abstract","Yaf_Config_Abstract","Yaf_Config_Ini","Yaf_Config_Simple","Yaf_Controller_Abstract","Yaf_Dispatcher","Yaf_Exception","Yaf_Exception_DispatchFailed","Yaf_Exception_LoadFailed","Yaf_Exception_LoadFailed_Action","Yaf_Exception_LoadFailed_Controller","Yaf_Exception_LoadFailed_Module","Yaf_Exception_LoadFailed_View","Yaf_Exception_RouterFailed","Yaf_Exception_StartupError","Yaf_Exception_TypeError","Yaf_Loader","Yaf_Plugin_Abstract","Yaf_Registry","Yaf_Request_Abstract","Yaf_Request_Http","Yaf_Request_Simple","Yaf_Response_Abstract","Yaf_Route_Interface","Yaf_Route_Map","Yaf_Route_Regex","Yaf_Route_Rewrite","Yaf_Route_Simple","Yaf_Route_Static","Yaf_Route_Supervar","Yaf_Router","Yaf_Session","Yaf_View_Interface","Yaf_View_Simple","ZipArchive","chdb","libXMLError","mysqli","mysqli_driver","mysqli_result","mysqli_sql_exception","mysqli_stmt","mysqli_warning","php_user_filter","streamWrapper","tidy","tidyNode"],"predefined_constants":["AF_INET","AF_INET6","AF_UNIX","ALC_FREQUENCY","ALC_REFRESH","ALC_SYNC","AL_BITS","AL_BUFFER","AL_CHANNELS","AL_CONE_INNER_ANGLE","AL_CONE_OUTER_ANGLE","AL_CONE_OUTER_GAIN","AL_DIRECTION","AL_FALSE","AL_FORMAT_MONO16","AL_FORMAT_MONO8","AL_FORMAT_STEREO16","AL_FORMAT_STEREO8","AL_FREQUENCY","AL_GAIN","AL_INITIAL","AL_LOOPING","AL_MAX_DISTANCE","AL_MAX_GAIN","AL_MIN_GAIN","AL_ORIENTATION","AL_PAUSED","AL_PITCH","AL_PLAYING","AL_POSITION","AL_REFERENCE_DISTANCE","AL_ROLLOFF_FACTOR","AL_SIZE","AL_SOURCE_RELATIVE","AL_SOURCE_STATE","AL_STOPPED","AL_TRUE","AL_VELOCITY","AMQP_AUTOACK","AMQP_AUTODELETE","AMQP_DURABLE","AMQP_EXCLUSIVE","AMQP_EX_TYPE_DIRECT","AMQP_EX_TYPE_FANOUT","AMQP_EX_TYPE_HEADER","AMQP_EX_TYPE_TOPIC","AMQP_IFEMPTY","AMQP_IFUNUSED","AMQP_IMMEDIATE","AMQP_INTERNAL","AMQP_MANDATORY","AMQP_MULTIPLE","AMQP_NOLOCAL","AMQP_NOPARAM","AMQP_NOWAIT","AMQP_PASSIVE","APC_BIN_VERIFY_CRC32","APC_BIN_VERIFY_MD5","APC_ITER_ALL","APC_ITER_ATIME","APC_ITER_CTIME","APC_ITER_DEVICE","APC_ITER_DTIME","APC_ITER_FILENAME","APC_ITER_INODE","APC_ITER_KEY","APC_ITER_MD5","APC_ITER_MEM_SIZE","APC_ITER_MTIME","APC_ITER_NONE","APC_ITER_NUM_HITS","APC_ITER_REFCOUNT","APC_ITER_TTL","APC_ITER_TYPE","APC_ITER_VALUE","APC_LIST_ACTIVE","APC_LIST_DELETED","BBCODE_ARG_DOUBLE_QUOTE","BBCODE_ARG_HTML_QUOTE","BBCODE_ARG_QUOTE_ESCAPING","BBCODE_ARG_SINGLE_QUOTE","BBCODE_AUTO_CORRECT","BBCODE_CORRECT_REOPEN_TAGS","BBCODE_DEFAULT_SMILEYS_OFF","BBCODE_DEFAULT_SMILEYS_ON","BBCODE_DISABLE_TREE_BUILD","BBCODE_FLAGS_ARG_PARSING","BBCODE_FLAGS_CDATA_NOT_ALLOWED","BBCODE_FLAGS_DENY_REOPEN_CHILD","BBCODE_FLAGS_ONE_OPEN_PER_LEVEL","BBCODE_FLAGS_REMOVE_IF_EMPTY","BBCODE_FLAGS_SMILEYS_OFF","BBCODE_FLAGS_SMILEYS_ON","BBCODE_FORCE_SMILEYS_OFF","BBCODE_SET_FLAGS_ADD","BBCODE_SET_FLAGS_REMOVE","BBCODE_SET_FLAGS_SET","BBCODE_SMILEYS_CASE_INSENSITIVE","BBCODE_TYPE_ARG","BBCODE_TYPE_NOARG","BBCODE_TYPE_OPTARG","BBCODE_TYPE_ROOT","BBCODE_TYPE_SINGLE","BSDown","BSHitTest","BSOver","BSUp","BUS_ADRALN","BUS_ADRERR","BUS_OBJERR","ButtonEnter","ButtonExit","CAIRO_ANTIALIAS_DEFAULT","CAIRO_ANTIALIAS_GRAY","CAIRO_ANTIALIAS_NONE","CAIRO_ANTIALIAS_SUBPIXEL","CAIRO_CONTENT_ALPHA","CAIRO_CONTENT_COLOR","CAIRO_CONTENT_COLOR_ALPHA","CAIRO_EXTEND_NONE","CAIRO_EXTEND_PAD","CAIRO_EXTEND_REFLECT","CAIRO_EXTEND_REPEAT","CAIRO_FILL_RULE_EVEN_ODD","CAIRO_FILL_RULE_WINDING","CAIRO_FILTER_BEST","CAIRO_FILTER_BILINEAR","CAIRO_FILTER_FAST","CAIRO_FILTER_GAUSSIAN","CAIRO_FILTER_GOOD","CAIRO_FILTER_NEAREST","CAIRO_FONT_SLANT_ITALIC","CAIRO_FONT_SLANT_NORMAL","CAIRO_FONT_SLANT_OBLIQUE","CAIRO_FONT_TYPE_FT","CAIRO_FONT_TYPE_QUARTZ","CAIRO_FONT_TYPE_TOY","CAIRO_FONT_TYPE_WIN32","CAIRO_FONT_WEIGHT_BOLD","CAIRO_FONT_WEIGHT_NORMAL","CAIRO_FORMAT_A1","CAIRO_FORMAT_A8","CAIRO_FORMAT_ARGB32","CAIRO_FORMAT_RGB24","CAIRO_HINT_METRICS_DEFAULT","CAIRO_HINT_METRICS_OFF","CAIRO_HINT_METRICS_ON","CAIRO_HINT_STYLE_DEFAULT","CAIRO_HINT_STYLE_FULL","CAIRO_HINT_STYLE_MEDIUM","CAIRO_HINT_STYLE_NONE","CAIRO_HINT_STYLE_SLIGHT","CAIRO_LINE_CAP_BUTT","CAIRO_LINE_CAP_ROUND","CAIRO_LINE_CAP_SQUARE","CAIRO_LINE_JOIN_BEVEL","CAIRO_LINE_JOIN_MITER","CAIRO_LINE_JOIN_ROUND","CAIRO_OPERATOR_ADD","CAIRO_OPERATOR_ATOP","CAIRO_OPERATOR_CLEAR","CAIRO_OPERATOR_DEST","CAIRO_OPERATOR_DEST_ATOP","CAIRO_OPERATOR_DEST_IN","CAIRO_OPERATOR_DEST_OUT","CAIRO_OPERATOR_DEST_OVER","CAIRO_OPERATOR_IN","CAIRO_OPERATOR_OUT","CAIRO_OPERATOR_OVER","CAIRO_OPERATOR_SATURATE","CAIRO_OPERATOR_SOURCE","CAIRO_OPERATOR_XOR","CAIRO_PATTERN_TYPE_LINEAR","CAIRO_PATTERN_TYPE_RADIAL","CAIRO_PATTERN_TYPE_SOLID","CAIRO_PATTERN_TYPE_SURFACE","CAIRO_PS_LEVEL_2","CAIRO_PS_LEVEL_3","CAIRO_STATUS_CLIP_NOT_REPRESENTABLE","CAIRO_STATUS_FILE_NOT_FOUND","CAIRO_STATUS_INVALID_CONTENT","CAIRO_STATUS_INVALID_DASH","CAIRO_STATUS_INVALID_DSC_COMMENT","CAIRO_STATUS_INVALID_FORMAT","CAIRO_STATUS_INVALID_INDEX","CAIRO_STATUS_INVALID_MATRIX","CAIRO_STATUS_INVALID_PATH_DATA","CAIRO_STATUS_INVALID_POP_GROUP","CAIRO_STATUS_INVALID_RESTORE","CAIRO_STATUS_INVALID_STATUS","CAIRO_STATUS_INVALID_STRIDE","CAIRO_STATUS_INVALID_STRING","CAIRO_STATUS_INVALID_VISUAL","CAIRO_STATUS_NO_CURRENT_POINT","CAIRO_STATUS_NO_MEMORY","CAIRO_STATUS_NULL_POINTER","CAIRO_STATUS_PATTERN_TYPE_MISMATCH","CAIRO_STATUS_READ_ERROR","CAIRO_STATUS_SUCCESS","CAIRO_STATUS_SURFACE_FINISHED","CAIRO_STATUS_SURFACE_TYPE_MISMATCH","CAIRO_STATUS_TEMP_FILE_ERROR","CAIRO_STATUS_WRITE_ERROR","CAIRO_SUBPIXEL_ORDER_BGR","CAIRO_SUBPIXEL_ORDER_DEFAULT","CAIRO_SUBPIXEL_ORDER_RGB","CAIRO_SUBPIXEL_ORDER_VBGR","CAIRO_SUBPIXEL_ORDER_VRGB","CAIRO_SURFACE_TYPE_BEOS","CAIRO_SURFACE_TYPE_DIRECTFB","CAIRO_SURFACE_TYPE_GLITZ","CAIRO_SURFACE_TYPE_IMAGE","CAIRO_SURFACE_TYPE_OS2","CAIRO_SURFACE_TYPE_PDF","CAIRO_SURFACE_TYPE_PS","CAIRO_SURFACE_TYPE_QUARTZ","CAIRO_SURFACE_TYPE_QUARTZ_IMAGE","CAIRO_SURFACE_TYPE_SVG","CAIRO_SURFACE_TYPE_WIN32","CAIRO_SURFACE_TYPE_WIN32_PRINTING","CAIRO_SURFACE_TYPE_XCB","CAIRO_SURFACE_TYPE_XLIB","CAIRO_SVG_VERSION_1_1","CAIRO_SVG_VERSION_1_2","CAL_DOW_DAYNO","CAL_DOW_LONG","CAL_DOW_SHORT","CAL_EASTER_ALWAYS_GREGORIAN","CAL_EASTER_ALWAYS_JULIAN","CAL_EASTER_DEFAULT","CAL_EASTER_ROMAN","CAL_FRENCH","CAL_GREGORIAN","CAL_JEWISH","CAL_JEWISH_ADD_ALAFIM","CAL_JEWISH_ADD_ALAFIM_GERESH","CAL_JEWISH_ADD_GERESHAYIM","CAL_JULIAN","CAL_MONTH_FRENCH","CAL_MONTH_GREGORIAN_LONG","CAL_MONTH_GREGORIAN_SHORT","CAL_MONTH_JEWISH","CAL_MONTH_JULIAN_LONG","CAL_MONTH_JULIAN_SHORT","CAL_NUM_CALS","CASE_LOWER","CASE_UPPER","CHAR_MAX","CLASSKIT_ACC_PRIVATE","CLASSKIT_ACC_PRIVATE","CLASSKIT_ACC_PROTECTED","CLASSKIT_ACC_PROTECTED","CLASSKIT_ACC_PUBLIC","CLASSKIT_ACC_PUBLIC","CLASSKIT_AGGREGATE_OVERRIDE","CLASSKIT_VERSION","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLSCTX_ALL","CLSCTX_INPROC_HANDLER","CLSCTX_INPROC_HANDLER","CLSCTX_INPROC_SERVER","CLSCTX_INPROC_SERVER","CLSCTX_LOCAL_SERVER","CLSCTX_LOCAL_SERVER","CLSCTX_REMOTE_SERVER","CLSCTX_REMOTE_SERVER","CLSCTX_SERVER","CLSCTX_SERVER","CL_EXPUNGE","CONNECTION_ABORTED","CONNECTION_NORMAL","CONNECTION_TIMEOUT","COUNT_NORMAL","COUNT_RECURSIVE","CP_ACP","CP_MACCP","CP_MOVE","CP_OEMCP","CP_SYMBOL","CP_THREAD_ACP","CP_UID","CP_UTF7","CP_UTF8","CRYPT_BLOWFISH","CRYPT_EXT_DES","CRYPT_MD5","CRYPT_SALT_LENGTH","CRYPT_STD_DES","CURLAUTH_ANY","CURLAUTH_ANYSAFE","CURLAUTH_BASIC","CURLAUTH_DIGEST","CURLAUTH_GSSNEGOTIATE","CURLAUTH_NTLM","CURLCLOSEPOLICY_CALLBACK","CURLCLOSEPOLICY_LEAST_RECENTLY_USED","CURLCLOSEPOLICY_LEAST_TRAFFIC","CURLCLOSEPOLICY_OLDEST","CURLCLOSEPOLICY_SLOWEST","CURLE_ABORTED_BY_CALLBACK","CURLE_BAD_CALLING_ORDER","CURLE_BAD_CONTENT_ENCODING","CURLE_BAD_FUNCTION_ARGUMENT","CURLE_BAD_PASSWORD_ENTERED","CURLE_COULDNT_CONNECT","CURLE_COULDNT_RESOLVE_HOST","CURLE_COULDNT_RESOLVE_PROXY","CURLE_FAILED_INIT","CURLE_FILESIZE_EXCEEDED","CURLE_FILE_COULDNT_READ_FILE","CURLE_FTP_ACCESS_DENIED","CURLE_FTP_BAD_DOWNLOAD_RESUME","CURLE_FTP_CANT_GET_HOST","CURLE_FTP_CANT_RECONNECT","CURLE_FTP_COULDNT_GET_SIZE","CURLE_FTP_COULDNT_RETR_FILE","CURLE_FTP_COULDNT_SET_ASCII","CURLE_FTP_COULDNT_SET_BINARY","CURLE_FTP_COULDNT_STOR_FILE","CURLE_FTP_COULDNT_USE_REST","CURLE_FTP_PORT_FAILED","CURLE_FTP_QUOTE_ERROR","CURLE_FTP_SSL_FAILED","CURLE_FTP_USER_PASSWORD_INCORRECT","CURLE_FTP_WEIRD_227_FORMAT","CURLE_FTP_WEIRD_PASS_REPLY","CURLE_FTP_WEIRD_PASV_REPLY","CURLE_FTP_WEIRD_SERVER_REPLY","CURLE_FTP_WEIRD_USER_REPLY","CURLE_FTP_WRITE_ERROR","CURLE_FUNCTION_NOT_FOUND","CURLE_GOT_NOTHING","CURLE_HTTP_NOT_FOUND","CURLE_HTTP_PORT_FAILED","CURLE_HTTP_POST_ERROR","CURLE_HTTP_RANGE_ERROR","CURLE_LDAP_CANNOT_BIND","CURLE_LDAP_INVALID_URL","CURLE_LDAP_SEARCH_FAILED","CURLE_LIBRARY_NOT_FOUND","CURLE_MALFORMAT_USER","CURLE_OBSOLETE","CURLE_OK","CURLE_OPERATION_TIMEOUTED","CURLE_OUT_OF_MEMORY","CURLE_PARTIAL_FILE","CURLE_READ_ERROR","CURLE_RECV_ERROR","CURLE_SEND_ERROR","CURLE_SHARE_IN_USE","CURLE_SSL_CACERT","CURLE_SSL_CERTPROBLEM","CURLE_SSL_CIPHER","CURLE_SSL_CONNECT_ERROR","CURLE_SSL_ENGINE_NOTFOUND","CURLE_SSL_ENGINE_SETFAILED","CURLE_SSL_PEER_CERTIFICATE","CURLE_TELNET_OPTION_SYNTAX","CURLE_TOO_MANY_REDIRECTS","CURLE_UNKNOWN_TELNET_OPTION","CURLE_UNSUPPORTED_PROTOCOL","CURLE_URL_MALFORMAT","CURLE_URL_MALFORMAT_USER","CURLE_WRITE_ERROR","CURLFTPAUTH_DEFAULT","CURLFTPAUTH_SSL","CURLFTPAUTH_TLS","CURLFTPSSL_ALL","CURLFTPSSL_CONTROL","CURLFTPSSL_NONE","CURLFTPSSL_TRY","CURLINFO_CONNECT_TIME","CURLINFO_CONTENT_LENGTH_DOWNLOAD","CURLINFO_CONTENT_LENGTH_UPLOAD","CURLINFO_CONTENT_TYPE","CURLINFO_EFFECTIVE_URL","CURLINFO_FILETIME","CURLINFO_HEADER_OUT","CURLINFO_HEADER_SIZE","CURLINFO_HTTP_CODE","CURLINFO_NAMELOOKUP_TIME","CURLINFO_PRETRANSFER_TIME","CURLINFO_PRIVATE","CURLINFO_REDIRECT_COUNT","CURLINFO_REDIRECT_TIME","CURLINFO_REQUEST_SIZE","CURLINFO_SIZE_DOWNLOAD","CURLINFO_SIZE_UPLOAD","CURLINFO_SPEED_DOWNLOAD","CURLINFO_SPEED_UPLOAD","CURLINFO_SSL_VERIFYRESULT","CURLINFO_STARTTRANSFER_TIME","CURLINFO_TOTAL_TIME","CURLMOPT_MAXCONNECTS","CURLMOPT_PIPELINING","CURLMSG_DONE","CURLM_BAD_EASY_HANDLE","CURLM_BAD_HANDLE","CURLM_CALL_MULTI_PERFORM","CURLM_INTERNAL_ERROR","CURLM_OK","CURLM_OUT_OF_MEMORY","CURLOPT_AUTOREFERER","CURLOPT_BINARYTRANSFER","CURLOPT_BUFFERSIZE","CURLOPT_CAINFO","CURLOPT_CAPATH","CURLOPT_CLOSEPOLICY","CURLOPT_CONNECTTIMEOUT","CURLOPT_CONNECTTIMEOUT_MS","CURLOPT_COOKIE","CURLOPT_COOKIEFILE","CURLOPT_COOKIEJAR","CURLOPT_COOKIESESSION","CURLOPT_CRLF","CURLOPT_CUSTOMREQUEST","CURLOPT_DNS_CACHE_TIMEOUT","CURLOPT_DNS_USE_GLOBAL_CACHE","CURLOPT_EGDSOCKET","CURLOPT_ENCODING","CURLOPT_FAILONERROR","CURLOPT_FILE","CURLOPT_FILETIME","CURLOPT_FOLLOWLOCATION","CURLOPT_FORBID_REUSE","CURLOPT_FRESH_CONNECT","CURLOPT_FTPAPPEND","CURLOPT_FTPASCII","CURLOPT_FTPLISTONLY","CURLOPT_FTPPORT","CURLOPT_FTPSSLAUTH","CURLOPT_FTP_CREATE_MISSING_DIRS","CURLOPT_FTP_SSL","CURLOPT_FTP_USE_EPRT","CURLOPT_FTP_USE_EPSV","CURLOPT_HEADER","CURLOPT_HEADERFUNCTION","CURLOPT_HTTP200ALIASES","CURLOPT_HTTPAUTH","CURLOPT_HTTPGET","CURLOPT_HTTPHEADER","CURLOPT_HTTPPROXYTUNNEL","CURLOPT_HTTP_VERSION","CURLOPT_INFILE","CURLOPT_INFILESIZE","CURLOPT_INTERFACE","CURLOPT_KEYPASSWD","CURLOPT_KRB4LEVEL","CURLOPT_LOW_SPEED_LIMIT","CURLOPT_LOW_SPEED_TIME","CURLOPT_MAXCONNECTS","CURLOPT_MAXREDIRS","CURLOPT_MAX_RECV_SPEED_LARGE","CURLOPT_MAX_SEND_SPEED_LARGE","CURLOPT_MUTE","CURLOPT_NETRC","CURLOPT_NOBODY","CURLOPT_NOPROGRESS","CURLOPT_NOSIGNAL","CURLOPT_PASSWDFUNCTION","CURLOPT_PORT","CURLOPT_POST","CURLOPT_POSTFIELDS","CURLOPT_POSTQUOTE","CURLOPT_PRIVATE","CURLOPT_PROGRESSFUNCTION","CURLOPT_PROXY","CURLOPT_PROXYAUTH","CURLOPT_PROXYPORT","CURLOPT_PROXYTYPE","CURLOPT_PROXYUSERPWD","CURLOPT_PUT","CURLOPT_QUOTE","CURLOPT_RANDOM_FILE","CURLOPT_RANGE","CURLOPT_READFUNCTION","CURLOPT_REFERER","CURLOPT_RESUME_FROM","CURLOPT_RETURNTRANSFER","CURLOPT_SSH_AUTH_TYPES","CURLOPT_SSH_HOST_PUBLIC_KEY_MD5","CURLOPT_SSH_PRIVATE_KEYFILE","CURLOPT_SSH_PUBLIC_KEYFILE","CURLOPT_SSLCERT","CURLOPT_SSLCERTPASSWD","CURLOPT_SSLCERTTYPE","CURLOPT_SSLENGINE","CURLOPT_SSLENGINE_DEFAULT","CURLOPT_SSLKEY","CURLOPT_SSLKEYPASSWD","CURLOPT_SSLKEYTYPE","CURLOPT_SSLVERSION","CURLOPT_SSL_CIPHER_LIST","CURLOPT_SSL_VERIFYHOST","CURLOPT_SSL_VERIFYPEER","CURLOPT_STDERR","CURLOPT_TCP_NODELAY","CURLOPT_TIMECONDITION","CURLOPT_TIMEOUT","CURLOPT_TIMEOUT_MS","CURLOPT_TIMEVALUE","CURLOPT_TRANSFERTEXT","CURLOPT_UNRESTRICTED_AUTH","CURLOPT_UPLOAD","CURLOPT_URL","CURLOPT_USERAGENT","CURLOPT_USERPWD","CURLOPT_VERBOSE","CURLOPT_WRITEFUNCTION","CURLOPT_WRITEHEADER","CURLPROXY_HTTP","CURLPROXY_SOCKS5","CURLSSH_AUTH_ANY","CURLSSH_AUTH_DEFAULT","CURLSSH_AUTH_HOST","CURLSSH_AUTH_KEYBOARD","CURLSSH_AUTH_NONE","CURLSSH_AUTH_PASSWORD","CURLSSH_AUTH_PUBLICKEY","CURLVERSION_NOW","CURL_HTTP_VERSION_1_0","CURL_HTTP_VERSION_1_1","CURL_HTTP_VERSION_NONE","CURL_NETRC_IGNORED","CURL_NETRC_OPTIONAL","CURL_NETRC_REQUIRED","CURL_TIMECOND_IFMODSINCE","CURL_TIMECOND_IFUNMODSINCE","CURL_TIMECOND_LASTMOD","CURL_VERSION_IPV6","CURL_VERSION_KERBEROS4","CURL_VERSION_LIBZ","CURL_VERSION_SSL","CURL_WRAPPERS_ENABLED","CYRUS_CALLBACK_NOLITERAL","CYRUS_CALLBACK_NUMBERED","CYRUS_CONN_INITIALRESPONSE","CYRUS_CONN_NONSYNCLITERAL","DB2_AUTOCOMMIT_OFF","DB2_AUTOCOMMIT_ON","DB2_BINARY","DB2_CASE_LOWER","DB2_CASE_NATURAL","DB2_CASE_UPPER","DB2_CHAR","DB2_CONVERT","DB2_DEFERRED_PREPARE_OFF","DB2_DEFERRED_PREPARE_ON","DB2_DOUBLE","DB2_FORWARD_ONLY","DB2_LONG","DB2_PARAM_FILE","DB2_PARAM_IN","DB2_PARAM_INOUT","DB2_PARAM_OUT","DB2_PASSTHRU","DB2_SCROLLABLE","DBX_CMP_ASC","DBX_CMP_DESC","DBX_CMP_NATIVE","DBX_CMP_NUMBER","DBX_CMP_TEXT","DBX_COLNAMES_LOWERCASE","DBX_COLNAMES_UNCHANGED","DBX_COLNAMES_UPPERCASE","DBX_FBSQL","DBX_MSSQL","DBX_MYSQL","DBX_OCI8","DBX_ODBC","DBX_PERSISTENT","DBX_PGSQL","DBX_RESULT_ASSOC","DBX_RESULT_INDEX","DBX_RESULT_INFO","DBX_RESULT_UNBUFFERED","DBX_SQLITE","DBX_SYBASECT","DC_BORLAND","DC_CALL_CDECL","DC_CALL_STD","DC_CALL_STD_BO","DC_CALL_STD_M8","DC_CALL_STD_MS","DC_FLAG_ARGPTR","DC_MICROSOFT","DC_RETVAL_MATH4","DC_RETVAL_MATH8","DIRECTORY_SEPARATOR","DISP_E_DIVBYZERO","DISP_E_OVERFLOW","DOMSTRING_SIZE_ERR","DOM_HIERARCHY_REQUEST_ERR","DOM_INDEX_SIZE_ERR","DOM_INUSE_ATTRIBUTE_ERR","DOM_INVALID_ACCESS_ERR","DOM_INVALID_CHARACTER_ERR","DOM_INVALID_MODIFICATION_ERR","DOM_INVALID_STATE_ERR","DOM_NAMESPACE_ERR","DOM_NOT_FOUND_ERR","DOM_NOT_SUPPORTED_ERR","DOM_NO_DATA_ALLOWED_ERR","DOM_NO_MODIFICATION_ALLOWED_ERR","DOM_PHP_ERR","DOM_SYNTAX_ERR","DOM_VALIDATION_ERR","DOM_WRONG_DOCUMENT_ERR","EIO_DT_BLK","EIO_DT_CHR","EIO_DT_CMP","EIO_DT_DIR","EIO_DT_DOOR","EIO_DT_FIFO","EIO_DT_LNK","EIO_DT_MAX","EIO_DT_MPB","EIO_DT_MPC","EIO_DT_NAM","EIO_DT_NWK","EIO_DT_REG","EIO_DT_SOCK","EIO_DT_UNKNOWN","EIO_DT_WHT","EIO_FALLOC_FL_KEEP_SIZE","EIO_O_APPEND","EIO_O_CREAT","EIO_O_EXCL","EIO_O_FSYNC","EIO_O_NONBLOCK","EIO_O_RDONLY","EIO_O_RDWR","EIO_O_TRUNC","EIO_O_WRONLY","EIO_PRI_DEFAULT","EIO_PRI_MAX","EIO_PRI_MIN","EIO_READDIR_DENTS","EIO_READDIR_DIRS_FIRST","EIO_READDIR_FOUND_UNKNOWN","EIO_READDIR_STAT_ORDER","EIO_SEEK_CUR","EIO_SEEK_END","EIO_SEEK_SET","EIO_SYNC_FILE_RANGE_WAIT_AFTER","EIO_SYNC_FILE_RANGE_WAIT_BEFORE","EIO_SYNC_FILE_RANGE_WRITE","EIO_S_IFBLK","EIO_S_IFCHR","EIO_S_IFIFO","EIO_S_IFREG","EIO_S_IFSOCK","EIO_S_IRGRP","EIO_S_IROTH","EIO_S_IRUSR","EIO_S_IWGRP","EIO_S_IWOTH","EIO_S_IWUSR","EIO_S_IXGRP","EIO_S_IXOTH","EIO_S_IXUSR","ENC7BIT","ENC8BIT","ENCBASE64","ENCBINARY","ENCOTHER","ENCQUOTEDPRINTABLE","ENT_COMPAT","ENT_DISALLOWED","ENT_HTML401","ENT_HTML5","ENT_IGNORE","ENT_NOQUOTES","ENT_QUOTES","ENT_SUBSTITUTE","ENT_XHTML","ENT_XML1","EVLOOP_NONBLOCK","EVLOOP_ONCE","EV_PERSIST","EV_READ","EV_SIGNAL","EV_TIMEOUT","EV_WRITE","EXIF_USE_MBSTRING","EXP_EOF","EXP_EXACT","EXP_FULLBUFFER","EXP_GLOB","EXP_REGEXP","EXP_TIMEOUT","EXTR_IF_EXISTS","EXTR_OVERWRITE","EXTR_PREFIX_ALL","EXTR_PREFIX_IF_EXISTS","EXTR_PREFIX_INVALID","EXTR_PREFIX_SAME","EXTR_REFS","EXTR_SKIP","FBSQL_ASSOC","FBSQL_BOTH","FBSQL_ISO_READ_COMMITTED","FBSQL_ISO_READ_UNCOMMITTED","FBSQL_ISO_REPEATABLE_READ","FBSQL_ISO_SERIALIZABLE","FBSQL_ISO_VERSIONED","FBSQL_LOB_DIRECT","FBSQL_LOB_HANDLE","FBSQL_LOCK_DEFERRED","FBSQL_LOCK_OPTIMISTIC","FBSQL_LOCK_PESSIMISTIC","FBSQL_NOEXEC","FBSQL_NUM","FBSQL_RUNNING","FBSQL_STARTING","FBSQL_STOPPED","FBSQL_STOPPING","FBSQL_UNKNOWN","FDFAA","FDFAP","FDFAPRef","FDFAS","FDFAction","FDFCalculate","FDFClearFf","FDFClrF","FDFDown","FDFDownAP","FDFEnter","FDFExit","FDFFf","FDFFile","FDFFlags","FDFFormat","FDFID","FDFIF","FDFKeystroke","FDFNormalAP","FDFRolloverAP","FDFSetF","FDFSetFf","FDFStatus","FDFUp","FDFValidate","FDFValue","FILEINFO_COMPRESS","FILEINFO_CONTINUE","FILEINFO_DEVICES","FILEINFO_MIME","FILEINFO_MIME_ENCODING","FILEINFO_MIME_TYPE","FILEINFO_NONE","FILEINFO_PRESERVE_ATIME","FILEINFO_RAW","FILEINFO_SYMLINK","FILE_APPEND","FILE_BINARY","FILE_IGNORE_NEW_LINES","FILE_NO_DEFAULT_CONTEXT","FILE_SKIP_EMPTY_LINES","FILE_TEXT","FILE_USE_INCLUDE_PATH","FILTER_CALLBACK","FILTER_DEFAULT","FILTER_FLAG_ALLOW_FRACTION","FILTER_FLAG_ALLOW_HEX","FILTER_FLAG_ALLOW_OCTAL","FILTER_FLAG_ALLOW_SCIENTIFIC","FILTER_FLAG_ALLOW_THOUSAND","FILTER_FLAG_EMPTY_STRING_NULL","FILTER_FLAG_ENCODE_AMP","FILTER_FLAG_ENCODE_HIGH","FILTER_FLAG_ENCODE_LOW","FILTER_FLAG_IPV4","FILTER_FLAG_IPV6","FILTER_FLAG_NONE","FILTER_FLAG_NO_ENCODE_QUOTES","FILTER_FLAG_NO_PRIV_RANGE","FILTER_FLAG_NO_RES_RANGE","FILTER_FLAG_PATH_REQUIRED","FILTER_FLAG_QUERY_REQUIRED","FILTER_FLAG_STRIP_HIGH","FILTER_FLAG_STRIP_LOW","FILTER_FORCE_ARRAY","FILTER_NULL_ON_FAILURE","FILTER_REQUIRE_ARRAY","FILTER_REQUIRE_SCALAR","FILTER_SANITIZE_EMAIL","FILTER_SANITIZE_ENCODED","FILTER_SANITIZE_MAGIC_QUOTES","FILTER_SANITIZE_NUMBER_FLOAT","FILTER_SANITIZE_NUMBER_INT","FILTER_SANITIZE_SPECIAL_CHARS","FILTER_SANITIZE_STRING","FILTER_SANITIZE_STRIPPED","FILTER_SANITIZE_URL","FILTER_UNSAFE_RAW","FILTER_VALIDATE_BOOLEAN","FILTER_VALIDATE_EMAIL","FILTER_VALIDATE_FLOAT","FILTER_VALIDATE_INT","FILTER_VALIDATE_IP","FILTER_VALIDATE_REGEXP","FILTER_VALIDATE_URL","FNM_CASEFOLD","FNM_NOESCAPE","FNM_PATHNAME","FNM_PERIOD","FORCE_DEFLATE","FORCE_GZIP","FPE_FLTDIV","FPE_FLTINV","FPE_FLTOVF","FPE_FLTRES","FPE_FLTSUB","FPE_FLTUND","FPE_INTDIV","FPE_INTOVF","FRIBIDI_AUTO","FRIBIDI_CHARSET_8859_6","FRIBIDI_CHARSET_8859_8","FRIBIDI_CHARSET_CAP_RTL","FRIBIDI_CHARSET_CP1255","FRIBIDI_CHARSET_CP1256","FRIBIDI_CHARSET_ISIRI_3342","FRIBIDI_CHARSET_UTF8","FRIBIDI_LTR","FRIBIDI_RTL","FTP_ASCII","FTP_AUTORESUME","FTP_AUTOSEEK","FTP_BINARY","FTP_FAILED","FTP_FINISHED","FTP_IMAGE","FTP_MOREDATA","FTP_TEXT","FTP_TIMEOUT_SEC","FT_INTERNAL","FT_NOT","FT_PEEK","FT_PREFETCHTEXT","FT_UID","F_DUPFD","F_GETFD","F_GETFL","F_GETLK","F_GETOWN","F_RDLCK","F_SETFL","F_SETLK","F_SETLKW","F_SETOWN","F_UNLCK","F_WRLCK","GD_BUNDLED","GD_EXTRA_VERSION","GD_MAJOR_VERSION","GD_MINOR_VERSION","GD_RELEASE_VERSION","GD_VERSION","GEARMAN_ARGS_BUFFER_SIZE","GEARMAN_CLIENT_FREE_TASKS","GEARMAN_CLIENT_NON_BLOCKING","GEARMAN_CLIENT_UNBUFFERED_RESULT","GEARMAN_COULD_NOT_CONNECT","GEARMAN_DEFAULT_SOCKET_RECV_SIZE","GEARMAN_DEFAULT_SOCKET_SEND_SIZE","GEARMAN_DEFAULT_SOCKET_TIMEOUT","GEARMAN_DEFAULT_TCP_HOST","GEARMAN_DEFAULT_TCP_PORT","GEARMAN_ECHO_DATA_CORRUPTION","GEARMAN_ERRNO","GEARMAN_GETADDRINFO","GEARMAN_INVALID_FUNCTION_NAME","GEARMAN_INVALID_WORKER_FUNCTION","GEARMAN_IO_WAIT","GEARMAN_JOB_HANDLE_SIZE","GEARMAN_LOST_CONNECTION","GEARMAN_MAX_COMMAND_ARGS","GEARMAN_MAX_ERROR_SIZE","GEARMAN_MEMORY_ALLOCATION_FAILURE","GEARMAN_NEED_WORKLOAD_FN","GEARMAN_NO_ACTIVE_FDS","GEARMAN_NO_JOBS","GEARMAN_NO_REGISTERED_FUNCTIONS","GEARMAN_NO_SERVERS","GEARMAN_OPTION_SIZE","GEARMAN_PACKET_HEADER_SIZE","GEARMAN_PAUSE","GEARMAN_RECV_BUFFER_SIZE","GEARMAN_SEND_BUFFER_SIZE","GEARMAN_SEND_BUFFER_TOO_SMALL","GEARMAN_SERVER_ERROR","GEARMAN_SUCCESS","GEARMAN_TIMEOUT","GEARMAN_UNEXPECTED_PACKET","GEARMAN_UNIQUE_SIZE","GEARMAN_UNKNOWN_STATE","GEARMAN_WORKER_GRAB_UNIQ","GEARMAN_WORKER_NON_BLOCKING","GEARMAN_WORKER_WAIT_TIMEOUT","GEARMAN_WORK_DATA","GEARMAN_WORK_EXCEPTION","GEARMAN_WORK_FAIL","GEARMAN_WORK_STATUS","GEARMAN_WORK_WARNING","GEOIP_ASNUM_EDITION","GEOIP_CABLEDSL_SPEED","GEOIP_CITY_EDITION_REV0","GEOIP_CITY_EDITION_REV1","GEOIP_CORPORATE_SPEED","GEOIP_COUNTRY_EDITION","GEOIP_DIALUP_SPEED","GEOIP_DOMAIN_EDITION","GEOIP_ISP_EDITION","GEOIP_NETSPEED_EDITION","GEOIP_ORG_EDITION","GEOIP_PROXY_EDITION","GEOIP_REGION_EDITION_REV0","GEOIP_REGION_EDITION_REV1","GEOIP_UNKNOWN_SPEED","GLOB_AVAILABLE_FLAGS","GLOB_BRACE","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOSORT","GLOB_ONLYDIR","GMP_ROUND_MINUSINF","GMP_ROUND_PLUSINF","GMP_ROUND_ZERO","GMP_VERSION","GNUPG_ERROR_EXCEPTION","GNUPG_ERROR_SILENT","GNUPG_ERROR_WARNING","GNUPG_PROTOCOL_CMS","GNUPG_PROTOCOL_OpenPGP","GNUPG_SIGSUM_BAD_POLICY","GNUPG_SIGSUM_CRL_MISSING","GNUPG_SIGSUM_CRL_TOO_OLD","GNUPG_SIGSUM_GREEN","GNUPG_SIGSUM_KEY_EXPIRED","GNUPG_SIGSUM_KEY_MISSING","GNUPG_SIGSUM_KEY_REVOKED","GNUPG_SIGSUM_RED","GNUPG_SIGSUM_SIG_EXPIRED","GNUPG_SIGSUM_SYS_ERROR","GNUPG_SIGSUM_VALID","GNUPG_SIG_MODE_CLEAR","GNUPG_SIG_MODE_DETACH","GNUPG_SIG_MODE_NORMAL","GNUPG_VALIDITY_FULL","GNUPG_VALIDITY_MARGINAL","GNUPG_VALIDITY_NEVER","GNUPG_VALIDITY_ULTIMATE","GNUPG_VALIDITY_UNDEFINED","GNUPG_VALIDITY_UNKNOWN","GSLC_SSL_NO_AUTH","GSLC_SSL_ONEWAY_AUTH","GSLC_SSL_TWOWAY_AUTH","GUPNP_CONTROL_ERROR_ACTION_FAILED","GUPNP_CONTROL_ERROR_INVALID_ACTION","GUPNP_CONTROL_ERROR_INVALID_ARGS","GUPNP_CONTROL_ERROR_OUT_OF_SYNC","GUPNP_SIGNAL_ACTION_INVOKED","GUPNP_SIGNAL_DEVICE_PROXY_AVAILABLE","GUPNP_SIGNAL_DEVICE_PROXY_UNAVAILABLE","GUPNP_SIGNAL_NOTIFY_FAILED","GUPNP_SIGNAL_SERVICE_PROXY_AVAILABLE","GUPNP_SIGNAL_SERVICE_PROXY_UNAVAILABLE","GUPNP_SIGNAL_SUBSCRIPTION_LOST","GUPNP_TYPE_BOOLEAN","GUPNP_TYPE_DOUBLE","GUPNP_TYPE_FLOAT","GUPNP_TYPE_INT","GUPNP_TYPE_LONG","GUPNP_TYPE_STRING","Gmagick::ALIGN_CENTER","Gmagick::ALIGN_LEFT","Gmagick::ALIGN_RIGHT","Gmagick::ALIGN_UNDEFINED","Gmagick::CHANNEL_ALL","Gmagick::CHANNEL_ALPHA","Gmagick::CHANNEL_BLACK","Gmagick::CHANNEL_BLUE","Gmagick::CHANNEL_CYAN","Gmagick::CHANNEL_GRAY","Gmagick::CHANNEL_GREEN","Gmagick::CHANNEL_INDEX","Gmagick::CHANNEL_MAGENTA","Gmagick::CHANNEL_MATTE","Gmagick::CHANNEL_OPACITY","Gmagick::CHANNEL_RED","Gmagick::CHANNEL_UNDEFINED","Gmagick::CHANNEL_YELLOW","Gmagick::COLORSPACE_CMYK","Gmagick::COLORSPACE_GRAY","Gmagick::COLORSPACE_HSB","Gmagick::COLORSPACE_HSL","Gmagick::COLORSPACE_HWB","Gmagick::COLORSPACE_LAB","Gmagick::COLORSPACE_LOG","Gmagick::COLORSPACE_OHTA","Gmagick::COLORSPACE_REC601LUMA","Gmagick::COLORSPACE_REC709LUMA","Gmagick::COLORSPACE_RGB","Gmagick::COLORSPACE_SRGB","Gmagick::COLORSPACE_TRANSPARENT","Gmagick::COLORSPACE_UNDEFINED","Gmagick::COLORSPACE_XYZ","Gmagick::COLORSPACE_YCBCR","Gmagick::COLORSPACE_YCC","Gmagick::COLORSPACE_YIQ","Gmagick::COLORSPACE_YPBPR","Gmagick::COLORSPACE_YUV","Gmagick::COLOR_ALPHA","Gmagick::COLOR_BLACK","Gmagick::COLOR_BLUE","Gmagick::COLOR_CYAN","Gmagick::COLOR_FUZZ","Gmagick::COLOR_GREEN","Gmagick::COLOR_MAGENTA","Gmagick::COLOR_OPACITY","Gmagick::COLOR_RED","Gmagick::COLOR_YELLOW","Gmagick::COMPOSITE_ADD","Gmagick::COMPOSITE_ATOP","Gmagick::COMPOSITE_BLEND","Gmagick::COMPOSITE_BUMPMAP","Gmagick::COMPOSITE_CLEAR","Gmagick::COMPOSITE_COLORBURN","Gmagick::COMPOSITE_COLORDODGE","Gmagick::COMPOSITE_COLORIZE","Gmagick::COMPOSITE_COPY","Gmagick::COMPOSITE_COPYBLACK","Gmagick::COMPOSITE_COPYBLUE","Gmagick::COMPOSITE_COPYCYAN","Gmagick::COMPOSITE_COPYGREEN","Gmagick::COMPOSITE_COPYMAGENTA","Gmagick::COMPOSITE_COPYOPACITY","Gmagick::COMPOSITE_COPYRED","Gmagick::COMPOSITE_COPYYELLOW","Gmagick::COMPOSITE_DARKEN","Gmagick::COMPOSITE_DEFAULT","Gmagick::COMPOSITE_DIFFERENCE","Gmagick::COMPOSITE_DISPLACE","Gmagick::COMPOSITE_DISSOLVE","Gmagick::COMPOSITE_DST","Gmagick::COMPOSITE_DSTATOP","Gmagick::COMPOSITE_DSTIN","Gmagick::COMPOSITE_DSTOUT","Gmagick::COMPOSITE_DSTOVER","Gmagick::COMPOSITE_EXCLUSION","Gmagick::COMPOSITE_HARDLIGHT","Gmagick::COMPOSITE_HUE","Gmagick::COMPOSITE_IN","Gmagick::COMPOSITE_LIGHTEN","Gmagick::COMPOSITE_LUMINIZE","Gmagick::COMPOSITE_MINUS","Gmagick::COMPOSITE_MODULATE","Gmagick::COMPOSITE_MULTIPLY","Gmagick::COMPOSITE_NO","Gmagick::COMPOSITE_OUT","Gmagick::COMPOSITE_OVER","Gmagick::COMPOSITE_OVERLAY","Gmagick::COMPOSITE_PLUS","Gmagick::COMPOSITE_REPLACE","Gmagick::COMPOSITE_SATURATE","Gmagick::COMPOSITE_SCREEN","Gmagick::COMPOSITE_SOFTLIGHT","Gmagick::COMPOSITE_SRC","Gmagick::COMPOSITE_SRCATOP","Gmagick::COMPOSITE_SRCIN","Gmagick::COMPOSITE_SRCOUT","Gmagick::COMPOSITE_SRCOVER","Gmagick::COMPOSITE_SUBTRACT","Gmagick::COMPOSITE_THRESHOLD","Gmagick::COMPOSITE_UNDEFINED","Gmagick::COMPOSITE_XOR","Gmagick::COMPRESSION_BZIP","Gmagick::COMPRESSION_FAX","Gmagick::COMPRESSION_GROUP4","Gmagick::COMPRESSION_JPEG","Gmagick::COMPRESSION_JPEG2000","Gmagick::COMPRESSION_LOSSLESSJPEG","Gmagick::COMPRESSION_LZW","Gmagick::COMPRESSION_NO","Gmagick::COMPRESSION_RLE","Gmagick::COMPRESSION_UNDEFINED","Gmagick::COMPRESSION_ZIP","Gmagick::DECORATION_LINETROUGH","Gmagick::DECORATION_NO","Gmagick::DECORATION_OVERLINE","Gmagick::DECORATION_UNDERLINE","Gmagick::FILLRULE_EVENODD","Gmagick::FILLRULE_NONZERO","Gmagick::FILLRULE_UNDEFINED","Gmagick::FILTER_BESSEL","Gmagick::FILTER_BLACKMAN","Gmagick::FILTER_BOX","Gmagick::FILTER_CATROM","Gmagick::FILTER_CUBIC","Gmagick::FILTER_GAUSSIAN","Gmagick::FILTER_HAMMING","Gmagick::FILTER_HANNING","Gmagick::FILTER_HERMITE","Gmagick::FILTER_LANCZOS","Gmagick::FILTER_MITCHELL","Gmagick::FILTER_POINT","Gmagick::FILTER_QUADRATIC","Gmagick::FILTER_SINC","Gmagick::FILTER_TRIANGLE","Gmagick::FILTER_UNDEFINED","Gmagick::GRAVITY_CENTER","Gmagick::GRAVITY_EAST","Gmagick::GRAVITY_NORTH","Gmagick::GRAVITY_NORTHEAST","Gmagick::GRAVITY_NORTHWEST","Gmagick::GRAVITY_SOUTH","Gmagick::GRAVITY_SOUTHEAST","Gmagick::GRAVITY_SOUTHWEST","Gmagick::GRAVITY_WEST","Gmagick::IMGTYPE_BILEVEL","Gmagick::IMGTYPE_COLORSEPARATION","Gmagick::IMGTYPE_COLORSEPARATIONMATTE","Gmagick::IMGTYPE_GRAYSCALE","Gmagick::IMGTYPE_GRAYSCALEMATTE","Gmagick::IMGTYPE_OPTIMIZE","Gmagick::IMGTYPE_PALETTE","Gmagick::IMGTYPE_PALETTEMATTE","Gmagick::IMGTYPE_TRUECOLOR","Gmagick::IMGTYPE_TRUECOLORMATTE","Gmagick::IMGTYPE_UNDEFINED","Gmagick::LINECAP_BUTT","Gmagick::LINECAP_ROUND","Gmagick::LINECAP_SQUARE","Gmagick::LINECAP_UNDEFINED","Gmagick::LINEJOIN_BEVEL","Gmagick::LINEJOIN_MITER","Gmagick::LINEJOIN_ROUND","Gmagick::LINEJOIN_UNDEFINED","Gmagick::METRIC_MEANABSOLUTEERROR","Gmagick::METRIC_MEANSQUAREERROR","Gmagick::METRIC_PEAKABSOLUTEERROR","Gmagick::METRIC_PEAKSIGNALTONOISERATIO","Gmagick::METRIC_ROOTMEANSQUAREDERROR","Gmagick::METRIC_UNDEFINED","Gmagick::MONTAGEMODE_CONCATENATE","Gmagick::MONTAGEMODE_FRAME","Gmagick::MONTAGEMODE_UNFRAME","Gmagick::NOISE_GAUSSIAN","Gmagick::NOISE_IMPULSE","Gmagick::NOISE_LAPLACIAN","Gmagick::NOISE_MULTIPLICATIVEGAUSSIAN","Gmagick::NOISE_POISSON","Gmagick::NOISE_UNIFORM","Gmagick::ORIENTATION_BOTTOMLEFT","Gmagick::ORIENTATION_BOTTOMRIGHT","Gmagick::ORIENTATION_LEFTBOTTOM","Gmagick::ORIENTATION_LEFTTOP","Gmagick::ORIENTATION_RIGHTBOTTOM","Gmagick::ORIENTATION_RIGHTTOP","Gmagick::ORIENTATION_TOPLEFT","Gmagick::ORIENTATION_TOPRIGHT","Gmagick::ORIENTATION_UNDEFINED","Gmagick::PAINT_FILLTOBORDER","Gmagick::PAINT_FLOODFILL","Gmagick::PAINT_POINT","Gmagick::PAINT_REPLACE","Gmagick::PAINT_RESET","Gmagick::PATHUNITS_OBJECTBOUNDINGBOX","Gmagick::PATHUNITS_UNDEFINED","Gmagick::PATHUNITS_USERSPACE","Gmagick::PATHUNITS_USERSPACEONUSE","Gmagick::PIXEL_CHAR","Gmagick::PIXEL_DOUBLE","Gmagick::PIXEL_FLOAT","Gmagick::PIXEL_INTEGER","Gmagick::PIXEL_LONG","Gmagick::PIXEL_QUANTUM","Gmagick::PIXEL_SHORT","Gmagick::PREVIEW_ADDNOISE","Gmagick::PREVIEW_BLUR","Gmagick::PREVIEW_BRIGHTNESS","Gmagick::PREVIEW_CHARCOALDRAWING","Gmagick::PREVIEW_DESPECKLE","Gmagick::PREVIEW_DULL","Gmagick::PREVIEW_EDGEDETECT","Gmagick::PREVIEW_GAMMA","Gmagick::PREVIEW_GRAYSCALE","Gmagick::PREVIEW_HUE","Gmagick::PREVIEW_IMPLODE","Gmagick::PREVIEW_JPEG","Gmagick::PREVIEW_OILPAINT","Gmagick::PREVIEW_QUANTIZE","Gmagick::PREVIEW_RAISE","Gmagick::PREVIEW_REDUCENOISE","Gmagick::PREVIEW_ROLL","Gmagick::PREVIEW_ROTATE","Gmagick::PREVIEW_SATURATION","Gmagick::PREVIEW_SEGMENT","Gmagick::PREVIEW_SHADE","Gmagick::PREVIEW_SHARPEN","Gmagick::PREVIEW_SHEAR","Gmagick::PREVIEW_SOLARIZE","Gmagick::PREVIEW_SPIFF","Gmagick::PREVIEW_SPREAD","Gmagick::PREVIEW_SWIRL","Gmagick::PREVIEW_THRESHOLD","Gmagick::PREVIEW_UNDEFINED","Gmagick::PREVIEW_WAVE","Gmagick::RENDERINGINTENT_ABSOLUTE","Gmagick::RENDERINGINTENT_PERCEPTUAL","Gmagick::RENDERINGINTENT_RELATIVE","Gmagick::RENDERINGINTENT_SATURATION","Gmagick::RENDERINGINTENT_UNDEFINED","Gmagick::RESOLUTION_PIXELSPERCENTIMETER","Gmagick::RESOLUTION_PIXELSPERINCH","Gmagick::RESOLUTION_UNDEFINED","Gmagick::RESOURCETYPE_AREA","Gmagick::RESOURCETYPE_DISK","Gmagick::RESOURCETYPE_FILE","Gmagick::RESOURCETYPE_MAP","Gmagick::RESOURCETYPE_MEMORY","Gmagick::RESOURCETYPE_UNDEFINED","Gmagick::STRETCH_ANY","Gmagick::STRETCH_CONDENSED","Gmagick::STRETCH_EXPANDED","Gmagick::STRETCH_EXTRAEXPANDED","Gmagick::STRETCH_NORMAL","Gmagick::STRETCH_SEMICONDENSED","Gmagick::STRETCH_SEMIEXPANDED","Gmagick::STRETCH_ULTRACONDENSED","Gmagick::STRETCH_ULTRAEXPANDED","Gmagick::STYLE_ANY","Gmagick::STYLE_ITALIC","Gmagick::STYLE_NORMAL","Gmagick::STYLE_OBLIQUE","Gmagick::VIRTUALPIXELMETHOD_BACKGROUND","Gmagick::VIRTUALPIXELMETHOD_CONSTANT","Gmagick::VIRTUALPIXELMETHOD_EDGE","Gmagick::VIRTUALPIXELMETHOD_MIRROR","Gmagick::VIRTUALPIXELMETHOD_TILE","Gmagick::VIRTUALPIXELMETHOD_TRANSPARENT","Gmagick::VIRTUALPIXELMETHOD_UNDEFINED","HASH_HMAC","HTML_ENTITIES","HTML_SPECIALCHARS","HTTP_AUTH_ANY","HTTP_AUTH_BASIC","HTTP_AUTH_DIGEST","HTTP_AUTH_GSSNEG","HTTP_AUTH_NTLM","HTTP_COOKIE_HTTPONLY","HTTP_COOKIE_PARSE_RAW","HTTP_COOKIE_SECURE","HTTP_DEFLATE_LEVEL_DEF","HTTP_DEFLATE_LEVEL_MAX","HTTP_DEFLATE_LEVEL_MIN","HTTP_DEFLATE_STRATEGY_DEF","HTTP_DEFLATE_STRATEGY_FILT","HTTP_DEFLATE_STRATEGY_FIXED","HTTP_DEFLATE_STRATEGY_HUFF","HTTP_DEFLATE_STRATEGY_RLE","HTTP_DEFLATE_TYPE_GZIP","HTTP_DEFLATE_TYPE_RAW","HTTP_DEFLATE_TYPE_ZLIB","HTTP_ENCODING_STREAM_FLUSH_FULL","HTTP_ENCODING_STREAM_FLUSH_NONE","HTTP_ENCODING_STREAM_FLUSH_SYNC","HTTP_E_ENCODING","HTTP_E_HEADER","HTTP_E_INVALID_PARAM","HTTP_E_MALFORMED_HEADERS","HTTP_E_MESSAGE_TYPE","HTTP_E_QUERYSTRING","HTTP_E_REQUEST","HTTP_E_REQUEST_METHOD","HTTP_E_REQUEST_POOL","HTTP_E_RESPONSE","HTTP_E_RUNTIME","HTTP_E_SOCKET","HTTP_E_URL","HTTP_IPRESOLVE_ANY","HTTP_IPRESOLVE_V4","HTTP_IPRESOLVE_V6","HTTP_METH_ACL","HTTP_METH_BASELINE_CONTROL","HTTP_METH_CHECKIN","HTTP_METH_CHECKOUT","HTTP_METH_CONNECT","HTTP_METH_COPY","HTTP_METH_DELETE","HTTP_METH_GET","HTTP_METH_HEAD","HTTP_METH_LABEL","HTTP_METH_LOCK","HTTP_METH_MERGE","HTTP_METH_MKACTIVITY","HTTP_METH_MKCOL","HTTP_METH_MKWORKSPACE","HTTP_METH_MOVE","HTTP_METH_OPTIONS","HTTP_METH_POST","HTTP_METH_PROPFIND","HTTP_METH_PROPPATCH","HTTP_METH_PUT","HTTP_METH_REPORT","HTTP_METH_TRACE","HTTP_METH_UNCHECKOUT","HTTP_METH_UNLOCK","HTTP_METH_UPDATE","HTTP_METH_VERSION_CONTROL","HTTP_MSG_NONE","HTTP_MSG_REQUEST","HTTP_MSG_RESPONSE","HTTP_PARAMS_ALLOW_COMMA","HTTP_PARAMS_ALLOW_FAILURE","HTTP_PARAMS_DEFAULT","HTTP_PARAMS_RAISE_ERROR","HTTP_PROXY_HTTP","HTTP_PROXY_SOCKS4","HTTP_PROXY_SOCKS5","HTTP_QUERYSTRING_TYPE_ARRAY","HTTP_QUERYSTRING_TYPE_BOOL","HTTP_QUERYSTRING_TYPE_FLOAT","HTTP_QUERYSTRING_TYPE_INT","HTTP_QUERYSTRING_TYPE_OBJECT","HTTP_QUERYSTRING_TYPE_STRING","HTTP_REDIRECT","HTTP_REDIRECT_FOUND","HTTP_REDIRECT_PERM","HTTP_REDIRECT_POST","HTTP_REDIRECT_PROXY","HTTP_REDIRECT_TEMP","HTTP_SSL_VERSION_ANY","HTTP_SSL_VERSION_SSLv2","HTTP_SSL_VERSION_SSLv3","HTTP_SSL_VERSION_TLSv1","HTTP_SUPPORT","HTTP_SUPPORT_ENCODINGS","HTTP_SUPPORT_MAGICMIME","HTTP_SUPPORT_REQUESTS","HTTP_SUPPORT_SSLREQUESTS","HTTP_URL_JOIN_PATH","HTTP_URL_JOIN_QUERY","HTTP_URL_REPLACE","HTTP_URL_STRIP_ALL","HTTP_URL_STRIP_AUTH","HTTP_URL_STRIP_FRAGMENT","HTTP_URL_STRIP_PASS","HTTP_URL_STRIP_PATH","HTTP_URL_STRIP_PORT","HTTP_URL_STRIP_QUERY","HTTP_URL_STRIP_USER","HTTP_VERSION_1_0","HTTP_VERSION_1_1","HTTP_VERSION_ANY","HW_ATTR_LANG","HW_ATTR_NONE","HW_ATTR_NR","IBASE_BKP_CONVERT","IBASE_BKP_IGNORE_CHECKSUMS","IBASE_BKP_IGNORE_LIMBO","IBASE_BKP_METADATA_ONLY","IBASE_BKP_NON_TRANSPORTABLE","IBASE_BKP_NO_GARBAGE_COLLECT","IBASE_BKP_OLD_DESCRIPTIONS","IBASE_PRP_ACCESS_MODE","IBASE_PRP_ACTIVATE","IBASE_PRP_AM_READONLY","IBASE_PRP_AM_READWRITE","IBASE_PRP_DB_ONLINE","IBASE_PRP_DENY_NEW_ATTACHMENTS","IBASE_PRP_DENY_NEW_TRANSACTIONS","IBASE_PRP_PAGE_BUFFERS","IBASE_PRP_RES","IBASE_PRP_RESERVE_SPACE","IBASE_PRP_RES_USE_FULL","IBASE_PRP_SET_SQL_DIALECT","IBASE_PRP_SHUTDOWN_DB","IBASE_PRP_SWEEP_INTERVAL","IBASE_PRP_WM_ASYNC","IBASE_PRP_WM_SYNC","IBASE_PRP_WRITE_MODE","IBASE_RES_CREATE","IBASE_RES_DEACTIVATE_IDX","IBASE_RES_NO_SHADOW","IBASE_RES_NO_VALIDITY","IBASE_RES_ONE_AT_A_TIME","IBASE_RES_REPLACE","IBASE_RES_USE_ALL_SPACE","IBASE_RPR_CHECK_DB","IBASE_RPR_FULL","IBASE_RPR_IGNORE_CHECKSUM","IBASE_RPR_KILL_SHADOWS","IBASE_RPR_MEND_DB","IBASE_RPR_SWEEP_DB","IBASE_RPR_VALIDATE_DB","IBASE_STS_DATA_PAGES","IBASE_STS_DB_LOG","IBASE_STS_HDR_PAGES","IBASE_STS_IDX_PAGES","IBASE_STS_SYS_RELATIONS","IBASE_SVC_GET_ENV","IBASE_SVC_GET_ENV_LOCK","IBASE_SVC_GET_ENV_MSG","IBASE_SVC_GET_USERS","IBASE_SVC_IMPLEMENTATION","IBASE_SVC_SERVER_VERSION","IBASE_SVC_SVR_DB_INFO","IBASE_SVC_USER_DBPATH","ID3_BEST","ID3_V1_0","ID3_V1_1","ID3_V2_1","ID3_V2_2","ID3_V2_3","ID3_V2_4","IDNA_ALLOW_UNASSIGNED","IDNA_CHECK_BIDI","IDNA_CHECK_CONTEXTJ","IDNA_DEFAULT","IDNA_ERROR_BIDI","IDNA_ERROR_CONTEXTJ","IDNA_ERROR_DISALLOWED","IDNA_ERROR_DOMAIN_NAME_TOO_LONG","IDNA_ERROR_EMPTY_LABEL","IDNA_ERROR_HYPHEN_3_4","IDNA_ERROR_INVALID_ACE_LABEL","IDNA_ERROR_LABEL_HAS_DOT","IDNA_ERROR_LABEL_TOO_LONG","IDNA_ERROR_LEADING_COMBINING_MARK","IDNA_ERROR_LEADING_HYPHEN","IDNA_ERROR_PUNYCODE","IDNA_ERROR_TRAILING_HYPHEN","IDNA_NONTRANSITIONAL_TO_ASCII","IDNA_NONTRANSITIONAL_TO_UNICODE","IDNA_USE_STD3_RULES","IFX_HOLD","IFX_LO_APPEND","IFX_LO_BUFFER","IFX_LO_NOBUFFER","IFX_LO_RDONLY","IFX_LO_RDWR","IFX_LO_WRONLY","IFX_SCROLL","IIS_ANONYMOUS","IIS_BASIC","IIS_EXECUTE","IIS_NTLM","IIS_PAUSED","IIS_READ","IIS_RUNNING","IIS_SCRIPT","IIS_STARTING","IIS_STOPPED","IIS_WRITE","ILL_BADSTK","ILL_COPROC","ILL_ILLADR","ILL_ILLOPC","ILL_ILLOPN","ILL_ILLTRP","ILL_PRVOPC","ILL_PRVREG","IMAGETYPE_BMP","IMAGETYPE_GIF","IMAGETYPE_ICO","IMAGETYPE_IFF","IMAGETYPE_JB2","IMAGETYPE_JP2","IMAGETYPE_JPC","IMAGETYPE_JPEG","IMAGETYPE_JPEG2000","IMAGETYPE_JPX","IMAGETYPE_PNG","IMAGETYPE_PSD","IMAGETYPE_SWC","IMAGETYPE_SWF","IMAGETYPE_TIFF_II","IMAGETYPE_TIFF_MM","IMAGETYPE_WBMP","IMAGETYPE_XBM","IMAP_CLOSETIMEOUT","IMAP_GC_ELT","IMAP_GC_ENV","IMAP_GC_TEXTS","IMAP_OPENTIMEOUT","IMAP_READTIMEOUT","IMAP_WRITETIMEOUT","IMG_ARC_CHORD","IMG_ARC_EDGED","IMG_ARC_NOFILL","IMG_ARC_PIE","IMG_ARC_ROUNDED","IMG_BELL","IMG_BESSEL","IMG_BICUBIC","IMG_BICUBIC","IMG_BILINEAR_FIXED","IMG_BLACKMAN","IMG_BOX","IMG_BSPLINE","IMG_CATMULLROM","IMG_COLOR_BRUSHED","IMG_COLOR_STYLED","IMG_COLOR_STYLEDBRUSHED","IMG_COLOR_TILED","IMG_COLOR_TRANSPARENT","IMG_EFFECT_ALPHABLEND","IMG_EFFECT_NORMAL","IMG_EFFECT_OVERLAY","IMG_EFFECT_REPLACE","IMG_FILTER_BRIGHTNESS","IMG_FILTER_COLORIZE","IMG_FILTER_CONTRAST","IMG_FILTER_EDGEDETECT","IMG_FILTER_EMBOSS","IMG_FILTER_GAUSSIAN_BLUR","IMG_FILTER_GRAYSCALE","IMG_FILTER_MEAN_REMOVAL","IMG_FILTER_NEGATE","IMG_FILTER_PIXELATE","IMG_FILTER_SELECTIVE_BLUR","IMG_FILTER_SMOOTH","IMG_FLIP_BOTH","IMG_FLIP_HORIZONTAL","IMG_FLIP_VERTICAL","IMG_GAUSSIAN","IMG_GD2_COMPRESSED","IMG_GD2_RAW","IMG_GENERALIZED_CUBIC","IMG_GIF","IMG_HAMMING","IMG_HANNING","IMG_HERMITE","IMG_JPEG","IMG_JPG","IMG_MITCHELL","IMG_NEAREST_NEIGHBOUR","IMG_PNG","IMG_POWER","IMG_QUADRATIC","IMG_SINC","IMG_TRIANGLE","IMG_WBMP","IMG_WEIGHTED4","IMG_XPM","INGRES_API_VERSION","INGRES_ASSOC","INGRES_BOTH","INGRES_CURSOR_READONLY","INGRES_CURSOR_UPDATE","INGRES_DATE_DMY","INGRES_DATE_FINNISH","INGRES_DATE_GERMAN","INGRES_DATE_ISO","INGRES_DATE_ISO4","INGRES_DATE_MDY","INGRES_DATE_MULTINATIONAL","INGRES_DATE_MULTINATIONAL4","INGRES_DATE_YMD","INGRES_EXT_VERSION","INGRES_MONEY_LEADING","INGRES_MONEY_TRAILING","INGRES_NUM","INGRES_STRUCTURE_BTREE","INGRES_STRUCTURE_CBTREE","INGRES_STRUCTURE_CHASH","INGRES_STRUCTURE_CHEAP","INGRES_STRUCTURE_CISAM","INGRES_STRUCTURE_HASH","INGRES_STRUCTURE_HEAP","INGRES_STRUCTURE_ISAM","INI_SCANNER_NORMAL","INI_SCANNER_RAW","INPUT_COOKIE","INPUT_ENV","INPUT_GET","INPUT_POST","INPUT_REQUEST","INPUT_SERVER","INPUT_SESSION","INTL_IDNA_VARIANT_2003","INTL_IDNA_VARIANT_UTS46","INTL_MAX_LOCALE_LEN","IN_ACCESS","IN_ALL_EVENTS","IN_ATTRIB","IN_CLOSE","IN_CLOSE_NOWRITE","IN_CLOSE_WRITE","IN_CREATE","IN_DELETE","IN_DELETE_SELF","IN_DONT_FOLLOW","IN_IGNORED","IN_ISDIR","IN_MASK_ADD","IN_MODIFY","IN_MOVE","IN_MOVED_FROM","IN_MOVED_TO","IN_MOVE_SELF","IN_ONESHOT","IN_ONLYDIR","IN_OPEN","IN_Q_OVERFLOW","IN_UNMOUNT","IdletoOverDown","IdletoOverUp","JSON_BIGINT_AS_STRING","JSON_ERROR_CTRL_CHAR","JSON_ERROR_DEPTH","JSON_ERROR_NONE","JSON_ERROR_STATE_MISMATCH","JSON_ERROR_SYNTAX","JSON_ERROR_UTF8","JSON_FORCE_OBJECT","JSON_HEX_AMP","JSON_HEX_APOS","JSON_HEX_QUOT","JSON_HEX_TAG","JSON_NUMERIC_CHECK","JSON_PRETTY_PRINT","JSON_UNESCAPED_SLASHES","JSON_UNESCAPED_UNICODE","KTaglib_ID3v2_AttachedPictureFrame::Artist","KTaglib_ID3v2_AttachedPictureFrame::BackCover","KTaglib_ID3v2_AttachedPictureFrame::Band","KTaglib_ID3v2_AttachedPictureFrame::BandLogo","KTaglib_ID3v2_AttachedPictureFrame::ColouredFish","KTaglib_ID3v2_AttachedPictureFrame::Composer","KTaglib_ID3v2_AttachedPictureFrame::Conductor","KTaglib_ID3v2_AttachedPictureFrame::DuringPerformance","KTaglib_ID3v2_AttachedPictureFrame::DuringRecording","KTaglib_ID3v2_AttachedPictureFrame::FileIcon","KTaglib_ID3v2_AttachedPictureFrame::FrontCover","KTaglib_ID3v2_AttachedPictureFrame::Illustration","KTaglib_ID3v2_AttachedPictureFrame::LeadArtist","KTaglib_ID3v2_AttachedPictureFrame::LeafletPage","KTaglib_ID3v2_AttachedPictureFrame::Lyricist","KTaglib_ID3v2_AttachedPictureFrame::Media","KTaglib_ID3v2_AttachedPictureFrame::MovieScreenCapture","KTaglib_ID3v2_AttachedPictureFrame::Other","KTaglib_ID3v2_AttachedPictureFrame::OtherFileIcon","KTaglib_ID3v2_AttachedPictureFrame::RecordingLocation","KTaglib_MPEG_Header::Version1","KTaglib_MPEG_Header::Version2","KTaglib_MPEG_Header::Version2_5","LATT_HASCHILDREN","LATT_HASNOCHILDREN","LATT_MARKED","LATT_NOINFERIORS","LATT_NOSELECT","LATT_REFERRAL","LATT_UNMARKED","LC_ALL","LC_COLLATE","LC_CTYPE","LC_MESSAGES","LC_MONETARY","LC_NUMERIC","LC_TIME","LDAP_DEREF_ALWAYS","LDAP_DEREF_FINDING","LDAP_DEREF_NEVER","LDAP_DEREF_SEARCHING","LDAP_OPT_CLIENT_CONTROLS","LDAP_OPT_DEBUG_LEVEL","LDAP_OPT_DEREF","LDAP_OPT_ERROR_NUMBER","LDAP_OPT_ERROR_STRING","LDAP_OPT_HOST_NAME","LDAP_OPT_MATCHED_DN","LDAP_OPT_NETWORK_TIMEOUT","LDAP_OPT_PROTOCOL_VERSION","LDAP_OPT_REFERRALS","LDAP_OPT_RESTART","LDAP_OPT_SERVER_CONTROLS","LDAP_OPT_SIZELIMIT","LDAP_OPT_TIMELIMIT","LIBEXSLT_DOTTED_VERSION","LIBEXSLT_VERSION","LIBXML_COMPACT","LIBXML_DOTTED_VERSION","LIBXML_DTDATTR","LIBXML_DTDLOAD","LIBXML_DTDVALID","LIBXML_ERR_ERROR","LIBXML_ERR_FATAL","LIBXML_ERR_NONE","LIBXML_ERR_WARNING","LIBXML_NOBLANKS","LIBXML_NOCDATA","LIBXML_NOEMPTYTAG","LIBXML_NOENT","LIBXML_NOERROR","LIBXML_NONET","LIBXML_NOWARNING","LIBXML_NOXMLDECL","LIBXML_NSCLEAN","LIBXML_PARSEHUGE","LIBXML_SCHEMA_CREATE","LIBXML_VERSION","LIBXML_XINCLUDE","LIBXSLT_DOTTED_VERSION","LIBXSLT_VERSION","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","MAILPARSE_EXTRACT_OUTPUT","MAILPARSE_EXTRACT_RETURN","MAILPARSE_EXTRACT_STREAM","MB_CASE_LOWER","MB_CASE_TITLE","MB_CASE_UPPER","MB_OVERLOAD_MAIL","MB_OVERLOAD_REGEX","MB_OVERLOAD_STRING","MCRYPT_DECRYPT","MCRYPT_DEV_RANDOM","MCRYPT_DEV_URANDOM","MCRYPT_ENCRYPT","MCRYPT_RAND","MING_NEW","MING_ZLIB","MK_E_UNAVAILABLE","MOD_COLOR","MOD_MATRIX","MSG_DONTROUTE","MSG_EOF","MSG_EOR","MSG_OOB","MSG_PEEK","MSG_WAITALL","MSQL_ASSOC","MSQL_BOTH","MSQL_NUM","MSSQL_ASSOC","MSSQL_BOTH","MSSQL_NUM","MYSQLI_ASSOC","MYSQLI_AUTO_INCREMENT_FLAG","MYSQLI_BINARY_FLAG","MYSQLI_BLOB_FLAG","MYSQLI_BOTH","MYSQLI_CLIENT_COMPRESS","MYSQLI_CLIENT_IGNORE_SPACE","MYSQLI_CLIENT_INTERACTIVE","MYSQLI_CLIENT_MULTI_QUERIES","MYSQLI_CLIENT_NO_SCHEMA","MYSQLI_CLIENT_SSL","MYSQLI_CURSOR_TYPE_FOR_UPDATE","MYSQLI_CURSOR_TYPE_NO_CURSOR","MYSQLI_CURSOR_TYPE_READ_ONLY","MYSQLI_CURSOR_TYPE_SCROLLABLE","MYSQLI_DATA_TRUNCATED","MYSQLI_DEBUG_TRACE_ENABLED","MYSQLI_ENUM_FLAG","MYSQLI_GROUP_FLAG","MYSQLI_INIT_COMMAND","MYSQLI_MULTIPLE_KEY_FLAG","MYSQLI_NEED_DATA","MYSQLI_NOT_NULL_FLAG","MYSQLI_NO_DATA","MYSQLI_NUM","MYSQLI_NUM_FLAG","MYSQLI_OPT_CONNECT_TIMEOUT","MYSQLI_OPT_LOCAL_INFILE","MYSQLI_PART_KEY_FLAG","MYSQLI_PRI_KEY_FLAG","MYSQLI_READ_DEFAULT_FILE","MYSQLI_READ_DEFAULT_GROUP","MYSQLI_REFRESH_GRANT","MYSQLI_REFRESH_HOSTS","MYSQLI_REFRESH_LOG","MYSQLI_REFRESH_MASTER","MYSQLI_REFRESH_SLAVE","MYSQLI_REFRESH_STATUS","MYSQLI_REFRESH_TABLES","MYSQLI_REFRESH_THREADS","MYSQLI_REPORT_ALL","MYSQLI_REPORT_ERROR","MYSQLI_REPORT_INDEX","MYSQLI_REPORT_OFF","MYSQLI_REPORT_STRICT","MYSQLI_SERVER_QUERY_NO_GOOD_INDEX_USED","MYSQLI_SERVER_QUERY_NO_INDEX_USED","MYSQLI_SET_CHARSET_NAME","MYSQLI_SET_FLAG","MYSQLI_STMT_ATTR_CURSOR_TYPE","MYSQLI_STMT_ATTR_PREFETCH_ROWS","MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH","MYSQLI_STORE_RESULT","MYSQLI_TIMESTAMP_FLAG","MYSQLI_TRANS_COR_AND_CHAIN","MYSQLI_TRANS_COR_AND_NO_CHAIN","MYSQLI_TRANS_COR_NO_RELEASE","MYSQLI_TRANS_COR_RELEASE","MYSQLI_TYPE_BIT","MYSQLI_TYPE_BLOB","MYSQLI_TYPE_CHAR","MYSQLI_TYPE_DATE","MYSQLI_TYPE_DATETIME","MYSQLI_TYPE_DECIMAL","MYSQLI_TYPE_DOUBLE","MYSQLI_TYPE_ENUM","MYSQLI_TYPE_FLOAT","MYSQLI_TYPE_GEOMETRY","MYSQLI_TYPE_INT24","MYSQLI_TYPE_INTERVAL","MYSQLI_TYPE_LONG","MYSQLI_TYPE_LONGLONG","MYSQLI_TYPE_LONG_BLOB","MYSQLI_TYPE_MEDIUM_BLOB","MYSQLI_TYPE_NEWDATE","MYSQLI_TYPE_NEWDECIMAL","MYSQLI_TYPE_NULL","MYSQLI_TYPE_SET","MYSQLI_TYPE_SHORT","MYSQLI_TYPE_STRING","MYSQLI_TYPE_TIME","MYSQLI_TYPE_TIMESTAMP","MYSQLI_TYPE_TINY","MYSQLI_TYPE_TINY_BLOB","MYSQLI_TYPE_VAR_STRING","MYSQLI_TYPE_YEAR","MYSQLI_UNIQUE_KEY_FLAG","MYSQLI_UNSIGNED_FLAG","MYSQLI_USE_RESULT","MYSQLI_ZEROFILL_FLAG","MYSQLND_MEMCACHE_DEFAULT_REGEXP","MYSQLND_MEMCACHE_VERSION","MYSQLND_MEMCACHE_VERSION_ID","MYSQLND_MS_LAST_USED_SWITCH","MYSQLND_MS_MASTER_SWITCH","MYSQLND_MS_QOS_CONSISTENCY_EVENTUAL","MYSQLND_MS_QOS_CONSISTENCY_SESSION","MYSQLND_MS_QOS_CONSISTENCY_STRONG","MYSQLND_MS_QOS_OPTION_AGE","MYSQLND_MS_QOS_OPTION_GTID","MYSQLND_MS_QUERY_USE_LAST_USED","MYSQLND_MS_QUERY_USE_MASTER","MYSQLND_MS_QUERY_USE_SLAVE","MYSQLND_MS_SLAVE_SWITCH","MYSQLND_MS_VERSION","MYSQLND_MS_VERSION_ID","MYSQLND_MUX_VERSION","MYSQLND_MUX_VERSION_ID","MYSQLND_QC_CONDITION_META_SCHEMA_PATTERN","MYSQLND_QC_DISABLE_SWITCH","MYSQLND_QC_ENABLE_SWITCH","MYSQLND_QC_SERVER_ID_SWITCH","MYSQLND_QC_TTL_SWITCH","MYSQLND_QC_VERSION","MYSQLND_QC_VERSION_ID","MYSQLND_UH_MYSQLND_CHG_USER_RESP_PACKET","MYSQLND_UH_MYSQLND_CLOSE_DISCONNECTED","MYSQLND_UH_MYSQLND_CLOSE_EXPLICIT","MYSQLND_UH_MYSQLND_CLOSE_IMPLICIT","MYSQLND_UH_MYSQLND_CLOSE_LAST","MYSQLND_UH_MYSQLND_COM_BINLOG_DUMP","MYSQLND_UH_MYSQLND_COM_CHANGE_USER","MYSQLND_UH_MYSQLND_COM_CONNECT","MYSQLND_UH_MYSQLND_COM_CONNECT_OUT","MYSQLND_UH_MYSQLND_COM_CREATE_DB","MYSQLND_UH_MYSQLND_COM_DAEMON","MYSQLND_UH_MYSQLND_COM_DEBUG","MYSQLND_UH_MYSQLND_COM_DELAYED_INSERT","MYSQLND_UH_MYSQLND_COM_DROP_DB","MYSQLND_UH_MYSQLND_COM_END","MYSQLND_UH_MYSQLND_COM_FIELD_LIST","MYSQLND_UH_MYSQLND_COM_INIT_DB","MYSQLND_UH_MYSQLND_COM_PING","MYSQLND_UH_MYSQLND_COM_PROCESS_INFO","MYSQLND_UH_MYSQLND_COM_PROCESS_KILL","MYSQLND_UH_MYSQLND_COM_QUERY","MYSQLND_UH_MYSQLND_COM_QUIT","MYSQLND_UH_MYSQLND_COM_REFRESH","MYSQLND_UH_MYSQLND_COM_REGISTER_SLAVED","MYSQLND_UH_MYSQLND_COM_SET_OPTION","MYSQLND_UH_MYSQLND_COM_SHUTDOWN","MYSQLND_UH_MYSQLND_COM_SLEEP","MYSQLND_UH_MYSQLND_COM_STATISTICS","MYSQLND_UH_MYSQLND_COM_STMT_CLOSE","MYSQLND_UH_MYSQLND_COM_STMT_EXECUTE","MYSQLND_UH_MYSQLND_COM_STMT_FETCH","MYSQLND_UH_MYSQLND_COM_STMT_PREPARE","MYSQLND_UH_MYSQLND_COM_STMT_RESET","MYSQLND_UH_MYSQLND_COM_STMT_SEND_LONG_DATA","MYSQLND_UH_MYSQLND_COM_TABLE_DUMP","MYSQLND_UH_MYSQLND_COM_TIME","MYSQLND_UH_MYSQLND_OPTION_INIT_COMMAND","MYSQLND_UH_MYSQLND_OPTION_OPT_COMPRESS","MYSQLND_UH_MYSQLND_OPTION_OPT_CONNECT_TIMEOUT","MYSQLND_UH_MYSQLND_OPTION_OPT_NAMED_PIPE","MYSQLND_UH_MYSQLND_OPT_AUTH_PROTOCOL","MYSQLND_UH_MYSQLND_OPT_GUESS_CONNECTION","MYSQLND_UH_MYSQLND_OPT_INT_AND_FLOAT_NATIVE","MYSQLND_UH_MYSQLND_OPT_LOCAL_INFILE","MYSQLND_UH_MYSQLND_OPT_MAX_ALLOWED_PACKET","MYSQLND_UH_MYSQLND_OPT_NET_CMD_BUFFER_SIZE","MYSQLND_UH_MYSQLND_OPT_NET_READ_BUFFER_SIZE","MYSQLND_UH_MYSQLND_OPT_PROTOCOL","MYSQLND_UH_MYSQLND_OPT_READ_TIMEOUT","MYSQLND_UH_MYSQLND_OPT_RECONNECT","MYSQLND_UH_MYSQLND_OPT_SSL_CA","MYSQLND_UH_MYSQLND_OPT_SSL_CAPATH","MYSQLND_UH_MYSQLND_OPT_SSL_CERT","MYSQLND_UH_MYSQLND_OPT_SSL_CIPHER","MYSQLND_UH_MYSQLND_OPT_SSL_KEY","MYSQLND_UH_MYSQLND_OPT_SSL_PASSPHRASE","MYSQLND_UH_MYSQLND_OPT_SSL_VERIFY_SERVER_CERT","MYSQLND_UH_MYSQLND_OPT_USE_EMBEDDED_CONNECTION","MYSQLND_UH_MYSQLND_OPT_USE_REMOTE_CONNECTION","MYSQLND_UH_MYSQLND_OPT_USE_RESULT","MYSQLND_UH_MYSQLND_OPT_WRITE_TIMEOUT","MYSQLND_UH_MYSQLND_PREPARE_RESP_PACKET","MYSQLND_UH_MYSQLND_PROT_AUTH_PACKET","MYSQLND_UH_MYSQLND_PROT_CMD_PACKET","MYSQLND_UH_MYSQLND_PROT_EOF_PACKET","MYSQLND_UH_MYSQLND_PROT_GREET_PACKET","MYSQLND_UH_MYSQLND_PROT_LAST","MYSQLND_UH_MYSQLND_PROT_OK_PACKET","MYSQLND_UH_MYSQLND_PROT_ROW_PACKET","MYSQLND_UH_MYSQLND_PROT_RSET_FLD_PACKET","MYSQLND_UH_MYSQLND_PROT_RSET_HEADER_PACKET","MYSQLND_UH_MYSQLND_PROT_STATS_PACKET","MYSQLND_UH_MYSQLND_READ_DEFAULT_FILE","MYSQLND_UH_MYSQLND_READ_DEFAULT_GROUP","MYSQLND_UH_MYSQLND_REPORT_DATA_TRUNCATION","MYSQLND_UH_MYSQLND_SECURE_AUTH","MYSQLND_UH_MYSQLND_SET_CHARSET_DIR","MYSQLND_UH_MYSQLND_SET_CHARSET_NAME","MYSQLND_UH_MYSQLND_SET_CLIENT_IP","MYSQLND_UH_MYSQLND_SHARED_MEMORY_BASE_NAME","MYSQLND_UH_SERVER_OPTION_DEFAULT_AUTH","MYSQLND_UH_SERVER_OPTION_MULTI_STATEMENTS_OFF","MYSQLND_UH_SERVER_OPTION_MULTI_STATEMENTS_ON","MYSQLND_UH_SERVER_OPTION_PLUGIN_DIR","MYSQLND_UH_SERVER_OPTION_SET_CLIENT_IP","MYSQLND_UH_VERSION","MYSQLND_UH_VERSION_ID","M_DONE","M_ERROR","M_FAIL","M_PENDING","M_SUCCESS","Memcached::DISTRIBUTION_CONSISTENT","Memcached::DISTRIBUTION_MODULA","Memcached::GET_PRESERVE_ORDER","Memcached::HASH_CRC","Memcached::HASH_DEFAULT","Memcached::HASH_FNV1A_32","Memcached::HASH_FNV1A_64","Memcached::HASH_FNV1_32","Memcached::HASH_FNV1_64","Memcached::HASH_HSIEH","Memcached::HASH_MD5","Memcached::HASH_MURMUR","Memcached::HAVE_IGBINARY","Memcached::HAVE_JSON","Memcached::OPT_BINARY_PROTOCOL","Memcached::OPT_BUFFER_WRITES","Memcached::OPT_CACHE_LOOKUPS","Memcached::OPT_COMPRESSION","Memcached::OPT_CONNECT_TIMEOUT","Memcached::OPT_DISTRIBUTION","Memcached::OPT_HASH","Memcached::OPT_LIBKETAMA_COMPATIBLE","Memcached::OPT_NO_BLOCK","Memcached::OPT_POLL_TIMEOUT","Memcached::OPT_PREFIX_KEY","Memcached::OPT_RECV_TIMEOUT","Memcached::OPT_RETRY_TIMEOUT","Memcached::OPT_SEND_TIMEOUT","Memcached::OPT_SERIALIZER","Memcached::OPT_SERVER_FAILURE_LIMIT","Memcached::OPT_SOCKET_RECV_SIZE","Memcached::OPT_SOCKET_SEND_SIZE","Memcached::OPT_TCP_NODELAY","Memcached::RES_BAD_KEY_PROVIDED","Memcached::RES_BUFFERED","Memcached::RES_CLIENT_ERROR","Memcached::RES_CONNECTION_SOCKET_CREATE_FAILURE","Memcached::RES_DATA_EXISTS","Memcached::RES_END","Memcached::RES_ERRNO","Memcached::RES_FAILURE","Memcached::RES_HOST_LOOKUP_FAILURE","Memcached::RES_NOTFOUND","Memcached::RES_NOTSTORED","Memcached::RES_NO_SERVERS","Memcached::RES_PARTIAL_READ","Memcached::RES_PAYLOAD_FAILURE","Memcached::RES_PROTOCOL_ERROR","Memcached::RES_SERVER_ERROR","Memcached::RES_SOME_ERRORS","Memcached::RES_SUCCESS","Memcached::RES_TIMEOUT","Memcached::RES_UNKNOWN_READ_FAILURE","Memcached::RES_WRITE_FAILURE","Memcached::SERIALIZER_IGBINARY","Memcached::SERIALIZER_JSON","Memcached::SERIALIZER_PHP","MenuEnter","MenuExit","NIL","NORM_IGNORECASE","NORM_IGNOREKANATYPE","NORM_IGNOREKASHIDA","NORM_IGNORENONSPACE","NORM_IGNORESYMBOLS","NORM_IGNOREWIDTH","OAUTH_AUTH_TYPE_AUTHORIZATION","OAUTH_AUTH_TYPE_FORM","OAUTH_AUTH_TYPE_NONE","OAUTH_AUTH_TYPE_URI","OAUTH_BAD_NONCE","OAUTH_BAD_TIMESTAMP","OAUTH_CONSUMER_KEY_REFUSED","OAUTH_CONSUMER_KEY_UNKNOWN","OAUTH_HTTP_METHOD_DELETE","OAUTH_HTTP_METHOD_GET","OAUTH_HTTP_METHOD_HEAD","OAUTH_HTTP_METHOD_POST","OAUTH_HTTP_METHOD_PUT","OAUTH_INVALID_SIGNATURE","OAUTH_OK","OAUTH_PARAMETER_ABSENT","OAUTH_REQENGINE_CURL","OAUTH_REQENGINE_STREAMS","OAUTH_SIGNATURE_METHOD_REJECTED","OAUTH_SIG_METHOD_HMACSHA1","OAUTH_SIG_METHOD_HMACSHA256","OAUTH_SIG_METHOD_RSASHA1","OAUTH_TOKEN_EXPIRED","OAUTH_TOKEN_REJECTED","OAUTH_TOKEN_REVOKED","OAUTH_TOKEN_USED","OAUTH_VERIFIER_INVALID","ODBC_BINMODE_CONVERT","ODBC_BINMODE_PASSTHRU","ODBC_BINMODE_RETURN","ODBC_TYPE","OP_ANONYMOUS","OP_DEBUG","OP_EXPUNGE","OP_HALFOPEN","OP_PROTOTYPE","OP_READONLY","OP_SECURE","OP_SHORTCACHE","OP_SILENT","O_APPEND","O_ASYNC","O_CREAT","O_EXCL","O_NDELAY","O_NOCTTY","O_NONBLOCK","O_RDONLY","O_RDWR","O_SYNC","O_TRUNC","O_WRONLY","OutDowntoIdle","OutDowntoOverDown","OverDowntoIdle","OverDowntoOutDown","OverUptoIdle","OverUptoOverDown","PARSEKIT_EXTENDED_VALUE","PARSEKIT_IS_CONST","PARSEKIT_IS_TMP_VAR","PARSEKIT_IS_UNUSED","PARSEKIT_IS_VAR","PARSEKIT_QUIET","PARSEKIT_RESULT_CONST","PARSEKIT_RESULT_EA_TYPE","PARSEKIT_RESULT_JMP_ADDR","PARSEKIT_RESULT_OPARRAY","PARSEKIT_RESULT_OPLINE","PARSEKIT_RESULT_VAR","PARSEKIT_SIMPLE","PARSEKIT_USAGE_UNKNOWN","PARSEKIT_ZEND_ADD","PARSEKIT_ZEND_ADD_ARRAY_ELEMENT","PARSEKIT_ZEND_ADD_CHAR","PARSEKIT_ZEND_ADD_INTERFACE","PARSEKIT_ZEND_ADD_STRING","PARSEKIT_ZEND_ADD_VAR","PARSEKIT_ZEND_ASSIGN","PARSEKIT_ZEND_ASSIGN_ADD","PARSEKIT_ZEND_ASSIGN_BW_AND","PARSEKIT_ZEND_ASSIGN_BW_OR","PARSEKIT_ZEND_ASSIGN_BW_XOR","PARSEKIT_ZEND_ASSIGN_CONCAT","PARSEKIT_ZEND_ASSIGN_DIM","PARSEKIT_ZEND_ASSIGN_DIV","PARSEKIT_ZEND_ASSIGN_MOD","PARSEKIT_ZEND_ASSIGN_MUL","PARSEKIT_ZEND_ASSIGN_OBJ","PARSEKIT_ZEND_ASSIGN_REF","PARSEKIT_ZEND_ASSIGN_SL","PARSEKIT_ZEND_ASSIGN_SR","PARSEKIT_ZEND_ASSIGN_SUB","PARSEKIT_ZEND_BEGIN_SILENCE","PARSEKIT_ZEND_BOOL","PARSEKIT_ZEND_BOOL_NOT","PARSEKIT_ZEND_BOOL_XOR","PARSEKIT_ZEND_BRK","PARSEKIT_ZEND_BW_AND","PARSEKIT_ZEND_BW_NOT","PARSEKIT_ZEND_BW_OR","PARSEKIT_ZEND_BW_XOR","PARSEKIT_ZEND_CASE","PARSEKIT_ZEND_CAST","PARSEKIT_ZEND_CATCH","PARSEKIT_ZEND_CLONE","PARSEKIT_ZEND_CONCAT","PARSEKIT_ZEND_CONT","PARSEKIT_ZEND_DECLARE_CLASS","PARSEKIT_ZEND_DECLARE_FUNCTION","PARSEKIT_ZEND_DECLARE_INHERITED_CLASS","PARSEKIT_ZEND_DIV","PARSEKIT_ZEND_DO_FCALL","PARSEKIT_ZEND_DO_FCALL_BY_NAME","PARSEKIT_ZEND_ECHO","PARSEKIT_ZEND_END_SILENCE","PARSEKIT_ZEND_EVAL_CODE","PARSEKIT_ZEND_EXIT","PARSEKIT_ZEND_EXT_FCALL_BEGIN","PARSEKIT_ZEND_EXT_FCALL_END","PARSEKIT_ZEND_EXT_NOP","PARSEKIT_ZEND_EXT_STMT","PARSEKIT_ZEND_FETCH_CLASS","PARSEKIT_ZEND_FETCH_CONSTANT","PARSEKIT_ZEND_FETCH_DIM_FUNC_ARG","PARSEKIT_ZEND_FETCH_DIM_IS","PARSEKIT_ZEND_FETCH_DIM_R","PARSEKIT_ZEND_FETCH_DIM_RW","PARSEKIT_ZEND_FETCH_DIM_TMP_VAR","PARSEKIT_ZEND_FETCH_DIM_UNSET","PARSEKIT_ZEND_FETCH_DIM_W","PARSEKIT_ZEND_FETCH_FUNC_ARG","PARSEKIT_ZEND_FETCH_IS","PARSEKIT_ZEND_FETCH_OBJ_FUNC_ARG","PARSEKIT_ZEND_FETCH_OBJ_IS","PARSEKIT_ZEND_FETCH_OBJ_R","PARSEKIT_ZEND_FETCH_OBJ_RW","PARSEKIT_ZEND_FETCH_OBJ_UNSET","PARSEKIT_ZEND_FETCH_OBJ_W","PARSEKIT_ZEND_FETCH_R","PARSEKIT_ZEND_FETCH_RW","PARSEKIT_ZEND_FETCH_UNSET","PARSEKIT_ZEND_FETCH_W","PARSEKIT_ZEND_FE_FETCH","PARSEKIT_ZEND_FE_RESET","PARSEKIT_ZEND_FREE","PARSEKIT_ZEND_HANDLE_EXCEPTION","PARSEKIT_ZEND_IMPORT_CLASS","PARSEKIT_ZEND_IMPORT_CONST","PARSEKIT_ZEND_IMPORT_FUNCTION","PARSEKIT_ZEND_INCLUDE_OR_EVAL","PARSEKIT_ZEND_INIT_ARRAY","PARSEKIT_ZEND_INIT_CTOR_CALL","PARSEKIT_ZEND_INIT_FCALL_BY_NAME","PARSEKIT_ZEND_INIT_METHOD_CALL","PARSEKIT_ZEND_INIT_STATIC_METHOD_CALL","PARSEKIT_ZEND_INIT_STRING","PARSEKIT_ZEND_INSTANCEOF","PARSEKIT_ZEND_INTERNAL_CLASS","PARSEKIT_ZEND_INTERNAL_FUNCTION","PARSEKIT_ZEND_ISSET_ISEMPTY","PARSEKIT_ZEND_ISSET_ISEMPTY_DIM_OBJ","PARSEKIT_ZEND_ISSET_ISEMPTY_PROP_OBJ","PARSEKIT_ZEND_ISSET_ISEMPTY_VAR","PARSEKIT_ZEND_IS_EQUAL","PARSEKIT_ZEND_IS_IDENTICAL","PARSEKIT_ZEND_IS_NOT_EQUAL","PARSEKIT_ZEND_IS_NOT_IDENTICAL","PARSEKIT_ZEND_IS_SMALLER","PARSEKIT_ZEND_IS_SMALLER_OR_EQUAL","PARSEKIT_ZEND_JMP","PARSEKIT_ZEND_JMPNZ","PARSEKIT_ZEND_JMPNZ_EX","PARSEKIT_ZEND_JMPZ","PARSEKIT_ZEND_JMPZNZ","PARSEKIT_ZEND_JMPZ_EX","PARSEKIT_ZEND_JMP_NO_CTOR","PARSEKIT_ZEND_MOD","PARSEKIT_ZEND_MUL","PARSEKIT_ZEND_NEW","PARSEKIT_ZEND_NOP","PARSEKIT_ZEND_OP_DATA","PARSEKIT_ZEND_OVERLOADED_FUNCTION","PARSEKIT_ZEND_OVERLOADED_FUNCTION_TEMPORARY","PARSEKIT_ZEND_POST_DEC","PARSEKIT_ZEND_POST_DEC_OBJ","PARSEKIT_ZEND_POST_INC","PARSEKIT_ZEND_POST_INC_OBJ","PARSEKIT_ZEND_PRE_DEC","PARSEKIT_ZEND_PRE_DEC_OBJ","PARSEKIT_ZEND_PRE_INC","PARSEKIT_ZEND_PRE_INC_OBJ","PARSEKIT_ZEND_PRINT","PARSEKIT_ZEND_QM_ASSIGN","PARSEKIT_ZEND_RAISE_ABSTRACT_ERROR","PARSEKIT_ZEND_RECV","PARSEKIT_ZEND_RECV_INIT","PARSEKIT_ZEND_RETURN","PARSEKIT_ZEND_SEND_REF","PARSEKIT_ZEND_SEND_VAL","PARSEKIT_ZEND_SEND_VAR","PARSEKIT_ZEND_SEND_VAR_NO_REF","PARSEKIT_ZEND_SL","PARSEKIT_ZEND_SR","PARSEKIT_ZEND_SUB","PARSEKIT_ZEND_SWITCH_FREE","PARSEKIT_ZEND_THROW","PARSEKIT_ZEND_TICKS","PARSEKIT_ZEND_UNSET_DIM_OBJ","PARSEKIT_ZEND_UNSET_VAR","PARSEKIT_ZEND_USER_CLASS","PARSEKIT_ZEND_USER_FUNCTION","PARSEKIT_ZEND_VERIFY_ABSTRACT_CLASS","PASSWORD_BCRYPT","PASSWORD_DEFAULT","PATHINFO_BASENAME","PATHINFO_DIRNAME","PATHINFO_EXTENSION","PATHINFO_FILENAME","PATH_SEPARATOR","PDO::ATTR_AUTOCOMMIT","PDO::ATTR_CASE","PDO::ATTR_CLIENT_VERSION","PDO::ATTR_CONNECTION_STATUS","PDO::ATTR_CURSOR","PDO::ATTR_CURSOR_NAME","PDO::ATTR_DEFAULT_FETCH_MODE","PDO::ATTR_DRIVER_NAME","PDO::ATTR_EMULATE_PREPARES","PDO::ATTR_ERRMODE","PDO::ATTR_FETCH_CATALOG_NAMES","PDO::ATTR_FETCH_TABLE_NAMES","PDO::ATTR_MAX_COLUMN_LEN","PDO::ATTR_ORACLE_NULLS","PDO::ATTR_PERSISTENT","PDO::ATTR_PREFETCH","PDO::ATTR_SERVER_INFO","PDO::ATTR_SERVER_VERSION","PDO::ATTR_STATEMENT_CLASS","PDO::ATTR_STRINGIFY_FETCHES","PDO::ATTR_TIMEOUT","PDO::CASE_LOWER","PDO::CASE_NATURAL","PDO::CASE_UPPER","PDO::CURSOR_FWDONLY","PDO::CURSOR_SCROLL","PDO::ERRMODE_EXCEPTION","PDO::ERRMODE_SILENT","PDO::ERRMODE_WARNING","PDO::ERR_NONE","PDO::FETCH_ASSOC","PDO::FETCH_BOTH","PDO::FETCH_BOUND","PDO::FETCH_CLASS","PDO::FETCH_CLASSTYPE","PDO::FETCH_COLUMN","PDO::FETCH_FUNC","PDO::FETCH_GROUP","PDO::FETCH_INTO","PDO::FETCH_KEY_PAIR","PDO::FETCH_LAZY","PDO::FETCH_NAMED","PDO::FETCH_NUM","PDO::FETCH_OBJ","PDO::FETCH_ORI_ABS","PDO::FETCH_ORI_FIRST","PDO::FETCH_ORI_LAST","PDO::FETCH_ORI_NEXT","PDO::FETCH_ORI_PRIOR","PDO::FETCH_ORI_REL","PDO::FETCH_PROPS_LATE","PDO::FETCH_SERIALIZE","PDO::FETCH_UNIQUE","PDO::NULL_EMPTY_STRING","PDO::NULL_NATURAL","PDO::NULL_TO_STRING","PDO::PARAM_BOOL","PDO::PARAM_EVT_ALLOC","PDO::PARAM_EVT_EXEC_POST","PDO::PARAM_EVT_EXEC_PRE","PDO::PARAM_EVT_FETCH_POST","PDO::PARAM_EVT_FETCH_PRE","PDO::PARAM_EVT_FREE","PDO::PARAM_EVT_NORMALIZE","PDO::PARAM_INPUT_OUTPUT","PDO::PARAM_INT","PDO::PARAM_LOB","PDO::PARAM_NULL","PDO::PARAM_STMT","PDO::PARAM_STR","PGSQL_ASSOC","PGSQL_BAD_RESPONSE","PGSQL_BOTH","PGSQL_COMMAND_OK","PGSQL_CONNECTION_BAD","PGSQL_CONNECTION_OK","PGSQL_CONNECT_FORCE_NEW","PGSQL_CONV_FORCE_NULL","PGSQL_CONV_IGNORE_DEFAULT","PGSQL_CONV_IGNORE_NOT_NULL","PGSQL_COPY_IN","PGSQL_COPY_OUT","PGSQL_DIAG_CONTEXT","PGSQL_DIAG_INTERNAL_POSITION","PGSQL_DIAG_INTERNAL_QUERY","PGSQL_DIAG_MESSAGE_DETAIL","PGSQL_DIAG_MESSAGE_HINT","PGSQL_DIAG_MESSAGE_PRIMARY","PGSQL_DIAG_SEVERITY","PGSQL_DIAG_SOURCE_FILE","PGSQL_DIAG_SOURCE_FUNCTION","PGSQL_DIAG_SOURCE_LINE","PGSQL_DIAG_SQLSTATE","PGSQL_DIAG_STATEMENT_POSITION","PGSQL_EMPTY_QUERY","PGSQL_ERRORS_DEFAULT","PGSQL_ERRORS_TERSE","PGSQL_ERRORS_VERBOSE","PGSQL_FATAL_ERROR","PGSQL_NONFATAL_ERROR","PGSQL_NUM","PGSQL_SEEK_CUR","PGSQL_SEEK_END","PGSQL_SEEK_SET","PGSQL_STATUS_LONG","PGSQL_STATUS_STRING","PGSQL_TRANSACTION_ACTIVE","PGSQL_TRANSACTION_IDLE","PGSQL_TRANSACTION_INERROR","PGSQL_TRANSACTION_INTRANS","PGSQL_TRANSACTION_UNKNOWN","PGSQL_TUPLES_OK","PHP_BINARY_READ","PHP_NORMAL_READ","PHP_OUTPUT_HANDLER_CLEAN","PHP_OUTPUT_HANDLER_CONT","PHP_OUTPUT_HANDLER_END","PHP_OUTPUT_HANDLER_FINAL","PHP_OUTPUT_HANDLER_FLUSH","PHP_OUTPUT_HANDLER_START","PHP_OUTPUT_HANDLER_WRITE","PHP_QUERY_RFC1738","PHP_QUERY_RFC3986","PHP_SESSION_ACTIVE","PHP_SESSION_DISABLED","PHP_SESSION_NONE","PHP_SVN_AUTH_PARAM_IGNORE_SSL_VERIFY_ERRORS","PHP_URL_FRAGMENT","PHP_URL_HOST","PHP_URL_PASS","PHP_URL_PATH","PHP_URL_PORT","PHP_URL_QUERY","PHP_URL_SCHEME","PHP_URL_USER","PNG_ALL_FILTERS","PNG_FILTER_AVG","PNG_FILTER_NONE","PNG_FILTER_PAETH","PNG_FILTER_SUB","PNG_FILTER_UP","PNG_NO_FILTER","POLL_ERR","POLL_HUP","POLL_IN","POLL_MSG","POLL_OUT","POLL_PRI","POSIX_F_OK","POSIX_R_OK","POSIX_S_IFBLK","POSIX_S_IFCHR","POSIX_S_IFIFO","POSIX_S_IFREG","POSIX_S_IFSOCK","POSIX_W_OK","POSIX_X_OK","PRINTER_BACKGROUND_COLOR","PRINTER_BRUSH_CROSS","PRINTER_BRUSH_CUSTOM","PRINTER_BRUSH_DIAGCROSS","PRINTER_BRUSH_DIAGONAL","PRINTER_BRUSH_FDIAGONAL","PRINTER_BRUSH_HORIZONTAL","PRINTER_BRUSH_SOLID","PRINTER_BRUSH_VERTICAL","PRINTER_COPIES","PRINTER_DEVICENAME","PRINTER_DRIVERVERSION","PRINTER_ENUM_CONNECTIONS","PRINTER_ENUM_DEFAULT","PRINTER_ENUM_LOCAL","PRINTER_ENUM_NAME","PRINTER_ENUM_NETWORK","PRINTER_ENUM_REMOTE","PRINTER_ENUM_SHARED","PRINTER_FORMAT_A3","PRINTER_FORMAT_A4","PRINTER_FORMAT_A5","PRINTER_FORMAT_B4","PRINTER_FORMAT_B5","PRINTER_FORMAT_CUSTOM","PRINTER_FORMAT_FOLIO","PRINTER_FORMAT_LEGAL","PRINTER_FORMAT_LETTER","PRINTER_FW_BOLD","PRINTER_FW_HEAVY","PRINTER_FW_LIGHT","PRINTER_FW_MEDIUM","PRINTER_FW_NORMAL","PRINTER_FW_THIN","PRINTER_FW_ULTRABOLD","PRINTER_FW_ULTRALIGHT","PRINTER_MODE","PRINTER_ORIENTATION","PRINTER_ORIENTATION_LANDSCAPE","PRINTER_ORIENTATION_PORTRAIT","PRINTER_OUTPUT_FILE","PRINTER_PAPER_FORMAT","PRINTER_PAPER_LENGTH","PRINTER_PAPER_WIDTH","PRINTER_PEN_DASH","PRINTER_PEN_DASHDOT","PRINTER_PEN_DASHDOTDOT","PRINTER_PEN_DOT","PRINTER_PEN_INVISIBLE","PRINTER_PEN_SOLID","PRINTER_RESOLUTION_X","PRINTER_RESOLUTION_Y","PRINTER_SCALE","PRINTER_TA_BASELINE","PRINTER_TA_BOTTOM","PRINTER_TA_CENTER","PRINTER_TA_LEFT","PRINTER_TA_RIGHT","PRINTER_TA_TOP","PRINTER_TEXT_ALIGN","PRINTER_TEXT_COLOR","PRINTER_TITLE","PSPELL_BAD_SPELLERS","PSPELL_FAST","PSPELL_NORMAL","PSPELL_RUN_TOGETHER","PTHREADS_INHERIT_ALL","PTHREADS_INHERIT_CLASSES","PTHREADS_INHERIT_CONSTANTS","PTHREADS_INHERIT_FUNCTIONS","PTHREADS_INHERIT_INCLUDES","PTHREADS_INHERIT_INI","PTHREADS_INHERIT_NONE","RAR_HOST_BEOS","RAR_HOST_MSDOS","RAR_HOST_OS2","RAR_HOST_UNIX","RAR_HOST_WIN32","RPMREADER_ARCH","RPMREADER_ARCHIVESIZE","RPMREADER_BASENAMES","RPMREADER_BUILDARCHS","RPMREADER_BUILDHOST","RPMREADER_BUILDTIME","RPMREADER_CACHECTIME","RPMREADER_CACHEPKGMTIME","RPMREADER_CACHEPKGPATH","RPMREADER_CACHEPKGSIZE","RPMREADER_CHANGELOGNAME","RPMREADER_CHANGELOGTEXT","RPMREADER_CHANGELOGTIME","RPMREADER_CLASSDICT","RPMREADER_CONFLICTFLAGS","RPMREADER_CONFLICTNAME","RPMREADER_CONFLICTVERSION","RPMREADER_COOKIE","RPMREADER_COPYRIGHT","RPMREADER_DEPENDSDICT","RPMREADER_DESCRIPTION","RPMREADER_DIRINDEXES","RPMREADER_DIRNAMES","RPMREADER_DISTRIBUTION","RPMREADER_DISTURL","RPMREADER_EPOCH","RPMREADER_EXCLUDEARCH","RPMREADER_EXCLUDEOS","RPMREADER_EXCLUSIVEARCH","RPMREADER_EXCLUSIVEOS","RPMREADER_FILECLASS","RPMREADER_FILECOLORS","RPMREADER_FILECONTEXTS","RPMREADER_FILEDEPENDSN","RPMREADER_FILEDEPENDSX","RPMREADER_FILEDEVICES","RPMREADER_FILEFLAGS","RPMREADER_FILEGROUPNAME","RPMREADER_FILEINODES","RPMREADER_FILELANGS","RPMREADER_FILELINKTOS","RPMREADER_FILEMD5S","RPMREADER_FILEMODES","RPMREADER_FILEMTIMES","RPMREADER_FILERDEVS","RPMREADER_FILESIZES","RPMREADER_FILESTATES","RPMREADER_FILEUSERNAME","RPMREADER_FILEVERIFYFLAGS","RPMREADER_FSCONTEXTS","RPMREADER_GIF","RPMREADER_GROUP","RPMREADER_ICON","RPMREADER_INSTALLCOLOR","RPMREADER_INSTALLTID","RPMREADER_INSTALLTIME","RPMREADER_INSTPREFIXES","RPMREADER_LICENSE","RPMREADER_MAXIMUM","RPMREADER_MINIMUM","RPMREADER_NAME","RPMREADER_OBSOLETEFLAGS","RPMREADER_OBSOLETENAME","RPMREADER_OBSOLETES","RPMREADER_OBSOLETEVERSION","RPMREADER_OLDFILENAMES","RPMREADER_OPTFLAGS","RPMREADER_OS","RPMREADER_PACKAGER","RPMREADER_PATCH","RPMREADER_PATCHESFLAGS","RPMREADER_PATCHESNAME","RPMREADER_PATCHESVERSION","RPMREADER_PAYLOADCOMPRESSOR","RPMREADER_PAYLOADFLAGS","RPMREADER_PAYLOADFORMAT","RPMREADER_PLATFORM","RPMREADER_POLICIES","RPMREADER_POSTIN","RPMREADER_POSTINPROG","RPMREADER_POSTUN","RPMREADER_POSTUNPROG","RPMREADER_PREFIXES","RPMREADER_PREIN","RPMREADER_PREINPROG","RPMREADER_PREUN","RPMREADER_PREUNPROG","RPMREADER_PROVIDEFLAGS","RPMREADER_PROVIDENAME","RPMREADER_PROVIDES","RPMREADER_PROVIDEVERSION","RPMREADER_RECONTEXTS","RPMREADER_RELEASE","RPMREADER_REMOVETID","RPMREADER_REQUIREFLAGS","RPMREADER_REQUIRENAME","RPMREADER_REQUIREVERSION","RPMREADER_RHNPLATFORM","RPMREADER_RPMVERSION","RPMREADER_SERIAL","RPMREADER_SIZE","RPMREADER_SOURCE","RPMREADER_SOURCEPKGID","RPMREADER_SOURCERPM","RPMREADER_SUMMARY","RPMREADER_TRIGGERFLAGS","RPMREADER_TRIGGERINDEX","RPMREADER_TRIGGERNAME","RPMREADER_TRIGGERSCRIPTPROG","RPMREADER_TRIGGERSCRIPTS","RPMREADER_TRIGGERVERSION","RPMREADER_URL","RPMREADER_VENDOR","RPMREADER_VERIFYSCRIPT","RPMREADER_VERIFYSCRIPTPROG","RPMREADER_VERSION","RPMREADER_XPM","RUNKIT_ACC_PRIVATE","RUNKIT_ACC_PROTECTED","RUNKIT_ACC_PUBLIC","RUNKIT_IMPORT_CLASSES","RUNKIT_IMPORT_CLASS_CONSTS","RUNKIT_IMPORT_CLASS_METHODS","RUNKIT_IMPORT_CLASS_PROPS","RUNKIT_IMPORT_FUNCTIONS","RUNKIT_IMPORT_OVERRIDE","RUNKIT_VERSION","SAM_AUTO","SAM_BOOLEAN","SAM_BUS","SAM_BYTE","SAM_BYTES","SAM_CORRELID","SAM_DELIVERYMODE","SAM_DOUBLE","SAM_ENDPOINTS","SAM_FLOAT","SAM_HOST","SAM_INT","SAM_LONG","SAM_MANUAL","SAM_MESSAGEID","SAM_MQTT","SAM_MQTT_CLEANSTART","SAM_NON_PERSISTENT","SAM_PASSWORD","SAM_PERSISTENT","SAM_PORT","SAM_PRIORITY","SAM_REPLY_TO","SAM_RTT","SAM_STRING","SAM_TARGETCHAIN","SAM_TEXT","SAM_TIMETOLIVE","SAM_TRANSACTIONS","SAM_USERID","SAM_WAIT","SAM_WMQ","SAM_WMQ_BINDINGS","SAM_WMQ_CLIENT","SAM_WMQ_TARGET_CLIENT","SAM_WPM","SA_ALL","SA_MESSAGES","SA_RECENT","SA_UIDNEXT","SA_UIDVALIDITY","SA_UNSEEN","SCANDIR_SORT_ASCENDING","SCANDIR_SORT_DESCENDING","SCANDIR_SORT_NONE","SDO_DAS_ChangeSummary::ADDITION","SDO_DAS_ChangeSummary::DELETION","SDO_DAS_ChangeSummary::MODIFICATION","SDO_DAS_ChangeSummary::NONE","SEARCHD_ERROR","SEARCHD_OK","SEARCHD_RETRY","SEARCHD_WARNING","SEEK_CUR","SEEK_END","SEEK_SET","SEGV_ACCERR","SEGV_MAPERR","SE_FREE","SE_NOPREFETCH","SE_UID","SID","SIGABRT","SIGALRM","SIGBABY","SIGBUS","SIGCHLD","SIGCLD","SIGCONT","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGPIPE","SIGPOLL","SIGPROF","SIGPWR","SIGQUIT","SIGSEGV","SIGSTKFLT","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SI_ASYNCIO","SI_KERNEL","SI_MSGGQ","SI_NOINFO","SI_QUEUE","SI_SIGIO","SI_TIMER","SI_TKILL","SI_USER","SNMP_BIT_STR","SNMP_COUNTER","SNMP_COUNTER64","SNMP_INTEGER","SNMP_IPADDRESS","SNMP_NULL","SNMP_OBJECT_ID","SNMP_OCTET_STR","SNMP_OID_OUTPUT_FULL","SNMP_OID_OUTPUT_MODULE","SNMP_OID_OUTPUT_NONE","SNMP_OID_OUTPUT_NUMERIC","SNMP_OID_OUTPUT_SUFFIX","SNMP_OID_OUTPUT_UCD","SNMP_OPAQUE","SNMP_TIMETICKS","SNMP_UINTEGER","SNMP_UNSIGNED","SNMP_VALUE_LIBRARY","SNMP_VALUE_OBJECT","SNMP_VALUE_PLAIN","SOCKET_ADDRINUSE","SOCKET_E2BIG","SOCKET_EACCES","SOCKET_EADDRINUSE","SOCKET_EADDRNOTAVAIL","SOCKET_EADV","SOCKET_EAFNOSUPPORT","SOCKET_EAGAIN","SOCKET_EALREADY","SOCKET_EBADE","SOCKET_EBADF","SOCKET_EBADFD","SOCKET_EBADMSG","SOCKET_EBADR","SOCKET_EBADRQC","SOCKET_EBADSLT","SOCKET_EBUSY","SOCKET_ECHRNG","SOCKET_ECOMM","SOCKET_ECONNABORTED","SOCKET_ECONNREFUSED","SOCKET_ECONNRESET","SOCKET_EDESTADDRREQ","SOCKET_EDISCON","SOCKET_EDQUOT","SOCKET_EDUOT","SOCKET_EEXIST","SOCKET_EFAULT","SOCKET_EHOSTDOWN","SOCKET_EHOSTUNREACH","SOCKET_EIDRM","SOCKET_EINPROGRESS","SOCKET_EINTR","SOCKET_EINVAL","SOCKET_EIO","SOCKET_EISCONN","SOCKET_EISDIR","SOCKET_EISNAM","SOCKET_EL2HLT","SOCKET_EL2NSYNC","SOCKET_EL3HLT","SOCKET_EL3RST","SOCKET_ELNRNG","SOCKET_ELOOP","SOCKET_EMEDIUMTYPE","SOCKET_EMFILE","SOCKET_EMLINK","SOCKET_EMSGSIZE","SOCKET_EMULTIHOP","SOCKET_ENAMETOOLONG","SOCKET_ENETDOWN","SOCKET_ENETRESET","SOCKET_ENETUNREACH","SOCKET_ENFILE","SOCKET_ENOANO","SOCKET_ENOBUFS","SOCKET_ENOCSI","SOCKET_ENODATA","SOCKET_ENODEV","SOCKET_ENOENT","SOCKET_ENOLCK","SOCKET_ENOLINK","SOCKET_ENOMEDIUM","SOCKET_ENOMEM","SOCKET_ENOMSG","SOCKET_ENONET","SOCKET_ENOPROTOOPT","SOCKET_ENOSPC","SOCKET_ENOSR","SOCKET_ENOSTR","SOCKET_ENOSYS","SOCKET_ENOTBLK","SOCKET_ENOTCONN","SOCKET_ENOTDIR","SOCKET_ENOTEMPTY","SOCKET_ENOTSOCK","SOCKET_ENOTTY","SOCKET_ENOTUNIQ","SOCKET_ENXIO","SOCKET_EOPNOTSUPP","SOCKET_EPERM","SOCKET_EPFNOSUPPORT","SOCKET_EPIPE","SOCKET_EPROCLIM","SOCKET_EPROTO","SOCKET_EPROTONOSUPPORT","SOCKET_EPROTOOPT","SOCKET_EPROTOTYPE","SOCKET_EREMCHG","SOCKET_EREMOTE","SOCKET_EREMOTEIO","SOCKET_ERESTART","SOCKET_EROFS","SOCKET_ESHUTDOWN","SOCKET_ESOCKTNOSUPPORT","SOCKET_ESPIPE","SOCKET_ESRMNT","SOCKET_ESTALE","SOCKET_ESTRPIPE","SOCKET_ETIME","SOCKET_ETIMEDOUT","SOCKET_ETOOMANYREFS","SOCKET_ETOOMYREFS","SOCKET_EUNATCH","SOCKET_EUSERS","SOCKET_EWOULDBLOCK","SOCKET_EXDEV","SOCKET_EXFULL","SOCKET_HOST_NOT_FOUND","SOCKET_NOTINITIALISED","SOCKET_NO_ADDRESS","SOCKET_NO_DATA","SOCKET_NO_RECOVERY","SOCKET_SYSNOTREADY","SOCKET_TRY_AGAIN","SOCKET_VERNOTSUPPORTED","SOCK_DGRAM","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOLR_EXTENSION_VERSION","SOLR_MAJOR_VERSION","SOLR_MINOR_VERSION","SOLR_PATCH_VERSION","SOL_SOCKET","SOL_TCP","SOL_UDP","SORTARRIVAL","SORTCC","SORTDATE","SORTFROM","SORTSIZE","SORTSUBJECT","SORTTO","SORT_ASC","SORT_DESC","SORT_FLAG_CASE","SORT_LOCALE_STRING","SORT_NATURAL","SORT_NUMERIC","SORT_REGULAR","SORT_STRING","SO_BROADCAST","SO_DEBUG","SO_DONTROUTE","SO_ERROR","SO_FREE","SO_KEEPALIVE","SO_LINGER","SO_NOSERVER","SO_OOBINLINE","SO_RCVBUF","SO_RCVLOWAT","SO_RCVTIMEO","SO_REUSEADDR","SO_REUSEPORT","SO_SNDBUF","SO_SNDLOWAT","SO_SNDTIMEO","SO_TYPE","SPH_ATTR_BOOL","SPH_ATTR_FLOAT","SPH_ATTR_INTEGER","SPH_ATTR_MULTI","SPH_ATTR_ORDINAL","SPH_ATTR_TIMESTAMP","SPH_FILTER_FLOATRANGE","SPH_FILTER_RANGE","SPH_FILTER_VALUES","SPH_GROUPBY_ATTR","SPH_GROUPBY_ATTRPAIR","SPH_GROUPBY_DAY","SPH_GROUPBY_MONTH","SPH_GROUPBY_WEEK","SPH_GROUPBY_YEAR","SPH_MATCH_ALL","SPH_MATCH_ANY","SPH_MATCH_BOOLEAN","SPH_MATCH_EXTENDED","SPH_MATCH_EXTENDED2","SPH_MATCH_FULLSCAN","SPH_MATCH_PHRASE","SPH_RANK_BM25","SPH_RANK_NONE","SPH_RANK_PROXIMITY_BM25","SPH_RANK_WORDCOUNT","SPH_SORT_ATTR_ASC","SPH_SORT_ATTR_DESC","SPH_SORT_EXPR","SPH_SORT_EXTENDED","SPH_SORT_RELEVANCE","SPH_SORT_TIME_SEGMENTS","SQLBIT","SQLCHAR","SQLFLT4","SQLFLT8","SQLINT1","SQLINT2","SQLINT4","SQLITE3_ASSOC","SQLITE3_BLOB","SQLITE3_BOTH","SQLITE3_FLOAT","SQLITE3_INTEGER","SQLITE3_NULL","SQLITE3_NUM","SQLITE3_OPEN_CREATE","SQLITE3_OPEN_READONLY","SQLITE3_OPEN_READWRITE","SQLITE3_TEXT","SQLITE_ABORT","SQLITE_ASSOC","SQLITE_AUTH","SQLITE_BOTH","SQLITE_BUSY","SQLITE_CANTOPEN","SQLITE_CONSTRAINT","SQLITE_CORRUPT","SQLITE_DONE","SQLITE_EMPTY","SQLITE_ERROR","SQLITE_FORMAT","SQLITE_FULL","SQLITE_INTERNAL","SQLITE_INTERRUPT","SQLITE_IOERR","SQLITE_LOCKED","SQLITE_MISMATCH","SQLITE_MISUSE","SQLITE_NOLFS","SQLITE_NOMEM","SQLITE_NOTADB","SQLITE_NOTFOUND","SQLITE_NUM","SQLITE_OK","SQLITE_PERM","SQLITE_PROTOCOL","SQLITE_READONLY","SQLITE_ROW","SQLITE_SCHEMA","SQLITE_TOOBIG","SQLSRV_CURSOR_BUFFERED","SQLSRV_CURSOR_DYNAMIC","SQLSRV_CURSOR_FORWARD","SQLSRV_CURSOR_KEYSET","SQLSRV_CURSOR_STATIC","SQLSRV_ENC_BINARY","SQLSRV_ENC_CHAR","SQLSRV_ERR_ALL","SQLSRV_ERR_ERRORS","SQLSRV_ERR_WARNINGS","SQLSRV_FETCH_ASSOC","SQLSRV_FETCH_BOTH","SQLSRV_FETCH_NUMERIC","SQLSRV_LOG_SEVERITY_ALL","SQLSRV_LOG_SEVERITY_ERROR","SQLSRV_LOG_SEVERITY_NOTICE","SQLSRV_LOG_SEVERITY_WARNING","SQLSRV_LOG_SYSTEM_ALL","SQLSRV_LOG_SYSTEM_CONN","SQLSRV_LOG_SYSTEM_INIT","SQLSRV_LOG_SYSTEM_OFF","SQLSRV_LOG_SYSTEM_STMT","SQLSRV_LOG_SYSTEM_UTIL","SQLSRV_NULLABLE_NO","SQLSRV_NULLABLE_UNKNOWN","SQLSRV_NULLABLE_YES","SQLSRV_PARAM_IN","SQLSRV_PARAM_INOUT","SQLSRV_PARAM_OUT","SQLSRV_PHPTYPE_DATETIME","SQLSRV_PHPTYPE_FLOAT","SQLSRV_PHPTYPE_INT","SQLSRV_PHPTYPE_STREAM","SQLSRV_PHPTYPE_STRING","SQLSRV_SCROLL_ABSOLUTE","SQLSRV_SCROLL_FIRST","SQLSRV_SCROLL_LAST","SQLSRV_SCROLL_NEXT","SQLSRV_SCROLL_PRIOR","SQLSRV_SCROLL_RELATIVE","SQLSRV_SQLTYPE_BIGINT","SQLSRV_SQLTYPE_BINARY","SQLSRV_SQLTYPE_BIT","SQLSRV_SQLTYPE_CHAR","SQLSRV_SQLTYPE_DATE","SQLSRV_SQLTYPE_DATETIME","SQLSRV_SQLTYPE_DATETIME2","SQLSRV_SQLTYPE_DATETIMEOFFSET","SQLSRV_SQLTYPE_DECIMAL","SQLSRV_SQLTYPE_FLOAT","SQLSRV_SQLTYPE_IMAGE","SQLSRV_SQLTYPE_INT","SQLSRV_SQLTYPE_MONEY","SQLSRV_SQLTYPE_NCHAR","SQLSRV_SQLTYPE_NTEXT","SQLSRV_SQLTYPE_NUMERIC","SQLSRV_SQLTYPE_NVARCHAR","SQLSRV_SQLTYPE_NVARCHAR","SQLSRV_SQLTYPE_REAL","SQLSRV_SQLTYPE_SMALLDATETIME","SQLSRV_SQLTYPE_SMALLINT","SQLSRV_SQLTYPE_SMALLMONEY","SQLSRV_SQLTYPE_TEXT","SQLSRV_SQLTYPE_TIME","SQLSRV_SQLTYPE_TIMESTAMP","SQLSRV_SQLTYPE_TINYINT","SQLSRV_SQLTYPE_UDT","SQLSRV_SQLTYPE_UNIQUEIDENTIFIER","SQLSRV_SQLTYPE_VARBINARY","SQLSRV_SQLTYPE_VARBINARY","SQLSRV_SQLTYPE_VARCHAR","SQLSRV_SQLTYPE_VARCHAR","SQLSRV_SQLTYPE_XML","SQLSRV_TXN_READ_COMMITTED","SQLSRV_TXN_READ_SERIALIZABLE","SQLSRV_TXN_READ_UNCOMMITTED","SQLSRV_TXN_REPEATABLE_READ","SQLSRV_TXN_SNAPSHOT","SQLTEXT","SQLVARCHAR","SQL_BEST_ROWID","SQL_BIGINT","SQL_BINARY","SQL_BIT","SQL_CHAR","SQL_CONCURRENCY","SQL_CONCUR_LOCK","SQL_CONCUR_READ_ONLY","SQL_CONCUR_ROWVER","SQL_CONCUR_VALUES","SQL_CURSOR_DYNAMIC","SQL_CURSOR_FORWARD_ONLY","SQL_CURSOR_KEYSET_DRIVEN","SQL_CURSOR_STATIC","SQL_CURSOR_TYPE","SQL_CUR_USE_DRIVER","SQL_CUR_USE_IF_NEEDED","SQL_CUR_USE_ODBC","SQL_DATE","SQL_DECIMAL","SQL_DOUBLE","SQL_ENSURE","SQL_FLOAT","SQL_INDEX_ALL","SQL_INDEX_UNIQUE","SQL_INTEGER","SQL_KEYSET_SIZE","SQL_LONGVARBINARY","SQL_LONGVARCHAR","SQL_NO_NULLS","SQL_NULLABLE","SQL_NUMERIC","SQL_ODBC_CURSORS","SQL_QUICK","SQL_REAL","SQL_ROWVER","SQL_SCOPE_CURROW","SQL_SCOPE_SESSION","SQL_SCOPE_TRANSACTION","SQL_SMALLINT","SQL_TIME","SQL_TIMESTAMP","SQL_TINYINT","SQL_TYPE_DATE","SQL_TYPE_TIME","SQL_TYPE_TIMESTAMP","SQL_VARBINARY","SQL_VARCHAR","SSH2_DEFAULT_TERMINAL","SSH2_DEFAULT_TERM_HEIGHT","SSH2_DEFAULT_TERM_UNIT","SSH2_DEFAULT_TERM_WIDTH","SSH2_FINGERPRINT_HEX","SSH2_FINGERPRINT_MD5","SSH2_FINGERPRINT_RAW","SSH2_FINGERPRINT_SHA1","SSH2_STREAM_STDERR","SSH2_STREAM_STDIO","SSH2_TERM_UNIT_CHARS","SSH2_TERM_UNIT_PIXELS","STR_PAD_BOTH","STR_PAD_LEFT","STR_PAD_RIGHT","ST_SET","ST_SILENT","ST_UID","SUNFUNCS_RET_DOUBLE","SUNFUNCS_RET_STRING","SUNFUNCS_RET_TIMESTAMP","SVN_AUTH_PARAM_CONFIG","SVN_AUTH_PARAM_CONFIG_DIR","SVN_AUTH_PARAM_DEFAULT_PASSWORD","SVN_AUTH_PARAM_DEFAULT_USERNAME","SVN_AUTH_PARAM_DONT_STORE_PASSWORDS","SVN_AUTH_PARAM_NON_INTERACTIVE","SVN_AUTH_PARAM_NO_AUTH_CACHE","SVN_AUTH_PARAM_SERVER_GROUP","SVN_AUTH_PARAM_SSL_SERVER_CERT_INFO","SVN_AUTH_PARAM_SSL_SERVER_FAILURES","SVN_FS_CONFIG_FS_TYPE","SVN_FS_TYPE_BDB","SVN_FS_TYPE_FSFS","SVN_NODE_DIR","SVN_NODE_FILE","SVN_NODE_NONE","SVN_NODE_UNKNOWN","SVN_PROP_REVISION_AUTHOR","SVN_PROP_REVISION_DATE","SVN_PROP_REVISION_LOG","SVN_PROP_REVISION_ORIG_DATE","SVN_REVISION_HEAD","SVN_WC_STATUS_ADDED","SVN_WC_STATUS_CONFLICTED","SVN_WC_STATUS_DELETED","SVN_WC_STATUS_EXTERNAL","SVN_WC_STATUS_IGNORED","SVN_WC_STATUS_INCOMPLETE","SVN_WC_STATUS_MERGED","SVN_WC_STATUS_MISSING","SVN_WC_STATUS_MODIFIED","SVN_WC_STATUS_NONE","SVN_WC_STATUS_NORMAL","SVN_WC_STATUS_OBSTRUCTED","SVN_WC_STATUS_REPLACED","SVN_WC_STATUS_UNVERSIONED","SWFACTION_DATA","SWFACTION_ENTERFRAME","SWFACTION_KEYDOWN","SWFACTION_KEYUP","SWFACTION_MOUSEDOWN","SWFACTION_MOUSEMOVE","SWFACTION_MOUSEUP","SWFACTION_ONLOAD","SWFACTION_UNLOAD","SWFBUTTON_DOWN","SWFBUTTON_DRAGOUT","SWFBUTTON_DRAGOVER","SWFBUTTON_HIT","SWFBUTTON_MOUSEDOWN","SWFBUTTON_MOUSEOUT","SWFBUTTON_MOUSEOVER","SWFBUTTON_MOUSEUP","SWFBUTTON_MOUSEUPOUTSIDE","SWFBUTTON_OVER","SWFBUTTON_UP","SWFFILL_CLIPPED_BITMAP","SWFFILL_LINEAR_GRADIENT","SWFFILL_RADIAL_GRADIENT","SWFFILL_TILED_BITMAP","SWFTEXTFIELD_ALIGN_CENTER","SWFTEXTFIELD_ALIGN_JUSTIFY","SWFTEXTFIELD_ALIGN_LEFT","SWFTEXTFIELD_ALIGN_RIGHT","SWFTEXTFIELD_DRAWBOX","SWFTEXTFIELD_HASLENGTH","SWFTEXTFIELD_HTML","SWFTEXTFIELD_MULTILINE","SWFTEXTFIELD_NOEDIT","SWFTEXTFIELD_NOSELECT","SWFTEXTFIELD_PASSWORD","SWFTEXTFIELD_WORDWRAP","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_IWGRP","S_IWOTH","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","Swish::IN_ALL","Swish::IN_BODY","Swish::IN_BODY_BIT","Swish::IN_COMMENTS","Swish::IN_COMMENTS_BIT","Swish::IN_EMPHASIZED","Swish::IN_EMPHASIZED_BIT","Swish::IN_FILE","Swish::IN_FILE_BIT","Swish::IN_HEAD","Swish::IN_HEADER","Swish::IN_HEADER_BIT","Swish::IN_HEAD_BIT","Swish::IN_META","Swish::IN_META_BIT","Swish::IN_TITLE","Swish::IN_TITLE_BIT","Swish::META_TYPE_DATE","Swish::META_TYPE_STRING","Swish::META_TYPE_ULONG","Swish::META_TYPE_UNDEF","TCP_NODELAY","TRADER_COMPATIBILITY_DEFAULT","TRADER_COMPATIBILITY_METASTOCK","TRADER_ERR_ALLOC_ERR","TRADER_ERR_BAD_OBJECT","TRADER_ERR_BAD_PARAM","TRADER_ERR_FUNC_NOT_FOUND","TRADER_ERR_GROUP_NOT_FOUND","TRADER_ERR_INPUT_NOT_ALL_INITIALIZE","TRADER_ERR_INTERNAL_ERROR","TRADER_ERR_INVALID_HANDLE","TRADER_ERR_INVALID_LIST_TYPE","TRADER_ERR_INVALID_PARAM_FUNCTION","TRADER_ERR_INVALID_PARAM_HOLDER","TRADER_ERR_INVALID_PARAM_HOLDER_TYPE","TRADER_ERR_LIB_NOT_INITIALIZE","TRADER_ERR_NOT_SUPPORTED","TRADER_ERR_OUTPUT_NOT_ALL_INITIALIZE","TRADER_ERR_OUT_OF_RANGE_END_INDEX","TRADER_ERR_OUT_OF_RANGE_START_INDEX","TRADER_ERR_SUCCESS","TRADER_ERR_UNKNOWN_ERROR","TRADER_FUNC_UNST_ADX","TRADER_FUNC_UNST_ADXR","TRADER_FUNC_UNST_ALL","TRADER_FUNC_UNST_ATR","TRADER_FUNC_UNST_CMO","TRADER_FUNC_UNST_DX","TRADER_FUNC_UNST_EMA","TRADER_FUNC_UNST_HT_DCPERIOD","TRADER_FUNC_UNST_HT_DCPHASE","TRADER_FUNC_UNST_HT_PHASOR","TRADER_FUNC_UNST_HT_SINE","TRADER_FUNC_UNST_HT_TRENDLINE","TRADER_FUNC_UNST_HT_TRENDMODE","TRADER_FUNC_UNST_KAMA","TRADER_FUNC_UNST_MAMA","TRADER_FUNC_UNST_MFI","TRADER_FUNC_UNST_MINUS_DI","TRADER_FUNC_UNST_MINUS_DM","TRADER_FUNC_UNST_NATR","TRADER_FUNC_UNST_NONE","TRADER_FUNC_UNST_PLUS_DI","TRADER_FUNC_UNST_PLUS_DM","TRADER_FUNC_UNST_RSI","TRADER_FUNC_UNST_STOCHRSI","TRADER_FUNC_UNST_T3","TRADER_MA_TYPE_DEMA","TRADER_MA_TYPE_EMA","TRADER_MA_TYPE_KAMA","TRADER_MA_TYPE_MAMA","TRADER_MA_TYPE_SMA","TRADER_MA_TYPE_T3","TRADER_MA_TYPE_TEMA","TRADER_MA_TYPE_TRIMA","TRADER_MA_TYPE_WMA","TRADER_REAL_MAX","TRADER_REAL_MIN","TRAP_BRKPT","TRAP_TRACE","TYPEAPPLICATION","TYPEAUDIO","TYPEIMAGE","TYPEMESSAGE","TYPEMODEL","TYPEMULTIPART","TYPEOTHER","TYPETEXT","TYPEVIDEO","TYPE_MENUBUTTON","TYPE_PUSHBUTTON","UDM_CACHE_DISABLED","UDM_CACHE_ENABLED","UDM_CROSSWORDS_DISABLED","UDM_CROSSWORDS_ENABLED","UDM_CROSS_WORDS_DISABLED","UDM_CROSS_WORDS_ENABLED","UDM_FIELD_CATEGORY","UDM_FIELD_CHARSET","UDM_FIELD_CONTENT","UDM_FIELD_CRC","UDM_FIELD_DESC","UDM_FIELD_DESCRIPTION","UDM_FIELD_KEYWORDS","UDM_FIELD_LANG","UDM_FIELD_MODIFIED","UDM_FIELD_ORDER","UDM_FIELD_RATING","UDM_FIELD_SCORE","UDM_FIELD_SIZE","UDM_FIELD_TEXT","UDM_FIELD_TITLE","UDM_FIELD_URL","UDM_FIELD_URLID","UDM_ISPELL_PREFIXES_DISABLED","UDM_ISPELL_PREFIXES_ENABLED","UDM_ISPELL_PREFIX_DISABLED","UDM_ISPELL_PREFIX_ENABLED","UDM_ISPELL_TYPE_AFFIX","UDM_ISPELL_TYPE_DB","UDM_ISPELL_TYPE_SERVER","UDM_ISPELL_TYPE_SPELL","UDM_LIMIT_CAT","UDM_LIMIT_DATE","UDM_LIMIT_LANG","UDM_LIMIT_TAG","UDM_LIMIT_URL","UDM_MATCH_BEGIN","UDM_MATCH_END","UDM_MATCH_SUBSTR","UDM_MATCH_WORD","UDM_MODE_ALL","UDM_MODE_ANY","UDM_MODE_BOOL","UDM_MODE_PHRASE","UDM_PARAM_BROWSER_CHARSET","UDM_PARAM_CACHE_MODE","UDM_PARAM_CHARSET","UDM_PARAM_CROSSWORDS","UDM_PARAM_CROSS_WORDS","UDM_PARAM_DATADIR","UDM_PARAM_FIRST_DOC","UDM_PARAM_FOUND","UDM_PARAM_HLBEG","UDM_PARAM_HLEND","UDM_PARAM_ISPELL_PREFIX","UDM_PARAM_ISPELL_PREFIXES","UDM_PARAM_LAST_DOC","UDM_PARAM_LOCAL_CHARSET","UDM_PARAM_MAX_WORDLEN","UDM_PARAM_MAX_WORD_LEN","UDM_PARAM_MIN_WORDLEN","UDM_PARAM_MIN_WORD_LEN","UDM_PARAM_NUM_ROWS","UDM_PARAM_PAGE_NUM","UDM_PARAM_PAGE_SIZE","UDM_PARAM_PHRASE_MODE","UDM_PARAM_PREFIX","UDM_PARAM_PREFIXES","UDM_PARAM_QSTRING","UDM_PARAM_REMOTE_ADDR","UDM_PARAM_SEARCHD","UDM_PARAM_SEARCHTIME","UDM_PARAM_SEARCH_MODE","UDM_PARAM_SEARCH_TIME","UDM_PARAM_STOPFILE","UDM_PARAM_STOPTABLE","UDM_PARAM_STOP_FILE","UDM_PARAM_STOP_TABLE","UDM_PARAM_SYNONYM","UDM_PARAM_TRACK_MODE","UDM_PARAM_VARDIR","UDM_PARAM_WEIGHT_FACTOR","UDM_PARAM_WORDINFO","UDM_PARAM_WORD_INFO","UDM_PARAM_WORD_MATCH","UDM_PHRASE_DISABLED","UDM_PHRASE_ENABLED","UDM_PREFIXES_DISABLED","UDM_PREFIXES_ENABLED","UDM_PREFIX_DISABLED","UDM_PREFIX_ENABLED","UDM_TRACK_DISABLED","UDM_TRACK_ENABLED","UTF-8","VARCMP_EQ","VARCMP_GT","VARCMP_LT","VARCMP_NULL","VARNISH_COMPAT_2","VARNISH_COMPAT_3","VARNISH_CONFIG_COMPAT","VARNISH_CONFIG_HOST","VARNISH_CONFIG_IDENT","VARNISH_CONFIG_PORT","VARNISH_CONFIG_SECRET","VARNISH_CONFIG_TIMEOUT","VARNISH_STATUS_AUTH","VARNISH_STATUS_CANT","VARNISH_STATUS_CLOSE","VARNISH_STATUS_COMMS","VARNISH_STATUS_OK","VARNISH_STATUS_PARAM","VARNISH_STATUS_SYNTAX","VARNISH_STATUS_TOOFEW","VARNISH_STATUS_TOOMANY","VARNISH_STATUS_UNIMPL","VARNISH_STATUS_UNKNOWN","VT_ARRAY","VT_ARRAY","VT_ARRAY","VT_BOOL","VT_BOOL","VT_BSTR","VT_BSTR","VT_BYREF","VT_BYREF","VT_BYREF","VT_CY","VT_CY","VT_DATE","VT_DATE","VT_DECIMAL","VT_DECIMAL","VT_DISPATCH","VT_DISPATCH","VT_EMPTY","VT_EMPTY","VT_ERROR","VT_ERROR","VT_I1","VT_I1","VT_I2","VT_I2","VT_I4","VT_I4","VT_I4","VT_INT","VT_INT","VT_NULL","VT_R4","VT_R4","VT_R8","VT_R8","VT_R8","VT_UI1","VT_UI1","VT_UI2","VT_UI2","VT_UI4","VT_UI4","VT_UI4","VT_UINT","VT_UINT","VT_UNKNOWN","VT_UNKNOWN","VT_VARIANT","VT_VARIANT","VT_VARIANT","WNOHANG","WUNTRACED","XATTR_CREATE","XATTR_DONTFOLLOW","XATTR_REPLACE","XATTR_ROOT","XDIFF_PATCH_NORMAL","XDIFF_PATCH_REVERSE","XHPROF_FLAGS_CPU","XHPROF_FLAGS_MEMORY","XHPROF_FLAGS_NO_BUILTINS","XML_ATTRIBUTE_CDATA","XML_ATTRIBUTE_DECL_NODE","XML_ATTRIBUTE_ENTITY","XML_ATTRIBUTE_ENUMERATION","XML_ATTRIBUTE_ID","XML_ATTRIBUTE_IDREF","XML_ATTRIBUTE_IDREFS","XML_ATTRIBUTE_NMTOKEN","XML_ATTRIBUTE_NMTOKENS","XML_ATTRIBUTE_NODE","XML_ATTRIBUTE_NOTATION","XML_CDATA_SECTION_NODE","XML_COMMENT_NODE","XML_DOCUMENT_FRAG_NODE","XML_DOCUMENT_NODE","XML_DOCUMENT_TYPE_NODE","XML_DTD_NODE","XML_ELEMENT_DECL_NODE","XML_ELEMENT_NODE","XML_ENTITY_DECL_NODE","XML_ENTITY_NODE","XML_ENTITY_REF_NODE","XML_ERROR_ASYNC_ENTITY","XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF","XML_ERROR_BAD_CHAR_REF","XML_ERROR_BINARY_ENTITY_REF","XML_ERROR_DUPLICATE_ATTRIBUTE","XML_ERROR_EXTERNAL_ENTITY_HANDLING","XML_ERROR_INCORRECT_ENCODING","XML_ERROR_INVALID_TOKEN","XML_ERROR_JUNK_AFTER_DOC_ELEMENT","XML_ERROR_MISPLACED_XML_PI","XML_ERROR_NONE","XML_ERROR_NO_ELEMENTS","XML_ERROR_NO_MEMORY","XML_ERROR_PARAM_ENTITY_REF","XML_ERROR_PARTIAL_CHAR","XML_ERROR_RECURSIVE_ENTITY_REF","XML_ERROR_SYNTAX","XML_ERROR_TAG_MISMATCH","XML_ERROR_UNCLOSED_CDATA_SECTION","XML_ERROR_UNCLOSED_TOKEN","XML_ERROR_UNDEFINED_ENTITY","XML_ERROR_UNKNOWN_ENCODING","XML_HTML_DOCUMENT_NODE","XML_NAMESPACE_DECL_NODE","XML_NOTATION_NODE","XML_OPTION_CASE_FOLDING","XML_OPTION_SKIP_TAGSTART","XML_OPTION_SKIP_WHITE","XML_OPTION_TARGET_ENCODING","XML_PI_NODE","XML_SAX_IMPL","XML_TEXT_NODE","XSLT_ERR_UNSUPPORTED_SCHEME","XSLT_OPT_SILENT","XSLT_SABOPT_DISABLE_ADDING_META","XSLT_SABOPT_DISABLE_STRIPPING","XSLT_SABOPT_FILES_TO_HANDLER","XSLT_SABOPT_IGNORE_DOC_NOT_FOUND","XSLT_SABOPT_PARSE_PUBLIC_ENTITIES","XSL_CLONE_ALWAYS","XSL_CLONE_AUTO","XSL_CLONE_NEVER","XSL_SECPREF_CREATE_DIRECTORY","XSL_SECPREF_READ_FILE","XSL_SECPREF_READ_NETWORK","XSL_SECPREF_WRITE_FILE","XSL_SECPREF_WRITE_NETWORK","YAF_ENVIRON","YAF_ERR_AUTOLOAD_FAILED","YAF_ERR_CALL_FAILED","YAF_ERR_DISPATCH_FAILED","YAF_ERR_NOTFOUND_ACTION","YAF_ERR_NOTFOUND_CONTROLLER","YAF_ERR_NOTFOUND_MODULE","YAF_ERR_NOTFOUND_VIEW","YAF_ERR_ROUTE_FAILED","YAF_ERR_STARTUP_FAILED","YAF_ERR_TYPE_ERROR","YAF_VERSION","YAML_ANY_BREAK","YAML_ANY_ENCODING","YAML_ANY_SCALAR_STYLE","YAML_BOOL_TAG","YAML_CRLN_BREAK","YAML_CR_BREAK","YAML_DOUBLE_QUOTED_SCALAR_STYLE","YAML_FLOAT_TAG","YAML_FOLDED_SCALAR_STYLE","YAML_INT_TAG","YAML_LITERAL_SCALAR_STYLE","YAML_LN_BREAK","YAML_MAP_TAG","YAML_NULL_TAG","YAML_PHP_TAG","YAML_PLAIN_SCALAR_STYLE","YAML_SEQ_TAG","YAML_SINGLE_QUOTED_SCALAR_STYLE","YAML_STR_TAG","YAML_TIMESTAMP_TAG","YAML_UTF16BE_ENCODING","YAML_UTF16LE_ENCODING","YAML_UTF8_ENCODING","YPERR_ACCESS","YPERR_BADARGS","YPERR_BADDB","YPERR_BUSY","YPERR_DOMAIN","YPERR_KEY","YPERR_MAP","YPERR_NODOM","YPERR_NOMORE","YPERR_PMAP","YPERR_RESRC","YPERR_RPC","YPERR_VERS","YPERR_YPBIND","YPERR_YPERR","YPERR_YPSERV","ZipArchive::CHECKCONS","ZipArchive::CM_BZIP2","ZipArchive::CM_DEFAULT","ZipArchive::CM_DEFLATE","ZipArchive::CM_DEFLATE64","ZipArchive::CM_IMPLODE","ZipArchive::CM_PKWARE_IMPLODE","ZipArchive::CM_REDUCE_1","ZipArchive::CM_REDUCE_2","ZipArchive::CM_REDUCE_3","ZipArchive::CM_REDUCE_4","ZipArchive::CM_SHRINK","ZipArchive::CM_STORE","ZipArchive::CREATE","ZipArchive::ER_CHANGED","ZipArchive::ER_CLOSE","ZipArchive::ER_COMPNOTSUPP","ZipArchive::ER_CRC","ZipArchive::ER_DELETED","ZipArchive::ER_EOF","ZipArchive::ER_EXISTS","ZipArchive::ER_INCONS","ZipArchive::ER_INTERNAL","ZipArchive::ER_INVAL","ZipArchive::ER_MEMORY","ZipArchive::ER_MULTIDISK","ZipArchive::ER_NOENT","ZipArchive::ER_NOZIP","ZipArchive::ER_OK","ZipArchive::ER_OPEN","ZipArchive::ER_READ","ZipArchive::ER_REMOVE","ZipArchive::ER_RENAME","ZipArchive::ER_SEEK","ZipArchive::ER_TMPOPEN","ZipArchive::ER_WRITE","ZipArchive::ER_ZIPCLOSED","ZipArchive::ER_ZLIB","ZipArchive::EXCL","ZipArchive::FL_COMPRESSED","ZipArchive::FL_NOCASE","ZipArchive::FL_NODIR","ZipArchive::FL_UNCHANGED","ZipArchive::OVERWRITE","__COMPILER_HALT_OFFSET__","imagick::ALIGN_CENTER","imagick::ALIGN_LEFT","imagick::ALIGN_RIGHT","imagick::ALIGN_UNDEFINED","imagick::ALPHACHANNEL_ACTIVATE","imagick::ALPHACHANNEL_COPY","imagick::ALPHACHANNEL_DEACTIVATE","imagick::ALPHACHANNEL_EXTRACT","imagick::ALPHACHANNEL_OPAQUE","imagick::ALPHACHANNEL_RESET","imagick::ALPHACHANNEL_SET","imagick::ALPHACHANNEL_SHAPE","imagick::ALPHACHANNEL_TRANSPARENT","imagick::ALPHACHANNEL_UNDEFINED","imagick::CHANNEL_ALL","imagick::CHANNEL_ALPHA","imagick::CHANNEL_BLACK","imagick::CHANNEL_BLUE","imagick::CHANNEL_CYAN","imagick::CHANNEL_DEFAULT","imagick::CHANNEL_GRAY","imagick::CHANNEL_GREEN","imagick::CHANNEL_INDEX","imagick::CHANNEL_MAGENTA","imagick::CHANNEL_MATTE","imagick::CHANNEL_OPACITY","imagick::CHANNEL_RED","imagick::CHANNEL_UNDEFINED","imagick::CHANNEL_YELLOW","imagick::COLORSPACE_CMY","imagick::COLORSPACE_CMYK","imagick::COLORSPACE_GRAY","imagick::COLORSPACE_HSB","imagick::COLORSPACE_HSL","imagick::COLORSPACE_HWB","imagick::COLORSPACE_LAB","imagick::COLORSPACE_LOG","imagick::COLORSPACE_OHTA","imagick::COLORSPACE_REC601LUMA","imagick::COLORSPACE_REC709LUMA","imagick::COLORSPACE_RGB","imagick::COLORSPACE_SRGB","imagick::COLORSPACE_TRANSPARENT","imagick::COLORSPACE_UNDEFINED","imagick::COLORSPACE_XYZ","imagick::COLORSPACE_YCBCR","imagick::COLORSPACE_YCC","imagick::COLORSPACE_YIQ","imagick::COLORSPACE_YPBPR","imagick::COLORSPACE_YUV","imagick::COLOR_ALPHA","imagick::COLOR_BLACK","imagick::COLOR_BLUE","imagick::COLOR_CYAN","imagick::COLOR_FUZZ","imagick::COLOR_GREEN","imagick::COLOR_MAGENTA","imagick::COLOR_OPACITY","imagick::COLOR_RED","imagick::COLOR_YELLOW","imagick::COMPOSITE_ADD","imagick::COMPOSITE_ATOP","imagick::COMPOSITE_BLEND","imagick::COMPOSITE_BUMPMAP","imagick::COMPOSITE_CLEAR","imagick::COMPOSITE_COLORBURN","imagick::COMPOSITE_COLORDODGE","imagick::COMPOSITE_COLORIZE","imagick::COMPOSITE_COPY","imagick::COMPOSITE_COPYBLACK","imagick::COMPOSITE_COPYBLUE","imagick::COMPOSITE_COPYCYAN","imagick::COMPOSITE_COPYGREEN","imagick::COMPOSITE_COPYMAGENTA","imagick::COMPOSITE_COPYOPACITY","imagick::COMPOSITE_COPYRED","imagick::COMPOSITE_COPYYELLOW","imagick::COMPOSITE_DARKEN","imagick::COMPOSITE_DEFAULT","imagick::COMPOSITE_DIFFERENCE","imagick::COMPOSITE_DISPLACE","imagick::COMPOSITE_DISSOLVE","imagick::COMPOSITE_DST","imagick::COMPOSITE_DSTATOP","imagick::COMPOSITE_DSTIN","imagick::COMPOSITE_DSTOUT","imagick::COMPOSITE_DSTOVER","imagick::COMPOSITE_EXCLUSION","imagick::COMPOSITE_HARDLIGHT","imagick::COMPOSITE_HUE","imagick::COMPOSITE_IN","imagick::COMPOSITE_LIGHTEN","imagick::COMPOSITE_LUMINIZE","imagick::COMPOSITE_MINUS","imagick::COMPOSITE_MODULATE","imagick::COMPOSITE_MULTIPLY","imagick::COMPOSITE_NO","imagick::COMPOSITE_OUT","imagick::COMPOSITE_OVER","imagick::COMPOSITE_OVERLAY","imagick::COMPOSITE_PLUS","imagick::COMPOSITE_REPLACE","imagick::COMPOSITE_SATURATE","imagick::COMPOSITE_SCREEN","imagick::COMPOSITE_SOFTLIGHT","imagick::COMPOSITE_SRC","imagick::COMPOSITE_SRCATOP","imagick::COMPOSITE_SRCIN","imagick::COMPOSITE_SRCOUT","imagick::COMPOSITE_SRCOVER","imagick::COMPOSITE_SUBTRACT","imagick::COMPOSITE_THRESHOLD","imagick::COMPOSITE_UNDEFINED","imagick::COMPOSITE_XOR","imagick::COMPRESSION_BZIP","imagick::COMPRESSION_DXT1","imagick::COMPRESSION_DXT3","imagick::COMPRESSION_DXT5","imagick::COMPRESSION_FAX","imagick::COMPRESSION_GROUP4","imagick::COMPRESSION_JPEG","imagick::COMPRESSION_JPEG2000","imagick::COMPRESSION_LOSSLESSJPEG","imagick::COMPRESSION_LZW","imagick::COMPRESSION_NO","imagick::COMPRESSION_RLE","imagick::COMPRESSION_UNDEFINED","imagick::COMPRESSION_ZIP","imagick::DECORATION_LINETROUGH","imagick::DECORATION_NO","imagick::DECORATION_OVERLINE","imagick::DECORATION_UNDERLINE","imagick::DISPOSE_BACKGROUND","imagick::DISPOSE_NONE","imagick::DISPOSE_PREVIOUS","imagick::DISPOSE_UNDEFINED","imagick::DISPOSE_UNRECOGNIZED","imagick::DISTORTION_AFFINE","imagick::DISTORTION_AFFINEPROJECTION","imagick::DISTORTION_ARC","imagick::DISTORTION_BARREL","imagick::DISTORTION_BARRELINVERSE","imagick::DISTORTION_BILINEAR","imagick::DISTORTION_DEPOLAR","imagick::DISTORTION_PERSPECTIVE","imagick::DISTORTION_PERSPECTIVEPROJECTION","imagick::DISTORTION_POLAR","imagick::DISTORTION_POLYNOMIAL","imagick::DISTORTION_SCALEROTATETRANSLATE","imagick::DISTORTION_SENTINEL","imagick::DISTORTION_SHEPARDS","imagick::DISTORTION_UNDEFINED","imagick::DITHERMETHOD_FLOYDSTEINBERG","imagick::DITHERMETHOD_NO","imagick::DITHERMETHOD_RIEMERSMA","imagick::DITHERMETHOD_UNDEFINED","imagick::EVALUATE_ADD","imagick::EVALUATE_ADDMODULUS","imagick::EVALUATE_AND","imagick::EVALUATE_COSINE","imagick::EVALUATE_DIVIDE","imagick::EVALUATE_GAUSSIANNOISE","imagick::EVALUATE_IMPULSENOISE","imagick::EVALUATE_LAPLACIANNOISE","imagick::EVALUATE_LEFTSHIFT","imagick::EVALUATE_LOG","imagick::EVALUATE_MAX","imagick::EVALUATE_MIN","imagick::EVALUATE_MULTIPLICATIVENOISE","imagick::EVALUATE_MULTIPLY","imagick::EVALUATE_OR","imagick::EVALUATE_POISSONNOISE","imagick::EVALUATE_POW","imagick::EVALUATE_RIGHTSHIFT","imagick::EVALUATE_SET","imagick::EVALUATE_SINE","imagick::EVALUATE_SUBTRACT","imagick::EVALUATE_THRESHOLD","imagick::EVALUATE_THRESHOLDBLACK","imagick::EVALUATE_THRESHOLDWHITE","imagick::EVALUATE_UNDEFINED","imagick::EVALUATE_UNIFORMNOISE","imagick::EVALUATE_XOR","imagick::FILLRULE_EVENODD","imagick::FILLRULE_NONZERO","imagick::FILLRULE_UNDEFINED","imagick::FILTER_BESSEL","imagick::FILTER_BLACKMAN","imagick::FILTER_BOX","imagick::FILTER_CATROM","imagick::FILTER_CUBIC","imagick::FILTER_GAUSSIAN","imagick::FILTER_HAMMING","imagick::FILTER_HANNING","imagick::FILTER_HERMITE","imagick::FILTER_LANCZOS","imagick::FILTER_MITCHELL","imagick::FILTER_POINT","imagick::FILTER_QUADRATIC","imagick::FILTER_SINC","imagick::FILTER_TRIANGLE","imagick::FILTER_UNDEFINED","imagick::FUNCTION_POLYNOMIAL","imagick::FUNCTION_SINUSOID","imagick::FUNCTION_UNDEFINED","imagick::GRAVITY_CENTER","imagick::GRAVITY_EAST","imagick::GRAVITY_NORTH","imagick::GRAVITY_NORTHEAST","imagick::GRAVITY_NORTHWEST","imagick::GRAVITY_SOUTH","imagick::GRAVITY_SOUTHEAST","imagick::GRAVITY_SOUTHWEST","imagick::GRAVITY_WEST","imagick::IMGTYPE_BILEVEL","imagick::IMGTYPE_COLORSEPARATION","imagick::IMGTYPE_COLORSEPARATIONMATTE","imagick::IMGTYPE_GRAYSCALE","imagick::IMGTYPE_GRAYSCALEMATTE","imagick::IMGTYPE_OPTIMIZE","imagick::IMGTYPE_PALETTE","imagick::IMGTYPE_PALETTEMATTE","imagick::IMGTYPE_TRUECOLOR","imagick::IMGTYPE_TRUECOLORMATTE","imagick::IMGTYPE_UNDEFINED","imagick::INTERLACE_GIF","imagick::INTERLACE_JPEG","imagick::INTERLACE_LINE","imagick::INTERLACE_NO","imagick::INTERLACE_PARTITION","imagick::INTERLACE_PLANE","imagick::INTERLACE_PNG","imagick::INTERLACE_UNDEFINED","imagick::INTERPOLATE_AVERAGE","imagick::INTERPOLATE_BICUBIC","imagick::INTERPOLATE_BILINEAR","imagick::INTERPOLATE_FILTER","imagick::INTERPOLATE_INTEGER","imagick::INTERPOLATE_MESH","imagick::INTERPOLATE_NEARESTNEIGHBOR","imagick::INTERPOLATE_SPLINE","imagick::INTERPOLATE_UNDEFINED","imagick::LAYERMETHOD_COALESCE","imagick::LAYERMETHOD_COMPAREANY","imagick::LAYERMETHOD_COMPARECLEAR","imagick::LAYERMETHOD_COMPAREOVERLAY","imagick::LAYERMETHOD_COMPOSITE","imagick::LAYERMETHOD_DISPOSE","imagick::LAYERMETHOD_FLATTEN","imagick::LAYERMETHOD_MERGE","imagick::LAYERMETHOD_MOSAIC","imagick::LAYERMETHOD_OPTIMIZE","imagick::LAYERMETHOD_OPTIMIZEIMAGE","imagick::LAYERMETHOD_OPTIMIZEPLUS","imagick::LAYERMETHOD_OPTIMIZETRANS","imagick::LAYERMETHOD_REMOVEDUPS","imagick::LAYERMETHOD_REMOVEZERO","imagick::LAYERMETHOD_UNDEFINED","imagick::LINECAP_BUTT","imagick::LINECAP_ROUND","imagick::LINECAP_SQUARE","imagick::LINECAP_UNDEFINED","imagick::LINEJOIN_BEVEL","imagick::LINEJOIN_MITER","imagick::LINEJOIN_ROUND","imagick::LINEJOIN_UNDEFINED","imagick::METRIC_MEANABSOLUTEERROR","imagick::METRIC_MEANSQUAREERROR","imagick::METRIC_PEAKABSOLUTEERROR","imagick::METRIC_PEAKSIGNALTONOISERATIO","imagick::METRIC_ROOTMEANSQUAREDERROR","imagick::METRIC_UNDEFINED","imagick::MONTAGEMODE_CONCATENATE","imagick::MONTAGEMODE_FRAME","imagick::MONTAGEMODE_UNFRAME","imagick::NOISE_GAUSSIAN","imagick::NOISE_IMPULSE","imagick::NOISE_LAPLACIAN","imagick::NOISE_MULTIPLICATIVEGAUSSIAN","imagick::NOISE_POISSON","imagick::NOISE_RANDOM","imagick::NOISE_UNIFORM","imagick::ORIENTATION_BOTTOMLEFT","imagick::ORIENTATION_BOTTOMRIGHT","imagick::ORIENTATION_LEFTBOTTOM","imagick::ORIENTATION_LEFTTOP","imagick::ORIENTATION_RIGHTBOTTOM","imagick::ORIENTATION_RIGHTTOP","imagick::ORIENTATION_TOPLEFT","imagick::ORIENTATION_TOPRIGHT","imagick::ORIENTATION_UNDEFINED","imagick::PAINT_FILLTOBORDER","imagick::PAINT_FLOODFILL","imagick::PAINT_POINT","imagick::PAINT_REPLACE","imagick::PAINT_RESET","imagick::PATHUNITS_OBJECTBOUNDINGBOX","imagick::PATHUNITS_UNDEFINED","imagick::PATHUNITS_USERSPACE","imagick::PATHUNITS_USERSPACEONUSE","imagick::PIXEL_CHAR","imagick::PIXEL_DOUBLE","imagick::PIXEL_FLOAT","imagick::PIXEL_INTEGER","imagick::PIXEL_LONG","imagick::PIXEL_QUANTUM","imagick::PIXEL_SHORT","imagick::PREVIEW_ADDNOISE","imagick::PREVIEW_BLUR","imagick::PREVIEW_BRIGHTNESS","imagick::PREVIEW_CHARCOALDRAWING","imagick::PREVIEW_DESPECKLE","imagick::PREVIEW_DULL","imagick::PREVIEW_EDGEDETECT","imagick::PREVIEW_GAMMA","imagick::PREVIEW_GRAYSCALE","imagick::PREVIEW_HUE","imagick::PREVIEW_IMPLODE","imagick::PREVIEW_JPEG","imagick::PREVIEW_OILPAINT","imagick::PREVIEW_QUANTIZE","imagick::PREVIEW_RAISE","imagick::PREVIEW_REDUCENOISE","imagick::PREVIEW_ROLL","imagick::PREVIEW_ROTATE","imagick::PREVIEW_SATURATION","imagick::PREVIEW_SEGMENT","imagick::PREVIEW_SHADE","imagick::PREVIEW_SHARPEN","imagick::PREVIEW_SHEAR","imagick::PREVIEW_SOLARIZE","imagick::PREVIEW_SPIFF","imagick::PREVIEW_SPREAD","imagick::PREVIEW_SWIRL","imagick::PREVIEW_THRESHOLD","imagick::PREVIEW_UNDEFINED","imagick::PREVIEW_WAVE","imagick::RENDERINGINTENT_ABSOLUTE","imagick::RENDERINGINTENT_PERCEPTUAL","imagick::RENDERINGINTENT_RELATIVE","imagick::RENDERINGINTENT_SATURATION","imagick::RENDERINGINTENT_UNDEFINED","imagick::RESOLUTION_PIXELSPERCENTIMETER","imagick::RESOLUTION_PIXELSPERINCH","imagick::RESOLUTION_UNDEFINED","imagick::RESOURCETYPE_AREA","imagick::RESOURCETYPE_DISK","imagick::RESOURCETYPE_FILE","imagick::RESOURCETYPE_MAP","imagick::RESOURCETYPE_MEMORY","imagick::RESOURCETYPE_UNDEFINED","imagick::SPARSECOLORMETHOD_BARYCENTRIC","imagick::SPARSECOLORMETHOD_BILINEAR","imagick::SPARSECOLORMETHOD_POLYNOMIAL","imagick::SPARSECOLORMETHOD_SPEPARDS","imagick::SPARSECOLORMETHOD_UNDEFINED","imagick::SPARSECOLORMETHOD_VORONOI","imagick::STRETCH_ANY","imagick::STRETCH_CONDENSED","imagick::STRETCH_EXPANDED","imagick::STRETCH_EXTRAEXPANDED","imagick::STRETCH_NORMAL","imagick::STRETCH_SEMICONDENSED","imagick::STRETCH_SEMIEXPANDED","imagick::STRETCH_ULTRACONDENSED","imagick::STRETCH_ULTRAEXPANDED","imagick::STYLE_ANY","imagick::STYLE_ITALIC","imagick::STYLE_NORMAL","imagick::STYLE_OBLIQUE","imagick::VIRTUALPIXELMETHOD_BACKGROUND","imagick::VIRTUALPIXELMETHOD_BLACK","imagick::VIRTUALPIXELMETHOD_CONSTANT","imagick::VIRTUALPIXELMETHOD_EDGE","imagick::VIRTUALPIXELMETHOD_GRAY","imagick::VIRTUALPIXELMETHOD_HORIZONTALTILE","imagick::VIRTUALPIXELMETHOD_MASK","imagick::VIRTUALPIXELMETHOD_MIRROR","imagick::VIRTUALPIXELMETHOD_TILE","imagick::VIRTUALPIXELMETHOD_TRANSPARENT","imagick::VIRTUALPIXELMETHOD_UNDEFINED","imagick::VIRTUALPIXELMETHOD_VERTICALTILE","imagick::VIRTUALPIXELMETHOD_WHITE"]}